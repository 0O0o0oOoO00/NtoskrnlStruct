#include <ntifs.h>
#ifndef WINDOWS_10_21H2_X64_H
#define WINDOWS_10_21H2_X64_H
#pragma pack(8)
typedef struct _NOK_BATTERY_REPORTING_SCALE NOK_BATTERY_REPORTING_SCALE, * NOK_PBATTERY_REPORTING_SCALE;
typedef struct _NOK_CMP_OFFSET_ARRAY NOK_CMP_OFFSET_ARRAY, * NOK_PCMP_OFFSET_ARRAY;
typedef struct _NOK_DEBUG_DEVICE_ADDRESS NOK_DEBUG_DEVICE_ADDRESS, * NOK_PDEBUG_DEVICE_ADDRESS;
typedef struct _NOK_DEBUG_MEMORY_REQUIREMENTS NOK_DEBUG_MEMORY_REQUIREMENTS, * NOK_PDEBUG_MEMORY_REQUIREMENTS;
typedef struct _NOK_DOCK_INTERFACE NOK_DOCK_INTERFACE, * NOK_PDOCK_INTERFACE;
typedef struct _NOK_FEATURE_ERROR NOK_FEATURE_ERROR, * NOK_PFEATURE_ERROR;
typedef struct _NOK_FEATURE_LOGGED_TRAITS NOK_FEATURE_LOGGED_TRAITS, * NOK_PFEATURE_LOGGED_TRAITS;
typedef struct _NOK_FEATURE_STATE_CHANGE_SUBSCRIPTION__ NOK_FEATURE_STATE_CHANGE_SUBSCRIPTION__, * NOK_PFEATURE_STATE_CHANGE_SUBSCRIPTION__;
typedef struct _NOK_HAL_PRIVATE_DISPATCH NOK_HAL_PRIVATE_DISPATCH, * NOK_PHAL_PRIVATE_DISPATCH;
typedef struct _NOK_LIST_ENTRY32 NOK_LIST_ENTRY32, * NOK_PLIST_ENTRY32;
typedef struct _NOK_LIST_ENTRY64 NOK_LIST_ENTRY64, * NOK_PLIST_ENTRY64;
typedef struct _NOK_PEPHANDLE__ NOK_PEPHANDLE__, * NOK_PPEPHANDLE__;
typedef struct _NOK_POHANDLE__ NOK_POHANDLE__, * NOK_PPOHANDLE__;
typedef struct _NOK_POWER_ACTION_POLICY NOK_POWER_ACTION_POLICY, * NOK_PPOWER_ACTION_POLICY;
typedef struct _NOK_PO_MEMORY_IMAGE NOK_PO_MEMORY_IMAGE, * NOK_PPO_MEMORY_IMAGE;
typedef struct _NOK_PROCESSOR_IDLESTATE_INFO NOK_PROCESSOR_IDLESTATE_INFO, * NOK_PPROCESSOR_IDLESTATE_INFO;
typedef struct _NOK_PROCESSOR_IDLESTATE_POLICY NOK_PROCESSOR_IDLESTATE_POLICY, * NOK_PPROCESSOR_IDLESTATE_POLICY;
typedef struct _NOK_PROCESSOR_PERFSTATE_POLICY NOK_PROCESSOR_PERFSTATE_POLICY, * NOK_PPROCESSOR_PERFSTATE_POLICY;
typedef struct _NOK_RTL_HP_ENV_HANDLE NOK_RTL_HP_ENV_HANDLE, * NOK_PRTL_HP_ENV_HANDLE;
typedef struct _NOK_SYSTEM_POWER_CAPABILITIES NOK_SYSTEM_POWER_CAPABILITIES, * NOK_PSYSTEM_POWER_CAPABILITIES;
typedef struct _NOK_SYSTEM_POWER_LEVEL NOK_SYSTEM_POWER_LEVEL, * NOK_PSYSTEM_POWER_LEVEL;
typedef struct _NOK_VACB_LEVEL_ALLOCATION_LIST NOK_VACB_LEVEL_ALLOCATION_LIST, * NOK_PVACB_LEVEL_ALLOCATION_LIST;
typedef struct _NOK_ACCESS_REASONS NOK_ACCESS_REASONS, * NOK_PACCESS_REASONS;
typedef struct _NOK_ACCESS_STATE NOK_ACCESS_STATE, * NOK_PACCESS_STATE;
typedef struct _NOK_ACL NOK_ACL, * NOK_PACL;
typedef struct _NOK_ACPI_CACHED_TABLE NOK_ACPI_CACHED_TABLE, * NOK_PACPI_CACHED_TABLE;
typedef struct _NOK_ACPI_METHOD_ARGUMENT_V1 NOK_ACPI_METHOD_ARGUMENT_V1, * NOK_PACPI_METHOD_ARGUMENT_V1;
typedef struct _NOK_ACPI_METHOD_ARGUMENT_V1 NOK_ACPI_METHOD_ARGUMENT_V1, * NOK_PACPI_METHOD_ARGUMENT_V1;
typedef struct _NOK_ACTIVATION_CONTEXT NOK_ACTIVATION_CONTEXT, * NOK_PACTIVATION_CONTEXT;
typedef struct _NOK_ACTIVATION_CONTEXT_DATA NOK_ACTIVATION_CONTEXT_DATA, * NOK_PACTIVATION_CONTEXT_DATA;
typedef struct _NOK_ACTIVATION_CONTEXT_STACK NOK_ACTIVATION_CONTEXT_STACK, * NOK_PACTIVATION_CONTEXT_STACK;
typedef struct _NOK_ACTIVATION_CONTEXT_STACK32 NOK_ACTIVATION_CONTEXT_STACK32, * NOK_PACTIVATION_CONTEXT_STACK32;
typedef struct _NOK_ACTIVATION_CONTEXT_STACK64 NOK_ACTIVATION_CONTEXT_STACK64, * NOK_PACTIVATION_CONTEXT_STACK64;
typedef struct _NOK_ADAPTER_OBJECT NOK_ADAPTER_OBJECT, * NOK_PADAPTER_OBJECT;
typedef struct _NOK_AGGREGATED_PAYLOAD_FILTER NOK_AGGREGATED_PAYLOAD_FILTER, * NOK_PAGGREGATED_PAYLOAD_FILTER;
typedef struct _NOK_ALPC_COMMUNICATION_INFO NOK_ALPC_COMMUNICATION_INFO, * NOK_PALPC_COMMUNICATION_INFO;
typedef struct _NOK_ALPC_COMPLETION_LIST NOK_ALPC_COMPLETION_LIST, * NOK_PALPC_COMPLETION_LIST;
typedef struct _NOK_ALPC_COMPLETION_LIST_HEADER NOK_ALPC_COMPLETION_LIST_HEADER, * NOK_PALPC_COMPLETION_LIST_HEADER;
typedef struct _NOK_ALPC_COMPLETION_LIST_STATE NOK_ALPC_COMPLETION_LIST_STATE, * NOK_PALPC_COMPLETION_LIST_STATE;
typedef struct _NOK_ALPC_COMPLETION_PACKET_LOOKASIDE NOK_ALPC_COMPLETION_PACKET_LOOKASIDE, * NOK_PALPC_COMPLETION_PACKET_LOOKASIDE;
typedef struct _NOK_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY NOK_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, * NOK_PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
typedef struct _NOK_ALPC_DISPATCH_CONTEXT NOK_ALPC_DISPATCH_CONTEXT, * NOK_PALPC_DISPATCH_CONTEXT;
typedef struct _NOK_ALPC_HANDLE_ENTRY NOK_ALPC_HANDLE_ENTRY, * NOK_PALPC_HANDLE_ENTRY;
typedef struct _NOK_ALPC_HANDLE_TABLE NOK_ALPC_HANDLE_TABLE, * NOK_PALPC_HANDLE_TABLE;
typedef struct _NOK_ALPC_MESSAGE_ATTRIBUTES NOK_ALPC_MESSAGE_ATTRIBUTES, * NOK_PALPC_MESSAGE_ATTRIBUTES;
typedef struct _NOK_ALPC_PORT NOK_ALPC_PORT, * NOK_PALPC_PORT;
typedef struct _NOK_ALPC_PORT_ATTRIBUTES NOK_ALPC_PORT_ATTRIBUTES, * NOK_PALPC_PORT_ATTRIBUTES;
typedef struct _NOK_ALPC_PROCESS_CONTEXT NOK_ALPC_PROCESS_CONTEXT, * NOK_PALPC_PROCESS_CONTEXT;
typedef struct _NOK_ALPC_WORK_ON_BEHALF_TICKET NOK_ALPC_WORK_ON_BEHALF_TICKET, * NOK_PALPC_WORK_ON_BEHALF_TICKET;
typedef struct _NOK_AMD64_DBGKD_CONTROL_SET NOK_AMD64_DBGKD_CONTROL_SET, * NOK_PAMD64_DBGKD_CONTROL_SET;
typedef struct _NOK_ARBITER_ADD_RESERVED_PARAMETERS NOK_ARBITER_ADD_RESERVED_PARAMETERS, * NOK_PARBITER_ADD_RESERVED_PARAMETERS;
typedef struct _NOK_ARBITER_ALLOCATION_STATE NOK_ARBITER_ALLOCATION_STATE, * NOK_PARBITER_ALLOCATION_STATE;
typedef struct _NOK_ARBITER_ALTERNATIVE NOK_ARBITER_ALTERNATIVE, * NOK_PARBITER_ALTERNATIVE;
typedef struct _NOK_ARBITER_BOOT_ALLOCATION_PARAMETERS NOK_ARBITER_BOOT_ALLOCATION_PARAMETERS, * NOK_PARBITER_BOOT_ALLOCATION_PARAMETERS;
typedef struct _NOK_ARBITER_CONFLICT_INFO NOK_ARBITER_CONFLICT_INFO, * NOK_PARBITER_CONFLICT_INFO;
typedef struct _NOK_ARBITER_INSTANCE NOK_ARBITER_INSTANCE, * NOK_PARBITER_INSTANCE;
typedef struct _NOK_ARBITER_INTERFACE NOK_ARBITER_INTERFACE, * NOK_PARBITER_INTERFACE;
typedef struct _NOK_ARBITER_LIST_ENTRY NOK_ARBITER_LIST_ENTRY, * NOK_PARBITER_LIST_ENTRY;
typedef struct _NOK_ARBITER_ORDERING NOK_ARBITER_ORDERING, * NOK_PARBITER_ORDERING;
typedef struct _NOK_ARBITER_ORDERING_LIST NOK_ARBITER_ORDERING_LIST, * NOK_PARBITER_ORDERING_LIST;
typedef struct _NOK_ARBITER_PARAMETERS NOK_ARBITER_PARAMETERS, * NOK_PARBITER_PARAMETERS;
typedef struct _NOK_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS NOK_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, * NOK_PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
typedef struct _NOK_ARBITER_QUERY_ARBITRATE_PARAMETERS NOK_ARBITER_QUERY_ARBITRATE_PARAMETERS, * NOK_PARBITER_QUERY_ARBITRATE_PARAMETERS;
typedef struct _NOK_ARBITER_QUERY_CONFLICT_PARAMETERS NOK_ARBITER_QUERY_CONFLICT_PARAMETERS, * NOK_PARBITER_QUERY_CONFLICT_PARAMETERS;
typedef struct _NOK_ARBITER_RETEST_ALLOCATION_PARAMETERS NOK_ARBITER_RETEST_ALLOCATION_PARAMETERS, * NOK_PARBITER_RETEST_ALLOCATION_PARAMETERS;
typedef struct _NOK_ARBITER_TEST_ALLOCATION_PARAMETERS NOK_ARBITER_TEST_ALLOCATION_PARAMETERS, * NOK_PARBITER_TEST_ALLOCATION_PARAMETERS;
typedef struct _NOK_ARC_DISK_INFORMATION NOK_ARC_DISK_INFORMATION, * NOK_PARC_DISK_INFORMATION;
typedef struct _NOK_ARM64_DBGKD_CONTROL_SET NOK_ARM64_DBGKD_CONTROL_SET, * NOK_PARM64_DBGKD_CONTROL_SET;
typedef struct _NOK_ARMCE_DBGKD_CONTROL_SET NOK_ARMCE_DBGKD_CONTROL_SET, * NOK_PARMCE_DBGKD_CONTROL_SET;
typedef struct _NOK_ARM_DBGKD_CONTROL_SET NOK_ARM_DBGKD_CONTROL_SET, * NOK_PARM_DBGKD_CONTROL_SET;
typedef struct _NOK_ARM_LOADER_BLOCK NOK_ARM_LOADER_BLOCK, * NOK_PARM_LOADER_BLOCK;
typedef struct _NOK_ASSEMBLY_STORAGE_MAP NOK_ASSEMBLY_STORAGE_MAP, * NOK_PASSEMBLY_STORAGE_MAP;
typedef struct _NOK_ASYNC_READ_THREAD_STATS NOK_ASYNC_READ_THREAD_STATS, * NOK_PASYNC_READ_THREAD_STATS;
typedef struct _NOK_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION NOK_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, * NOK_PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
typedef struct _NOK_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION NOK_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, * NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
typedef struct _NOK_AUX_ACCESS_DATA NOK_AUX_ACCESS_DATA, * NOK_PAUX_ACCESS_DATA;
typedef struct _NOK_AWEINFO NOK_AWEINFO, * NOK_PAWEINFO;
typedef struct _NOK_BITMAP_RANGE NOK_BITMAP_RANGE, * NOK_PBITMAP_RANGE;
typedef struct _NOK_BLOB NOK_BLOB, * NOK_PBLOB;
typedef struct _NOK_BLOB_COUNTERS NOK_BLOB_COUNTERS, * NOK_PBLOB_COUNTERS;
typedef struct _NOK_BLOB_TYPE NOK_BLOB_TYPE, * NOK_PBLOB_TYPE;
typedef struct _NOK_BOOT_ENTROPY_LDR_RESULT NOK_BOOT_ENTROPY_LDR_RESULT, * NOK_PBOOT_ENTROPY_LDR_RESULT;
typedef struct _NOK_BOOT_ENTROPY_SOURCE_LDR_RESULT NOK_BOOT_ENTROPY_SOURCE_LDR_RESULT, * NOK_PBOOT_ENTROPY_SOURCE_LDR_RESULT;
typedef struct _NOK_BUS_EXTENSION_LIST NOK_BUS_EXTENSION_LIST, * NOK_PBUS_EXTENSION_LIST;
typedef struct _NOK_BUS_HANDLER NOK_BUS_HANDLER, * NOK_PBUS_HANDLER;
typedef struct _NOK_CACHED_KSTACK_LIST NOK_CACHED_KSTACK_LIST, * NOK_PCACHED_KSTACK_LIST;
typedef struct _NOK_CACHE_DESCRIPTOR NOK_CACHE_DESCRIPTOR, * NOK_PCACHE_DESCRIPTOR;
typedef struct _NOK_CACHE_MANAGER_CALLBACKS NOK_CACHE_MANAGER_CALLBACKS, * NOK_PCACHE_MANAGER_CALLBACKS;
typedef struct _NOK_CACHE_UNINITIALIZE_EVENT NOK_CACHE_UNINITIALIZE_EVENT, * NOK_PCACHE_UNINITIALIZE_EVENT;
typedef struct _NOK_CALLBACK_OBJECT NOK_CALLBACK_OBJECT, * NOK_PCALLBACK_OBJECT;
typedef struct _NOK_CALL_HASH_ENTRY NOK_CALL_HASH_ENTRY, * NOK_PCALL_HASH_ENTRY;
typedef struct _NOK_CALL_PERFORMANCE_DATA NOK_CALL_PERFORMANCE_DATA, * NOK_PCALL_PERFORMANCE_DATA;
typedef struct _NOK_CC_ASYNC_READ_CONTEXT NOK_CC_ASYNC_READ_CONTEXT, * NOK_PCC_ASYNC_READ_CONTEXT;
typedef struct _NOK_CC_EXTERNAL_CACHE_INFO NOK_CC_EXTERNAL_CACHE_INFO, * NOK_PCC_EXTERNAL_CACHE_INFO;
typedef struct _NOK_CC_PARTITION NOK_CC_PARTITION, * NOK_PCC_PARTITION;
typedef struct _NOK_CELL_DATA NOK_CELL_DATA, * NOK_PCELL_DATA;
typedef struct _NOK_CHILD_LIST NOK_CHILD_LIST, * NOK_PCHILD_LIST;
typedef struct _NOK_CI_NGEN_PATHS NOK_CI_NGEN_PATHS, * NOK_PCI_NGEN_PATHS;
typedef struct _NOK_CLIENT_ID NOK_CLIENT_ID, * NOK_PCLIENT_ID;
typedef struct _NOK_CLIENT_ID32 NOK_CLIENT_ID32, * NOK_PCLIENT_ID32;
typedef struct _NOK_CLIENT_ID64 NOK_CLIENT_ID64, * NOK_PCLIENT_ID64;
typedef struct _NOK_CMHIVE NOK_CMHIVE, * NOK_PCMHIVE;
typedef struct _NOK_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT NOK_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT, * NOK_PCMP_DISCARD_AND_REPLACE_KCB_CONTEXT;
typedef struct _NOK_CMP_VOLUME_CONTEXT NOK_CMP_VOLUME_CONTEXT, * NOK_PCMP_VOLUME_CONTEXT;
typedef struct _NOK_CMP_VOLUME_MANAGER NOK_CMP_VOLUME_MANAGER, * NOK_PCMP_VOLUME_MANAGER;
typedef struct _NOK_CMSI_PROCESS_TUPLE NOK_CMSI_PROCESS_TUPLE, * NOK_PCMSI_PROCESS_TUPLE;
typedef struct _NOK_CMSI_RW_LOCK NOK_CMSI_RW_LOCK, * NOK_PCMSI_RW_LOCK;
typedef struct _NOK_CM_BIG_DATA NOK_CM_BIG_DATA, * NOK_PCM_BIG_DATA;
typedef struct _NOK_CM_COMPONENT_HASH NOK_CM_COMPONENT_HASH, * NOK_PCM_COMPONENT_HASH;
typedef struct _NOK_CM_DIRTY_VECTOR_LOG NOK_CM_DIRTY_VECTOR_LOG, * NOK_PCM_DIRTY_VECTOR_LOG;
typedef struct _NOK_CM_DIRTY_VECTOR_LOG_ENTRY NOK_CM_DIRTY_VECTOR_LOG_ENTRY, * NOK_PCM_DIRTY_VECTOR_LOG_ENTRY;
typedef struct _NOK_CM_FAST_LEAF_HINT NOK_CM_FAST_LEAF_HINT, * NOK_PCM_FAST_LEAF_HINT;
typedef struct _NOK_CM_FULL_RESOURCE_DESCRIPTOR NOK_CM_FULL_RESOURCE_DESCRIPTOR, * NOK_PCM_FULL_RESOURCE_DESCRIPTOR;
typedef struct _NOK_CM_INDEX NOK_CM_INDEX, * NOK_PCM_INDEX;
typedef struct _NOK_CM_INDEX_HINT_BLOCK NOK_CM_INDEX_HINT_BLOCK, * NOK_PCM_INDEX_HINT_BLOCK;
typedef struct _NOK_CM_INTENT_LOCK NOK_CM_INTENT_LOCK, * NOK_PCM_INTENT_LOCK;
typedef struct _NOK_CM_KCB_LAYER_INFO NOK_CM_KCB_LAYER_INFO, * NOK_PCM_KCB_LAYER_INFO;
typedef struct _NOK_CM_KCB_UOW NOK_CM_KCB_UOW, * NOK_PCM_KCB_UOW;
typedef struct _NOK_CM_KEY_BODY NOK_CM_KEY_BODY, * NOK_PCM_KEY_BODY;
typedef struct _NOK_CM_KEY_CONTROL_BLOCK NOK_CM_KEY_CONTROL_BLOCK, * NOK_PCM_KEY_CONTROL_BLOCK;
typedef struct _NOK_CM_KEY_HASH NOK_CM_KEY_HASH, * NOK_PCM_KEY_HASH;
typedef struct _NOK_CM_KEY_HASH_TABLE_ENTRY NOK_CM_KEY_HASH_TABLE_ENTRY, * NOK_PCM_KEY_HASH_TABLE_ENTRY;
typedef struct _NOK_CM_KEY_INDEX NOK_CM_KEY_INDEX, * NOK_PCM_KEY_INDEX;
typedef struct _NOK_CM_KEY_NODE NOK_CM_KEY_NODE, * NOK_PCM_KEY_NODE;
typedef struct _NOK_CM_KEY_REFERENCE NOK_CM_KEY_REFERENCE, * NOK_PCM_KEY_REFERENCE;
typedef struct _NOK_CM_KEY_SECURITY NOK_CM_KEY_SECURITY, * NOK_PCM_KEY_SECURITY;
typedef struct _NOK_CM_KEY_SECURITY_CACHE NOK_CM_KEY_SECURITY_CACHE, * NOK_PCM_KEY_SECURITY_CACHE;
typedef struct _NOK_CM_KEY_SECURITY_CACHE_ENTRY NOK_CM_KEY_SECURITY_CACHE_ENTRY, * NOK_PCM_KEY_SECURITY_CACHE_ENTRY;
typedef struct _NOK_CM_KEY_VALUE NOK_CM_KEY_VALUE, * NOK_PCM_KEY_VALUE;
typedef struct _NOK_CM_NAME_CONTROL_BLOCK NOK_CM_NAME_CONTROL_BLOCK, * NOK_PCM_NAME_CONTROL_BLOCK;
typedef struct _NOK_CM_NAME_HASH NOK_CM_NAME_HASH, * NOK_PCM_NAME_HASH;
typedef struct _NOK_CM_NOTIFY_BLOCK NOK_CM_NOTIFY_BLOCK, * NOK_PCM_NOTIFY_BLOCK;
typedef struct _NOK_CM_PARSE_DEBUG_INFO NOK_CM_PARSE_DEBUG_INFO, * NOK_PCM_PARSE_DEBUG_INFO;
typedef struct _NOK_CM_PARTIAL_RESOURCE_DESCRIPTOR NOK_CM_PARTIAL_RESOURCE_DESCRIPTOR, * NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR;
typedef struct _NOK_CM_PARTIAL_RESOURCE_LIST NOK_CM_PARTIAL_RESOURCE_LIST, * NOK_PCM_PARTIAL_RESOURCE_LIST;
typedef struct _NOK_CM_PATH_HASH NOK_CM_PATH_HASH, * NOK_PCM_PATH_HASH;
typedef struct _NOK_CM_RESOURCE_LIST NOK_CM_RESOURCE_LIST, * NOK_PCM_RESOURCE_LIST;
typedef struct _NOK_CM_RM NOK_CM_RM, * NOK_PCM_RM;
typedef struct _NOK_CM_TRANS NOK_CM_TRANS, * NOK_PCM_TRANS;
typedef struct _NOK_CM_UOW_KEY_STATE_MODIFICATION NOK_CM_UOW_KEY_STATE_MODIFICATION, * NOK_PCM_UOW_KEY_STATE_MODIFICATION;
typedef struct _NOK_CM_UOW_SET_SD_DATA NOK_CM_UOW_SET_SD_DATA, * NOK_PCM_UOW_SET_SD_DATA;
typedef struct _NOK_CM_UOW_SET_VALUE_KEY_DATA NOK_CM_UOW_SET_VALUE_KEY_DATA, * NOK_PCM_UOW_SET_VALUE_KEY_DATA;
typedef struct _NOK_CM_UOW_SET_VALUE_LIST_DATA NOK_CM_UOW_SET_VALUE_LIST_DATA, * NOK_PCM_UOW_SET_VALUE_LIST_DATA;
typedef struct _NOK_CM_WORKITEM NOK_CM_WORKITEM, * NOK_PCM_WORKITEM;
typedef struct _NOK_COMPRESSED_DATA_INFO NOK_COMPRESSED_DATA_INFO, * NOK_PCOMPRESSED_DATA_INFO;
typedef struct _NOK_CONFIGURATION_COMPONENT NOK_CONFIGURATION_COMPONENT, * NOK_PCONFIGURATION_COMPONENT;
typedef struct _NOK_CONFIGURATION_COMPONENT_DATA NOK_CONFIGURATION_COMPONENT_DATA, * NOK_PCONFIGURATION_COMPONENT_DATA;
typedef struct _NOK_CONTEXT NOK_CONTEXT, * NOK_PCONTEXT;
typedef struct _NOK_CONTROLLER_OBJECT NOK_CONTROLLER_OBJECT, * NOK_PCONTROLLER_OBJECT;
typedef struct _NOK_CONTROL_AREA NOK_CONTROL_AREA, * NOK_PCONTROL_AREA;
typedef struct _NOK_COUNTER_READING NOK_COUNTER_READING, * NOK_PCOUNTER_READING;
typedef struct _NOK_CRITICAL_PROCESS_EXCEPTION_DATA NOK_CRITICAL_PROCESS_EXCEPTION_DATA, * NOK_PCRITICAL_PROCESS_EXCEPTION_DATA;
typedef struct _NOK_CURDIR NOK_CURDIR, * NOK_PCURDIR;
typedef struct _NOK_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG NOK_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, * NOK_PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
typedef struct _NOK_DBGKD_ANY_CONTROL_SET NOK_DBGKD_ANY_CONTROL_SET, * NOK_PDBGKD_ANY_CONTROL_SET;
typedef struct _NOK_DBGKD_BREAKPOINTEX NOK_DBGKD_BREAKPOINTEX, * NOK_PDBGKD_BREAKPOINTEX;
typedef struct _NOK_DBGKD_CONTEXT_EX NOK_DBGKD_CONTEXT_EX, * NOK_PDBGKD_CONTEXT_EX;
typedef struct _NOK_DBGKD_CONTINUE NOK_DBGKD_CONTINUE, * NOK_PDBGKD_CONTINUE;
typedef struct _NOK_DBGKD_CONTINUE2 NOK_DBGKD_CONTINUE2, * NOK_PDBGKD_CONTINUE2;
typedef struct _NOK_DBGKD_FILL_MEMORY NOK_DBGKD_FILL_MEMORY, * NOK_PDBGKD_FILL_MEMORY;
typedef struct _NOK_DBGKD_GET_CONTEXT NOK_DBGKD_GET_CONTEXT, * NOK_PDBGKD_GET_CONTEXT;
typedef struct _NOK_DBGKD_GET_INTERNAL_BREAKPOINT32 NOK_DBGKD_GET_INTERNAL_BREAKPOINT32, * NOK_PDBGKD_GET_INTERNAL_BREAKPOINT32;
typedef struct _NOK_DBGKD_GET_INTERNAL_BREAKPOINT64 NOK_DBGKD_GET_INTERNAL_BREAKPOINT64, * NOK_PDBGKD_GET_INTERNAL_BREAKPOINT64;
typedef struct _NOK_DBGKD_GET_SET_BUS_DATA NOK_DBGKD_GET_SET_BUS_DATA, * NOK_PDBGKD_GET_SET_BUS_DATA;
typedef struct _NOK_DBGKD_GET_VERSION32 NOK_DBGKD_GET_VERSION32, * NOK_PDBGKD_GET_VERSION32;
typedef struct _NOK_DBGKD_GET_VERSION64 NOK_DBGKD_GET_VERSION64, * NOK_PDBGKD_GET_VERSION64;
typedef struct _NOK_DBGKD_LOAD_SYMBOLS32 NOK_DBGKD_LOAD_SYMBOLS32, * NOK_PDBGKD_LOAD_SYMBOLS32;
typedef struct _NOK_DBGKD_LOAD_SYMBOLS64 NOK_DBGKD_LOAD_SYMBOLS64, * NOK_PDBGKD_LOAD_SYMBOLS64;
typedef struct _NOK_DBGKD_MANIPULATE_STATE32 NOK_DBGKD_MANIPULATE_STATE32, * NOK_PDBGKD_MANIPULATE_STATE32;
typedef struct _NOK_DBGKD_MANIPULATE_STATE64 NOK_DBGKD_MANIPULATE_STATE64, * NOK_PDBGKD_MANIPULATE_STATE64;
typedef struct _NOK_DBGKD_QUERY_MEMORY NOK_DBGKD_QUERY_MEMORY, * NOK_PDBGKD_QUERY_MEMORY;
typedef struct _NOK_DBGKD_QUERY_SPECIAL_CALLS NOK_DBGKD_QUERY_SPECIAL_CALLS, * NOK_PDBGKD_QUERY_SPECIAL_CALLS;
typedef struct _NOK_DBGKD_READ_MEMORY32 NOK_DBGKD_READ_MEMORY32, * NOK_PDBGKD_READ_MEMORY32;
typedef struct _NOK_DBGKD_READ_MEMORY64 NOK_DBGKD_READ_MEMORY64, * NOK_PDBGKD_READ_MEMORY64;
typedef struct _NOK_DBGKD_READ_WRITE_IO32 NOK_DBGKD_READ_WRITE_IO32, * NOK_PDBGKD_READ_WRITE_IO32;
typedef struct _NOK_DBGKD_READ_WRITE_IO64 NOK_DBGKD_READ_WRITE_IO64, * NOK_PDBGKD_READ_WRITE_IO64;
typedef struct _NOK_DBGKD_READ_WRITE_IO_EXTENDED32 NOK_DBGKD_READ_WRITE_IO_EXTENDED32, * NOK_PDBGKD_READ_WRITE_IO_EXTENDED32;
typedef struct _NOK_DBGKD_READ_WRITE_IO_EXTENDED64 NOK_DBGKD_READ_WRITE_IO_EXTENDED64, * NOK_PDBGKD_READ_WRITE_IO_EXTENDED64;
typedef struct _NOK_DBGKD_READ_WRITE_MSR NOK_DBGKD_READ_WRITE_MSR, * NOK_PDBGKD_READ_WRITE_MSR;
typedef struct _NOK_DBGKD_RESTORE_BREAKPOINT NOK_DBGKD_RESTORE_BREAKPOINT, * NOK_PDBGKD_RESTORE_BREAKPOINT;
typedef struct _NOK_DBGKD_SEARCH_MEMORY NOK_DBGKD_SEARCH_MEMORY, * NOK_PDBGKD_SEARCH_MEMORY;
typedef struct _NOK_DBGKD_SET_CONTEXT NOK_DBGKD_SET_CONTEXT, * NOK_PDBGKD_SET_CONTEXT;
typedef struct _NOK_DBGKD_SET_INTERNAL_BREAKPOINT32 NOK_DBGKD_SET_INTERNAL_BREAKPOINT32, * NOK_PDBGKD_SET_INTERNAL_BREAKPOINT32;
typedef struct _NOK_DBGKD_SET_INTERNAL_BREAKPOINT64 NOK_DBGKD_SET_INTERNAL_BREAKPOINT64, * NOK_PDBGKD_SET_INTERNAL_BREAKPOINT64;
typedef struct _NOK_DBGKD_SET_SPECIAL_CALL32 NOK_DBGKD_SET_SPECIAL_CALL32, * NOK_PDBGKD_SET_SPECIAL_CALL32;
typedef struct _NOK_DBGKD_SET_SPECIAL_CALL64 NOK_DBGKD_SET_SPECIAL_CALL64, * NOK_PDBGKD_SET_SPECIAL_CALL64;
typedef struct _NOK_DBGKD_SWITCH_PARTITION NOK_DBGKD_SWITCH_PARTITION, * NOK_PDBGKD_SWITCH_PARTITION;
typedef struct _NOK_DBGKD_WRITE_BREAKPOINT32 NOK_DBGKD_WRITE_BREAKPOINT32, * NOK_PDBGKD_WRITE_BREAKPOINT32;
typedef struct _NOK_DBGKD_WRITE_BREAKPOINT64 NOK_DBGKD_WRITE_BREAKPOINT64, * NOK_PDBGKD_WRITE_BREAKPOINT64;
typedef struct _NOK_DBGKD_WRITE_CUSTOM_BREAKPOINT NOK_DBGKD_WRITE_CUSTOM_BREAKPOINT, * NOK_PDBGKD_WRITE_CUSTOM_BREAKPOINT;
typedef struct _NOK_DBGKD_WRITE_MEMORY32 NOK_DBGKD_WRITE_MEMORY32, * NOK_PDBGKD_WRITE_MEMORY32;
typedef struct _NOK_DBGKD_WRITE_MEMORY64 NOK_DBGKD_WRITE_MEMORY64, * NOK_PDBGKD_WRITE_MEMORY64;
typedef struct _NOK_DBGKM_EXCEPTION32 NOK_DBGKM_EXCEPTION32, * NOK_PDBGKM_EXCEPTION32;
typedef struct _NOK_DBGKM_EXCEPTION64 NOK_DBGKM_EXCEPTION64, * NOK_PDBGKM_EXCEPTION64;
typedef struct _NOK_DBGKP_ERROR_PORT NOK_DBGKP_ERROR_PORT, * NOK_PDBGKP_ERROR_PORT;
typedef struct _NOK_DBGK_SILOSTATE NOK_DBGK_SILOSTATE, * NOK_PDBGK_SILOSTATE;
typedef struct _NOK_DEBUG_DEVICE_DESCRIPTOR NOK_DEBUG_DEVICE_DESCRIPTOR, * NOK_PDEBUG_DEVICE_DESCRIPTOR;
typedef struct _NOK_DEBUG_TRANSPORT_DATA NOK_DEBUG_TRANSPORT_DATA, * NOK_PDEBUG_TRANSPORT_DATA;
typedef struct _NOK_DEFERRED_WRITE NOK_DEFERRED_WRITE, * NOK_PDEFERRED_WRITE;
typedef struct _NOK_DELAY_ACK_FO NOK_DELAY_ACK_FO, * NOK_PDELAY_ACK_FO;
typedef struct _NOK_DESCRIPTION_HEADER NOK_DESCRIPTION_HEADER, * NOK_PDESCRIPTION_HEADER;
typedef struct _NOK_DEVICE_CAPABILITIES NOK_DEVICE_CAPABILITIES, * NOK_PDEVICE_CAPABILITIES;
typedef struct _NOK_DEVICE_DATA_SET_RANGE NOK_DEVICE_DATA_SET_RANGE, * NOK_PDEVICE_DATA_SET_RANGE;
typedef struct _NOK_DEVICE_DESCRIPTION NOK_DEVICE_DESCRIPTION, * NOK_PDEVICE_DESCRIPTION;
typedef struct _NOK_DEVICE_DSM_DEFINITION NOK_DEVICE_DSM_DEFINITION, * NOK_PDEVICE_DSM_DEFINITION;
typedef struct _NOK_DEVICE_FAULT_CONFIGURATION NOK_DEVICE_FAULT_CONFIGURATION, * NOK_PDEVICE_FAULT_CONFIGURATION;
typedef struct _NOK_DEVICE_FLAGS NOK_DEVICE_FLAGS, * NOK_PDEVICE_FLAGS;
typedef struct _NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES, * NOK_PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;
typedef struct _NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, * NOK_PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
typedef struct _NOK_DEVICE_MAP NOK_DEVICE_MAP, * NOK_PDEVICE_MAP;
typedef struct _NOK_DEVICE_NODE NOK_DEVICE_NODE, * NOK_PDEVICE_NODE;
typedef struct _NOK_DEVICE_NODE_IOMMU_EXTENSION NOK_DEVICE_NODE_IOMMU_EXTENSION, * NOK_PDEVICE_NODE_IOMMU_EXTENSION;
typedef struct _NOK_DEVICE_OBJECT NOK_DEVICE_OBJECT, * NOK_PDEVICE_OBJECT;
typedef struct _NOK_DEVICE_OBJECT_LIST NOK_DEVICE_OBJECT_LIST, * NOK_PDEVICE_OBJECT_LIST;
typedef struct _NOK_DEVICE_OBJECT_LIST_ENTRY NOK_DEVICE_OBJECT_LIST_ENTRY, * NOK_PDEVICE_OBJECT_LIST_ENTRY;
typedef struct _NOK_DEVICE_OBJECT_POWER_EXTENSION NOK_DEVICE_OBJECT_POWER_EXTENSION, * NOK_PDEVICE_OBJECT_POWER_EXTENSION;
typedef struct _NOK_DEVICE_RELATIONS NOK_DEVICE_RELATIONS, * NOK_PDEVICE_RELATIONS;
typedef struct _NOK_DEVOBJ_EXTENSION NOK_DEVOBJ_EXTENSION, * NOK_PDEVOBJ_EXTENSION;
typedef struct _NOK_DEVPROPKEY NOK_DEVPROPKEY, * NOK_PDEVPROPKEY;
typedef struct _NOK_DIAGNOSTIC_BUFFER NOK_DIAGNOSTIC_BUFFER, * NOK_PDIAGNOSTIC_BUFFER;
typedef struct _NOK_DIAGNOSTIC_CONTEXT NOK_DIAGNOSTIC_CONTEXT, * NOK_PDIAGNOSTIC_CONTEXT;
typedef struct _NOK_DIRTY_PAGE_STATISTICS NOK_DIRTY_PAGE_STATISTICS, * NOK_PDIRTY_PAGE_STATISTICS;
typedef struct _NOK_DIRTY_PAGE_THRESHOLDS NOK_DIRTY_PAGE_THRESHOLDS, * NOK_PDIRTY_PAGE_THRESHOLDS;
typedef struct _NOK_DISALLOWED_GUIDS NOK_DISALLOWED_GUIDS, * NOK_PDISALLOWED_GUIDS;
typedef struct _NOK_DISPATCHER_HEADER NOK_DISPATCHER_HEADER, * NOK_PDISPATCHER_HEADER;
typedef struct _NOK_DMA_ADAPTER NOK_DMA_ADAPTER, * NOK_PDMA_ADAPTER;
typedef struct _NOK_DMA_ADAPTER_INFO NOK_DMA_ADAPTER_INFO, * NOK_PDMA_ADAPTER_INFO;
typedef struct _NOK_DMA_ADAPTER_INFO_V1 NOK_DMA_ADAPTER_INFO_V1, * NOK_PDMA_ADAPTER_INFO_V1;
typedef struct _NOK_DMA_COMMON_BUFFER_ENTRY NOK_DMA_COMMON_BUFFER_ENTRY, * NOK_PDMA_COMMON_BUFFER_ENTRY;
typedef struct _NOK_DMA_COMMON_BUFFER_VECTOR NOK_DMA_COMMON_BUFFER_VECTOR, * NOK_PDMA_COMMON_BUFFER_VECTOR;
typedef struct _NOK_DMA_FUNCTION_TABLE NOK_DMA_FUNCTION_TABLE, * NOK_PDMA_FUNCTION_TABLE;
typedef struct _NOK_DMA_IOMMU_INTERFACE NOK_DMA_IOMMU_INTERFACE, * NOK_PDMA_IOMMU_INTERFACE;
typedef struct _NOK_DMA_OPERATIONS NOK_DMA_OPERATIONS, * NOK_PDMA_OPERATIONS;
typedef struct _NOK_DMA_REQUEST_LINE_BINDING_DESCRIPTION NOK_DMA_REQUEST_LINE_BINDING_DESCRIPTION, * NOK_PDMA_REQUEST_LINE_BINDING_DESCRIPTION;
typedef struct _NOK_DMA_SCATTER_GATHER_LIST NOK_DMA_SCATTER_GATHER_LIST, * NOK_PDMA_SCATTER_GATHER_LIST;
typedef struct _NOK_DMA_TRANSFER_CONTEXT NOK_DMA_TRANSFER_CONTEXT, * NOK_PDMA_TRANSFER_CONTEXT;
typedef struct _NOK_DMA_TRANSFER_CONTEXT_V1 NOK_DMA_TRANSFER_CONTEXT_V1, * NOK_PDMA_TRANSFER_CONTEXT_V1;
typedef struct _NOK_DMA_TRANSFER_INFO NOK_DMA_TRANSFER_INFO, * NOK_PDMA_TRANSFER_INFO;
typedef struct _NOK_DMA_TRANSFER_INFO_V1 NOK_DMA_TRANSFER_INFO_V1, * NOK_PDMA_TRANSFER_INFO_V1;
typedef struct _NOK_DMA_TRANSFER_INFO_V2 NOK_DMA_TRANSFER_INFO_V2, * NOK_PDMA_TRANSFER_INFO_V2;
typedef struct _NOK_DOMAIN_CONFIGURATION NOK_DOMAIN_CONFIGURATION, * NOK_PDOMAIN_CONFIGURATION;
typedef struct _NOK_DOMAIN_CONFIGURATION_ARM64 NOK_DOMAIN_CONFIGURATION_ARM64, * NOK_PDOMAIN_CONFIGURATION_ARM64;
typedef struct _NOK_DRIVER_EXTENSION NOK_DRIVER_EXTENSION, * NOK_PDRIVER_EXTENSION;
typedef struct _NOK_DRIVER_EXTENSION NOK_DRIVER_EXTENSION, * NOK_PDRIVER_EXTENSION;
typedef struct _NOK_DRIVER_OBJECT NOK_DRIVER_OBJECT, * NOK_PDRIVER_OBJECT;
typedef struct _NOK_DUAL NOK_DUAL, * NOK_PDUAL;
typedef struct _NOK_DUMMY_FILE_OBJECT NOK_DUMMY_FILE_OBJECT, * NOK_PDUMMY_FILE_OBJECT;
typedef struct _NOK_DUMP_INITIALIZATION_CONTEXT NOK_DUMP_INITIALIZATION_CONTEXT, * NOK_PDUMP_INITIALIZATION_CONTEXT;
typedef struct _NOK_DUMP_STACK_CONTEXT NOK_DUMP_STACK_CONTEXT, * NOK_PDUMP_STACK_CONTEXT;
typedef struct _NOK_DYNAMIC_FUNCTION_TABLE NOK_DYNAMIC_FUNCTION_TABLE, * NOK_PDYNAMIC_FUNCTION_TABLE;
typedef struct _NOK_ECP_LIST NOK_ECP_LIST, * NOK_PECP_LIST;
typedef struct _NOK_EFI_FIRMWARE_INFORMATION NOK_EFI_FIRMWARE_INFORMATION, * NOK_PEFI_FIRMWARE_INFORMATION;
typedef struct _NOK_EJOB NOK_EJOB, * NOK_PEJOB;
typedef struct _NOK_ENODE NOK_ENODE, * NOK_PENODE;
typedef struct _NOK_EPARTITION NOK_EPARTITION, * NOK_PEPARTITION;
typedef struct _NOK_EPROCESS NOK_EPROCESS, * NOK_PEPROCESS;
typedef struct _NOK_EPROCESS_QUOTA_BLOCK NOK_EPROCESS_QUOTA_BLOCK, * NOK_PEPROCESS_QUOTA_BLOCK;
typedef struct _NOK_EPROCESS_VALUES NOK_EPROCESS_VALUES, * NOK_PEPROCESS_VALUES;
typedef struct _NOK_ERESOURCE NOK_ERESOURCE, * NOK_PERESOURCE;
typedef struct _NOK_ESERVERSILO_GLOBALS NOK_ESERVERSILO_GLOBALS, * NOK_PESERVERSILO_GLOBALS;
typedef struct _NOK_ETHREAD NOK_ETHREAD, * NOK_PETHREAD;
typedef struct _NOK_ETIMER NOK_ETIMER, * NOK_PETIMER;
typedef struct _NOK_ETWP_NOTIFICATION_HEADER NOK_ETWP_NOTIFICATION_HEADER, * NOK_PETWP_NOTIFICATION_HEADER;
typedef struct _NOK_ETW_APC_ENTRY NOK_ETW_APC_ENTRY, * NOK_PETW_APC_ENTRY;
typedef struct _NOK_ETW_BUFFER_CONTEXT NOK_ETW_BUFFER_CONTEXT, * NOK_PETW_BUFFER_CONTEXT;
typedef struct _NOK_ETW_BUFFER_QUEUE NOK_ETW_BUFFER_QUEUE, * NOK_PETW_BUFFER_QUEUE;
typedef struct _NOK_ETW_COUNTERS NOK_ETW_COUNTERS, * NOK_PETW_COUNTERS;
typedef struct _NOK_ETW_DEBUGID_TRACKING_ENTRY NOK_ETW_DEBUGID_TRACKING_ENTRY, * NOK_PETW_DEBUGID_TRACKING_ENTRY;
typedef struct _NOK_ETW_DECODE_CONTROL_ENTRY NOK_ETW_DECODE_CONTROL_ENTRY, * NOK_PETW_DECODE_CONTROL_ENTRY;
typedef struct _NOK_ETW_EVENT_CALLBACK_CONTEXT NOK_ETW_EVENT_CALLBACK_CONTEXT, * NOK_PETW_EVENT_CALLBACK_CONTEXT;
typedef struct _NOK_ETW_FILTER_EVENT_NAME_DATA NOK_ETW_FILTER_EVENT_NAME_DATA, * NOK_PETW_FILTER_EVENT_NAME_DATA;
typedef struct _NOK_ETW_FILTER_HEADER NOK_ETW_FILTER_HEADER, * NOK_PETW_FILTER_HEADER;
typedef struct _NOK_ETW_FILTER_PID NOK_ETW_FILTER_PID, * NOK_PETW_FILTER_PID;
typedef struct _NOK_ETW_FILTER_STRING_TOKEN NOK_ETW_FILTER_STRING_TOKEN, * NOK_PETW_FILTER_STRING_TOKEN;
typedef struct _NOK_ETW_FILTER_STRING_TOKEN_ELEMENT NOK_ETW_FILTER_STRING_TOKEN_ELEMENT, * NOK_PETW_FILTER_STRING_TOKEN_ELEMENT;
typedef struct _NOK_ETW_GUID_ENTRY NOK_ETW_GUID_ENTRY, * NOK_PETW_GUID_ENTRY;
typedef struct _NOK_ETW_HASH_BUCKET NOK_ETW_HASH_BUCKET, * NOK_PETW_HASH_BUCKET;
typedef struct _NOK_ETW_HW_TRACE_EXT_INTERFACE NOK_ETW_HW_TRACE_EXT_INTERFACE, * NOK_PETW_HW_TRACE_EXT_INTERFACE;
typedef struct _NOK_ETW_IPT_SUPPORT NOK_ETW_IPT_SUPPORT, * NOK_PETW_IPT_SUPPORT;
typedef struct _NOK_ETW_LAST_ENABLE_INFO NOK_ETW_LAST_ENABLE_INFO, * NOK_PETW_LAST_ENABLE_INFO;
typedef struct _NOK_ETW_LBR_SUPPORT NOK_ETW_LBR_SUPPORT, * NOK_PETW_LBR_SUPPORT;
typedef struct _NOK_ETW_LOGGER_HANDLE NOK_ETW_LOGGER_HANDLE, * NOK_PETW_LOGGER_HANDLE;
typedef struct _NOK_ETW_PARTITION_CONTEXT NOK_ETW_PARTITION_CONTEXT, * NOK_PETW_PARTITION_CONTEXT;
typedef struct _NOK_ETW_PAYLOAD_FILTER NOK_ETW_PAYLOAD_FILTER, * NOK_PETW_PAYLOAD_FILTER;
typedef struct _NOK_ETW_PERFECT_HASH_FUNCTION NOK_ETW_PERFECT_HASH_FUNCTION, * NOK_PETW_PERFECT_HASH_FUNCTION;
typedef struct _NOK_ETW_PERF_COUNTERS NOK_ETW_PERF_COUNTERS, * NOK_PETW_PERF_COUNTERS;
typedef struct _NOK_ETW_PMC_SUPPORT NOK_ETW_PMC_SUPPORT, * NOK_PETW_PMC_SUPPORT;
typedef struct _NOK_ETW_PRIV_HANDLE_DEMUX_TABLE NOK_ETW_PRIV_HANDLE_DEMUX_TABLE, * NOK_PETW_PRIV_HANDLE_DEMUX_TABLE;
typedef struct _NOK_ETW_PROVIDER_TRAITS NOK_ETW_PROVIDER_TRAITS, * NOK_PETW_PROVIDER_TRAITS;
typedef struct _NOK_ETW_QUEUE_ENTRY NOK_ETW_QUEUE_ENTRY, * NOK_PETW_QUEUE_ENTRY;
typedef struct _NOK_ETW_REALTIME_CONSUMER NOK_ETW_REALTIME_CONSUMER, * NOK_PETW_REALTIME_CONSUMER;
typedef struct _NOK_ETW_REF_CLOCK NOK_ETW_REF_CLOCK, * NOK_PETW_REF_CLOCK;
typedef struct _NOK_ETW_REG_ENTRY NOK_ETW_REG_ENTRY, * NOK_PETW_REG_ENTRY;
typedef struct _NOK_ETW_REPLY_QUEUE NOK_ETW_REPLY_QUEUE, * NOK_PETW_REPLY_QUEUE;
typedef struct _NOK_ETW_SESSION_PERF_COUNTERS NOK_ETW_SESSION_PERF_COUNTERS, * NOK_PETW_SESSION_PERF_COUNTERS;
typedef struct _NOK_ETW_SILODRIVERSTATE NOK_ETW_SILODRIVERSTATE, * NOK_PETW_SILODRIVERSTATE;
typedef struct _NOK_ETW_SILO_TRACING_BLOCK NOK_ETW_SILO_TRACING_BLOCK, * NOK_PETW_SILO_TRACING_BLOCK;
typedef struct _NOK_ETW_SOFT_RESTART_CONTEXT NOK_ETW_SOFT_RESTART_CONTEXT, * NOK_PETW_SOFT_RESTART_CONTEXT;
typedef struct _NOK_ETW_STACK_CACHE NOK_ETW_STACK_CACHE, * NOK_PETW_STACK_CACHE;
typedef struct _NOK_ETW_STACK_TRACE_BLOCK NOK_ETW_STACK_TRACE_BLOCK, * NOK_PETW_STACK_TRACE_BLOCK;
typedef struct _NOK_ETW_SYSTEMTIME NOK_ETW_SYSTEMTIME, * NOK_PETW_SYSTEMTIME;
typedef struct _NOK_ETW_SYSTEM_LOGGER NOK_ETW_SYSTEM_LOGGER, * NOK_PETW_SYSTEM_LOGGER;
typedef struct _NOK_ETW_SYSTEM_LOGGER_SETTINGS NOK_ETW_SYSTEM_LOGGER_SETTINGS, * NOK_PETW_SYSTEM_LOGGER_SETTINGS;
typedef struct _NOK_ETW_WMITRACE_WORK NOK_ETW_WMITRACE_WORK, * NOK_PETW_WMITRACE_WORK;
typedef struct _NOK_EVENT_DATA_DESCRIPTOR NOK_EVENT_DATA_DESCRIPTOR, * NOK_PEVENT_DATA_DESCRIPTOR;
typedef struct _NOK_EVENT_DESCRIPTOR NOK_EVENT_DESCRIPTOR, * NOK_PEVENT_DESCRIPTOR;
typedef struct _NOK_EVENT_FILTER_DESCRIPTOR NOK_EVENT_FILTER_DESCRIPTOR, * NOK_PEVENT_FILTER_DESCRIPTOR;
typedef struct _NOK_EVENT_FILTER_HEADER NOK_EVENT_FILTER_HEADER, * NOK_PEVENT_FILTER_HEADER;
typedef struct _NOK_EVENT_FILTER_LEVEL_KW NOK_EVENT_FILTER_LEVEL_KW, * NOK_PEVENT_FILTER_LEVEL_KW;
typedef struct _NOK_EVENT_HEADER NOK_EVENT_HEADER, * NOK_PEVENT_HEADER;
typedef struct _NOK_EVENT_HEADER_EXTENDED_DATA_ITEM NOK_EVENT_HEADER_EXTENDED_DATA_ITEM, * NOK_PEVENT_HEADER_EXTENDED_DATA_ITEM;
typedef struct _NOK_EVENT_PAYLOAD_PREDICATE NOK_EVENT_PAYLOAD_PREDICATE, * NOK_PEVENT_PAYLOAD_PREDICATE;
typedef struct _NOK_EVENT_RECORD NOK_EVENT_RECORD, * NOK_PEVENT_RECORD;
typedef struct _NOK_EWOW64PROCESS NOK_EWOW64PROCESS, * NOK_PEWOW64PROCESS;
typedef struct _NOK_EXCEPTION_POINTERS NOK_EXCEPTION_POINTERS, * NOK_PEXCEPTION_POINTERS;
typedef struct _NOK_EXCEPTION_RECORD NOK_EXCEPTION_RECORD, * NOK_PEXCEPTION_RECORD;
typedef struct _NOK_EXCEPTION_RECORD32 NOK_EXCEPTION_RECORD32, * NOK_PEXCEPTION_RECORD32;
typedef struct _NOK_EXCEPTION_RECORD64 NOK_EXCEPTION_RECORD64, * NOK_PEXCEPTION_RECORD64;
typedef struct _NOK_EXCEPTION_REGISTRATION_RECORD NOK_EXCEPTION_REGISTRATION_RECORD, * NOK_PEXCEPTION_REGISTRATION_RECORD;
typedef struct _NOK_EXHANDLE NOK_EXHANDLE, * NOK_PEXHANDLE;
typedef struct _NOK_EXP_LICENSE_STATE NOK_EXP_LICENSE_STATE, * NOK_PEXP_LICENSE_STATE;
typedef struct _NOK_EXT_DELETE_PARAMETERS NOK_EXT_DELETE_PARAMETERS, * NOK_PEXT_DELETE_PARAMETERS;
typedef struct _NOK_EXT_IOMMU_DEVICE_ID NOK_EXT_IOMMU_DEVICE_ID, * NOK_PEXT_IOMMU_DEVICE_ID;
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_ACPI NOK_EXT_IOMMU_DEVICE_ID_ACPI, * NOK_PEXT_IOMMU_DEVICE_ID_ACPI;
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_GIC NOK_EXT_IOMMU_DEVICE_ID_GIC, * NOK_PEXT_IOMMU_DEVICE_ID_GIC;
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_PCI NOK_EXT_IOMMU_DEVICE_ID_PCI, * NOK_PEXT_IOMMU_DEVICE_ID_PCI;
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_TEST NOK_EXT_IOMMU_DEVICE_ID_TEST, * NOK_PEXT_IOMMU_DEVICE_ID_TEST;
typedef struct _NOK_EXT_SET_PARAMETERS_V0 NOK_EXT_SET_PARAMETERS_V0, * NOK_PEXT_SET_PARAMETERS_V0;
typedef struct _NOK_EX_FAST_REF NOK_EX_FAST_REF, * NOK_PEX_FAST_REF;
typedef struct _NOK_EX_HEAP_POOL_NODE NOK_EX_HEAP_POOL_NODE, * NOK_PEX_HEAP_POOL_NODE;
typedef struct _NOK_EX_HEAP_SESSION_STATE NOK_EX_HEAP_SESSION_STATE, * NOK_PEX_HEAP_SESSION_STATE;
typedef struct _NOK_EX_PARTITION NOK_EX_PARTITION, * NOK_PEX_PARTITION;
typedef struct _NOK_EX_POOL_HEAP_MANAGER_STATE NOK_EX_POOL_HEAP_MANAGER_STATE, * NOK_PEX_POOL_HEAP_MANAGER_STATE;
typedef struct _NOK_EX_PUSH_LOCK NOK_EX_PUSH_LOCK, * NOK_PEX_PUSH_LOCK;
typedef struct _NOK_EX_PUSH_LOCK_AUTO_EXPAND NOK_EX_PUSH_LOCK_AUTO_EXPAND, * NOK_PEX_PUSH_LOCK_AUTO_EXPAND;
typedef struct _NOK_EX_PUSH_LOCK_AUTO_EXPAND_STATE NOK_EX_PUSH_LOCK_AUTO_EXPAND_STATE, * NOK_PEX_PUSH_LOCK_AUTO_EXPAND_STATE;
typedef struct _NOK_EX_RUNDOWN_REF NOK_EX_RUNDOWN_REF, * NOK_PEX_RUNDOWN_REF;
typedef struct _NOK_EX_RUNDOWN_REF_CACHE_AWARE NOK_EX_RUNDOWN_REF_CACHE_AWARE, * NOK_PEX_RUNDOWN_REF_CACHE_AWARE;
typedef struct _NOK_EX_TIMER NOK_EX_TIMER, * NOK_PEX_TIMER;
typedef struct _NOK_EX_TIMEZONE_STATE NOK_EX_TIMEZONE_STATE, * NOK_PEX_TIMEZONE_STATE;
typedef struct _NOK_EX_WNF_SUBSCRIPTION NOK_EX_WNF_SUBSCRIPTION, * NOK_PEX_WNF_SUBSCRIPTION;
typedef struct _NOK_EX_WORK_QUEUE NOK_EX_WORK_QUEUE, * NOK_PEX_WORK_QUEUE;
typedef struct _NOK_EX_WORK_QUEUE_MANAGER NOK_EX_WORK_QUEUE_MANAGER, * NOK_PEX_WORK_QUEUE_MANAGER;
typedef struct _NOK_FACS NOK_FACS, * NOK_PFACS;
typedef struct _NOK_FADT NOK_FADT, * NOK_PFADT;
typedef struct _NOK_FAKE_HEAP_ENTRY NOK_FAKE_HEAP_ENTRY, * NOK_PFAKE_HEAP_ENTRY;
typedef struct _NOK_FAST_ERESOURCE NOK_FAST_ERESOURCE, * NOK_PFAST_ERESOURCE;
typedef struct _NOK_FAST_ERESOURCE_INTERNAL NOK_FAST_ERESOURCE_INTERNAL, * NOK_PFAST_ERESOURCE_INTERNAL;
typedef struct _NOK_FAST_IO_DISPATCH NOK_FAST_IO_DISPATCH, * NOK_PFAST_IO_DISPATCH;
typedef struct _NOK_FAST_IO_DISPATCH NOK_FAST_IO_DISPATCH, * NOK_PFAST_IO_DISPATCH;
typedef struct _NOK_FAST_MUTEX NOK_FAST_MUTEX, * NOK_PFAST_MUTEX;
typedef struct _NOK_FAST_OWNER_ENTRY NOK_FAST_OWNER_ENTRY, * NOK_PFAST_OWNER_ENTRY;
typedef struct _NOK_FAST_OWNER_ENTRY_INTERNAL NOK_FAST_OWNER_ENTRY_INTERNAL, * NOK_PFAST_OWNER_ENTRY_INTERNAL;
typedef struct _NOK_FAULT_INFORMATION NOK_FAULT_INFORMATION, * NOK_PFAULT_INFORMATION;
typedef struct _NOK_FAULT_INFORMATION_ARM64 NOK_FAULT_INFORMATION_ARM64, * NOK_PFAULT_INFORMATION_ARM64;
typedef struct _NOK_FAULT_INFORMATION_ARM64_FLAGS NOK_FAULT_INFORMATION_ARM64_FLAGS, * NOK_PFAULT_INFORMATION_ARM64_FLAGS;
typedef struct _NOK_FAULT_INFORMATION_X64 NOK_FAULT_INFORMATION_X64, * NOK_PFAULT_INFORMATION_X64;
typedef struct _NOK_FAULT_INFORMATION_X64_FLAGS NOK_FAULT_INFORMATION_X64_FLAGS, * NOK_PFAULT_INFORMATION_X64_FLAGS;
typedef struct _NOK_FILESYSTEM_DISK_COUNTERS NOK_FILESYSTEM_DISK_COUNTERS, * NOK_PFILESYSTEM_DISK_COUNTERS;
typedef struct _NOK_FILE_BASIC_INFORMATION NOK_FILE_BASIC_INFORMATION, * NOK_PFILE_BASIC_INFORMATION;
typedef struct _NOK_FILE_GET_QUOTA_INFORMATION NOK_FILE_GET_QUOTA_INFORMATION, * NOK_PFILE_GET_QUOTA_INFORMATION;
typedef struct _NOK_FILE_NETWORK_OPEN_INFORMATION NOK_FILE_NETWORK_OPEN_INFORMATION, * NOK_PFILE_NETWORK_OPEN_INFORMATION;
typedef struct _NOK_FILE_OBJECT NOK_FILE_OBJECT, * NOK_PFILE_OBJECT;
typedef struct _NOK_FILE_STANDARD_INFORMATION NOK_FILE_STANDARD_INFORMATION, * NOK_PFILE_STANDARD_INFORMATION;
typedef struct _NOK_FIRMWARE_INFORMATION_LOADER_BLOCK NOK_FIRMWARE_INFORMATION_LOADER_BLOCK, * NOK_PFIRMWARE_INFORMATION_LOADER_BLOCK;
typedef struct _NOK_FREE_DISPLAY NOK_FREE_DISPLAY, * NOK_PFREE_DISPLAY;
typedef struct _NOK_FSRTL_ADVANCED_FCB_HEADER NOK_FSRTL_ADVANCED_FCB_HEADER, * NOK_PFSRTL_ADVANCED_FCB_HEADER;
typedef struct _NOK_FS_FILTER_CALLBACKS NOK_FS_FILTER_CALLBACKS, * NOK_PFS_FILTER_CALLBACKS;
typedef struct _NOK_FS_FILTER_CALLBACK_DATA NOK_FS_FILTER_CALLBACK_DATA, * NOK_PFS_FILTER_CALLBACK_DATA;
typedef struct _NOK_FS_FILTER_SECTION_SYNC_OUTPUT NOK_FS_FILTER_SECTION_SYNC_OUTPUT, * NOK_PFS_FILTER_SECTION_SYNC_OUTPUT;
typedef struct _NOK_GDI_TEB_BATCH NOK_GDI_TEB_BATCH, * NOK_PGDI_TEB_BATCH;
typedef struct _NOK_GDI_TEB_BATCH32 NOK_GDI_TEB_BATCH32, * NOK_PGDI_TEB_BATCH32;
typedef struct _NOK_GDI_TEB_BATCH64 NOK_GDI_TEB_BATCH64, * NOK_PGDI_TEB_BATCH64;
typedef struct _NOK_GENERAL_LOOKASIDE NOK_GENERAL_LOOKASIDE, * NOK_PGENERAL_LOOKASIDE;
typedef struct _NOK_GENERAL_LOOKASIDE_POOL NOK_GENERAL_LOOKASIDE_POOL, * NOK_PGENERAL_LOOKASIDE_POOL;
typedef struct _NOK_GENERIC_MAPPING NOK_GENERIC_MAPPING, * NOK_PGENERIC_MAPPING;
typedef struct _NOK_GEN_ADDR NOK_GEN_ADDR, * NOK_PGEN_ADDR;
typedef struct _NOK_GROUP_AFFINITY NOK_GROUP_AFFINITY, * NOK_PGROUP_AFFINITY;
typedef struct _NOK_GUID NOK_GUID, * NOK_PGUID;
typedef struct _NOK_HALP_ALLOC_CONTEXT NOK_HALP_ALLOC_CONTEXT, * NOK_PHALP_ALLOC_CONTEXT;
typedef struct _NOK_HALP_DMA_ADAPTER_OBJECT NOK_HALP_DMA_ADAPTER_OBJECT, * NOK_PHALP_DMA_ADAPTER_OBJECT;
typedef struct _NOK_HALP_DMA_CHANNEL NOK_HALP_DMA_CHANNEL, * NOK_PHALP_DMA_CHANNEL;
typedef struct _NOK_HALP_DMA_CONTROLLER NOK_HALP_DMA_CONTROLLER, * NOK_PHALP_DMA_CONTROLLER;
typedef struct _NOK_HALP_DMA_DOMAIN_OBJECT NOK_HALP_DMA_DOMAIN_OBJECT, * NOK_PHALP_DMA_DOMAIN_OBJECT;
typedef struct _NOK_HALP_DMA_MASTER_ADAPTER_OBJECT NOK_HALP_DMA_MASTER_ADAPTER_OBJECT, * NOK_PHALP_DMA_MASTER_ADAPTER_OBJECT;
typedef struct _NOK_HALP_DMA_TRANSLATION_BUFFER NOK_HALP_DMA_TRANSLATION_BUFFER, * NOK_PHALP_DMA_TRANSLATION_BUFFER;
typedef struct _NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION, * NOK_PHALP_DMA_TRANSLATION_BUFFER_POSITION;
typedef struct _NOK_HALP_DMA_TRANSLATION_ENTRY NOK_HALP_DMA_TRANSLATION_ENTRY, * NOK_PHALP_DMA_TRANSLATION_ENTRY;
typedef struct _NOK_HALP_EMERGENCY_LA_QUEUE_ENTRY NOK_HALP_EMERGENCY_LA_QUEUE_ENTRY, * NOK_PHALP_EMERGENCY_LA_QUEUE_ENTRY;
typedef struct _NOK_HAL_CHANNEL_MEMORY_RANGES NOK_HAL_CHANNEL_MEMORY_RANGES, * NOK_PHAL_CHANNEL_MEMORY_RANGES;
typedef struct _NOK_HAL_CLOCK_TIMER_CONFIGURATION NOK_HAL_CLOCK_TIMER_CONFIGURATION, * NOK_PHAL_CLOCK_TIMER_CONFIGURATION;
typedef struct _NOK_HAL_DP_REPLACE_PARAMETERS NOK_HAL_DP_REPLACE_PARAMETERS, * NOK_PHAL_DP_REPLACE_PARAMETERS;
typedef struct _NOK_HAL_HV_DMA_DOMAIN_INFO NOK_HAL_HV_DMA_DOMAIN_INFO, * NOK_PHAL_HV_DMA_DOMAIN_INFO;
typedef struct _NOK_HAL_HV_SVM_DEVICE_CAPABILITIES NOK_HAL_HV_SVM_DEVICE_CAPABILITIES, * NOK_PHAL_HV_SVM_DEVICE_CAPABILITIES;
typedef struct _NOK_HAL_HV_SVM_SYSTEM_CAPABILITIES NOK_HAL_HV_SVM_SYSTEM_CAPABILITIES, * NOK_PHAL_HV_SVM_SYSTEM_CAPABILITIES;
typedef struct _NOK_HAL_INTEL_ENLIGHTENMENT_INFORMATION NOK_HAL_INTEL_ENLIGHTENMENT_INFORMATION, * NOK_PHAL_INTEL_ENLIGHTENMENT_INFORMATION;
typedef struct _NOK_HAL_IOMMU_DISPATCH NOK_HAL_IOMMU_DISPATCH, * NOK_PHAL_IOMMU_DISPATCH;
typedef struct _NOK_HAL_LBR_ENTRY NOK_HAL_LBR_ENTRY, * NOK_PHAL_LBR_ENTRY;
typedef struct _NOK_HAL_LOG_REGISTER_CONTEXT NOK_HAL_LOG_REGISTER_CONTEXT, * NOK_PHAL_LOG_REGISTER_CONTEXT;
typedef struct _NOK_HAL_NODE_RANGE NOK_HAL_NODE_RANGE, * NOK_PHAL_NODE_RANGE;
typedef struct _NOK_HAL_PMC_COUNTERS NOK_HAL_PMC_COUNTERS, * NOK_PHAL_PMC_COUNTERS;
typedef struct _NOK_HAL_UNMASKED_INTERRUPT_INFORMATION NOK_HAL_UNMASKED_INTERRUPT_INFORMATION, * NOK_PHAL_UNMASKED_INTERRUPT_INFORMATION;
typedef struct _NOK_HANDLE_REVOCATION_INFO NOK_HANDLE_REVOCATION_INFO, * NOK_PHANDLE_REVOCATION_INFO;
typedef struct _NOK_HANDLE_TABLE NOK_HANDLE_TABLE, * NOK_PHANDLE_TABLE;
typedef struct _NOK_HANDLE_TABLE_ENTRY_INFO NOK_HANDLE_TABLE_ENTRY_INFO, * NOK_PHANDLE_TABLE_ENTRY_INFO;
typedef struct _NOK_HANDLE_TABLE_FREE_LIST NOK_HANDLE_TABLE_FREE_LIST, * NOK_PHANDLE_TABLE_FREE_LIST;
typedef struct _NOK_HANDLE_TRACE_DB_ENTRY NOK_HANDLE_TRACE_DB_ENTRY, * NOK_PHANDLE_TRACE_DB_ENTRY;
typedef struct _NOK_HANDLE_TRACE_DEBUG_INFO NOK_HANDLE_TRACE_DEBUG_INFO, * NOK_PHANDLE_TRACE_DEBUG_INFO;
typedef struct _NOK_HARDWARE_PTE NOK_HARDWARE_PTE, * NOK_PHARDWARE_PTE;
typedef struct _NOK_HBASE_BLOCK NOK_HBASE_BLOCK, * NOK_PHBASE_BLOCK;
typedef struct _NOK_HBIN NOK_HBIN, * NOK_PHBIN;
typedef struct _NOK_HCELL NOK_HCELL, * NOK_PHCELL;
typedef struct _NOK_HEADLESS_LOADER_BLOCK NOK_HEADLESS_LOADER_BLOCK, * NOK_PHEADLESS_LOADER_BLOCK;
typedef struct _NOK_HEAP NOK_HEAP, * NOK_PHEAP;
typedef struct _NOK_HEAP_COUNTERS NOK_HEAP_COUNTERS, * NOK_PHEAP_COUNTERS;
typedef struct _NOK_HEAP_DESCRIPTOR_KEY NOK_HEAP_DESCRIPTOR_KEY, * NOK_PHEAP_DESCRIPTOR_KEY;
typedef struct _NOK_HEAP_ENTRY NOK_HEAP_ENTRY, * NOK_PHEAP_ENTRY;
typedef struct _NOK_HEAP_ENTRY_EXTRA NOK_HEAP_ENTRY_EXTRA, * NOK_PHEAP_ENTRY_EXTRA;
typedef struct _NOK_HEAP_EXTENDED_ENTRY NOK_HEAP_EXTENDED_ENTRY, * NOK_PHEAP_EXTENDED_ENTRY;
typedef struct _NOK_HEAP_FAILURE_INFORMATION NOK_HEAP_FAILURE_INFORMATION, * NOK_PHEAP_FAILURE_INFORMATION;
typedef struct _NOK_HEAP_FREE_ENTRY NOK_HEAP_FREE_ENTRY, * NOK_PHEAP_FREE_ENTRY;
typedef struct _NOK_HEAP_FREE_ENTRY_EXTRA NOK_HEAP_FREE_ENTRY_EXTRA, * NOK_PHEAP_FREE_ENTRY_EXTRA;
typedef struct _NOK_HEAP_GLOBAL_APPCOMPAT_FLAGS NOK_HEAP_GLOBAL_APPCOMPAT_FLAGS, * NOK_PHEAP_GLOBAL_APPCOMPAT_FLAGS;
typedef struct _NOK_HEAP_LARGE_ALLOC_DATA NOK_HEAP_LARGE_ALLOC_DATA, * NOK_PHEAP_LARGE_ALLOC_DATA;
typedef struct _NOK_HEAP_LFH_AFFINITY_SLOT NOK_HEAP_LFH_AFFINITY_SLOT, * NOK_PHEAP_LFH_AFFINITY_SLOT;
typedef struct _NOK_HEAP_LFH_BUCKET NOK_HEAP_LFH_BUCKET, * NOK_PHEAP_LFH_BUCKET;
typedef struct _NOK_HEAP_LFH_CONTEXT NOK_HEAP_LFH_CONTEXT, * NOK_PHEAP_LFH_CONTEXT;
typedef struct _NOK_HEAP_LFH_FAST_REF NOK_HEAP_LFH_FAST_REF, * NOK_PHEAP_LFH_FAST_REF;
typedef struct _NOK_HEAP_LFH_SUBSEGMENT NOK_HEAP_LFH_SUBSEGMENT, * NOK_PHEAP_LFH_SUBSEGMENT;
typedef struct _NOK_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS NOK_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS, * NOK_PHEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;
typedef struct _NOK_HEAP_LFH_SUBSEGMENT_OWNER NOK_HEAP_LFH_SUBSEGMENT_OWNER, * NOK_PHEAP_LFH_SUBSEGMENT_OWNER;
typedef struct _NOK_HEAP_LFH_SUBSEGMENT_STAT NOK_HEAP_LFH_SUBSEGMENT_STAT, * NOK_PHEAP_LFH_SUBSEGMENT_STAT;
typedef struct _NOK_HEAP_LFH_UNUSED_BYTES_INFO NOK_HEAP_LFH_UNUSED_BYTES_INFO, * NOK_PHEAP_LFH_UNUSED_BYTES_INFO;
typedef struct _NOK_HEAP_LIST_LOOKUP NOK_HEAP_LIST_LOOKUP, * NOK_PHEAP_LIST_LOOKUP;
typedef struct _NOK_HEAP_LOCK NOK_HEAP_LOCK, * NOK_PHEAP_LOCK;
typedef struct _NOK_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS NOK_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS, * NOK_PHEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;
typedef struct _NOK_HEAP_PAGE_RANGE_DESCRIPTOR NOK_HEAP_PAGE_RANGE_DESCRIPTOR, * NOK_PHEAP_PAGE_RANGE_DESCRIPTOR;
typedef struct _NOK_HEAP_PSEUDO_TAG_ENTRY NOK_HEAP_PSEUDO_TAG_ENTRY, * NOK_PHEAP_PSEUDO_TAG_ENTRY;
typedef struct _NOK_HEAP_RUNTIME_MEMORY_STATS NOK_HEAP_RUNTIME_MEMORY_STATS, * NOK_PHEAP_RUNTIME_MEMORY_STATS;
typedef struct _NOK_HEAP_SEGMENT NOK_HEAP_SEGMENT, * NOK_PHEAP_SEGMENT;
typedef struct _NOK_HEAP_SEG_CONTEXT NOK_HEAP_SEG_CONTEXT, * NOK_PHEAP_SEG_CONTEXT;
typedef struct _NOK_HEAP_STOP_ON_TAG NOK_HEAP_STOP_ON_TAG, * NOK_PHEAP_STOP_ON_TAG;
typedef struct _NOK_HEAP_STOP_ON_VALUES NOK_HEAP_STOP_ON_VALUES, * NOK_PHEAP_STOP_ON_VALUES;
typedef struct _NOK_HEAP_SUBALLOCATOR_CALLBACKS NOK_HEAP_SUBALLOCATOR_CALLBACKS, * NOK_PHEAP_SUBALLOCATOR_CALLBACKS;
typedef struct _NOK_HEAP_TAG_ENTRY NOK_HEAP_TAG_ENTRY, * NOK_PHEAP_TAG_ENTRY;
typedef struct _NOK_HEAP_TUNING_PARAMETERS NOK_HEAP_TUNING_PARAMETERS, * NOK_PHEAP_TUNING_PARAMETERS;
typedef struct _NOK_HEAP_UCR_DESCRIPTOR NOK_HEAP_UCR_DESCRIPTOR, * NOK_PHEAP_UCR_DESCRIPTOR;
typedef struct _NOK_HEAP_UNPACKED_ENTRY NOK_HEAP_UNPACKED_ENTRY, * NOK_PHEAP_UNPACKED_ENTRY;
typedef struct _NOK_HEAP_VAMGR_ALLOCATOR NOK_HEAP_VAMGR_ALLOCATOR, * NOK_PHEAP_VAMGR_ALLOCATOR;
typedef struct _NOK_HEAP_VAMGR_CTX NOK_HEAP_VAMGR_CTX, * NOK_PHEAP_VAMGR_CTX;
typedef struct _NOK_HEAP_VAMGR_RANGE NOK_HEAP_VAMGR_RANGE, * NOK_PHEAP_VAMGR_RANGE;
typedef struct _NOK_HEAP_VAMGR_VASPACE NOK_HEAP_VAMGR_VASPACE, * NOK_PHEAP_VAMGR_VASPACE;
typedef struct _NOK_HEAP_VIRTUAL_ALLOC_ENTRY NOK_HEAP_VIRTUAL_ALLOC_ENTRY, * NOK_PHEAP_VIRTUAL_ALLOC_ENTRY;
typedef struct _NOK_HEAP_VS_CHUNK_FREE_HEADER NOK_HEAP_VS_CHUNK_FREE_HEADER, * NOK_PHEAP_VS_CHUNK_FREE_HEADER;
typedef struct _NOK_HEAP_VS_CHUNK_HEADER NOK_HEAP_VS_CHUNK_HEADER, * NOK_PHEAP_VS_CHUNK_HEADER;
typedef struct _NOK_HEAP_VS_CONTEXT NOK_HEAP_VS_CONTEXT, * NOK_PHEAP_VS_CONTEXT;
typedef struct _NOK_HEAP_VS_DELAY_FREE_CONTEXT NOK_HEAP_VS_DELAY_FREE_CONTEXT, * NOK_PHEAP_VS_DELAY_FREE_CONTEXT;
typedef struct _NOK_HEAP_VS_SUBSEGMENT NOK_HEAP_VS_SUBSEGMENT, * NOK_PHEAP_VS_SUBSEGMENT;
typedef struct _NOK_HEAP_VS_UNUSED_BYTES_INFO NOK_HEAP_VS_UNUSED_BYTES_INFO, * NOK_PHEAP_VS_UNUSED_BYTES_INFO;
typedef struct _NOK_HHIVE NOK_HHIVE, * NOK_PHHIVE;
typedef struct _NOK_HIDDEN_PROCESSOR_POWER_INTERFACE NOK_HIDDEN_PROCESSOR_POWER_INTERFACE, * NOK_PHIDDEN_PROCESSOR_POWER_INTERFACE;
typedef struct _NOK_HIVE_LIST_ENTRY NOK_HIVE_LIST_ENTRY, * NOK_PHIVE_LIST_ENTRY;
typedef struct _NOK_HIVE_LOAD_FAILURE NOK_HIVE_LOAD_FAILURE, * NOK_PHIVE_LOAD_FAILURE;
typedef struct _NOK_HIVE_WAIT_PACKET NOK_HIVE_WAIT_PACKET, * NOK_PHIVE_WAIT_PACKET;
typedef struct _NOK_HIVE_WRITE_WAIT_QUEUE NOK_HIVE_WRITE_WAIT_QUEUE, * NOK_PHIVE_WRITE_WAIT_QUEUE;
typedef struct _NOK_HMAP_DIRECTORY NOK_HMAP_DIRECTORY, * NOK_PHMAP_DIRECTORY;
typedef struct _NOK_HMAP_ENTRY NOK_HMAP_ENTRY, * NOK_PHMAP_ENTRY;
typedef struct _NOK_HMAP_TABLE NOK_HMAP_TABLE, * NOK_PHMAP_TABLE;
typedef struct _NOK_HVP_VIEW_MAP NOK_HVP_VIEW_MAP, * NOK_PHVP_VIEW_MAP;
typedef struct _NOK_HV_GET_BIN_CONTEXT NOK_HV_GET_BIN_CONTEXT, * NOK_PHV_GET_BIN_CONTEXT;
typedef struct _NOK_HV_GET_CELL_CONTEXT NOK_HV_GET_CELL_CONTEXT, * NOK_PHV_GET_CELL_CONTEXT;
typedef struct _NOK_HV_X64_HYPERVISOR_FEATURES NOK_HV_X64_HYPERVISOR_FEATURES, * NOK_PHV_X64_HYPERVISOR_FEATURES;
typedef struct _NOK_I386_LOADER_BLOCK NOK_I386_LOADER_BLOCK, * NOK_PI386_LOADER_BLOCK;
typedef struct _NOK_IA64_DBGKD_CONTROL_SET NOK_IA64_DBGKD_CONTROL_SET, * NOK_PIA64_DBGKD_CONTROL_SET;
typedef struct _NOK_IMAGE_DATA_DIRECTORY NOK_IMAGE_DATA_DIRECTORY, * NOK_PIMAGE_DATA_DIRECTORY;
typedef struct _NOK_IMAGE_DEBUG_DIRECTORY NOK_IMAGE_DEBUG_DIRECTORY, * NOK_PIMAGE_DEBUG_DIRECTORY;
typedef struct _NOK_IMAGE_DOS_HEADER NOK_IMAGE_DOS_HEADER, * NOK_PIMAGE_DOS_HEADER;
typedef struct _NOK_IMAGE_FILE_HEADER NOK_IMAGE_FILE_HEADER, * NOK_PIMAGE_FILE_HEADER;
typedef struct _NOK_IMAGE_NT_HEADERS64 NOK_IMAGE_NT_HEADERS64, * NOK_PIMAGE_NT_HEADERS64;
typedef struct _NOK_IMAGE_OPTIONAL_HEADER64 NOK_IMAGE_OPTIONAL_HEADER64, * NOK_PIMAGE_OPTIONAL_HEADER64;
typedef struct _NOK_IMAGE_ROM_OPTIONAL_HEADER NOK_IMAGE_ROM_OPTIONAL_HEADER, * NOK_PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _NOK_IMAGE_RUNTIME_FUNCTION_ENTRY NOK_IMAGE_RUNTIME_FUNCTION_ENTRY, * NOK_PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _NOK_IMAGE_SECTION_HEADER NOK_IMAGE_SECTION_HEADER, * NOK_PIMAGE_SECTION_HEADER;
typedef struct _NOK_IMAGE_SECURITY_CONTEXT NOK_IMAGE_SECURITY_CONTEXT, * NOK_PIMAGE_SECURITY_CONTEXT;
typedef struct _NOK_INITIAL_PRIVILEGE_SET NOK_INITIAL_PRIVILEGE_SET, * NOK_PINITIAL_PRIVILEGE_SET;
typedef struct _NOK_INPUT_MAPPING_ELEMENT NOK_INPUT_MAPPING_ELEMENT, * NOK_PINPUT_MAPPING_ELEMENT;
typedef struct _NOK_INTERFACE NOK_INTERFACE, * NOK_PINTERFACE;
typedef struct _NOK_INTERRUPT_CONNECTION_DATA NOK_INTERRUPT_CONNECTION_DATA, * NOK_PINTERRUPT_CONNECTION_DATA;
typedef struct _NOK_INTERRUPT_FUNCTION_TABLE NOK_INTERRUPT_FUNCTION_TABLE, * NOK_PINTERRUPT_FUNCTION_TABLE;
typedef struct _NOK_INTERRUPT_HT_INTR_INFO NOK_INTERRUPT_HT_INTR_INFO, * NOK_PINTERRUPT_HT_INTR_INFO;
typedef struct _NOK_INTERRUPT_LINE NOK_INTERRUPT_LINE, * NOK_PINTERRUPT_LINE;
typedef struct _NOK_INTERRUPT_LINE_STATE NOK_INTERRUPT_LINE_STATE, * NOK_PINTERRUPT_LINE_STATE;
typedef struct _NOK_INTERRUPT_REMAPPING_INFO NOK_INTERRUPT_REMAPPING_INFO, * NOK_PINTERRUPT_REMAPPING_INFO;
typedef struct _NOK_INTERRUPT_TARGET NOK_INTERRUPT_TARGET, * NOK_PINTERRUPT_TARGET;
typedef struct _NOK_INTERRUPT_VECTOR_DATA NOK_INTERRUPT_VECTOR_DATA, * NOK_PINTERRUPT_VECTOR_DATA;
typedef struct _NOK_INVERTED_FUNCTION_TABLE NOK_INVERTED_FUNCTION_TABLE, * NOK_PINVERTED_FUNCTION_TABLE;
typedef struct _NOK_INVERTED_FUNCTION_TABLE_ENTRY NOK_INVERTED_FUNCTION_TABLE_ENTRY, * NOK_PINVERTED_FUNCTION_TABLE_ENTRY;
typedef struct _NOK_IOAPIC NOK_IOAPIC, * NOK_PIOAPIC;
typedef struct _NOK_IOMMU_DMA_DOMAIN NOK_IOMMU_DMA_DOMAIN, * NOK_PIOMMU_DMA_DOMAIN;
typedef struct _NOK_IOP_FILE_OBJECT_EXTENSION NOK_IOP_FILE_OBJECT_EXTENSION, * NOK_PIOP_FILE_OBJECT_EXTENSION;
typedef struct _NOK_IOP_IRP_EXTENSION NOK_IOP_IRP_EXTENSION, * NOK_PIOP_IRP_EXTENSION;
typedef struct _NOK_IOP_IRP_EXTENSION_STATUS NOK_IOP_IRP_EXTENSION_STATUS, * NOK_PIOP_IRP_EXTENSION_STATUS;
typedef struct _NOK_IOP_IRP_STACK_PROFILER NOK_IOP_IRP_STACK_PROFILER, * NOK_PIOP_IRP_STACK_PROFILER;
typedef struct _NOK_IOSAPIC NOK_IOSAPIC, * NOK_PIOSAPIC;
typedef struct _NOK_IOV_FORCED_PENDING_TRACE NOK_IOV_FORCED_PENDING_TRACE, * NOK_PIOV_FORCED_PENDING_TRACE;
typedef struct _NOK_IOV_IRP_TRACE NOK_IOV_IRP_TRACE, * NOK_PIOV_IRP_TRACE;
typedef struct _NOK_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR NOK_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR, * NOK_PIO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
typedef struct _NOK_IO_ADAPTER_CRYPTO_PARAMETERS NOK_IO_ADAPTER_CRYPTO_PARAMETERS, * NOK_PIO_ADAPTER_CRYPTO_PARAMETERS;
typedef struct _NOK_IO_APIC_DATA NOK_IO_APIC_DATA, * NOK_PIO_APIC_DATA;
typedef struct _NOK_IO_APIC_REGISTERS NOK_IO_APIC_REGISTERS, * NOK_PIO_APIC_REGISTERS;
typedef struct _NOK_IO_CLIENT_EXTENSION NOK_IO_CLIENT_EXTENSION, * NOK_PIO_CLIENT_EXTENSION;
typedef struct _NOK_IO_COMPLETION_CONTEXT NOK_IO_COMPLETION_CONTEXT, * NOK_PIO_COMPLETION_CONTEXT;
typedef struct _NOK_IO_DRIVER_CREATE_CONTEXT NOK_IO_DRIVER_CREATE_CONTEXT, * NOK_PIO_DRIVER_CREATE_CONTEXT;
typedef struct _NOK_IO_IRP_EXT_TRACK_OFFSET_HEADER NOK_IO_IRP_EXT_TRACK_OFFSET_HEADER, * NOK_PIO_IRP_EXT_TRACK_OFFSET_HEADER;
typedef struct _NOK_IO_MINI_COMPLETION_PACKET_USER NOK_IO_MINI_COMPLETION_PACKET_USER, * NOK_PIO_MINI_COMPLETION_PACKET_USER;
typedef struct _NOK_IO_NMISOURCE NOK_IO_NMISOURCE, * NOK_PIO_NMISOURCE;
typedef struct _NOK_IO_PRIORITY_INFO NOK_IO_PRIORITY_INFO, * NOK_PIO_PRIORITY_INFO;
typedef struct _NOK_IO_REMOVE_LOCK NOK_IO_REMOVE_LOCK, * NOK_PIO_REMOVE_LOCK;
typedef struct _NOK_IO_REMOVE_LOCK_COMMON_BLOCK NOK_IO_REMOVE_LOCK_COMMON_BLOCK, * NOK_PIO_REMOVE_LOCK_COMMON_BLOCK;
typedef struct _NOK_IO_RESOURCE_DESCRIPTOR NOK_IO_RESOURCE_DESCRIPTOR, * NOK_PIO_RESOURCE_DESCRIPTOR;
typedef struct _NOK_IO_RESOURCE_LIST NOK_IO_RESOURCE_LIST, * NOK_PIO_RESOURCE_LIST;
typedef struct _NOK_IO_RESOURCE_REQUIREMENTS_LIST NOK_IO_RESOURCE_REQUIREMENTS_LIST, * NOK_PIO_RESOURCE_REQUIREMENTS_LIST;
typedef struct _NOK_IO_SECURITY_CONTEXT NOK_IO_SECURITY_CONTEXT, * NOK_PIO_SECURITY_CONTEXT;
typedef struct _NOK_IO_STACK_LOCATION NOK_IO_STACK_LOCATION, * NOK_PIO_STACK_LOCATION;
typedef struct _NOK_IO_STATUS_BLOCK NOK_IO_STATUS_BLOCK, * NOK_PIO_STATUS_BLOCK;
typedef struct _NOK_IO_TIMER NOK_IO_TIMER, * NOK_PIO_TIMER;
typedef struct _NOK_IO_WORKITEM NOK_IO_WORKITEM, * NOK_PIO_WORKITEM;
typedef struct _NOK_IRP NOK_IRP, * NOK_PIRP;
typedef struct _NOK_IRP NOK_IRP, * NOK_PIRP;
typedef struct _NOK_ISA_VECTOR NOK_ISA_VECTOR, * NOK_PISA_VECTOR;
typedef struct _NOK_ISRDPCSTATS NOK_ISRDPCSTATS, * NOK_PISRDPCSTATS;
typedef struct _NOK_ISRDPCSTATS_SEQUENCE NOK_ISRDPCSTATS_SEQUENCE, * NOK_PISRDPCSTATS_SEQUENCE;
typedef struct _NOK_ISR_THUNK NOK_ISR_THUNK, * NOK_PISR_THUNK;
typedef struct _NOK_JOBOBJECT_WAKE_FILTER NOK_JOBOBJECT_WAKE_FILTER, * NOK_PJOBOBJECT_WAKE_FILTER;
typedef struct _NOK_JOB_ACCESS_STATE NOK_JOB_ACCESS_STATE, * NOK_PJOB_ACCESS_STATE;
typedef struct _NOK_JOB_CPU_RATE_CONTROL NOK_JOB_CPU_RATE_CONTROL, * NOK_PJOB_CPU_RATE_CONTROL;
typedef struct _NOK_JOB_NET_RATE_CONTROL NOK_JOB_NET_RATE_CONTROL, * NOK_PJOB_NET_RATE_CONTROL;
typedef struct _NOK_JOB_NOTIFICATION_INFORMATION NOK_JOB_NOTIFICATION_INFORMATION, * NOK_PJOB_NOTIFICATION_INFORMATION;
typedef struct _NOK_JOB_RATE_CONTROL_HEADER NOK_JOB_RATE_CONTROL_HEADER, * NOK_PJOB_RATE_CONTROL_HEADER;
typedef struct _NOK_KAFFINITY_EX NOK_KAFFINITY_EX, * NOK_PKAFFINITY_EX;
typedef struct _NOK_KALPC_HANDLE_DATA NOK_KALPC_HANDLE_DATA, * NOK_PKALPC_HANDLE_DATA;
typedef struct _NOK_KALPC_MESSAGE NOK_KALPC_MESSAGE, * NOK_PKALPC_MESSAGE;
typedef struct _NOK_KALPC_MESSAGE_ATTRIBUTES NOK_KALPC_MESSAGE_ATTRIBUTES, * NOK_PKALPC_MESSAGE_ATTRIBUTES;
typedef struct _NOK_KALPC_REGION NOK_KALPC_REGION, * NOK_PKALPC_REGION;
typedef struct _NOK_KALPC_RESERVE NOK_KALPC_RESERVE, * NOK_PKALPC_RESERVE;
typedef struct _NOK_KALPC_SECTION NOK_KALPC_SECTION, * NOK_PKALPC_SECTION;
typedef struct _NOK_KALPC_SECURITY_DATA NOK_KALPC_SECURITY_DATA, * NOK_PKALPC_SECURITY_DATA;
typedef struct _NOK_KALPC_VIEW NOK_KALPC_VIEW, * NOK_PKALPC_VIEW;
typedef struct _NOK_KALPC_WORK_ON_BEHALF_DATA NOK_KALPC_WORK_ON_BEHALF_DATA, * NOK_PKALPC_WORK_ON_BEHALF_DATA;
typedef struct _NOK_KAPC NOK_KAPC, * NOK_PKAPC;
typedef struct _NOK_KAPC NOK_KAPC, * NOK_PKAPC;
typedef struct _NOK_KAPC_STATE NOK_KAPC_STATE, * NOK_PKAPC_STATE;
typedef struct _NOK_KDESCRIPTOR NOK_KDESCRIPTOR, * NOK_PKDESCRIPTOR;
typedef struct _NOK_KDEVICE_QUEUE NOK_KDEVICE_QUEUE, * NOK_PKDEVICE_QUEUE;
typedef struct _NOK_KDEVICE_QUEUE_ENTRY NOK_KDEVICE_QUEUE_ENTRY, * NOK_PKDEVICE_QUEUE_ENTRY;
typedef struct _NOK_KDPC NOK_KDPC, * NOK_PKDPC;
typedef struct _NOK_KDPC_DATA NOK_KDPC_DATA, * NOK_PKDPC_DATA;
typedef struct _NOK_KDPC_LIST NOK_KDPC_LIST, * NOK_PKDPC_LIST;
typedef struct _NOK_KENLISTMENT NOK_KENLISTMENT, * NOK_PKENLISTMENT;
typedef struct _NOK_KENLISTMENT_HISTORY NOK_KENLISTMENT_HISTORY, * NOK_PKENLISTMENT_HISTORY;
typedef struct _NOK_KENTROPY_TIMING_STATE NOK_KENTROPY_TIMING_STATE, * NOK_PKENTROPY_TIMING_STATE;
typedef struct _NOK_KERNEL_STACK_SEGMENT NOK_KERNEL_STACK_SEGMENT, * NOK_PKERNEL_STACK_SEGMENT;
typedef struct _NOK_KEVENT NOK_KEVENT, * NOK_PKEVENT;
typedef struct _NOK_KEXCEPTION_FRAME NOK_KEXCEPTION_FRAME, * NOK_PKEXCEPTION_FRAME;
typedef struct _NOK_KFLOATING_SAVE NOK_KFLOATING_SAVE, * NOK_PKFLOATING_SAVE;
typedef struct _NOK_KGATE NOK_KGATE, * NOK_PKGATE;
typedef struct _NOK_KHETERO_PROCESSOR_SET NOK_KHETERO_PROCESSOR_SET, * NOK_PKHETERO_PROCESSOR_SET;
typedef struct _NOK_KINTERRUPT NOK_KINTERRUPT, * NOK_PKINTERRUPT;
typedef struct _NOK_KIST_BASE_FRAME NOK_KIST_BASE_FRAME, * NOK_PKIST_BASE_FRAME;
typedef struct _NOK_KIST_LINK_FRAME NOK_KIST_LINK_FRAME, * NOK_PKIST_LINK_FRAME;
typedef struct _NOK_KLDR_DATA_TABLE_ENTRY NOK_KLDR_DATA_TABLE_ENTRY, * NOK_PKLDR_DATA_TABLE_ENTRY;
typedef struct _NOK_KLOCK_ENTRY NOK_KLOCK_ENTRY, * NOK_PKLOCK_ENTRY;
typedef struct _NOK_KLOCK_ENTRY_LOCK_STATE NOK_KLOCK_ENTRY_LOCK_STATE, * NOK_PKLOCK_ENTRY_LOCK_STATE;
typedef struct _NOK_KLOCK_QUEUE_HANDLE NOK_KLOCK_QUEUE_HANDLE, * NOK_PKLOCK_QUEUE_HANDLE;
typedef struct _NOK_KMUTANT NOK_KMUTANT, * NOK_PKMUTANT;
typedef struct _NOK_KNODE NOK_KNODE, * NOK_PKNODE;
typedef struct _NOK_KPCR NOK_KPCR, * NOK_PKPCR;
typedef struct _NOK_KPCR NOK_KPCR, * NOK_PKPCR;
typedef struct _NOK_KPRCB NOK_KPRCB, * NOK_PKPRCB;
typedef struct _NOK_KPRCB NOK_KPRCB, * NOK_PKPRCB;
typedef struct _NOK_KPRIQUEUE NOK_KPRIQUEUE, * NOK_PKPRIQUEUE;
typedef struct _NOK_KPROCESS NOK_KPROCESS, * NOK_PKPROCESS;
typedef struct _NOK_KPROCESSOR_STATE NOK_KPROCESSOR_STATE, * NOK_PKPROCESSOR_STATE;
typedef struct _NOK_KQUEUE NOK_KQUEUE, * NOK_PKQUEUE;
typedef struct _NOK_KREQUEST_PACKET NOK_KREQUEST_PACKET, * NOK_PKREQUEST_PACKET;
typedef struct _NOK_KRESOURCEMANAGER NOK_KRESOURCEMANAGER, * NOK_PKRESOURCEMANAGER;
typedef struct _NOK_KRESOURCEMANAGER_COMPLETION_BINDING NOK_KRESOURCEMANAGER_COMPLETION_BINDING, * NOK_PKRESOURCEMANAGER_COMPLETION_BINDING;
typedef struct _NOK_KSCB NOK_KSCB, * NOK_PKSCB;
typedef struct _NOK_KSCHEDULING_GROUP NOK_KSCHEDULING_GROUP, * NOK_PKSCHEDULING_GROUP;
typedef struct _NOK_KSCHEDULING_GROUP_POLICY NOK_KSCHEDULING_GROUP_POLICY, * NOK_PKSCHEDULING_GROUP_POLICY;
typedef struct _NOK_KSECONDARY_IDT_ENTRY NOK_KSECONDARY_IDT_ENTRY, * NOK_PKSECONDARY_IDT_ENTRY;
typedef struct _NOK_KSECURE_FAULT_INFORMATION NOK_KSECURE_FAULT_INFORMATION, * NOK_PKSECURE_FAULT_INFORMATION;
typedef struct _NOK_KSEMAPHORE NOK_KSEMAPHORE, * NOK_PKSEMAPHORE;
typedef struct _NOK_KSHARED_READY_QUEUE NOK_KSHARED_READY_QUEUE, * NOK_PKSHARED_READY_QUEUE;
typedef struct _NOK_KSPECIAL_REGISTERS NOK_KSPECIAL_REGISTERS, * NOK_PKSPECIAL_REGISTERS;
typedef struct _NOK_KSPIN_LOCK_QUEUE NOK_KSPIN_LOCK_QUEUE, * NOK_PKSPIN_LOCK_QUEUE;
typedef struct _NOK_KSTACK_CONTROL NOK_KSTACK_CONTROL, * NOK_PKSTACK_CONTROL;
typedef struct _NOK_KSTATIC_AFFINITY_BLOCK NOK_KSTATIC_AFFINITY_BLOCK, * NOK_PKSTATIC_AFFINITY_BLOCK;
typedef struct _NOK_KSYSTEM_TIME NOK_KSYSTEM_TIME, * NOK_PKSYSTEM_TIME;
typedef struct _NOK_KTB_FLUSH_VA NOK_KTB_FLUSH_VA, * NOK_PKTB_FLUSH_VA;
typedef struct _NOK_KTHREAD NOK_KTHREAD, * NOK_PKTHREAD;
typedef struct _NOK_KTHREAD_COUNTERS NOK_KTHREAD_COUNTERS, * NOK_PKTHREAD_COUNTERS;
typedef struct _NOK_KTIMER NOK_KTIMER, * NOK_PKTIMER;
typedef struct _NOK_KTIMER2 NOK_KTIMER2, * NOK_PKTIMER2;
typedef struct _NOK_KTIMER2_COLLECTION NOK_KTIMER2_COLLECTION, * NOK_PKTIMER2_COLLECTION;
typedef struct _NOK_KTIMER_EXPIRATION_TRACE NOK_KTIMER_EXPIRATION_TRACE, * NOK_PKTIMER_EXPIRATION_TRACE;
typedef struct _NOK_KTIMER_TABLE NOK_KTIMER_TABLE, * NOK_PKTIMER_TABLE;
typedef struct _NOK_KTIMER_TABLE_ENTRY NOK_KTIMER_TABLE_ENTRY, * NOK_PKTIMER_TABLE_ENTRY;
typedef struct _NOK_KTIMER_TABLE_STATE NOK_KTIMER_TABLE_STATE, * NOK_PKTIMER_TABLE_STATE;
typedef struct _NOK_KTM NOK_KTM, * NOK_PKTM;
typedef struct _NOK_KTMNOTIFICATION_PACKET NOK_KTMNOTIFICATION_PACKET, * NOK_PKTMNOTIFICATION_PACKET;
typedef struct _NOK_KTMOBJECT_NAMESPACE NOK_KTMOBJECT_NAMESPACE, * NOK_PKTMOBJECT_NAMESPACE;
typedef struct _NOK_KTMOBJECT_NAMESPACE_LINK NOK_KTMOBJECT_NAMESPACE_LINK, * NOK_PKTMOBJECT_NAMESPACE_LINK;
typedef struct _NOK_KTRANSACTION NOK_KTRANSACTION, * NOK_PKTRANSACTION;
typedef struct _NOK_KTRANSACTION_HISTORY NOK_KTRANSACTION_HISTORY, * NOK_PKTRANSACTION_HISTORY;
typedef struct _NOK_KTRAP_FRAME NOK_KTRAP_FRAME, * NOK_PKTRAP_FRAME;
typedef struct _NOK_KTSS64 NOK_KTSS64, * NOK_PKTSS64;
typedef struct _NOK_KUMS_CONTEXT_HEADER NOK_KUMS_CONTEXT_HEADER, * NOK_PKUMS_CONTEXT_HEADER;
typedef struct _NOK_KUSER_SHARED_DATA NOK_KUSER_SHARED_DATA, * NOK_PKUSER_SHARED_DATA;
typedef struct _NOK_KWAIT_BLOCK NOK_KWAIT_BLOCK, * NOK_PKWAIT_BLOCK;
typedef struct _NOK_KWAIT_CHAIN NOK_KWAIT_CHAIN, * NOK_PKWAIT_CHAIN;
typedef struct _NOK_KWAIT_CHAIN_ENTRY NOK_KWAIT_CHAIN_ENTRY, * NOK_PKWAIT_CHAIN_ENTRY;
typedef struct _NOK_LAZY_WRITER NOK_LAZY_WRITER, * NOK_PLAZY_WRITER;
typedef struct _NOK_LDRP_CSLIST NOK_LDRP_CSLIST, * NOK_PLDRP_CSLIST;
typedef struct _NOK_LDRP_LOAD_CONTEXT NOK_LDRP_LOAD_CONTEXT, * NOK_PLDRP_LOAD_CONTEXT;
typedef struct _NOK_LDR_DATA_TABLE_ENTRY NOK_LDR_DATA_TABLE_ENTRY, * NOK_PLDR_DATA_TABLE_ENTRY;
typedef struct _NOK_LDR_DDAG_NODE NOK_LDR_DDAG_NODE, * NOK_PLDR_DDAG_NODE;
typedef struct _NOK_LDR_SERVICE_TAG_RECORD NOK_LDR_SERVICE_TAG_RECORD, * NOK_PLDR_SERVICE_TAG_RECORD;
typedef struct _NOK_LEAP_SECOND_DATA NOK_LEAP_SECOND_DATA, * NOK_PLEAP_SECOND_DATA;
typedef struct _NOK_LEARNING_MODE_DATA NOK_LEARNING_MODE_DATA, * NOK_PLEARNING_MODE_DATA;
typedef struct _NOK_LIST_ENTRY NOK_LIST_ENTRY, * NOK_PLIST_ENTRY;
typedef struct _NOK_LOADER_BUGCHECK_PARAMETERS NOK_LOADER_BUGCHECK_PARAMETERS, * NOK_PLOADER_BUGCHECK_PARAMETERS;
typedef struct _NOK_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION NOK_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION, * NOK_PLOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION;
typedef struct _NOK_LOADER_FEATURE_CONFIGURATION_INFORMATION NOK_LOADER_FEATURE_CONFIGURATION_INFORMATION, * NOK_PLOADER_FEATURE_CONFIGURATION_INFORMATION;
typedef struct _NOK_LOADER_HIVE_RECOVERY_INFO NOK_LOADER_HIVE_RECOVERY_INFO, * NOK_PLOADER_HIVE_RECOVERY_INFO;
typedef struct _NOK_LOADER_PARAMETER_BLOCK NOK_LOADER_PARAMETER_BLOCK, * NOK_PLOADER_PARAMETER_BLOCK;
typedef struct _NOK_LOADER_PARAMETER_CI_EXTENSION NOK_LOADER_PARAMETER_CI_EXTENSION, * NOK_PLOADER_PARAMETER_CI_EXTENSION;
typedef struct _NOK_LOADER_PARAMETER_EXTENSION NOK_LOADER_PARAMETER_EXTENSION, * NOK_PLOADER_PARAMETER_EXTENSION;
typedef struct _NOK_LOADER_PARAMETER_HYPERVISOR_EXTENSION NOK_LOADER_PARAMETER_HYPERVISOR_EXTENSION, * NOK_PLOADER_PARAMETER_HYPERVISOR_EXTENSION;
typedef struct _NOK_LOADER_PERFORMANCE_DATA NOK_LOADER_PERFORMANCE_DATA, * NOK_PLOADER_PERFORMANCE_DATA;
typedef struct _NOK_LOADER_RESET_REASON NOK_LOADER_RESET_REASON, * NOK_PLOADER_RESET_REASON;
typedef struct _NOK_LOCAL_NMISOURCE NOK_LOCAL_NMISOURCE, * NOK_PLOCAL_NMISOURCE;
typedef struct _NOK_LOCK_HEADER NOK_LOCK_HEADER, * NOK_PLOCK_HEADER;
typedef struct _NOK_LOCK_TRACKER NOK_LOCK_TRACKER, * NOK_PLOCK_TRACKER;
typedef struct _NOK_LOGGED_STREAM_CALLBACK_V1 NOK_LOGGED_STREAM_CALLBACK_V1, * NOK_PLOGGED_STREAM_CALLBACK_V1;
typedef struct _NOK_LOGGED_STREAM_CALLBACK_V2 NOK_LOGGED_STREAM_CALLBACK_V2, * NOK_PLOGGED_STREAM_CALLBACK_V2;
typedef struct _NOK_LOG_HANDLE_CONTEXT NOK_LOG_HANDLE_CONTEXT, * NOK_PLOG_HANDLE_CONTEXT;
typedef struct _NOK_LOOKASIDE_LIST_EX NOK_LOOKASIDE_LIST_EX, * NOK_PLOOKASIDE_LIST_EX;
typedef struct _NOK_LPCP_MESSAGE NOK_LPCP_MESSAGE, * NOK_PLPCP_MESSAGE;
typedef struct _NOK_LPCP_NONPAGED_PORT_QUEUE NOK_LPCP_NONPAGED_PORT_QUEUE, * NOK_PLPCP_NONPAGED_PORT_QUEUE;
typedef struct _NOK_LPCP_PORT_OBJECT NOK_LPCP_PORT_OBJECT, * NOK_PLPCP_PORT_OBJECT;
typedef struct _NOK_LPCP_PORT_QUEUE NOK_LPCP_PORT_QUEUE, * NOK_PLPCP_PORT_QUEUE;
typedef struct _NOK_LUID NOK_LUID, * NOK_PLUID;
typedef struct _NOK_LUID_AND_ATTRIBUTES NOK_LUID_AND_ATTRIBUTES, * NOK_PLUID_AND_ATTRIBUTES;
typedef struct _NOK_M128A NOK_M128A, * NOK_PM128A;
typedef struct _NOK_MACHINE_CHECK_CONTEXT NOK_MACHINE_CHECK_CONTEXT, * NOK_PMACHINE_CHECK_CONTEXT;
typedef struct _NOK_MACHINE_FRAME NOK_MACHINE_FRAME, * NOK_PMACHINE_FRAME;
typedef struct _NOK_MAILSLOT_CREATE_PARAMETERS NOK_MAILSLOT_CREATE_PARAMETERS, * NOK_PMAILSLOT_CREATE_PARAMETERS;
typedef struct _NOK_MAPIC NOK_MAPIC, * NOK_PMAPIC;
typedef struct _NOK_MAPPED_FILE_SEGMENT NOK_MAPPED_FILE_SEGMENT, * NOK_PMAPPED_FILE_SEGMENT;
typedef struct _NOK_MAP_REGISTER_ENTRY NOK_MAP_REGISTER_ENTRY, * NOK_PMAP_REGISTER_ENTRY;
typedef struct _NOK_MBCB NOK_MBCB, * NOK_PMBCB;
typedef struct _NOK_MCGEN_TRACE_CONTEXT NOK_MCGEN_TRACE_CONTEXT, * NOK_PMCGEN_TRACE_CONTEXT;
typedef struct _NOK_MCI_STATUS_AMD_BITS NOK_MCI_STATUS_AMD_BITS, * NOK_PMCI_STATUS_AMD_BITS;
typedef struct _NOK_MCI_STATUS_BITS_COMMON NOK_MCI_STATUS_BITS_COMMON, * NOK_PMCI_STATUS_BITS_COMMON;
typedef struct _NOK_MCI_STATUS_INTEL_BITS NOK_MCI_STATUS_INTEL_BITS, * NOK_PMCI_STATUS_INTEL_BITS;
typedef struct _NOK_MCUPDATE_INFO NOK_MCUPDATE_INFO, * NOK_PMCUPDATE_INFO;
typedef struct _NOK_MDL NOK_MDL, * NOK_PMDL;
typedef struct _NOK_MDL NOK_MDL, * NOK_PMDL;
typedef struct _NOK_MEMORY_ALLOCATION_DESCRIPTOR NOK_MEMORY_ALLOCATION_DESCRIPTOR, * NOK_PMEMORY_ALLOCATION_DESCRIPTOR;
typedef struct _NOK_MIPFNBLINK NOK_MIPFNBLINK, * NOK_PMIPFNBLINK;
typedef struct _NOK_MI_ACCESS_LOG_STATE NOK_MI_ACCESS_LOG_STATE, * NOK_PMI_ACCESS_LOG_STATE;
typedef struct _NOK_MI_ACCESS_VIOLATION_RANGE NOK_MI_ACCESS_VIOLATION_RANGE, * NOK_PMI_ACCESS_VIOLATION_RANGE;
typedef struct _NOK_MI_ACTIVE_PFN NOK_MI_ACTIVE_PFN, * NOK_PMI_ACTIVE_PFN;
typedef struct _NOK_MI_ALIGNED_SLIST NOK_MI_ALIGNED_SLIST, * NOK_PMI_ALIGNED_SLIST;
typedef struct _NOK_MI_AVAILABLE_PAGE_WAIT_STATES NOK_MI_AVAILABLE_PAGE_WAIT_STATES, * NOK_PMI_AVAILABLE_PAGE_WAIT_STATES;
typedef struct _NOK_MI_BAD_MEMORY_EVENT_ENTRY NOK_MI_BAD_MEMORY_EVENT_ENTRY, * NOK_PMI_BAD_MEMORY_EVENT_ENTRY;
typedef struct _NOK_MI_CACHED_PTE NOK_MI_CACHED_PTE, * NOK_PMI_CACHED_PTE;
typedef struct _NOK_MI_CACHED_PTES NOK_MI_CACHED_PTES, * NOK_PMI_CACHED_PTES;
typedef struct _NOK_MI_CLONE_BLOCK_FLAGS NOK_MI_CLONE_BLOCK_FLAGS, * NOK_PMI_CLONE_BLOCK_FLAGS;
typedef struct _NOK_MI_COMBINE_PAGE_LISTHEAD NOK_MI_COMBINE_PAGE_LISTHEAD, * NOK_PMI_COMBINE_PAGE_LISTHEAD;
typedef struct _NOK_MI_COMBINE_STATE NOK_MI_COMBINE_STATE, * NOK_PMI_COMBINE_STATE;
typedef struct _NOK_MI_COMBINE_WORKITEM NOK_MI_COMBINE_WORKITEM, * NOK_PMI_COMBINE_WORKITEM;
typedef struct _NOK_MI_COMMON_PAGE_STATE NOK_MI_COMMON_PAGE_STATE, * NOK_PMI_COMMON_PAGE_STATE;
typedef struct _NOK_MI_CONTROL_AREA_WAIT_BLOCK NOK_MI_CONTROL_AREA_WAIT_BLOCK, * NOK_PMI_CONTROL_AREA_WAIT_BLOCK;
typedef struct _NOK_MI_CROSS_PARTITION_CHARGES NOK_MI_CROSS_PARTITION_CHARGES, * NOK_PMI_CROSS_PARTITION_CHARGES;
typedef struct _NOK_MI_DEBUGGER_STATE NOK_MI_DEBUGGER_STATE, * NOK_PMI_DEBUGGER_STATE;
typedef struct _NOK_MI_DECAY_TIMER_LINK NOK_MI_DECAY_TIMER_LINK, * NOK_PMI_DECAY_TIMER_LINK;
typedef struct _NOK_MI_DECAY_TIMER_LINKAGE NOK_MI_DECAY_TIMER_LINKAGE, * NOK_PMI_DECAY_TIMER_LINKAGE;
typedef struct _NOK_MI_DLL_OVERFLOW_AREA NOK_MI_DLL_OVERFLOW_AREA, * NOK_PMI_DLL_OVERFLOW_AREA;
typedef struct _NOK_MI_DRIVER_VA NOK_MI_DRIVER_VA, * NOK_PMI_DRIVER_VA;
typedef struct _NOK_MI_DYNAMIC_BITMAP NOK_MI_DYNAMIC_BITMAP, * NOK_PMI_DYNAMIC_BITMAP;
typedef struct _NOK_MI_ENCLAVE_STATE NOK_MI_ENCLAVE_STATE, * NOK_PMI_ENCLAVE_STATE;
typedef struct _NOK_MI_ERROR_STATE NOK_MI_ERROR_STATE, * NOK_PMI_ERROR_STATE;
typedef struct _NOK_MI_EXTENT_DELETION_WAIT_BLOCK NOK_MI_EXTENT_DELETION_WAIT_BLOCK, * NOK_PMI_EXTENT_DELETION_WAIT_BLOCK;
typedef struct _NOK_MI_EXTRA_IMAGE_INFORMATION NOK_MI_EXTRA_IMAGE_INFORMATION, * NOK_PMI_EXTRA_IMAGE_INFORMATION;
typedef struct _NOK_MI_FORCED_COMMITS NOK_MI_FORCED_COMMITS, * NOK_PMI_FORCED_COMMITS;
typedef struct _NOK_MI_FREE_LARGE_PAGES NOK_MI_FREE_LARGE_PAGES, * NOK_PMI_FREE_LARGE_PAGES;
typedef struct _NOK_MI_FREE_LARGE_PAGE_LIST NOK_MI_FREE_LARGE_PAGE_LIST, * NOK_PMI_FREE_LARGE_PAGE_LIST;
typedef struct _NOK_MI_HARDWARE_STATE NOK_MI_HARDWARE_STATE, * NOK_PMI_HARDWARE_STATE;
typedef struct _NOK_MI_HARD_FAULT_STATE NOK_MI_HARD_FAULT_STATE, * NOK_PMI_HARD_FAULT_STATE;
typedef struct _NOK_MI_HUGE_PFN NOK_MI_HUGE_PFN, * NOK_PMI_HUGE_PFN;
typedef struct _NOK_MI_HUGE_SYSTEM_VIEW_HEAD NOK_MI_HUGE_SYSTEM_VIEW_HEAD, * NOK_PMI_HUGE_SYSTEM_VIEW_HEAD;
typedef struct _NOK_MI_IMAGE_SECURITY_REFERENCE NOK_MI_IMAGE_SECURITY_REFERENCE, * NOK_PMI_IMAGE_SECURITY_REFERENCE;
typedef struct _NOK_MI_IO_CACHE_STATS NOK_MI_IO_CACHE_STATS, * NOK_PMI_IO_CACHE_STATS;
typedef struct _NOK_MI_IO_PAGE_STATE NOK_MI_IO_PAGE_STATE, * NOK_PMI_IO_PAGE_STATE;
typedef struct _NOK_MI_LARGEPAGE_VAD_INFO NOK_MI_LARGEPAGE_VAD_INFO, * NOK_PMI_LARGEPAGE_VAD_INFO;
typedef struct _NOK_MI_LARGE_PAGE_LISTS_CHANGING NOK_MI_LARGE_PAGE_LISTS_CHANGING, * NOK_PMI_LARGE_PAGE_LISTS_CHANGING;
typedef struct _NOK_MI_LDW_WORK_CONTEXT NOK_MI_LDW_WORK_CONTEXT, * NOK_PMI_LDW_WORK_CONTEXT;
typedef struct _NOK_MI_MODWRITE_DATA NOK_MI_MODWRITE_DATA, * NOK_PMI_MODWRITE_DATA;
typedef struct _NOK_MI_NODE_INFORMATION NOK_MI_NODE_INFORMATION, * NOK_PMI_NODE_INFORMATION;
typedef struct _NOK_MI_NODE_NUMBER_ZERO_BASED NOK_MI_NODE_NUMBER_ZERO_BASED, * NOK_PMI_NODE_NUMBER_ZERO_BASED;
typedef struct _NOK_MI_PAGEFILE_BITMAPS_CACHE_ENTRY NOK_MI_PAGEFILE_BITMAPS_CACHE_ENTRY, * NOK_PMI_PAGEFILE_BITMAPS_CACHE_ENTRY;
typedef struct _NOK_MI_PAGEFILE_TRACES NOK_MI_PAGEFILE_TRACES, * NOK_PMI_PAGEFILE_TRACES;
typedef struct _NOK_MI_PAGELIST_STATE NOK_MI_PAGELIST_STATE, * NOK_PMI_PAGELIST_STATE;
typedef struct _NOK_MI_PAGE_COLORS NOK_MI_PAGE_COLORS, * NOK_PMI_PAGE_COLORS;
typedef struct _NOK_MI_PAGE_COMBINE_STATISTICS NOK_MI_PAGE_COMBINE_STATISTICS, * NOK_PMI_PAGE_COMBINE_STATISTICS;
typedef struct _NOK_MI_PAGE_COMBINING_SUPPORT NOK_MI_PAGE_COMBINING_SUPPORT, * NOK_PMI_PAGE_COMBINING_SUPPORT;
typedef struct _NOK_MI_PAGING_FILE_SPACE_BITMAPS NOK_MI_PAGING_FILE_SPACE_BITMAPS, * NOK_PMI_PAGING_FILE_SPACE_BITMAPS;
typedef struct _NOK_MI_PAGING_IO_STATE NOK_MI_PAGING_IO_STATE, * NOK_PMI_PAGING_IO_STATE;
typedef struct _NOK_MI_PARTITION NOK_MI_PARTITION, * NOK_PMI_PARTITION;
typedef struct _NOK_MI_PARTITION_COMMIT NOK_MI_PARTITION_COMMIT, * NOK_PMI_PARTITION_COMMIT;
typedef struct _NOK_MI_PARTITION_CORE NOK_MI_PARTITION_CORE, * NOK_PMI_PARTITION_CORE;
typedef struct _NOK_MI_PARTITION_FLAGS NOK_MI_PARTITION_FLAGS, * NOK_PMI_PARTITION_FLAGS;
typedef struct _NOK_MI_PARTITION_MODWRITES NOK_MI_PARTITION_MODWRITES, * NOK_PMI_PARTITION_MODWRITES;
typedef struct _NOK_MI_PARTITION_PAGE_LISTS NOK_MI_PARTITION_PAGE_LISTS, * NOK_PMI_PARTITION_PAGE_LISTS;
typedef struct _NOK_MI_PARTITION_SEGMENTS NOK_MI_PARTITION_SEGMENTS, * NOK_PMI_PARTITION_SEGMENTS;
typedef struct _NOK_MI_PARTITION_STATE NOK_MI_PARTITION_STATE, * NOK_PMI_PARTITION_STATE;
typedef struct _NOK_MI_PARTITION_STORES NOK_MI_PARTITION_STORES, * NOK_PMI_PARTITION_STORES;
typedef struct _NOK_MI_PARTITION_ZEROING NOK_MI_PARTITION_ZEROING, * NOK_PMI_PARTITION_ZEROING;
typedef struct _NOK_MI_PER_SESSION_PROTOS NOK_MI_PER_SESSION_PROTOS, * NOK_PMI_PER_SESSION_PROTOS;
typedef struct _NOK_MI_PHYSICAL_VIEW NOK_MI_PHYSICAL_VIEW, * NOK_PMI_PHYSICAL_VIEW;
typedef struct _NOK_MI_POOL_STATE NOK_MI_POOL_STATE, * NOK_PMI_POOL_STATE;
typedef struct _NOK_MI_PROBE_RAISE_TRACKER NOK_MI_PROBE_RAISE_TRACKER, * NOK_PMI_PROBE_RAISE_TRACKER;
typedef struct _NOK_MI_PROCESS_STATE NOK_MI_PROCESS_STATE, * NOK_PMI_PROCESS_STATE;
typedef struct _NOK_MI_PROTOTYPE_PTES_NODE NOK_MI_PROTOTYPE_PTES_NODE, * NOK_PMI_PROTOTYPE_PTES_NODE;
typedef struct _NOK_MI_PTE_CHAIN_HEAD NOK_MI_PTE_CHAIN_HEAD, * NOK_PMI_PTE_CHAIN_HEAD;
typedef struct _NOK_MI_REBUILD_LARGE_PAGE_TIMER NOK_MI_REBUILD_LARGE_PAGE_TIMER, * NOK_PMI_REBUILD_LARGE_PAGE_TIMER;
typedef struct _NOK_MI_RESAVAIL_FAILURES NOK_MI_RESAVAIL_FAILURES, * NOK_PMI_RESAVAIL_FAILURES;
typedef struct _NOK_MI_RESTRICTED_MODWRITES NOK_MI_RESTRICTED_MODWRITES, * NOK_PMI_RESTRICTED_MODWRITES;
typedef struct _NOK_MI_RESUME_WORKITEM NOK_MI_RESUME_WORKITEM, * NOK_PMI_RESUME_WORKITEM;
typedef struct _NOK_MI_REVERSE_VIEW_MAP NOK_MI_REVERSE_VIEW_MAP, * NOK_PMI_REVERSE_VIEW_MAP;
typedef struct _NOK_MI_SECTION_IMAGE_INFORMATION NOK_MI_SECTION_IMAGE_INFORMATION, * NOK_PMI_SECTION_IMAGE_INFORMATION;
typedef struct _NOK_MI_SECTION_STATE NOK_MI_SECTION_STATE, * NOK_PMI_SECTION_STATE;
typedef struct _NOK_MI_SECTION_WOW_STATE NOK_MI_SECTION_WOW_STATE, * NOK_PMI_SECTION_WOW_STATE;
typedef struct _NOK_MI_SESSION_DRIVER_UNLOAD NOK_MI_SESSION_DRIVER_UNLOAD, * NOK_PMI_SESSION_DRIVER_UNLOAD;
typedef struct _NOK_MI_SESSION_STATE NOK_MI_SESSION_STATE, * NOK_PMI_SESSION_STATE;
typedef struct _NOK_MI_SHUTDOWN_STATE NOK_MI_SHUTDOWN_STATE, * NOK_PMI_SHUTDOWN_STATE;
typedef struct _NOK_MI_SLAB_ALLOCATOR_CONTEXT NOK_MI_SLAB_ALLOCATOR_CONTEXT, * NOK_PMI_SLAB_ALLOCATOR_CONTEXT;
typedef struct _NOK_MI_SLAB_ALLOCATOR_ENTRY NOK_MI_SLAB_ALLOCATOR_ENTRY, * NOK_PMI_SLAB_ALLOCATOR_ENTRY;
typedef struct _NOK_MI_STANDBY_STATE NOK_MI_STANDBY_STATE, * NOK_PMI_STANDBY_STATE;
typedef struct _NOK_MI_STORE_INPAGE_COMPLETE_FLAGS NOK_MI_STORE_INPAGE_COMPLETE_FLAGS, * NOK_PMI_STORE_INPAGE_COMPLETE_FLAGS;
typedef struct _NOK_MI_SUB64K_FREE_RANGES NOK_MI_SUB64K_FREE_RANGES, * NOK_PMI_SUB64K_FREE_RANGES;
typedef struct _NOK_MI_SUBSECTION_ENTRY1 NOK_MI_SUBSECTION_ENTRY1, * NOK_PMI_SUBSECTION_ENTRY1;
typedef struct _NOK_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES NOK_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES, * NOK_PMI_SYSTEM_CACHE_VIEW_ATTRIBUTES;
typedef struct _NOK_MI_SYSTEM_IMAGE_STATE NOK_MI_SYSTEM_IMAGE_STATE, * NOK_PMI_SYSTEM_IMAGE_STATE;
typedef struct _NOK_MI_SYSTEM_INFORMATION NOK_MI_SYSTEM_INFORMATION, * NOK_PMI_SYSTEM_INFORMATION;
typedef struct _NOK_MI_SYSTEM_NODE_INFORMATION NOK_MI_SYSTEM_NODE_INFORMATION, * NOK_PMI_SYSTEM_NODE_INFORMATION;
typedef struct _NOK_MI_SYSTEM_PTE_STATE NOK_MI_SYSTEM_PTE_STATE, * NOK_PMI_SYSTEM_PTE_STATE;
typedef struct _NOK_MI_SYSTEM_PTE_TYPE NOK_MI_SYSTEM_PTE_TYPE, * NOK_PMI_SYSTEM_PTE_TYPE;
typedef struct _NOK_MI_SYSTEM_TRIM_STATE NOK_MI_SYSTEM_TRIM_STATE, * NOK_PMI_SYSTEM_TRIM_STATE;
typedef struct _NOK_MI_SYSTEM_VA_ASSIGNMENT NOK_MI_SYSTEM_VA_ASSIGNMENT, * NOK_PMI_SYSTEM_VA_ASSIGNMENT;
typedef struct _NOK_MI_SYSTEM_VA_STATE NOK_MI_SYSTEM_VA_STATE, * NOK_PMI_SYSTEM_VA_STATE;
typedef struct _NOK_MI_TRIAGE_DUMP_DATA NOK_MI_TRIAGE_DUMP_DATA, * NOK_PMI_TRIAGE_DUMP_DATA;
typedef struct _NOK_MI_ULTRA_MDL_NODE NOK_MI_ULTRA_MDL_NODE, * NOK_PMI_ULTRA_MDL_NODE;
typedef struct _NOK_MI_ULTRA_VA_CONTEXT NOK_MI_ULTRA_VA_CONTEXT, * NOK_PMI_ULTRA_VA_CONTEXT;
typedef struct _NOK_MI_VAD_EVENT_BLOCK NOK_MI_VAD_EVENT_BLOCK, * NOK_PMI_VAD_EVENT_BLOCK;
typedef struct _NOK_MI_VAD_SEQUENTIAL_INFO NOK_MI_VAD_SEQUENTIAL_INFO, * NOK_PMI_VAD_SEQUENTIAL_INFO;
typedef struct _NOK_MI_VISIBLE_PARTITION NOK_MI_VISIBLE_PARTITION, * NOK_PMI_VISIBLE_PARTITION;
typedef struct _NOK_MI_VISIBLE_STATE NOK_MI_VISIBLE_STATE, * NOK_PMI_VISIBLE_STATE;
typedef struct _NOK_MI_WRITE_CALIBRATION NOK_MI_WRITE_CALIBRATION, * NOK_PMI_WRITE_CALIBRATION;
typedef struct _NOK_MI_WRITE_MODES NOK_MI_WRITE_MODES, * NOK_PMI_WRITE_MODES;
typedef struct _NOK_MI_WSLE NOK_MI_WSLE, * NOK_PMI_WSLE;
typedef struct _NOK_MI_ZERO_COST_COUNTS NOK_MI_ZERO_COST_COUNTS, * NOK_PMI_ZERO_COST_COUNTS;
typedef struct _NOK_MI_ZERO_THREAD_CONTEXT NOK_MI_ZERO_THREAD_CONTEXT, * NOK_PMI_ZERO_THREAD_CONTEXT;
typedef struct _NOK_MMADDRESS_LIST NOK_MMADDRESS_LIST, * NOK_PMMADDRESS_LIST;
typedef struct _NOK_MMCLONE_BLOCK NOK_MMCLONE_BLOCK, * NOK_PMMCLONE_BLOCK;
typedef struct _NOK_MMCLONE_DESCRIPTOR NOK_MMCLONE_DESCRIPTOR, * NOK_PMMCLONE_DESCRIPTOR;
typedef struct _NOK_MMCLONE_HEADER NOK_MMCLONE_HEADER, * NOK_PMMCLONE_HEADER;
typedef struct _NOK_MMDEREFERENCE_SEGMENT_HEADER NOK_MMDEREFERENCE_SEGMENT_HEADER, * NOK_PMMDEREFERENCE_SEGMENT_HEADER;
typedef struct _NOK_MMEXTEND_INFO NOK_MMEXTEND_INFO, * NOK_PMMEXTEND_INFO;
typedef struct _NOK_MMINPAGE_FLAGS NOK_MMINPAGE_FLAGS, * NOK_PMMINPAGE_FLAGS;
typedef struct _NOK_MMINPAGE_SUPPORT NOK_MMINPAGE_SUPPORT, * NOK_PMMINPAGE_SUPPORT;
typedef struct _NOK_MMINPAGE_SUPPORT_FLOW_THROUGH NOK_MMINPAGE_SUPPORT_FLOW_THROUGH, * NOK_PMMINPAGE_SUPPORT_FLOW_THROUGH;
typedef struct _NOK_MMMOD_WRITER_LISTHEAD NOK_MMMOD_WRITER_LISTHEAD, * NOK_PMMMOD_WRITER_LISTHEAD;
typedef struct _NOK_MMMOD_WRITER_MDL_ENTRY NOK_MMMOD_WRITER_MDL_ENTRY, * NOK_PMMMOD_WRITER_MDL_ENTRY;
typedef struct _NOK_MMPAGE_FILE_EXPANSION NOK_MMPAGE_FILE_EXPANSION, * NOK_PMMPAGE_FILE_EXPANSION;
typedef struct _NOK_MMPAGE_FILE_EXPANSION_FLAGS NOK_MMPAGE_FILE_EXPANSION_FLAGS, * NOK_PMMPAGE_FILE_EXPANSION_FLAGS;
typedef struct _NOK_MMPAGING_FILE NOK_MMPAGING_FILE, * NOK_PMMPAGING_FILE;
typedef struct _NOK_MMPFN NOK_MMPFN, * NOK_PMMPFN;
typedef struct _NOK_MMPFNENTRY1 NOK_MMPFNENTRY1, * NOK_PMMPFNENTRY1;
typedef struct _NOK_MMPFNENTRY3 NOK_MMPFNENTRY3, * NOK_PMMPFNENTRY3;
typedef struct _NOK_MMPFNLIST NOK_MMPFNLIST, * NOK_PMMPFNLIST;
typedef struct _NOK_MMPFNLIST_SHORT NOK_MMPFNLIST_SHORT, * NOK_PMMPFNLIST_SHORT;
typedef struct _NOK_MMPTE NOK_MMPTE, * NOK_PMMPTE;
typedef struct _NOK_MMPTE_HARDWARE NOK_MMPTE_HARDWARE, * NOK_PMMPTE_HARDWARE;
typedef struct _NOK_MMPTE_LIST NOK_MMPTE_LIST, * NOK_PMMPTE_LIST;
typedef struct _NOK_MMPTE_PROTOTYPE NOK_MMPTE_PROTOTYPE, * NOK_PMMPTE_PROTOTYPE;
typedef struct _NOK_MMPTE_SOFTWARE NOK_MMPTE_SOFTWARE, * NOK_PMMPTE_SOFTWARE;
typedef struct _NOK_MMPTE_SUBSECTION NOK_MMPTE_SUBSECTION, * NOK_PMMPTE_SUBSECTION;
typedef struct _NOK_MMPTE_TIMESTAMP NOK_MMPTE_TIMESTAMP, * NOK_PMMPTE_TIMESTAMP;
typedef struct _NOK_MMPTE_TRANSITION NOK_MMPTE_TRANSITION, * NOK_PMMPTE_TRANSITION;
typedef struct _NOK_MMSECTION_FLAGS NOK_MMSECTION_FLAGS, * NOK_PMMSECTION_FLAGS;
typedef struct _NOK_MMSECTION_FLAGS2 NOK_MMSECTION_FLAGS2, * NOK_PMMSECTION_FLAGS2;
typedef struct _NOK_MMSECURE_FLAGS NOK_MMSECURE_FLAGS, * NOK_PMMSECURE_FLAGS;
typedef struct _NOK_MMSESSION NOK_MMSESSION, * NOK_PMMSESSION;
typedef struct _NOK_MMSUBSECTION_FLAGS NOK_MMSUBSECTION_FLAGS, * NOK_PMMSUBSECTION_FLAGS;
typedef struct _NOK_MMSUPPORT_AGGREGATION NOK_MMSUPPORT_AGGREGATION, * NOK_PMMSUPPORT_AGGREGATION;
typedef struct _NOK_MMSUPPORT_FLAGS NOK_MMSUPPORT_FLAGS, * NOK_PMMSUPPORT_FLAGS;
typedef struct _NOK_MMSUPPORT_FULL NOK_MMSUPPORT_FULL, * NOK_PMMSUPPORT_FULL;
typedef struct _NOK_MMSUPPORT_INSTANCE NOK_MMSUPPORT_INSTANCE, * NOK_PMMSUPPORT_INSTANCE;
typedef struct _NOK_MMSUPPORT_SHARED NOK_MMSUPPORT_SHARED, * NOK_PMMSUPPORT_SHARED;
typedef struct _NOK_MMVAD NOK_MMVAD, * NOK_PMMVAD;
typedef struct _NOK_MMVAD_FLAGS NOK_MMVAD_FLAGS, * NOK_PMMVAD_FLAGS;
typedef struct _NOK_MMVAD_FLAGS1 NOK_MMVAD_FLAGS1, * NOK_PMMVAD_FLAGS1;
typedef struct _NOK_MMVAD_FLAGS2 NOK_MMVAD_FLAGS2, * NOK_PMMVAD_FLAGS2;
typedef struct _NOK_MMVAD_SHORT NOK_MMVAD_SHORT, * NOK_PMMVAD_SHORT;
typedef struct _NOK_MMWORKING_SET_EXPANSION_HEAD NOK_MMWORKING_SET_EXPANSION_HEAD, * NOK_PMMWORKING_SET_EXPANSION_HEAD;
typedef struct _NOK_MMWSL_INSTANCE NOK_MMWSL_INSTANCE, * NOK_PMMWSL_INSTANCE;
typedef struct _NOK_MM_DRIVER_VERIFIER_DATA NOK_MM_DRIVER_VERIFIER_DATA, * NOK_PMM_DRIVER_VERIFIER_DATA;
typedef struct _NOK_MM_GRAPHICS_VAD_FLAGS NOK_MM_GRAPHICS_VAD_FLAGS, * NOK_PMM_GRAPHICS_VAD_FLAGS;
typedef struct _NOK_MM_PAGED_POOL_INFO NOK_MM_PAGED_POOL_INFO, * NOK_PMM_PAGED_POOL_INFO;
typedef struct _NOK_MM_PAGE_ACCESS_INFO NOK_MM_PAGE_ACCESS_INFO, * NOK_PMM_PAGE_ACCESS_INFO;
typedef struct _NOK_MM_PAGE_ACCESS_INFO_HEADER NOK_MM_PAGE_ACCESS_INFO_HEADER, * NOK_PMM_PAGE_ACCESS_INFO_HEADER;
typedef struct _NOK_MM_PRIVATE_VAD_FLAGS NOK_MM_PRIVATE_VAD_FLAGS, * NOK_PMM_PRIVATE_VAD_FLAGS;
typedef struct _NOK_MM_SESSION_SPACE NOK_MM_SESSION_SPACE, * NOK_PMM_SESSION_SPACE;
typedef struct _NOK_MM_SESSION_SPACE_FLAGS NOK_MM_SESSION_SPACE_FLAGS, * NOK_PMM_SESSION_SPACE_FLAGS;
typedef struct _NOK_MM_SHARED_VAD_FLAGS NOK_MM_SHARED_VAD_FLAGS, * NOK_PMM_SHARED_VAD_FLAGS;
typedef struct _NOK_MM_SYSTEM_PAGE_COUNTS NOK_MM_SYSTEM_PAGE_COUNTS, * NOK_PMM_SYSTEM_PAGE_COUNTS;
typedef struct _NOK_MODWRITER_FLAGS NOK_MODWRITER_FLAGS, * NOK_PMODWRITER_FLAGS;
typedef struct _NOK_MSUBSECTION NOK_MSUBSECTION, * NOK_PMSUBSECTION;
typedef struct _NOK_NAMED_PIPE_CREATE_PARAMETERS NOK_NAMED_PIPE_CREATE_PARAMETERS, * NOK_PNAMED_PIPE_CREATE_PARAMETERS;
typedef struct _NOK_NB10 NOK_NB10, * NOK_PNB10;
typedef struct _NOK_NETWORK_LOADER_BLOCK NOK_NETWORK_LOADER_BLOCK, * NOK_PNETWORK_LOADER_BLOCK;
typedef struct _NOK_NLS_DATA_BLOCK NOK_NLS_DATA_BLOCK, * NOK_PNLS_DATA_BLOCK;
typedef struct _NOK_NONOPAQUE_OPLOCK NOK_NONOPAQUE_OPLOCK, * NOK_PNONOPAQUE_OPLOCK;
typedef struct _NOK_NON_PAGED_DEBUG_INFO NOK_NON_PAGED_DEBUG_INFO, * NOK_PNON_PAGED_DEBUG_INFO;
typedef struct _NOK_NPAGED_LOOKASIDE_LIST NOK_NPAGED_LOOKASIDE_LIST, * NOK_PNPAGED_LOOKASIDE_LIST;
typedef struct _NOK_NT_TIB NOK_NT_TIB, * NOK_PNT_TIB;
typedef struct _NOK_NT_TIB32 NOK_NT_TIB32, * NOK_PNT_TIB32;
typedef struct _NOK_NT_TIB64 NOK_NT_TIB64, * NOK_PNT_TIB64;
typedef struct _NOK_NUMA_MEMORY_RANGE NOK_NUMA_MEMORY_RANGE, * NOK_PNUMA_MEMORY_RANGE;
typedef struct _NOK_OBJECT_ATTRIBUTES NOK_OBJECT_ATTRIBUTES, * NOK_POBJECT_ATTRIBUTES;
typedef struct _NOK_OBJECT_CREATE_INFORMATION NOK_OBJECT_CREATE_INFORMATION, * NOK_POBJECT_CREATE_INFORMATION;
typedef struct _NOK_OBJECT_DIRECTORY NOK_OBJECT_DIRECTORY, * NOK_POBJECT_DIRECTORY;
typedef struct _NOK_OBJECT_DIRECTORY_ENTRY NOK_OBJECT_DIRECTORY_ENTRY, * NOK_POBJECT_DIRECTORY_ENTRY;
typedef struct _NOK_OBJECT_DUMP_CONTROL NOK_OBJECT_DUMP_CONTROL, * NOK_POBJECT_DUMP_CONTROL;
typedef struct _NOK_OBJECT_FOOTER NOK_OBJECT_FOOTER, * NOK_POBJECT_FOOTER;
typedef struct _NOK_OBJECT_HANDLE_COUNT_DATABASE NOK_OBJECT_HANDLE_COUNT_DATABASE, * NOK_POBJECT_HANDLE_COUNT_DATABASE;
typedef struct _NOK_OBJECT_HANDLE_COUNT_ENTRY NOK_OBJECT_HANDLE_COUNT_ENTRY, * NOK_POBJECT_HANDLE_COUNT_ENTRY;
typedef struct _NOK_OBJECT_HANDLE_INFORMATION NOK_OBJECT_HANDLE_INFORMATION, * NOK_POBJECT_HANDLE_INFORMATION;
typedef struct _NOK_OBJECT_HEADER NOK_OBJECT_HEADER, * NOK_POBJECT_HEADER;
typedef struct _NOK_OBJECT_HEADER_AUDIT_INFO NOK_OBJECT_HEADER_AUDIT_INFO, * NOK_POBJECT_HEADER_AUDIT_INFO;
typedef struct _NOK_OBJECT_HEADER_CREATOR_INFO NOK_OBJECT_HEADER_CREATOR_INFO, * NOK_POBJECT_HEADER_CREATOR_INFO;
typedef struct _NOK_OBJECT_HEADER_EXTENDED_INFO NOK_OBJECT_HEADER_EXTENDED_INFO, * NOK_POBJECT_HEADER_EXTENDED_INFO;
typedef struct _NOK_OBJECT_HEADER_HANDLE_INFO NOK_OBJECT_HEADER_HANDLE_INFO, * NOK_POBJECT_HEADER_HANDLE_INFO;
typedef struct _NOK_OBJECT_HEADER_NAME_INFO NOK_OBJECT_HEADER_NAME_INFO, * NOK_POBJECT_HEADER_NAME_INFO;
typedef struct _NOK_OBJECT_HEADER_PADDING_INFO NOK_OBJECT_HEADER_PADDING_INFO, * NOK_POBJECT_HEADER_PADDING_INFO;
typedef struct _NOK_OBJECT_HEADER_PROCESS_INFO NOK_OBJECT_HEADER_PROCESS_INFO, * NOK_POBJECT_HEADER_PROCESS_INFO;
typedef struct _NOK_OBJECT_HEADER_QUOTA_INFO NOK_OBJECT_HEADER_QUOTA_INFO, * NOK_POBJECT_HEADER_QUOTA_INFO;
typedef struct _NOK_OBJECT_NAMESPACE_LOOKUPTABLE NOK_OBJECT_NAMESPACE_LOOKUPTABLE, * NOK_POBJECT_NAMESPACE_LOOKUPTABLE;
typedef struct _NOK_OBJECT_NAME_INFORMATION NOK_OBJECT_NAME_INFORMATION, * NOK_POBJECT_NAME_INFORMATION;
typedef struct _NOK_OBJECT_REF_INFO NOK_OBJECT_REF_INFO, * NOK_POBJECT_REF_INFO;
typedef struct _NOK_OBJECT_REF_STACK_INFO NOK_OBJECT_REF_STACK_INFO, * NOK_POBJECT_REF_STACK_INFO;
typedef struct _NOK_OBJECT_REF_TRACE NOK_OBJECT_REF_TRACE, * NOK_POBJECT_REF_TRACE;
typedef struct _NOK_OBJECT_SYMBOLIC_LINK NOK_OBJECT_SYMBOLIC_LINK, * NOK_POBJECT_SYMBOLIC_LINK;
typedef struct _NOK_OBJECT_TYPE NOK_OBJECT_TYPE, * NOK_POBJECT_TYPE;
typedef struct _NOK_OBJECT_TYPE_INITIALIZER NOK_OBJECT_TYPE_INITIALIZER, * NOK_POBJECT_TYPE_INITIALIZER;
typedef struct _NOK_OBP_LOOKUP_CONTEXT NOK_OBP_LOOKUP_CONTEXT, * NOK_POBP_LOOKUP_CONTEXT;
typedef struct _NOK_OBP_SILODRIVERSTATE NOK_OBP_SILODRIVERSTATE, * NOK_POBP_SILODRIVERSTATE;
typedef struct _NOK_OBP_SYSTEM_DOS_DEVICE_STATE NOK_OBP_SYSTEM_DOS_DEVICE_STATE, * NOK_POBP_SYSTEM_DOS_DEVICE_STATE;
typedef struct _NOK_OB_DUPLICATE_OBJECT_STATE NOK_OB_DUPLICATE_OBJECT_STATE, * NOK_POB_DUPLICATE_OBJECT_STATE;
typedef struct _NOK_OB_EXTENDED_PARSE_PARAMETERS NOK_OB_EXTENDED_PARSE_PARAMETERS, * NOK_POB_EXTENDED_PARSE_PARAMETERS;
typedef struct _NOK_OB_EXTENDED_USER_INFO NOK_OB_EXTENDED_USER_INFO, * NOK_POB_EXTENDED_USER_INFO;
typedef struct _NOK_OB_HANDLE_REVOCATION_BLOCK NOK_OB_HANDLE_REVOCATION_BLOCK, * NOK_POB_HANDLE_REVOCATION_BLOCK;
typedef struct _NOK_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 NOK_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2, * NOK_POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
typedef struct _NOK_OPEN_PACKET NOK_OPEN_PACKET, * NOK_POPEN_PACKET;
typedef struct _NOK_OWNER_ENTRY NOK_OWNER_ENTRY, * NOK_POWNER_ENTRY;
typedef struct _NOK_PAGED_LOOKASIDE_LIST NOK_PAGED_LOOKASIDE_LIST, * NOK_PPAGED_LOOKASIDE_LIST;
typedef struct _NOK_PAGEFAULT_HISTORY NOK_PAGEFAULT_HISTORY, * NOK_PPAGEFAULT_HISTORY;
typedef struct _NOK_PALPC_PORT_REFERENCE_WAIT_BLOCK NOK_PALPC_PORT_REFERENCE_WAIT_BLOCK, * NOK_PPALPC_PORT_REFERENCE_WAIT_BLOCK;
typedef struct _NOK_PCAT_FIRMWARE_INFORMATION NOK_PCAT_FIRMWARE_INFORMATION, * NOK_PPCAT_FIRMWARE_INFORMATION;
typedef struct _NOK_PCI_BUSMASTER_DESCRIPTOR NOK_PCI_BUSMASTER_DESCRIPTOR, * NOK_PPCI_BUSMASTER_DESCRIPTOR;
typedef struct _NOK_PCW_BUFFER NOK_PCW_BUFFER, * NOK_PPCW_BUFFER;
typedef struct _NOK_PCW_COUNTER_DESCRIPTOR NOK_PCW_COUNTER_DESCRIPTOR, * NOK_PPCW_COUNTER_DESCRIPTOR;
typedef struct _NOK_PCW_COUNTER_INFORMATION NOK_PCW_COUNTER_INFORMATION, * NOK_PPCW_COUNTER_INFORMATION;
typedef struct _NOK_PCW_DATA NOK_PCW_DATA, * NOK_PPCW_DATA;
typedef struct _NOK_PCW_INSTANCE NOK_PCW_INSTANCE, * NOK_PPCW_INSTANCE;
typedef struct _NOK_PCW_MASK_INFORMATION NOK_PCW_MASK_INFORMATION, * NOK_PPCW_MASK_INFORMATION;
typedef struct _NOK_PCW_PROCESSOR_INFO NOK_PCW_PROCESSOR_INFO, * NOK_PPCW_PROCESSOR_INFO;
typedef struct _NOK_PCW_REGISTRATION NOK_PCW_REGISTRATION, * NOK_PPCW_REGISTRATION;
typedef struct _NOK_PCW_REGISTRATION_INFORMATION NOK_PCW_REGISTRATION_INFORMATION, * NOK_PPCW_REGISTRATION_INFORMATION;
typedef struct _NOK_PEB NOK_PEB, * NOK_PPEB;
typedef struct _NOK_PEB32 NOK_PEB32, * NOK_PPEB32;
typedef struct _NOK_PEB64 NOK_PEB64, * NOK_PPEB64;
typedef struct _NOK_PEBS_DS_SAVE_AREA NOK_PEBS_DS_SAVE_AREA, * NOK_PPEBS_DS_SAVE_AREA;
typedef struct _NOK_PEBS_DS_SAVE_AREA32 NOK_PEBS_DS_SAVE_AREA32, * NOK_PPEBS_DS_SAVE_AREA32;
typedef struct _NOK_PEBS_DS_SAVE_AREA64 NOK_PEBS_DS_SAVE_AREA64, * NOK_PPEBS_DS_SAVE_AREA64;
typedef struct _NOK_PEB_LDR_DATA NOK_PEB_LDR_DATA, * NOK_PPEB_LDR_DATA;
typedef struct _NOK_PENDING_RELATIONS_LIST_ENTRY NOK_PENDING_RELATIONS_LIST_ENTRY, * NOK_PPENDING_RELATIONS_LIST_ENTRY;
typedef struct _NOK_PEP_ACPI_EXTENDED_ADDRESS NOK_PEP_ACPI_EXTENDED_ADDRESS, * NOK_PPEP_ACPI_EXTENDED_ADDRESS;
typedef struct _NOK_PEP_ACPI_GPIO_RESOURCE NOK_PEP_ACPI_GPIO_RESOURCE, * NOK_PPEP_ACPI_GPIO_RESOURCE;
typedef struct _NOK_PEP_ACPI_INTERRUPT_RESOURCE NOK_PEP_ACPI_INTERRUPT_RESOURCE, * NOK_PPEP_ACPI_INTERRUPT_RESOURCE;
typedef struct _NOK_PEP_ACPI_IO_MEMORY_RESOURCE NOK_PEP_ACPI_IO_MEMORY_RESOURCE, * NOK_PPEP_ACPI_IO_MEMORY_RESOURCE;
typedef struct _NOK_PEP_ACPI_SPB_I2C_RESOURCE NOK_PEP_ACPI_SPB_I2C_RESOURCE, * NOK_PPEP_ACPI_SPB_I2C_RESOURCE;
typedef struct _NOK_PEP_ACPI_SPB_RESOURCE NOK_PEP_ACPI_SPB_RESOURCE, * NOK_PPEP_ACPI_SPB_RESOURCE;
typedef struct _NOK_PEP_ACPI_SPB_SPI_RESOURCE NOK_PEP_ACPI_SPB_SPI_RESOURCE, * NOK_PPEP_ACPI_SPB_SPI_RESOURCE;
typedef struct _NOK_PEP_ACPI_SPB_UART_RESOURCE NOK_PEP_ACPI_SPB_UART_RESOURCE, * NOK_PPEP_ACPI_SPB_UART_RESOURCE;
typedef struct _NOK_PEP_CRASHDUMP_INFORMATION NOK_PEP_CRASHDUMP_INFORMATION, * NOK_PPEP_CRASHDUMP_INFORMATION;
typedef struct _NOK_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE NOK_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE, * NOK_PPEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;
typedef struct _NOK_PEP_WORK_ACPI_NOTIFY NOK_PEP_WORK_ACPI_NOTIFY, * NOK_PPEP_WORK_ACPI_NOTIFY;
typedef struct _NOK_PEP_WORK_ACTIVE_COMPLETE NOK_PEP_WORK_ACTIVE_COMPLETE, * NOK_PPEP_WORK_ACTIVE_COMPLETE;
typedef struct _NOK_PEP_WORK_COMPLETE_IDLE_STATE NOK_PEP_WORK_COMPLETE_IDLE_STATE, * NOK_PPEP_WORK_COMPLETE_IDLE_STATE;
typedef struct _NOK_PEP_WORK_COMPLETE_PERF_STATE NOK_PEP_WORK_COMPLETE_PERF_STATE, * NOK_PPEP_WORK_COMPLETE_PERF_STATE;
typedef struct _NOK_PEP_WORK_DEVICE_IDLE NOK_PEP_WORK_DEVICE_IDLE, * NOK_PPEP_WORK_DEVICE_IDLE;
typedef struct _NOK_PEP_WORK_DEVICE_POWER NOK_PEP_WORK_DEVICE_POWER, * NOK_PPEP_WORK_DEVICE_POWER;
typedef struct _NOK_PEP_WORK_IDLE_STATE NOK_PEP_WORK_IDLE_STATE, * NOK_PPEP_WORK_IDLE_STATE;
typedef struct _NOK_PEP_WORK_INFORMATION NOK_PEP_WORK_INFORMATION, * NOK_PPEP_WORK_INFORMATION;
typedef struct _NOK_PEP_WORK_POWER_CONTROL NOK_PEP_WORK_POWER_CONTROL, * NOK_PPEP_WORK_POWER_CONTROL;
typedef struct _NOK_PERFINFO_GROUPMASK NOK_PERFINFO_GROUPMASK, * NOK_PPERFINFO_GROUPMASK;
typedef struct _NOK_PERFINFO_PPM_STATE_SELECTION NOK_PERFINFO_PPM_STATE_SELECTION, * NOK_PPERFINFO_PPM_STATE_SELECTION;
typedef struct _NOK_PERF_CONTROL_STATE_SELECTION NOK_PERF_CONTROL_STATE_SELECTION, * NOK_PPERF_CONTROL_STATE_SELECTION;
typedef struct _NOK_PERIODIC_CAPTURE_STATE_GUIDS NOK_PERIODIC_CAPTURE_STATE_GUIDS, * NOK_PPERIODIC_CAPTURE_STATE_GUIDS;
typedef struct _NOK_PF_KERNEL_GLOBALS NOK_PF_KERNEL_GLOBALS, * NOK_PPF_KERNEL_GLOBALS;
typedef struct _NOK_PHYSICAL_MEMORY_DESCRIPTOR NOK_PHYSICAL_MEMORY_DESCRIPTOR, * NOK_PPHYSICAL_MEMORY_DESCRIPTOR;
typedef struct _NOK_PHYSICAL_MEMORY_RUN NOK_PHYSICAL_MEMORY_RUN, * NOK_PPHYSICAL_MEMORY_RUN;
typedef struct _NOK_PI_BUS_EXTENSION NOK_PI_BUS_EXTENSION, * NOK_PPI_BUS_EXTENSION;
typedef struct _NOK_PI_RESOURCE_ARBITER_ENTRY NOK_PI_RESOURCE_ARBITER_ENTRY, * NOK_PPI_RESOURCE_ARBITER_ENTRY;
typedef struct _NOK_PLATFORM_IDLE_ACCOUNTING NOK_PLATFORM_IDLE_ACCOUNTING, * NOK_PPLATFORM_IDLE_ACCOUNTING;
typedef struct _NOK_PLATFORM_IDLE_STATE_ACCOUNTING NOK_PLATFORM_IDLE_STATE_ACCOUNTING, * NOK_PPLATFORM_IDLE_STATE_ACCOUNTING;
typedef struct _NOK_PLATFORM_INTERRUPT NOK_PLATFORM_INTERRUPT, * NOK_PPLATFORM_INTERRUPT;
typedef struct _NOK_PLUGPLAY_EVENT_BLOCK NOK_PLUGPLAY_EVENT_BLOCK, * NOK_PPLUGPLAY_EVENT_BLOCK;
typedef struct _NOK_PNP_ASSIGN_RESOURCES_CONTEXT NOK_PNP_ASSIGN_RESOURCES_CONTEXT, * NOK_PPNP_ASSIGN_RESOURCES_CONTEXT;
typedef struct _NOK_PNP_DEVICE_ACTION_ENTRY NOK_PNP_DEVICE_ACTION_ENTRY, * NOK_PPNP_DEVICE_ACTION_ENTRY;
typedef struct _NOK_PNP_DEVICE_COMPLETION_QUEUE NOK_PNP_DEVICE_COMPLETION_QUEUE, * NOK_PPNP_DEVICE_COMPLETION_QUEUE;
typedef struct _NOK_PNP_DEVICE_COMPLETION_REQUEST NOK_PNP_DEVICE_COMPLETION_REQUEST, * NOK_PPNP_DEVICE_COMPLETION_REQUEST;
typedef struct _NOK_PNP_DEVICE_EVENT_ENTRY NOK_PNP_DEVICE_EVENT_ENTRY, * NOK_PPNP_DEVICE_EVENT_ENTRY;
typedef struct _NOK_PNP_DEVICE_EVENT_LIST NOK_PNP_DEVICE_EVENT_LIST, * NOK_PPNP_DEVICE_EVENT_LIST;
typedef struct _NOK_PNP_REBALANCE_TRACE_CONTEXT NOK_PNP_REBALANCE_TRACE_CONTEXT, * NOK_PPNP_REBALANCE_TRACE_CONTEXT;
typedef struct _NOK_PNP_REPLACE_PROCESSOR_LIST NOK_PNP_REPLACE_PROCESSOR_LIST, * NOK_PPNP_REPLACE_PROCESSOR_LIST;
typedef struct _NOK_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT NOK_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT, * NOK_PPNP_RESOURCE_CONFLICT_TRACE_CONTEXT;
typedef struct _NOK_PNP_RESOURCE_REQUEST NOK_PNP_RESOURCE_REQUEST, * NOK_PPNP_RESOURCE_REQUEST;
typedef struct _NOK_PNP_WATCHDOG NOK_PNP_WATCHDOG, * NOK_PPNP_WATCHDOG;
typedef struct _NOK_POOL_HEADER NOK_POOL_HEADER, * NOK_PPOOL_HEADER;
typedef struct _NOK_POOL_TRACKER_BIG_PAGES NOK_POOL_TRACKER_BIG_PAGES, * NOK_PPOOL_TRACKER_BIG_PAGES;
typedef struct _NOK_POOL_TRACKER_TABLE NOK_POOL_TRACKER_TABLE, * NOK_PPOOL_TRACKER_TABLE;
typedef struct _NOK_POP_ACTION_TRIGGER NOK_POP_ACTION_TRIGGER, * NOK_PPOP_ACTION_TRIGGER;
typedef struct _NOK_POP_COMPONENT_POWER_PROFILE NOK_POP_COMPONENT_POWER_PROFILE, * NOK_PPOP_COMPONENT_POWER_PROFILE;
typedef struct _NOK_POP_COOLING_EXTENSION NOK_POP_COOLING_EXTENSION, * NOK_PPOP_COOLING_EXTENSION;
typedef struct _NOK_POP_CURRENT_BROADCAST NOK_POP_CURRENT_BROADCAST, * NOK_PPOP_CURRENT_BROADCAST;
typedef struct _NOK_POP_DEVICE_POWER_PROFILE NOK_POP_DEVICE_POWER_PROFILE, * NOK_PPOP_DEVICE_POWER_PROFILE;
typedef struct _NOK_POP_DEVICE_SYS_STATE NOK_POP_DEVICE_SYS_STATE, * NOK_PPOP_DEVICE_SYS_STATE;
typedef struct _NOK_POP_FX_ACCOUNTING NOK_POP_FX_ACCOUNTING, * NOK_PPOP_FX_ACCOUNTING;
typedef struct _NOK_POP_FX_ACTIVE_TIME_ACCOUNTING NOK_POP_FX_ACTIVE_TIME_ACCOUNTING, * NOK_PPOP_FX_ACTIVE_TIME_ACCOUNTING;
typedef struct _NOK_POP_FX_COMPONENT NOK_POP_FX_COMPONENT, * NOK_PPOP_FX_COMPONENT;
typedef struct _NOK_POP_FX_DEPENDENT NOK_POP_FX_DEPENDENT, * NOK_PPOP_FX_DEPENDENT;
typedef struct _NOK_POP_FX_DEVICE NOK_POP_FX_DEVICE, * NOK_PPOP_FX_DEVICE;
typedef struct _NOK_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE NOK_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE, * NOK_PPOP_FX_DEVICE_DIRECTED_TRANSITION_STATE;
typedef struct _NOK_POP_FX_DRIPS_WATCHDOG_CONTEXT NOK_POP_FX_DRIPS_WATCHDOG_CONTEXT, * NOK_PPOP_FX_DRIPS_WATCHDOG_CONTEXT;
typedef struct _NOK_POP_FX_DRIVER_CALLBACKS NOK_POP_FX_DRIVER_CALLBACKS, * NOK_PPOP_FX_DRIVER_CALLBACKS;
typedef struct _NOK_POP_FX_IDLE_STATE NOK_POP_FX_IDLE_STATE, * NOK_PPOP_FX_IDLE_STATE;
typedef struct _NOK_POP_FX_LOG_ENTRY NOK_POP_FX_LOG_ENTRY, * NOK_PPOP_FX_LOG_ENTRY;
typedef struct _NOK_POP_FX_PERF_INFO NOK_POP_FX_PERF_INFO, * NOK_PPOP_FX_PERF_INFO;
typedef struct _NOK_POP_FX_PERF_SET NOK_POP_FX_PERF_SET, * NOK_PPOP_FX_PERF_SET;
typedef struct _NOK_POP_FX_PLUGIN NOK_POP_FX_PLUGIN, * NOK_PPOP_FX_PLUGIN;
typedef struct _NOK_POP_FX_PROVIDER NOK_POP_FX_PROVIDER, * NOK_PPOP_FX_PROVIDER;
typedef struct _NOK_POP_FX_WORK_ORDER NOK_POP_FX_WORK_ORDER, * NOK_PPOP_FX_WORK_ORDER;
typedef struct _NOK_POP_FX_WORK_ORDER_WATCHDOG_INFO NOK_POP_FX_WORK_ORDER_WATCHDOG_INFO, * NOK_PPOP_FX_WORK_ORDER_WATCHDOG_INFO;
typedef struct _NOK_POP_FX_WORK_POOL NOK_POP_FX_WORK_POOL, * NOK_PPOP_FX_WORK_POOL;
typedef struct _NOK_POP_FX_WORK_POOL_ITEM NOK_POP_FX_WORK_POOL_ITEM, * NOK_PPOP_FX_WORK_POOL_ITEM;
typedef struct _NOK_POP_HIBER_CONTEXT NOK_POP_HIBER_CONTEXT, * NOK_PPOP_HIBER_CONTEXT;
typedef struct _NOK_POP_IO_INFO NOK_POP_IO_INFO, * NOK_PPOP_IO_INFO;
typedef struct _NOK_POP_IRP_DATA NOK_POP_IRP_DATA, * NOK_PPOP_IRP_DATA;
typedef struct _NOK_POP_IRP_WORKER_ENTRY NOK_POP_IRP_WORKER_ENTRY, * NOK_PPOP_IRP_WORKER_ENTRY;
typedef struct _NOK_POP_PER_PROCESSOR_CONTEXT NOK_POP_PER_PROCESSOR_CONTEXT, * NOK_PPOP_PER_PROCESSOR_CONTEXT;
typedef struct _NOK_POP_POLICY_DEVICE NOK_POP_POLICY_DEVICE, * NOK_PPOP_POLICY_DEVICE;
typedef struct _NOK_POP_POWER_ACTION NOK_POP_POWER_ACTION, * NOK_PPOP_POWER_ACTION;
typedef struct _NOK_POP_POWER_PLANE NOK_POP_POWER_PLANE, * NOK_PPOP_POWER_PLANE;
typedef struct _NOK_POP_POWER_SETTING_VALUES NOK_POP_POWER_SETTING_VALUES, * NOK_PPOP_POWER_SETTING_VALUES;
typedef struct _NOK_POP_PPM_PROFILE NOK_POP_PPM_PROFILE, * NOK_PPOP_PPM_PROFILE;
typedef struct _NOK_POP_RW_LOCK NOK_POP_RW_LOCK, * NOK_PPOP_RW_LOCK;
typedef struct _NOK_POP_SHUTDOWN_BUG_CHECK NOK_POP_SHUTDOWN_BUG_CHECK, * NOK_PPOP_SHUTDOWN_BUG_CHECK;
typedef struct _NOK_POP_THERMAL_TELEMETRY_TRACKER NOK_POP_THERMAL_TELEMETRY_TRACKER, * NOK_PPOP_THERMAL_TELEMETRY_TRACKER;
typedef struct _NOK_POP_THERMAL_ZONE NOK_POP_THERMAL_ZONE, * NOK_PPOP_THERMAL_ZONE;
typedef struct _NOK_POP_TRIGGER_WAIT NOK_POP_TRIGGER_WAIT, * NOK_PPOP_TRIGGER_WAIT;
typedef struct _NOK_PORT_MESSAGE NOK_PORT_MESSAGE, * NOK_PPORT_MESSAGE;
typedef struct _NOK_PORT_MESSAGE32 NOK_PORT_MESSAGE32, * NOK_PPORT_MESSAGE32;
typedef struct _NOK_POWER_SEQUENCE NOK_POWER_SEQUENCE, * NOK_PPOWER_SEQUENCE;
typedef struct _NOK_PO_DEVICE_NOTIFY NOK_PO_DEVICE_NOTIFY, * NOK_PPO_DEVICE_NOTIFY;
typedef struct _NOK_PO_DEVICE_NOTIFY_ORDER NOK_PO_DEVICE_NOTIFY_ORDER, * NOK_PPO_DEVICE_NOTIFY_ORDER;
typedef struct _NOK_PO_DIAG_STACK_RECORD NOK_PO_DIAG_STACK_RECORD, * NOK_PPO_DIAG_STACK_RECORD;
typedef struct _NOK_PO_DIRECTED_DRIPS_STATE NOK_PO_DIRECTED_DRIPS_STATE, * NOK_PPO_DIRECTED_DRIPS_STATE;
typedef struct _NOK_PO_FX_COMPONENT_PERF_SET NOK_PO_FX_COMPONENT_PERF_SET, * NOK_PPO_FX_COMPONENT_PERF_SET;
typedef struct _NOK_PO_FX_PERF_STATE NOK_PO_FX_PERF_STATE, * NOK_PPO_FX_PERF_STATE;
typedef struct _NOK_PO_FX_PERF_STATE_CHANGE NOK_PO_FX_PERF_STATE_CHANGE, * NOK_PPO_FX_PERF_STATE_CHANGE;
typedef struct _NOK_PO_HIBER_PERF NOK_PO_HIBER_PERF, * NOK_PPO_HIBER_PERF;
typedef struct _NOK_PO_IRP_MANAGER NOK_PO_IRP_MANAGER, * NOK_PPO_IRP_MANAGER;
typedef struct _NOK_PO_IRP_QUEUE NOK_PO_IRP_QUEUE, * NOK_PPO_IRP_QUEUE;
typedef struct _NOK_PO_NOTIFY_ORDER_LEVEL NOK_PO_NOTIFY_ORDER_LEVEL, * NOK_PPO_NOTIFY_ORDER_LEVEL;
typedef struct _NOK_PO_POWER_PLANE_PROFILE NOK_PO_POWER_PLANE_PROFILE, * NOK_PPO_POWER_PLANE_PROFILE;
typedef struct _NOK_PO_PROCESS_ENERGY_CONTEXT NOK_PO_PROCESS_ENERGY_CONTEXT, * NOK_PPO_PROCESS_ENERGY_CONTEXT;
typedef struct _NOK_PPC_DBGKD_CONTROL_SET NOK_PPC_DBGKD_CONTROL_SET, * NOK_PPPC_DBGKD_CONTROL_SET;
typedef struct _NOK_PPM_CONCURRENCY_ACCOUNTING NOK_PPM_CONCURRENCY_ACCOUNTING, * NOK_PPPM_CONCURRENCY_ACCOUNTING;
typedef struct _NOK_PPM_COORDINATED_SELECTION NOK_PPM_COORDINATED_SELECTION, * NOK_PPPM_COORDINATED_SELECTION;
typedef struct _NOK_PPM_ENGINE_SETTINGS NOK_PPM_ENGINE_SETTINGS, * NOK_PPPM_ENGINE_SETTINGS;
typedef struct _NOK_PPM_FFH_THROTTLE_STATE_INFO NOK_PPM_FFH_THROTTLE_STATE_INFO, * NOK_PPPM_FFH_THROTTLE_STATE_INFO;
typedef struct _NOK_PPM_IDLE_STATE NOK_PPM_IDLE_STATE, * NOK_PPPM_IDLE_STATE;
typedef struct _NOK_PPM_IDLE_STATES NOK_PPM_IDLE_STATES, * NOK_PPPM_IDLE_STATES;
typedef struct _NOK_PPM_PLATFORM_STATE NOK_PPM_PLATFORM_STATE, * NOK_PPPM_PLATFORM_STATE;
typedef struct _NOK_PPM_PLATFORM_STATES NOK_PPM_PLATFORM_STATES, * NOK_PPPM_PLATFORM_STATES;
typedef struct _NOK_PPM_SELECTION_DEPENDENCY NOK_PPM_SELECTION_DEPENDENCY, * NOK_PPPM_SELECTION_DEPENDENCY;
typedef struct _NOK_PPM_SELECTION_MENU NOK_PPM_SELECTION_MENU, * NOK_PPPM_SELECTION_MENU;
typedef struct _NOK_PPM_SELECTION_MENU_ENTRY NOK_PPM_SELECTION_MENU_ENTRY, * NOK_PPPM_SELECTION_MENU_ENTRY;
typedef struct _NOK_PPM_SELECTION_STATISTICS NOK_PPM_SELECTION_STATISTICS, * NOK_PPPM_SELECTION_STATISTICS;
typedef struct _NOK_PPM_VETO_ACCOUNTING NOK_PPM_VETO_ACCOUNTING, * NOK_PPPM_VETO_ACCOUNTING;
typedef struct _NOK_PPM_VETO_ENTRY NOK_PPM_VETO_ENTRY, * NOK_PPPM_VETO_ENTRY;
typedef struct _NOK_PP_LOOKASIDE_LIST NOK_PP_LOOKASIDE_LIST, * NOK_PPP_LOOKASIDE_LIST;
typedef struct _NOK_PRIVATE_CACHE_MAP NOK_PRIVATE_CACHE_MAP, * NOK_PPRIVATE_CACHE_MAP;
typedef struct _NOK_PRIVATE_CACHE_MAP_FLAGS NOK_PRIVATE_CACHE_MAP_FLAGS, * NOK_PPRIVATE_CACHE_MAP_FLAGS;
typedef struct _NOK_PRIVILEGE_SET NOK_PRIVILEGE_SET, * NOK_PPRIVILEGE_SET;
typedef struct _NOK_PROCESSOR_IDLE_CONSTRAINTS NOK_PROCESSOR_IDLE_CONSTRAINTS, * NOK_PPROCESSOR_IDLE_CONSTRAINTS;
typedef struct _NOK_PROCESSOR_IDLE_DEPENDENCY NOK_PROCESSOR_IDLE_DEPENDENCY, * NOK_PPROCESSOR_IDLE_DEPENDENCY;
typedef struct _NOK_PROCESSOR_IDLE_PREPARE_INFO NOK_PROCESSOR_IDLE_PREPARE_INFO, * NOK_PPROCESSOR_IDLE_PREPARE_INFO;
typedef struct _NOK_PROCESSOR_NUMBER NOK_PROCESSOR_NUMBER, * NOK_PPROCESSOR_NUMBER;
typedef struct _NOK_PROCESSOR_PLATFORM_STATE_RESIDENCIES NOK_PROCESSOR_PLATFORM_STATE_RESIDENCIES, * NOK_PPROCESSOR_PLATFORM_STATE_RESIDENCIES;
typedef struct _NOK_PROCESSOR_PLATFORM_STATE_RESIDENCY NOK_PROCESSOR_PLATFORM_STATE_RESIDENCY, * NOK_PPROCESSOR_PLATFORM_STATE_RESIDENCY;
typedef struct _NOK_PROCESSOR_POWER_STATE NOK_PROCESSOR_POWER_STATE, * NOK_PPROCESSOR_POWER_STATE;
typedef struct _NOK_PROCESSOR_PROFILE_CONTROL_AREA NOK_PROCESSOR_PROFILE_CONTROL_AREA, * NOK_PPROCESSOR_PROFILE_CONTROL_AREA;
typedef struct _NOK_PROCESS_DISK_COUNTERS NOK_PROCESS_DISK_COUNTERS, * NOK_PPROCESS_DISK_COUNTERS;
typedef struct _NOK_PROCESS_ENERGY_VALUES NOK_PROCESS_ENERGY_VALUES, * NOK_PPROCESS_ENERGY_VALUES;
typedef struct _NOK_PROCESS_ENERGY_VALUES_EXTENSION NOK_PROCESS_ENERGY_VALUES_EXTENSION, * NOK_PPROCESS_ENERGY_VALUES_EXTENSION;
typedef struct _NOK_PROCESS_EXTENDED_ENERGY_VALUES NOK_PROCESS_EXTENDED_ENERGY_VALUES, * NOK_PPROCESS_EXTENDED_ENERGY_VALUES;
typedef struct _NOK_PROCLOCALAPIC NOK_PROCLOCALAPIC, * NOK_PPROCLOCALAPIC;
typedef struct _NOK_PROCLOCALSAPIC NOK_PROCLOCALSAPIC, * NOK_PPROCLOCALSAPIC;
typedef struct _NOK_PROC_FEEDBACK NOK_PROC_FEEDBACK, * NOK_PPROC_FEEDBACK;
typedef struct _NOK_PROC_FEEDBACK_COUNTER NOK_PROC_FEEDBACK_COUNTER, * NOK_PPROC_FEEDBACK_COUNTER;
typedef struct _NOK_PROC_IDLE_ACCOUNTING NOK_PROC_IDLE_ACCOUNTING, * NOK_PPROC_IDLE_ACCOUNTING;
typedef struct _NOK_PROC_IDLE_POLICY NOK_PROC_IDLE_POLICY, * NOK_PPROC_IDLE_POLICY;
typedef struct _NOK_PROC_IDLE_SNAP NOK_PROC_IDLE_SNAP, * NOK_PPROC_IDLE_SNAP;
typedef struct _NOK_PROC_IDLE_STATE_ACCOUNTING NOK_PROC_IDLE_STATE_ACCOUNTING, * NOK_PPROC_IDLE_STATE_ACCOUNTING;
typedef struct _NOK_PROC_IDLE_STATE_BUCKET NOK_PROC_IDLE_STATE_BUCKET, * NOK_PPROC_IDLE_STATE_BUCKET;
typedef struct _NOK_PROC_PERF_CHECK NOK_PROC_PERF_CHECK, * NOK_PPROC_PERF_CHECK;
typedef struct _NOK_PROC_PERF_CHECK_CONTEXT NOK_PROC_PERF_CHECK_CONTEXT, * NOK_PPROC_PERF_CHECK_CONTEXT;
typedef struct _NOK_PROC_PERF_CHECK_SNAP NOK_PROC_PERF_CHECK_SNAP, * NOK_PPROC_PERF_CHECK_SNAP;
typedef struct _NOK_PROC_PERF_CONSTRAINT NOK_PROC_PERF_CONSTRAINT, * NOK_PPROC_PERF_CONSTRAINT;
typedef struct _NOK_PROC_PERF_DOMAIN NOK_PROC_PERF_DOMAIN, * NOK_PPROC_PERF_DOMAIN;
typedef struct _NOK_PROC_PERF_HISTORY NOK_PROC_PERF_HISTORY, * NOK_PPROC_PERF_HISTORY;
typedef struct _NOK_PROC_PERF_HISTORY_ENTRY NOK_PROC_PERF_HISTORY_ENTRY, * NOK_PPROC_PERF_HISTORY_ENTRY;
typedef struct _NOK_PROC_PERF_LOAD NOK_PROC_PERF_LOAD, * NOK_PPROC_PERF_LOAD;
typedef struct _NOK_PROC_PERF_QOS_CLASS_POLICY NOK_PROC_PERF_QOS_CLASS_POLICY, * NOK_PPROC_PERF_QOS_CLASS_POLICY;
typedef struct _NOK_PROFILE_PARAMETER_BLOCK NOK_PROFILE_PARAMETER_BLOCK, * NOK_PPROFILE_PARAMETER_BLOCK;
typedef struct _NOK_PSP_STORAGE NOK_PSP_STORAGE, * NOK_PPSP_STORAGE;
typedef struct _NOK_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES NOK_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES, * NOK_PPS_DYNAMIC_ENFORCED_ADDRESS_RANGES;
typedef struct _NOK_PS_IO_CONTROL_ENTRY NOK_PS_IO_CONTROL_ENTRY, * NOK_PPS_IO_CONTROL_ENTRY;
typedef struct _NOK_PS_JOB_WAKE_INFORMATION NOK_PS_JOB_WAKE_INFORMATION, * NOK_PPS_JOB_WAKE_INFORMATION;
typedef struct _NOK_PS_MITIGATION_AUDIT_OPTIONS_MAP NOK_PS_MITIGATION_AUDIT_OPTIONS_MAP, * NOK_PPS_MITIGATION_AUDIT_OPTIONS_MAP;
typedef struct _NOK_PS_MITIGATION_OPTIONS_MAP NOK_PS_MITIGATION_OPTIONS_MAP, * NOK_PPS_MITIGATION_OPTIONS_MAP;
typedef struct _NOK_PS_PROCESS_WAKE_INFORMATION NOK_PS_PROCESS_WAKE_INFORMATION, * NOK_PPS_PROCESS_WAKE_INFORMATION;
typedef struct _NOK_PS_PROPERTY_SET NOK_PS_PROPERTY_SET, * NOK_PPS_PROPERTY_SET;
typedef struct _NOK_PS_PROTECTION NOK_PS_PROTECTION, * NOK_PPS_PROTECTION;
typedef struct _NOK_PS_TRUSTLET_ATTRIBUTE_DATA NOK_PS_TRUSTLET_ATTRIBUTE_DATA, * NOK_PPS_TRUSTLET_ATTRIBUTE_DATA;
typedef struct _NOK_PS_TRUSTLET_ATTRIBUTE_HEADER NOK_PS_TRUSTLET_ATTRIBUTE_HEADER, * NOK_PPS_TRUSTLET_ATTRIBUTE_HEADER;
typedef struct _NOK_PS_TRUSTLET_ATTRIBUTE_TYPE NOK_PS_TRUSTLET_ATTRIBUTE_TYPE, * NOK_PPS_TRUSTLET_ATTRIBUTE_TYPE;
typedef struct _NOK_PS_TRUSTLET_CREATE_ATTRIBUTES NOK_PS_TRUSTLET_CREATE_ATTRIBUTES, * NOK_PPS_TRUSTLET_CREATE_ATTRIBUTES;
typedef struct _NOK_PS_TRUSTLET_TKSESSION_ID NOK_PS_TRUSTLET_TKSESSION_ID, * NOK_PPS_TRUSTLET_TKSESSION_ID;
typedef struct _NOK_PTE_TRACKER NOK_PTE_TRACKER, * NOK_PPTE_TRACKER;
typedef struct _NOK_QUAD NOK_QUAD, * NOK_PQUAD;
typedef struct _NOK_REGISTERED_INTERRUPT_CONTROLLER NOK_REGISTERED_INTERRUPT_CONTROLLER, * NOK_PREGISTERED_INTERRUPT_CONTROLLER;
typedef struct _NOK_RELATION_LIST NOK_RELATION_LIST, * NOK_PRELATION_LIST;
typedef struct _NOK_RELATIVE_SYMLINK_INFO NOK_RELATIVE_SYMLINK_INFO, * NOK_PRELATIVE_SYMLINK_INFO;
typedef struct _NOK_REMOTE_PORT_VIEW NOK_REMOTE_PORT_VIEW, * NOK_PREMOTE_PORT_VIEW;
typedef struct _NOK_REQUEST_MAILBOX NOK_REQUEST_MAILBOX, * NOK_PREQUEST_MAILBOX;
typedef struct _NOK_RH_OP_CONTEXT NOK_RH_OP_CONTEXT, * NOK_PRH_OP_CONTEXT;
typedef struct _NOK_RSDP NOK_RSDP, * NOK_PRSDP;
typedef struct _NOK_RSDS NOK_RSDS, * NOK_PRSDS;
typedef struct _NOK_RSDT_32 NOK_RSDT_32, * NOK_PRSDT_32;
typedef struct _NOK_RTLP_HP_ALLOC_TRACKER NOK_RTLP_HP_ALLOC_TRACKER, * NOK_PRTLP_HP_ALLOC_TRACKER;
typedef struct _NOK_RTLP_HP_HEAP_GLOBALS NOK_RTLP_HP_HEAP_GLOBALS, * NOK_PRTLP_HP_HEAP_GLOBALS;
typedef struct _NOK_RTLP_HP_HEAP_MANAGER NOK_RTLP_HP_HEAP_MANAGER, * NOK_PRTLP_HP_HEAP_MANAGER;
typedef struct _NOK_RTLP_HP_METADATA_HEAP_CTX NOK_RTLP_HP_METADATA_HEAP_CTX, * NOK_PRTLP_HP_METADATA_HEAP_CTX;
typedef struct _NOK_RTLP_HP_PADDING_HEADER NOK_RTLP_HP_PADDING_HEADER, * NOK_PRTLP_HP_PADDING_HEADER;
typedef struct _NOK_RTLP_HP_QUEUE_LOCK_HANDLE NOK_RTLP_HP_QUEUE_LOCK_HANDLE, * NOK_PRTLP_HP_QUEUE_LOCK_HANDLE;
typedef struct _NOK_RTLP_RANGE_LIST_ENTRY NOK_RTLP_RANGE_LIST_ENTRY, * NOK_PRTLP_RANGE_LIST_ENTRY;
typedef struct _NOK_RTL_ACTIVATION_CONTEXT_STACK_FRAME NOK_RTL_ACTIVATION_CONTEXT_STACK_FRAME, * NOK_PRTL_ACTIVATION_CONTEXT_STACK_FRAME;
typedef struct _NOK_RTL_ATOM_TABLE NOK_RTL_ATOM_TABLE, * NOK_PRTL_ATOM_TABLE;
typedef struct _NOK_RTL_ATOM_TABLE_ENTRY NOK_RTL_ATOM_TABLE_ENTRY, * NOK_PRTL_ATOM_TABLE_ENTRY;
typedef struct _NOK_RTL_ATOM_TABLE_REFERENCE NOK_RTL_ATOM_TABLE_REFERENCE, * NOK_PRTL_ATOM_TABLE_REFERENCE;
typedef struct _NOK_RTL_AVL_TABLE NOK_RTL_AVL_TABLE, * NOK_PRTL_AVL_TABLE;
typedef struct _NOK_RTL_AVL_TREE NOK_RTL_AVL_TREE, * NOK_PRTL_AVL_TREE;
typedef struct _NOK_RTL_BALANCED_LINKS NOK_RTL_BALANCED_LINKS, * NOK_PRTL_BALANCED_LINKS;
typedef struct _NOK_RTL_BALANCED_NODE NOK_RTL_BALANCED_NODE, * NOK_PRTL_BALANCED_NODE;
typedef struct _NOK_RTL_BITMAP NOK_RTL_BITMAP, * NOK_PRTL_BITMAP;
typedef struct _NOK_RTL_BITMAP_EX NOK_RTL_BITMAP_EX, * NOK_PRTL_BITMAP_EX;
typedef struct _NOK_RTL_CHASH_ENTRY NOK_RTL_CHASH_ENTRY, * NOK_PRTL_CHASH_ENTRY;
typedef struct _NOK_RTL_CHASH_TABLE NOK_RTL_CHASH_TABLE, * NOK_PRTL_CHASH_TABLE;
typedef struct _NOK_RTL_CRITICAL_SECTION NOK_RTL_CRITICAL_SECTION, * NOK_PRTL_CRITICAL_SECTION;
typedef struct _NOK_RTL_CRITICAL_SECTION_DEBUG NOK_RTL_CRITICAL_SECTION_DEBUG, * NOK_PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _NOK_RTL_CSPARSE_BITMAP NOK_RTL_CSPARSE_BITMAP, * NOK_PRTL_CSPARSE_BITMAP;
typedef struct _NOK_RTL_DRIVE_LETTER_CURDIR NOK_RTL_DRIVE_LETTER_CURDIR, * NOK_PRTL_DRIVE_LETTER_CURDIR;
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE NOK_RTL_DYNAMIC_HASH_TABLE, * NOK_PRTL_DYNAMIC_HASH_TABLE;
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE_CONTEXT NOK_RTL_DYNAMIC_HASH_TABLE_CONTEXT, * NOK_PRTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY, * NOK_PRTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE_ENUMERATOR NOK_RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, * NOK_PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef struct _NOK_RTL_DYNAMIC_LOOKASIDE NOK_RTL_DYNAMIC_LOOKASIDE, * NOK_PRTL_DYNAMIC_LOOKASIDE;
typedef struct _NOK_RTL_DYNAMIC_TIME_ZONE_INFORMATION NOK_RTL_DYNAMIC_TIME_ZONE_INFORMATION, * NOK_PRTL_DYNAMIC_TIME_ZONE_INFORMATION;
typedef struct _NOK_RTL_FEATURE_CONFIGURATION NOK_RTL_FEATURE_CONFIGURATION, * NOK_PRTL_FEATURE_CONFIGURATION;
typedef struct _NOK_RTL_FEATURE_USAGE_REPORT NOK_RTL_FEATURE_USAGE_REPORT, * NOK_PRTL_FEATURE_USAGE_REPORT;
typedef struct _NOK_RTL_HASH_ENTRY NOK_RTL_HASH_ENTRY, * NOK_PRTL_HASH_ENTRY;
typedef struct _NOK_RTL_HASH_TABLE NOK_RTL_HASH_TABLE, * NOK_PRTL_HASH_TABLE;
typedef struct _NOK_RTL_HASH_TABLE_ITERATOR NOK_RTL_HASH_TABLE_ITERATOR, * NOK_PRTL_HASH_TABLE_ITERATOR;
typedef struct _NOK_RTL_HEAP_MEMORY_LIMIT_DATA NOK_RTL_HEAP_MEMORY_LIMIT_DATA, * NOK_PRTL_HEAP_MEMORY_LIMIT_DATA;
typedef struct _NOK_RTL_HP_LFH_CONFIG NOK_RTL_HP_LFH_CONFIG, * NOK_PRTL_HP_LFH_CONFIG;
typedef struct _NOK_RTL_HP_SEG_ALLOC_POLICY NOK_RTL_HP_SEG_ALLOC_POLICY, * NOK_PRTL_HP_SEG_ALLOC_POLICY;
typedef struct _NOK_RTL_HP_SUB_ALLOCATOR_CONFIGS NOK_RTL_HP_SUB_ALLOCATOR_CONFIGS, * NOK_PRTL_HP_SUB_ALLOCATOR_CONFIGS;
typedef struct _NOK_RTL_HP_VS_CONFIG NOK_RTL_HP_VS_CONFIG, * NOK_PRTL_HP_VS_CONFIG;
typedef struct _NOK_RTL_LOOKASIDE NOK_RTL_LOOKASIDE, * NOK_PRTL_LOOKASIDE;
typedef struct _NOK_RTL_QUERY_REGISTRY_TABLE NOK_RTL_QUERY_REGISTRY_TABLE, * NOK_PRTL_QUERY_REGISTRY_TABLE;
typedef struct _NOK_RTL_RANGE NOK_RTL_RANGE, * NOK_PRTL_RANGE;
typedef struct _NOK_RTL_RANGE_LIST NOK_RTL_RANGE_LIST, * NOK_PRTL_RANGE_LIST;
typedef struct _NOK_RTL_RB_TREE NOK_RTL_RB_TREE, * NOK_PRTL_RB_TREE;
typedef struct _NOK_RTL_RETPOLINE_ROUTINES NOK_RTL_RETPOLINE_ROUTINES, * NOK_PRTL_RETPOLINE_ROUTINES;
typedef struct _NOK_RTL_SPARSE_ARRAY NOK_RTL_SPARSE_ARRAY, * NOK_PRTL_SPARSE_ARRAY;
typedef struct _NOK_RTL_SPLAY_LINKS NOK_RTL_SPLAY_LINKS, * NOK_PRTL_SPLAY_LINKS;
typedef struct _NOK_RTL_SRWLOCK NOK_RTL_SRWLOCK, * NOK_PRTL_SRWLOCK;
typedef struct _NOK_RTL_STACKDB_CONTEXT NOK_RTL_STACKDB_CONTEXT, * NOK_PRTL_STACKDB_CONTEXT;
typedef struct _NOK_RTL_TIME_ZONE_INFORMATION NOK_RTL_TIME_ZONE_INFORMATION, * NOK_PRTL_TIME_ZONE_INFORMATION;
typedef struct _NOK_RTL_UMS_CONTEXT NOK_RTL_UMS_CONTEXT, * NOK_PRTL_UMS_CONTEXT;
typedef struct _NOK_RTL_USER_PROCESS_PARAMETERS NOK_RTL_USER_PROCESS_PARAMETERS, * NOK_PRTL_USER_PROCESS_PARAMETERS;
typedef struct _NOK_SCATTER_GATHER_ELEMENT NOK_SCATTER_GATHER_ELEMENT, * NOK_PSCATTER_GATHER_ELEMENT;
typedef struct _NOK_SCATTER_GATHER_LIST NOK_SCATTER_GATHER_LIST, * NOK_PSCATTER_GATHER_LIST;
typedef struct _NOK_SCSI_REQUEST_BLOCK NOK_SCSI_REQUEST_BLOCK, * NOK_PSCSI_REQUEST_BLOCK;
typedef struct _NOK_SECONDARY_IC_LIST_ENTRY NOK_SECONDARY_IC_LIST_ENTRY, * NOK_PSECONDARY_IC_LIST_ENTRY;
typedef struct _NOK_SECONDARY_INTERRUPT_LINE_STATE NOK_SECONDARY_INTERRUPT_LINE_STATE, * NOK_PSECONDARY_INTERRUPT_LINE_STATE;
typedef struct _NOK_SECONDARY_INTERRUPT_PROVIDER_INTERFACE NOK_SECONDARY_INTERRUPT_PROVIDER_INTERFACE, * NOK_PSECONDARY_INTERRUPT_PROVIDER_INTERFACE;
typedef struct _NOK_SECTION NOK_SECTION, * NOK_PSECTION;
typedef struct _NOK_SECTION_IMAGE_INFORMATION NOK_SECTION_IMAGE_INFORMATION, * NOK_PSECTION_IMAGE_INFORMATION;
typedef struct _NOK_SECTION_OBJECT_POINTERS NOK_SECTION_OBJECT_POINTERS, * NOK_PSECTION_OBJECT_POINTERS;
typedef struct _NOK_SECURITY_CLIENT_CONTEXT NOK_SECURITY_CLIENT_CONTEXT, * NOK_PSECURITY_CLIENT_CONTEXT;
typedef struct _NOK_SECURITY_DESCRIPTOR NOK_SECURITY_DESCRIPTOR, * NOK_PSECURITY_DESCRIPTOR;
typedef struct _NOK_SECURITY_DESCRIPTOR_RELATIVE NOK_SECURITY_DESCRIPTOR_RELATIVE, * NOK_PSECURITY_DESCRIPTOR_RELATIVE;
typedef struct _NOK_SECURITY_QUALITY_OF_SERVICE NOK_SECURITY_QUALITY_OF_SERVICE, * NOK_PSECURITY_QUALITY_OF_SERVICE;
typedef struct _NOK_SECURITY_SUBJECT_CONTEXT NOK_SECURITY_SUBJECT_CONTEXT, * NOK_PSECURITY_SUBJECT_CONTEXT;
typedef struct _NOK_SEGMENT NOK_SEGMENT, * NOK_PSEGMENT;
typedef struct _NOK_SEGMENT_FLAGS NOK_SEGMENT_FLAGS, * NOK_PSEGMENT_FLAGS;
typedef struct _NOK_SEGMENT_HEAP NOK_SEGMENT_HEAP, * NOK_PSEGMENT_HEAP;
typedef struct _NOK_SEGMENT_HEAP_EXTRA NOK_SEGMENT_HEAP_EXTRA, * NOK_PSEGMENT_HEAP_EXTRA;
typedef struct _NOK_SEP_AUDIT_POLICY NOK_SEP_AUDIT_POLICY, * NOK_PSEP_AUDIT_POLICY;
typedef struct _NOK_SEP_CACHED_HANDLES_ENTRY NOK_SEP_CACHED_HANDLES_ENTRY, * NOK_PSEP_CACHED_HANDLES_ENTRY;
typedef struct _NOK_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR NOK_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR, * NOK_PSEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;
typedef struct _NOK_SEP_CACHED_HANDLES_TABLE NOK_SEP_CACHED_HANDLES_TABLE, * NOK_PSEP_CACHED_HANDLES_TABLE;
typedef struct _NOK_SEP_LOGON_SESSION_REFERENCES NOK_SEP_LOGON_SESSION_REFERENCES, * NOK_PSEP_LOGON_SESSION_REFERENCES;
typedef struct _NOK_SEP_LOWBOX_NUMBER_ENTRY NOK_SEP_LOWBOX_NUMBER_ENTRY, * NOK_PSEP_LOWBOX_NUMBER_ENTRY;
typedef struct _NOK_SEP_LOWBOX_NUMBER_MAPPING NOK_SEP_LOWBOX_NUMBER_MAPPING, * NOK_PSEP_LOWBOX_NUMBER_MAPPING;
typedef struct _NOK_SEP_LUID_TO_INDEX_MAP_ENTRY NOK_SEP_LUID_TO_INDEX_MAP_ENTRY, * NOK_PSEP_LUID_TO_INDEX_MAP_ENTRY;
typedef struct _NOK_SEP_RM_LSA_CONNECTION_STATE NOK_SEP_RM_LSA_CONNECTION_STATE, * NOK_PSEP_RM_LSA_CONNECTION_STATE;
typedef struct _NOK_SEP_SID_VALUES_BLOCK NOK_SEP_SID_VALUES_BLOCK, * NOK_PSEP_SID_VALUES_BLOCK;
typedef struct _NOK_SEP_SILOSTATE NOK_SEP_SILOSTATE, * NOK_PSEP_SILOSTATE;
typedef struct _NOK_SEP_TOKEN_DIAG_TRACK_ENTRY NOK_SEP_TOKEN_DIAG_TRACK_ENTRY, * NOK_PSEP_TOKEN_DIAG_TRACK_ENTRY;
typedef struct _NOK_SEP_TOKEN_PRIVILEGES NOK_SEP_TOKEN_PRIVILEGES, * NOK_PSEP_TOKEN_PRIVILEGES;
typedef struct _NOK_SESSION_LOWBOX_MAP NOK_SESSION_LOWBOX_MAP, * NOK_PSESSION_LOWBOX_MAP;
typedef struct _NOK_SE_AUDIT_PROCESS_CREATION_INFO NOK_SE_AUDIT_PROCESS_CREATION_INFO, * NOK_PSE_AUDIT_PROCESS_CREATION_INFO;
typedef struct _NOK_SHARED_CACHE_MAP NOK_SHARED_CACHE_MAP, * NOK_PSHARED_CACHE_MAP;
typedef struct _NOK_SHARED_CACHE_MAP_LIST_CURSOR NOK_SHARED_CACHE_MAP_LIST_CURSOR, * NOK_PSHARED_CACHE_MAP_LIST_CURSOR;
typedef struct _NOK_SID NOK_SID, * NOK_PSID;
typedef struct _NOK_SID_AND_ATTRIBUTES NOK_SID_AND_ATTRIBUTES, * NOK_PSID_AND_ATTRIBUTES;
typedef struct _NOK_SID_AND_ATTRIBUTES_HASH NOK_SID_AND_ATTRIBUTES_HASH, * NOK_PSID_AND_ATTRIBUTES_HASH;
typedef struct _NOK_SID_IDENTIFIER_AUTHORITY NOK_SID_IDENTIFIER_AUTHORITY, * NOK_PSID_IDENTIFIER_AUTHORITY;
typedef struct _NOK_SILO_USER_SHARED_DATA NOK_SILO_USER_SHARED_DATA, * NOK_PSILO_USER_SHARED_DATA;
typedef struct _NOK_SINGLE_LIST_ENTRY NOK_SINGLE_LIST_ENTRY, * NOK_PSINGLE_LIST_ENTRY;
typedef struct _NOK_SINGLE_LIST_ENTRY32 NOK_SINGLE_LIST_ENTRY32, * NOK_PSINGLE_LIST_ENTRY32;
typedef struct _NOK_SK_CRASH_MINIDUMP NOK_SK_CRASH_MINIDUMP, * NOK_PSK_CRASH_MINIDUMP;
typedef struct _NOK_SK_CRASH_MODULE NOK_SK_CRASH_MODULE, * NOK_PSK_CRASH_MODULE;
typedef struct _NOK_SK_CRASH_STACK_FRAME NOK_SK_CRASH_STACK_FRAME, * NOK_PSK_CRASH_STACK_FRAME;
typedef struct _NOK_SLIST_ENTRY NOK_SLIST_ENTRY, * NOK_PSLIST_ENTRY;
typedef struct _NOK_SMBIOS3_TABLE_HEADER NOK_SMBIOS3_TABLE_HEADER, * NOK_PSMBIOS3_TABLE_HEADER;
typedef struct _NOK_STACK_TABLE NOK_STACK_TABLE, * NOK_PSTACK_TABLE;
typedef struct _NOK_STRING NOK_STRING, * NOK_PSTRING;
typedef struct _NOK_STRING32 NOK_STRING32, * NOK_PSTRING32;
typedef struct _NOK_STRING64 NOK_STRING64, * NOK_PSTRING64;
typedef struct _NOK_SUBSECTION NOK_SUBSECTION, * NOK_PSUBSECTION;
typedef struct _NOK_SUPPORTED_RANGE NOK_SUPPORTED_RANGE, * NOK_PSUPPORTED_RANGE;
typedef struct _NOK_SUPPORTED_RANGES NOK_SUPPORTED_RANGES, * NOK_PSUPPORTED_RANGES;
typedef struct _NOK_SYNCH_COUNTERS NOK_SYNCH_COUNTERS, * NOK_PSYNCH_COUNTERS;
typedef struct _NOK_SYSPTES_HEADER NOK_SYSPTES_HEADER, * NOK_PSYSPTES_HEADER;
typedef struct _NOK_SYSTEM_POWER_POLICY NOK_SYSTEM_POWER_POLICY, * NOK_PSYSTEM_POWER_POLICY;
typedef struct _NOK_SYSTEM_POWER_STATE_CONTEXT NOK_SYSTEM_POWER_STATE_CONTEXT, * NOK_PSYSTEM_POWER_STATE_CONTEXT;
typedef struct _NOK_TEB NOK_TEB, * NOK_PTEB;
typedef struct _NOK_TEB32 NOK_TEB32, * NOK_PTEB32;
typedef struct _NOK_TEB64 NOK_TEB64, * NOK_PTEB64;
typedef struct _NOK_TEB_ACTIVE_FRAME NOK_TEB_ACTIVE_FRAME, * NOK_PTEB_ACTIVE_FRAME;
typedef struct _NOK_TEB_ACTIVE_FRAME_CONTEXT NOK_TEB_ACTIVE_FRAME_CONTEXT, * NOK_PTEB_ACTIVE_FRAME_CONTEXT;
typedef struct _NOK_TERMINATION_PORT NOK_TERMINATION_PORT, * NOK_PTERMINATION_PORT;
typedef struct _NOK_THERMAL_COOLING_INTERFACE NOK_THERMAL_COOLING_INTERFACE, * NOK_PTHERMAL_COOLING_INTERFACE;
typedef struct _NOK_THERMAL_INFORMATION NOK_THERMAL_INFORMATION, * NOK_PTHERMAL_INFORMATION;
typedef struct _NOK_THERMAL_INFORMATION_EX NOK_THERMAL_INFORMATION_EX, * NOK_PTHERMAL_INFORMATION_EX;
typedef struct _NOK_THERMAL_POLICY NOK_THERMAL_POLICY, * NOK_PTHERMAL_POLICY;
typedef struct _NOK_THERMAL_ZONE_COUNTERS NOK_THERMAL_ZONE_COUNTERS, * NOK_PTHERMAL_ZONE_COUNTERS;
typedef struct _NOK_THREAD_ENERGY_VALUES NOK_THREAD_ENERGY_VALUES, * NOK_PTHREAD_ENERGY_VALUES;
typedef struct _NOK_THREAD_PERFORMANCE_DATA NOK_THREAD_PERFORMANCE_DATA, * NOK_PTHREAD_PERFORMANCE_DATA;
typedef struct _NOK_TIMEZONE_CHANGE_EVENT NOK_TIMEZONE_CHANGE_EVENT, * NOK_PTIMEZONE_CHANGE_EVENT;
typedef struct _NOK_TIME_FIELDS NOK_TIME_FIELDS, * NOK_PTIME_FIELDS;
typedef struct _NOK_TOKEN NOK_TOKEN, * NOK_PTOKEN;
typedef struct _NOK_TOKEN_ACCESS_INFORMATION NOK_TOKEN_ACCESS_INFORMATION, * NOK_PTOKEN_ACCESS_INFORMATION;
typedef struct _NOK_TOKEN_AUDIT_POLICY NOK_TOKEN_AUDIT_POLICY, * NOK_PTOKEN_AUDIT_POLICY;
typedef struct _NOK_TOKEN_CONTROL NOK_TOKEN_CONTROL, * NOK_PTOKEN_CONTROL;
typedef struct _NOK_TOKEN_MANDATORY_POLICY NOK_TOKEN_MANDATORY_POLICY, * NOK_PTOKEN_MANDATORY_POLICY;
typedef struct _NOK_TOKEN_PRIVILEGES NOK_TOKEN_PRIVILEGES, * NOK_PTOKEN_PRIVILEGES;
typedef struct _NOK_TOKEN_SOURCE NOK_TOKEN_SOURCE, * NOK_PTOKEN_SOURCE;
typedef struct _NOK_TP_CALLBACK_ENVIRON_V3 NOK_TP_CALLBACK_ENVIRON_V3, * NOK_PTP_CALLBACK_ENVIRON_V3;
typedef struct _NOK_TP_CALLBACK_INSTANCE NOK_TP_CALLBACK_INSTANCE, * NOK_PTP_CALLBACK_INSTANCE;
typedef struct _NOK_TP_CLEANUP_GROUP NOK_TP_CLEANUP_GROUP, * NOK_PTP_CLEANUP_GROUP;
typedef struct _NOK_TP_POOL NOK_TP_POOL, * NOK_PTP_POOL;
typedef struct _NOK_TRACE_ENABLE_INFO NOK_TRACE_ENABLE_INFO, * NOK_PTRACE_ENABLE_INFO;
typedef struct _NOK_TRACE_LOGFILE_HEADER NOK_TRACE_LOGFILE_HEADER, * NOK_PTRACE_LOGFILE_HEADER;
typedef struct _NOK_TRIAGE_9F_PNP NOK_TRIAGE_9F_PNP, * NOK_PTRIAGE_9F_PNP;
typedef struct _NOK_TRIAGE_9F_POWER NOK_TRIAGE_9F_POWER, * NOK_PTRIAGE_9F_POWER;
typedef struct _NOK_TRIAGE_DEVICE_NODE NOK_TRIAGE_DEVICE_NODE, * NOK_PTRIAGE_DEVICE_NODE;
typedef struct _NOK_TRIAGE_EX_WORK_QUEUE NOK_TRIAGE_EX_WORK_QUEUE, * NOK_PTRIAGE_EX_WORK_QUEUE;
typedef struct _NOK_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE NOK_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE, * NOK_PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
typedef struct _NOK_TRIAGE_PNP_DEVICE_COMPLETION_REQUEST NOK_TRIAGE_PNP_DEVICE_COMPLETION_REQUEST, * NOK_PTRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
typedef struct _NOK_TRIAGE_POP_FX_DEVICE NOK_TRIAGE_POP_FX_DEVICE, * NOK_PTRIAGE_POP_FX_DEVICE;
typedef struct _NOK_TRIAGE_POP_IRP_DATA NOK_TRIAGE_POP_IRP_DATA, * NOK_PTRIAGE_POP_IRP_DATA;
typedef struct _NOK_TRUSTLET_COLLABORATION_ID NOK_TRUSTLET_COLLABORATION_ID, * NOK_PTRUSTLET_COLLABORATION_ID;
typedef struct _NOK_TRUSTLET_MAILBOX_KEY NOK_TRUSTLET_MAILBOX_KEY, * NOK_PTRUSTLET_MAILBOX_KEY;
typedef struct _NOK_TXN_PARAMETER_BLOCK NOK_TXN_PARAMETER_BLOCK, * NOK_PTXN_PARAMETER_BLOCK;
typedef struct _NOK_TraceLoggingMetadata_t NOK_TraceLoggingMetadata_t, * NOK_PTraceLoggingMetadata_t;
typedef struct _NOK_UMS_CONTROL_BLOCK NOK_UMS_CONTROL_BLOCK, * NOK_PUMS_CONTROL_BLOCK;
typedef struct _NOK_UNEXPECTED_INTERRUPT NOK_UNEXPECTED_INTERRUPT, * NOK_PUNEXPECTED_INTERRUPT;
typedef struct _NOK_UNICODE_STRING NOK_UNICODE_STRING, * NOK_PUNICODE_STRING;
typedef struct _NOK_VACB NOK_VACB, * NOK_PVACB;
typedef struct _NOK_VACB_ARRAY_HEADER NOK_VACB_ARRAY_HEADER, * NOK_PVACB_ARRAY_HEADER;
typedef struct _NOK_VACB_LEVEL_REFERENCE NOK_VACB_LEVEL_REFERENCE, * NOK_PVACB_LEVEL_REFERENCE;
typedef struct _NOK_VERIFIER_SHARED_EXPORT_THUNK NOK_VERIFIER_SHARED_EXPORT_THUNK, * NOK_PVERIFIER_SHARED_EXPORT_THUNK;
typedef struct _NOK_VF_ADDRESS_RANGE NOK_VF_ADDRESS_RANGE, * NOK_PVF_ADDRESS_RANGE;
typedef struct _NOK_VF_AVL_TABLE NOK_VF_AVL_TABLE, * NOK_PVF_AVL_TABLE;
typedef struct _NOK_VF_AVL_TREE NOK_VF_AVL_TREE, * NOK_PVF_AVL_TREE;
typedef struct _NOK_VF_AVL_TREE_NODE NOK_VF_AVL_TREE_NODE, * NOK_PVF_AVL_TREE_NODE;
typedef struct _NOK_VF_AVL_TREE_NODE_EX NOK_VF_AVL_TREE_NODE_EX, * NOK_PVF_AVL_TREE_NODE_EX;
typedef struct _NOK_VF_DRIVER_IO_CALLBACKS NOK_VF_DRIVER_IO_CALLBACKS, * NOK_PVF_DRIVER_IO_CALLBACKS;
typedef struct _NOK_VF_KE_CRITICAL_REGION_TRACE NOK_VF_KE_CRITICAL_REGION_TRACE, * NOK_PVF_KE_CRITICAL_REGION_TRACE;
typedef struct _NOK_VF_POOL_TRACE NOK_VF_POOL_TRACE, * NOK_PVF_POOL_TRACE;
typedef struct _NOK_VF_SUSPECT_DRIVER_ENTRY NOK_VF_SUSPECT_DRIVER_ENTRY, * NOK_PVF_SUSPECT_DRIVER_ENTRY;
typedef struct _NOK_VF_TARGET_ALL_SHARED_EXPORT_THUNKS NOK_VF_TARGET_ALL_SHARED_EXPORT_THUNKS, * NOK_PVF_TARGET_ALL_SHARED_EXPORT_THUNKS;
typedef struct _NOK_VF_TARGET_DRIVER NOK_VF_TARGET_DRIVER, * NOK_PVF_TARGET_DRIVER;
typedef struct _NOK_VF_TARGET_VERIFIED_DRIVER_DATA NOK_VF_TARGET_VERIFIED_DRIVER_DATA, * NOK_PVF_TARGET_VERIFIED_DRIVER_DATA;
typedef struct _NOK_VF_TRACKER NOK_VF_TRACKER, * NOK_PVF_TRACKER;
typedef struct _NOK_VF_TRACKER_STAMP NOK_VF_TRACKER_STAMP, * NOK_PVF_TRACKER_STAMP;
typedef struct _NOK_VF_WATCHDOG_IRP NOK_VF_WATCHDOG_IRP, * NOK_PVF_WATCHDOG_IRP;
typedef struct _NOK_VIRTUAL_EFI_RUNTIME_SERVICES NOK_VIRTUAL_EFI_RUNTIME_SERVICES, * NOK_PVIRTUAL_EFI_RUNTIME_SERVICES;
typedef struct _NOK_VI_DEADLOCK_GLOBALS NOK_VI_DEADLOCK_GLOBALS, * NOK_PVI_DEADLOCK_GLOBALS;
typedef struct _NOK_VI_DEADLOCK_NODE NOK_VI_DEADLOCK_NODE, * NOK_PVI_DEADLOCK_NODE;
typedef struct _NOK_VI_DEADLOCK_RESOURCE NOK_VI_DEADLOCK_RESOURCE, * NOK_PVI_DEADLOCK_RESOURCE;
typedef struct _NOK_VI_DEADLOCK_THREAD NOK_VI_DEADLOCK_THREAD, * NOK_PVI_DEADLOCK_THREAD;
typedef struct _NOK_VI_FAULT_TRACE NOK_VI_FAULT_TRACE, * NOK_PVI_FAULT_TRACE;
typedef struct _NOK_VI_POOL_ENTRY NOK_VI_POOL_ENTRY, * NOK_PVI_POOL_ENTRY;
typedef struct _NOK_VI_POOL_ENTRY_INUSE NOK_VI_POOL_ENTRY_INUSE, * NOK_PVI_POOL_ENTRY_INUSE;
typedef struct _NOK_VI_POOL_PAGE_HEADER NOK_VI_POOL_PAGE_HEADER, * NOK_PVI_POOL_PAGE_HEADER;
typedef struct _NOK_VI_TRACK_IRQL NOK_VI_TRACK_IRQL, * NOK_PVI_TRACK_IRQL;
typedef struct _NOK_VI_VERIFIER_ISSUE NOK_VI_VERIFIER_ISSUE, * NOK_PVI_VERIFIER_ISSUE;
typedef struct _NOK_VI_VERIFIER_POOL_HEADER NOK_VI_VERIFIER_POOL_HEADER, * NOK_PVI_VERIFIER_POOL_HEADER;
typedef struct _NOK_VOLUME_CACHE_MAP NOK_VOLUME_CACHE_MAP, * NOK_PVOLUME_CACHE_MAP;
typedef struct _NOK_VPB NOK_VPB, * NOK_PVPB;
typedef struct _NOK_VSM_PERFORMANCE_DATA NOK_VSM_PERFORMANCE_DATA, * NOK_PVSM_PERFORMANCE_DATA;
typedef struct _NOK_WAITING_IRP NOK_WAITING_IRP, * NOK_PWAITING_IRP;
typedef struct _NOK_WAIT_CONTEXT_BLOCK NOK_WAIT_CONTEXT_BLOCK, * NOK_PWAIT_CONTEXT_BLOCK;
typedef struct _NOK_WDT_HANDLE NOK_WDT_HANDLE, * NOK_PWDT_HANDLE;
typedef struct _NOK_WHEAP_ERROR_RECORD_WRAPPER NOK_WHEAP_ERROR_RECORD_WRAPPER, * NOK_PWHEAP_ERROR_RECORD_WRAPPER;
typedef struct _NOK_WHEAP_ERROR_SOURCE NOK_WHEAP_ERROR_SOURCE, * NOK_PWHEAP_ERROR_SOURCE;
typedef struct _NOK_WHEAP_ERROR_SOURCE_TABLE NOK_WHEAP_ERROR_SOURCE_TABLE, * NOK_PWHEAP_ERROR_SOURCE_TABLE;
typedef struct _NOK_WHEAP_INFO_BLOCK NOK_WHEAP_INFO_BLOCK, * NOK_PWHEAP_INFO_BLOCK;
typedef struct _NOK_WHEAP_WORK_QUEUE NOK_WHEAP_WORK_QUEUE, * NOK_PWHEAP_WORK_QUEUE;
typedef struct _NOK_WHEA_AER_BRIDGE_DESCRIPTOR NOK_WHEA_AER_BRIDGE_DESCRIPTOR, * NOK_PWHEA_AER_BRIDGE_DESCRIPTOR;
typedef struct _NOK_WHEA_AER_ENDPOINT_DESCRIPTOR NOK_WHEA_AER_ENDPOINT_DESCRIPTOR, * NOK_PWHEA_AER_ENDPOINT_DESCRIPTOR;
typedef struct _NOK_WHEA_AER_ROOTPORT_DESCRIPTOR NOK_WHEA_AER_ROOTPORT_DESCRIPTOR, * NOK_PWHEA_AER_ROOTPORT_DESCRIPTOR;
typedef struct _NOK_WHEA_AMD_EXTENDED_REGISTERS NOK_WHEA_AMD_EXTENDED_REGISTERS, * NOK_PWHEA_AMD_EXTENDED_REGISTERS;
typedef struct _NOK_WHEA_DEVICE_DRIVER_DESCRIPTOR NOK_WHEA_DEVICE_DRIVER_DESCRIPTOR, * NOK_PWHEA_DEVICE_DRIVER_DESCRIPTOR;
typedef struct _NOK_WHEA_ERROR_PACKET_V2 NOK_WHEA_ERROR_PACKET_V2, * NOK_PWHEA_ERROR_PACKET_V2;
typedef struct _NOK_WHEA_ERROR_RECORD NOK_WHEA_ERROR_RECORD, * NOK_PWHEA_ERROR_RECORD;
typedef struct _NOK_WHEA_ERROR_RECORD_HEADER NOK_WHEA_ERROR_RECORD_HEADER, * NOK_PWHEA_ERROR_RECORD_HEADER;
typedef struct _NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, * NOK_PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
typedef struct _NOK_WHEA_ERROR_SOURCE_CONFIGURATION_DD NOK_WHEA_ERROR_SOURCE_CONFIGURATION_DD, * NOK_PWHEA_ERROR_SOURCE_CONFIGURATION_DD;
typedef struct _NOK_WHEA_ERROR_SOURCE_DESCRIPTOR NOK_WHEA_ERROR_SOURCE_DESCRIPTOR, * NOK_PWHEA_ERROR_SOURCE_DESCRIPTOR;
typedef struct _NOK_WHEA_EVENT_LOG_ENTRY NOK_WHEA_EVENT_LOG_ENTRY, * NOK_PWHEA_EVENT_LOG_ENTRY;
typedef struct _NOK_WHEA_EVENT_LOG_ENTRY_HEADER NOK_WHEA_EVENT_LOG_ENTRY_HEADER, * NOK_PWHEA_EVENT_LOG_ENTRY_HEADER;
typedef struct _NOK_WHEA_GENERIC_ERROR_DESCRIPTOR NOK_WHEA_GENERIC_ERROR_DESCRIPTOR, * NOK_PWHEA_GENERIC_ERROR_DESCRIPTOR;
typedef struct _NOK_WHEA_GENERIC_ERROR_DESCRIPTOR_V2 NOK_WHEA_GENERIC_ERROR_DESCRIPTOR_V2, * NOK_PWHEA_GENERIC_ERROR_DESCRIPTOR_V2;
typedef struct _NOK_WHEA_IPF_CMC_DESCRIPTOR NOK_WHEA_IPF_CMC_DESCRIPTOR, * NOK_PWHEA_IPF_CMC_DESCRIPTOR;
typedef struct _NOK_WHEA_IPF_CPE_DESCRIPTOR NOK_WHEA_IPF_CPE_DESCRIPTOR, * NOK_PWHEA_IPF_CPE_DESCRIPTOR;
typedef struct _NOK_WHEA_IPF_MCA_DESCRIPTOR NOK_WHEA_IPF_MCA_DESCRIPTOR, * NOK_PWHEA_IPF_MCA_DESCRIPTOR;
typedef struct _NOK_WHEA_MEMORY_ERROR_SECTION NOK_WHEA_MEMORY_ERROR_SECTION, * NOK_PWHEA_MEMORY_ERROR_SECTION;
typedef struct _NOK_WHEA_NOTIFICATION_DESCRIPTOR NOK_WHEA_NOTIFICATION_DESCRIPTOR, * NOK_PWHEA_NOTIFICATION_DESCRIPTOR;
typedef struct _NOK_WHEA_PCI_SLOT_NUMBER NOK_WHEA_PCI_SLOT_NUMBER, * NOK_PWHEA_PCI_SLOT_NUMBER;
typedef struct _NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION, * NOK_PWHEA_PROCESSOR_GENERIC_ERROR_SECTION;
typedef struct _NOK_WHEA_RECOVERY_CONTEXT NOK_WHEA_RECOVERY_CONTEXT, * NOK_PWHEA_RECOVERY_CONTEXT;
typedef struct _NOK_WHEA_XPF_CMC_DESCRIPTOR NOK_WHEA_XPF_CMC_DESCRIPTOR, * NOK_PWHEA_XPF_CMC_DESCRIPTOR;
typedef struct _NOK_WHEA_XPF_MCA_SECTION NOK_WHEA_XPF_MCA_SECTION, * NOK_PWHEA_XPF_MCA_SECTION;
typedef struct _NOK_WHEA_XPF_MCE_DESCRIPTOR NOK_WHEA_XPF_MCE_DESCRIPTOR, * NOK_PWHEA_XPF_MCE_DESCRIPTOR;
typedef struct _NOK_WHEA_XPF_MC_BANK_DESCRIPTOR NOK_WHEA_XPF_MC_BANK_DESCRIPTOR, * NOK_PWHEA_XPF_MC_BANK_DESCRIPTOR;
typedef struct _NOK_WHEA_XPF_NMI_DESCRIPTOR NOK_WHEA_XPF_NMI_DESCRIPTOR, * NOK_PWHEA_XPF_NMI_DESCRIPTOR;
typedef struct _NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION, * NOK_PWHEA_XPF_PROCESSOR_ERROR_SECTION;
typedef struct _NOK_WMI_BUFFER_HEADER NOK_WMI_BUFFER_HEADER, * NOK_PWMI_BUFFER_HEADER;
typedef struct _NOK_WMI_LOGGER_CONTEXT NOK_WMI_LOGGER_CONTEXT, * NOK_PWMI_LOGGER_CONTEXT;
typedef struct _NOK_WNF_DELIVERY_DESCRIPTOR NOK_WNF_DELIVERY_DESCRIPTOR, * NOK_PWNF_DELIVERY_DESCRIPTOR;
typedef struct _NOK_WNF_DISPATCHER NOK_WNF_DISPATCHER, * NOK_PWNF_DISPATCHER;
typedef struct _NOK_WNF_LOCK NOK_WNF_LOCK, * NOK_PWNF_LOCK;
typedef struct _NOK_WNF_NAME_INSTANCE NOK_WNF_NAME_INSTANCE, * NOK_PWNF_NAME_INSTANCE;
typedef struct _NOK_WNF_NODE_HEADER NOK_WNF_NODE_HEADER, * NOK_PWNF_NODE_HEADER;
typedef struct _NOK_WNF_PROCESS_CONTEXT NOK_WNF_PROCESS_CONTEXT, * NOK_PWNF_PROCESS_CONTEXT;
typedef struct _NOK_WNF_SCOPE_INSTANCE NOK_WNF_SCOPE_INSTANCE, * NOK_PWNF_SCOPE_INSTANCE;
typedef struct _NOK_WNF_SCOPE_MAP NOK_WNF_SCOPE_MAP, * NOK_PWNF_SCOPE_MAP;
typedef struct _NOK_WNF_SCOPE_MAP_ENTRY NOK_WNF_SCOPE_MAP_ENTRY, * NOK_PWNF_SCOPE_MAP_ENTRY;
typedef struct _NOK_WNF_SILODRIVERSTATE NOK_WNF_SILODRIVERSTATE, * NOK_PWNF_SILODRIVERSTATE;
typedef struct _NOK_WNF_STATE_DATA NOK_WNF_STATE_DATA, * NOK_PWNF_STATE_DATA;
typedef struct _NOK_WNF_STATE_NAME NOK_WNF_STATE_NAME, * NOK_PWNF_STATE_NAME;
typedef struct _NOK_WNF_STATE_NAME_REGISTRATION NOK_WNF_STATE_NAME_REGISTRATION, * NOK_PWNF_STATE_NAME_REGISTRATION;
typedef struct _NOK_WNF_STATE_NAME_STRUCT NOK_WNF_STATE_NAME_STRUCT, * NOK_PWNF_STATE_NAME_STRUCT;
typedef struct _NOK_WNF_SUBSCRIPTION NOK_WNF_SUBSCRIPTION, * NOK_PWNF_SUBSCRIPTION;
typedef struct _NOK_WNF_TYPE_ID NOK_WNF_TYPE_ID, * NOK_PWNF_TYPE_ID;
typedef struct _NOK_WORK_QUEUE_ENTRY NOK_WORK_QUEUE_ENTRY, * NOK_PWORK_QUEUE_ENTRY;
typedef struct _NOK_WORK_QUEUE_ITEM NOK_WORK_QUEUE_ITEM, * NOK_PWORK_QUEUE_ITEM;
typedef struct _NOK_WRITE_BEHIND_THROUGHPUT NOK_WRITE_BEHIND_THROUGHPUT, * NOK_PWRITE_BEHIND_THROUGHPUT;
typedef struct _NOK_X86_DBGKD_CONTROL_SET NOK_X86_DBGKD_CONTROL_SET, * NOK_PX86_DBGKD_CONTROL_SET;
typedef struct _NOK_X86_KTRAP_FRAME NOK_X86_KTRAP_FRAME, * NOK_PX86_KTRAP_FRAME;
typedef struct _NOK_X86_KTRAP_FRAME_BLUE NOK_X86_KTRAP_FRAME_BLUE, * NOK_PX86_KTRAP_FRAME_BLUE;
typedef struct _NOK_XSAVE_AREA NOK_XSAVE_AREA, * NOK_PXSAVE_AREA;
typedef struct _NOK_XSAVE_AREA_HEADER NOK_XSAVE_AREA_HEADER, * NOK_PXSAVE_AREA_HEADER;
typedef struct _NOK_XSAVE_FORMAT NOK_XSAVE_FORMAT, * NOK_PXSAVE_FORMAT;
typedef struct _NOK_XSDT NOK_XSDT, * NOK_PXSDT;
typedef struct _NOK_XSTATE_CONFIGURATION NOK_XSTATE_CONFIGURATION, * NOK_PXSTATE_CONFIGURATION;
typedef struct _NOK_XSTATE_CONTEXT NOK_XSTATE_CONTEXT, * NOK_PXSTATE_CONTEXT;
typedef struct _NOK_XSTATE_FEATURE NOK_XSTATE_FEATURE, * NOK_PXSTATE_FEATURE;
typedef struct _NOK_XSTATE_SAVE NOK_XSTATE_SAVE, * NOK_PXSTATE_SAVE;
typedef struct _NOK__WIL__WNF_STATE_NAME NOK__WIL__WNF_STATE_NAME, * NOK_P_WIL__WNF_STATE_NAME;
typedef struct _NOK__WIL__WNF_TYPE_ID NOK__WIL__WNF_TYPE_ID, * NOK_P_WIL__WNF_TYPE_ID;
typedef struct _NOK__WIL__WNF_USER_SUBSCRIPTION NOK__WIL__WNF_USER_SUBSCRIPTION, * NOK_P_WIL__WNF_USER_SUBSCRIPTION;
typedef struct _NOK_flags NOK_flags, * NOK_Pflags;
typedef struct _NOK_iobuf NOK_iobuf, * NOK_Piobuf;
typedef struct _NOK_tlgProviderMetadata_t NOK_tlgProviderMetadata_t, * NOK_PtlgProviderMetadata_t;
typedef struct _NOK_tlgProvider_t NOK_tlgProvider_t, * NOK_PtlgProvider_t;
typedef struct _NOK_wil_details_UsageSubscriptionData NOK_wil_details_UsageSubscriptionData, * NOK_Pwil_details_UsageSubscriptionData;
typedef struct _NOK_tagSWITCH_CONTEXT NOK_tagSWITCH_CONTEXT, * NOK_PtagSWITCH_CONTEXT;
typedef struct _NOK_tagSWITCH_CONTEXT_ATTRIBUTE NOK_tagSWITCH_CONTEXT_ATTRIBUTE, * NOK_PtagSWITCH_CONTEXT_ATTRIBUTE;
typedef struct _NOK_tagSWITCH_CONTEXT_DATA NOK_tagSWITCH_CONTEXT_DATA, * NOK_PtagSWITCH_CONTEXT_DATA;
typedef struct _NOK_wil_FeatureState NOK_wil_FeatureState, * NOK_Pwil_FeatureState;
typedef struct _NOK_wil_StagingConfig NOK_wil_StagingConfig, * NOK_Pwil_StagingConfig;
typedef struct _NOK_wil_details_FeatureDescriptor NOK_wil_details_FeatureDescriptor, * NOK_Pwil_details_FeatureDescriptor;
typedef struct _NOK_wil_details_FeatureReportingCache NOK_wil_details_FeatureReportingCache, * NOK_Pwil_details_FeatureReportingCache;
typedef struct _NOK_wil_details_FeatureTestState NOK_wil_details_FeatureTestState, * NOK_Pwil_details_FeatureTestState;
typedef struct _NOK_wil_details_RecordUsageResult NOK_wil_details_RecordUsageResult, * NOK_Pwil_details_RecordUsageResult;
typedef struct _NOK_wil_details_StagingConfig NOK_wil_details_StagingConfig, * NOK_Pwil_details_StagingConfig;
typedef struct _NOK_wil_details_StagingConfigFeature NOK_wil_details_StagingConfigFeature, * NOK_Pwil_details_StagingConfigFeature;
typedef struct _NOK_wil_details_StagingConfigHeader NOK_wil_details_StagingConfigHeader, * NOK_Pwil_details_StagingConfigHeader;
typedef struct _NOK_wil_details_StagingConfigHeaderProperties NOK_wil_details_StagingConfigHeaderProperties, * NOK_Pwil_details_StagingConfigHeaderProperties;
typedef struct _NOK_wil_details_StagingConfigUsageTrigger NOK_wil_details_StagingConfigUsageTrigger, * NOK_Pwil_details_StagingConfigUsageTrigger;
typedef struct _NOK_wil_details_StagingConfigWnfStateName NOK_wil_details_StagingConfigWnfStateName, * NOK_Pwil_details_StagingConfigWnfStateName;
typedef enum _NOK_BUS_QUERY_ID_TYPE NOK_BUS_QUERY_ID_TYPE, * NOK_PBUS_QUERY_ID_TYPE;
typedef enum _NOK_DEVICE_TEXT_TYPE NOK_DEVICE_TEXT_TYPE, * NOK_PDEVICE_TEXT_TYPE;
typedef enum _NOK_DMA_COMPLETION_STATUS NOK_DMA_COMPLETION_STATUS, * NOK_PDMA_COMPLETION_STATUS;
typedef enum _NOK_ETW_COMPRESSION_RESUMPTION_MODE NOK_ETW_COMPRESSION_RESUMPTION_MODE, * NOK_PETW_COMPRESSION_RESUMPTION_MODE;
typedef enum _NOK_FEATURE_CHANGE_TIME NOK_FEATURE_CHANGE_TIME, * NOK_PFEATURE_CHANGE_TIME;
typedef enum _NOK_FEATURE_ENABLED_STATE NOK_FEATURE_ENABLED_STATE, * NOK_PFEATURE_ENABLED_STATE;
typedef enum _NOK_HAL_APIC_DESTINATION_MODE NOK_HAL_APIC_DESTINATION_MODE, * NOK_PHAL_APIC_DESTINATION_MODE;
typedef enum _NOK_HSTORAGE_TYPE NOK_HSTORAGE_TYPE, * NOK_PHSTORAGE_TYPE;
typedef enum _NOK_INTERRUPT_CONNECTION_TYPE NOK_INTERRUPT_CONNECTION_TYPE, * NOK_PINTERRUPT_CONNECTION_TYPE;
typedef enum _NOK_IRPLOCK NOK_IRPLOCK, * NOK_PIRPLOCK;
typedef enum _NOK_JOB_OBJECT_IO_RATE_CONTROL_FLAGS NOK_JOB_OBJECT_IO_RATE_CONTROL_FLAGS, * NOK_PJOB_OBJECT_IO_RATE_CONTROL_FLAGS;
typedef enum _NOK_JOB_OBJECT_NET_RATE_CONTROL_FLAGS NOK_JOB_OBJECT_NET_RATE_CONTROL_FLAGS, * NOK_PJOB_OBJECT_NET_RATE_CONTROL_FLAGS;
typedef enum _NOK_KD_CALLBACK_ACTION NOK_KD_CALLBACK_ACTION, * NOK_PKD_CALLBACK_ACTION;
typedef enum _NOK_KD_NAMESPACE_ENUM NOK_KD_NAMESPACE_ENUM, * NOK_PKD_NAMESPACE_ENUM;
typedef enum _NOK_KTM_STATE NOK_KTM_STATE, * NOK_PKTM_STATE;
typedef enum _NOK_LSA_FOREST_TRUST_RECORD_TYPE NOK_LSA_FOREST_TRUST_RECORD_TYPE, * NOK_PLSA_FOREST_TRUST_RECORD_TYPE;
typedef enum _NOK_PDCCLIENTID NOK_PDCCLIENTID, * NOK_PPDCCLIENTID;
typedef enum _NOK_PDC_ACTIVITY_TYPE NOK_PDC_ACTIVITY_TYPE, * NOK_PPDC_ACTIVITY_TYPE;
typedef enum _NOK_PDC_CS_PHASE NOK_PDC_CS_PHASE, * NOK_PPDC_CS_PHASE;
typedef enum _NOK_PDC_RESOURCE NOK_PDC_RESOURCE, * NOK_PPDC_RESOURCE;
typedef enum _NOK_POWER_ACTION NOK_POWER_ACTION, * NOK_PPOWER_ACTION;
typedef enum _NOK_POWER_POLICY_DEVICE_TYPE NOK_POWER_POLICY_DEVICE_TYPE, * NOK_PPOWER_POLICY_DEVICE_TYPE;
typedef enum _NOK_PPM_IDLE_BUCKET_TIME_TYPE NOK_PPM_IDLE_BUCKET_TIME_TYPE, * NOK_PPPM_IDLE_BUCKET_TIME_TYPE;
typedef enum _NOK_PROFILE_DEPARTURE_STYLE NOK_PROFILE_DEPARTURE_STYLE, * NOK_PPROFILE_DEPARTURE_STYLE;
typedef enum _NOK_PROFILE_STATUS NOK_PROFILE_STATUS, * NOK_PPROFILE_STATUS;
typedef enum _NOK_PS_CREATE_STATE NOK_PS_CREATE_STATE, * NOK_PPS_CREATE_STATE;
typedef enum _NOK_RTLP_CSPARSE_BITMAP_STATE NOK_RTLP_CSPARSE_BITMAP_STATE, * NOK_PRTLP_CSPARSE_BITMAP_STATE;
typedef enum _NOK_ReplacesCorHdrNumericDefines NOK_ReplacesCorHdrNumericDefines, * NOK_PReplacesCorHdrNumericDefines;
typedef enum _NOK_SE_WS_APPX_SIGNATURE_ORIGIN NOK_SE_WS_APPX_SIGNATURE_ORIGIN, * NOK_PSE_WS_APPX_SIGNATURE_ORIGIN;
typedef enum _NOK_SLEEPSTUDY_SPM_SCENARIO_CS_EXIT NOK_SLEEPSTUDY_SPM_SCENARIO_CS_EXIT, * NOK_PSLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
typedef enum _NOK_SYSTEM_POWER_CONDITION NOK_SYSTEM_POWER_CONDITION, * NOK_PSYSTEM_POWER_CONDITION;
typedef enum _NOK_TlgIn_t NOK_TlgIn_t, * NOK_PTlgIn_t;
typedef enum _NOK_TlgOut_t NOK_TlgOut_t, * NOK_PTlgOut_t;
typedef enum _NOK_UoWActionType NOK_UoWActionType, * NOK_PUoWActionType;
typedef enum _NOK_ADD_DRIVER_STAGE NOK_ADD_DRIVER_STAGE, * NOK_PADD_DRIVER_STAGE;
typedef enum _NOK_ALTERNATIVE_ARCHITECTURE_TYPE NOK_ALTERNATIVE_ARCHITECTURE_TYPE, * NOK_PALTERNATIVE_ARCHITECTURE_TYPE;
typedef enum _NOK_ARBITER_ACTION NOK_ARBITER_ACTION, * NOK_PARBITER_ACTION;
typedef enum _NOK_ARBITER_REQUEST_SOURCE NOK_ARBITER_REQUEST_SOURCE, * NOK_PARBITER_REQUEST_SOURCE;
typedef enum _NOK_ARBITER_RESULT NOK_ARBITER_RESULT, * NOK_PARBITER_RESULT;
typedef enum _NOK_BLOB_ID NOK_BLOB_ID, * NOK_PBLOB_ID;
typedef enum _NOK_BOOT_ENTROPY_SOURCE_ID NOK_BOOT_ENTROPY_SOURCE_ID, * NOK_PBOOT_ENTROPY_SOURCE_ID;
typedef enum _NOK_BOOT_ENTROPY_SOURCE_RESULT_CODE NOK_BOOT_ENTROPY_SOURCE_RESULT_CODE, * NOK_PBOOT_ENTROPY_SOURCE_RESULT_CODE;
typedef enum _NOK_BUGCHECK_RECOVERY_LOG_EVENT NOK_BUGCHECK_RECOVERY_LOG_EVENT, * NOK_PBUGCHECK_RECOVERY_LOG_EVENT;
typedef enum _NOK_BUS_DATA_TYPE NOK_BUS_DATA_TYPE, * NOK_PBUS_DATA_TYPE;
typedef enum _NOK_CMP_FAILURE_INJECTION_POINT NOK_CMP_FAILURE_INJECTION_POINT, * NOK_PCMP_FAILURE_INJECTION_POINT;
typedef enum _NOK_CM_DIRTY_VECTOR_OPERATION NOK_CM_DIRTY_VECTOR_OPERATION, * NOK_PCM_DIRTY_VECTOR_OPERATION;
typedef enum _NOK_CM_LOAD_FAILURE_TYPE NOK_CM_LOAD_FAILURE_TYPE, * NOK_PCM_LOAD_FAILURE_TYPE;
typedef enum _NOK_CM_SHARE_DISPOSITION NOK_CM_SHARE_DISPOSITION, * NOK_PCM_SHARE_DISPOSITION;
typedef enum _NOK_CONFIGURATION_CLASS NOK_CONFIGURATION_CLASS, * NOK_PCONFIGURATION_CLASS;
typedef enum _NOK_CONFIGURATION_TYPE NOK_CONFIGURATION_TYPE, * NOK_PCONFIGURATION_TYPE;
typedef enum _NOK_CREATE_FILE_TYPE NOK_CREATE_FILE_TYPE, * NOK_PCREATE_FILE_TYPE;
typedef enum _NOK_ConnectionResourceConsumerDesc NOK_ConnectionResourceConsumerDesc, * NOK_PConnectionResourceConsumerDesc;
typedef enum _NOK_DEVICE_POWER_STATE NOK_DEVICE_POWER_STATE, * NOK_PDEVICE_POWER_STATE;
typedef enum _NOK_DEVICE_RELATION_LEVEL NOK_DEVICE_RELATION_LEVEL, * NOK_PDEVICE_RELATION_LEVEL;
typedef enum _NOK_DEVICE_RELATION_TYPE NOK_DEVICE_RELATION_TYPE, * NOK_PDEVICE_RELATION_TYPE;
typedef enum _NOK_DEVICE_USAGE_NOTIFICATION_TYPE NOK_DEVICE_USAGE_NOTIFICATION_TYPE, * NOK_PDEVICE_USAGE_NOTIFICATION_TYPE;
typedef enum _NOK_DEVICE_WAKE_DEPTH NOK_DEVICE_WAKE_DEPTH, * NOK_PDEVICE_WAKE_DEPTH;
typedef enum _NOK_DEVPROP_OPERATOR NOK_DEVPROP_OPERATOR, * NOK_PDEVPROP_OPERATOR;
typedef enum _NOK_DIRECTORY_NOTIFY_INFORMATION_CLASS NOK_DIRECTORY_NOTIFY_INFORMATION_CLASS, * NOK_PDIRECTORY_NOTIFY_INFORMATION_CLASS;
typedef enum _NOK_DMA_INTERRUPT_TYPE NOK_DMA_INTERRUPT_TYPE, * NOK_PDMA_INTERRUPT_TYPE;
typedef enum _NOK_DMA_SPEED NOK_DMA_SPEED, * NOK_PDMA_SPEED;
typedef enum _NOK_DMA_WIDTH NOK_DMA_WIDTH, * NOK_PDMA_WIDTH;
typedef enum _NOK_DOMAIN_CONFIGURATION_ARCH NOK_DOMAIN_CONFIGURATION_ARCH, * NOK_PDOMAIN_CONFIGURATION_ARCH;
typedef enum _NOK_DUMP_EVENTS NOK_DUMP_EVENTS, * NOK_PDUMP_EVENTS;
typedef enum _NOK_ETW_BUFFER_STATE NOK_ETW_BUFFER_STATE, * NOK_PETW_BUFFER_STATE;
typedef enum _NOK_ETW_GUID_TYPE NOK_ETW_GUID_TYPE, * NOK_PETW_GUID_TYPE;
typedef enum _NOK_ETW_HEADER_TYPE NOK_ETW_HEADER_TYPE, * NOK_PETW_HEADER_TYPE;
typedef enum _NOK_ETW_NOTIFICATION_TYPE NOK_ETW_NOTIFICATION_TYPE, * NOK_PETW_NOTIFICATION_TYPE;
typedef enum _NOK_ETW_PERFECT_HASH_FUNCTION_TYPE NOK_ETW_PERFECT_HASH_FUNCTION_TYPE, * NOK_PETW_PERFECT_HASH_FUNCTION_TYPE;
typedef enum _NOK_ETW_PERIODIC_TIMER_STATE NOK_ETW_PERIODIC_TIMER_STATE, * NOK_PETW_PERIODIC_TIMER_STATE;
typedef enum _NOK_ETW_RT_EVENT_LOSS NOK_ETW_RT_EVENT_LOSS, * NOK_PETW_RT_EVENT_LOSS;
typedef enum _NOK_ETW_STRING_TOKEN_TYPE NOK_ETW_STRING_TOKEN_TYPE, * NOK_PETW_STRING_TOKEN_TYPE;
typedef enum _NOK_EVENT_INFO_CLASS NOK_EVENT_INFO_CLASS, * NOK_PEVENT_INFO_CLASS;
typedef enum _NOK_EVENT_TYPE NOK_EVENT_TYPE, * NOK_PEVENT_TYPE;
typedef enum _NOK_EXCEPTION_DISPOSITION NOK_EXCEPTION_DISPOSITION, * NOK_PEXCEPTION_DISPOSITION;
typedef enum _NOK_EXQUEUEINDEX NOK_EXQUEUEINDEX, * NOK_PEXQUEUEINDEX;
typedef enum _NOK_EXT_IOMMU_DEVICE_TYPE NOK_EXT_IOMMU_DEVICE_TYPE, * NOK_PEXT_IOMMU_DEVICE_TYPE;
typedef enum _NOK_EXT_IOMMU_TRANSLATION_TYPE NOK_EXT_IOMMU_TRANSLATION_TYPE, * NOK_PEXT_IOMMU_TRANSLATION_TYPE;
typedef enum _NOK_EX_GEN_RANDOM_DOMAIN NOK_EX_GEN_RANDOM_DOMAIN, * NOK_PEX_GEN_RANDOM_DOMAIN;
typedef enum _NOK_EX_HEAP_TYPE NOK_EX_HEAP_TYPE, * NOK_PEX_HEAP_TYPE;
typedef enum _NOK_EX_POOL_PRIORITY NOK_EX_POOL_PRIORITY, * NOK_PEX_POOL_PRIORITY;
typedef enum _NOK_FAULT_INFORMATION_ARCH NOK_FAULT_INFORMATION_ARCH, * NOK_PFAULT_INFORMATION_ARCH;
typedef enum _NOK_FAULT_INFORMATION_ARM64_TYPE NOK_FAULT_INFORMATION_ARM64_TYPE, * NOK_PFAULT_INFORMATION_ARM64_TYPE;
typedef enum _NOK_FILE_INFORMATION_CLASS NOK_FILE_INFORMATION_CLASS, * NOK_PFILE_INFORMATION_CLASS;
typedef enum _NOK_FILE_OBJECT_EXTENSION_TYPE NOK_FILE_OBJECT_EXTENSION_TYPE, * NOK_PFILE_OBJECT_EXTENSION_TYPE;
typedef enum _NOK_FSINFOCLASS NOK_FSINFOCLASS, * NOK_PFSINFOCLASS;
typedef enum _NOK_FS_FILTER_SECTION_SYNC_TYPE NOK_FS_FILTER_SECTION_SYNC_TYPE, * NOK_PFS_FILTER_SECTION_SYNC_TYPE;
typedef enum _NOK_FUNCTION_TABLE_TYPE NOK_FUNCTION_TABLE_TYPE, * NOK_PFUNCTION_TABLE_TYPE;
typedef enum _NOK_GPIO_PIN_CONFIG_TYPE NOK_GPIO_PIN_CONFIG_TYPE, * NOK_PGPIO_PIN_CONFIG_TYPE;
typedef enum _NOK_GPIO_PIN_IORESTRICTION_TYPE NOK_GPIO_PIN_IORESTRICTION_TYPE, * NOK_PGPIO_PIN_IORESTRICTION_TYPE;
typedef enum _NOK_HALP_DMA_ADAPTER_ALLOCATION_STATE NOK_HALP_DMA_ADAPTER_ALLOCATION_STATE, * NOK_PHALP_DMA_ADAPTER_ALLOCATION_STATE;
typedef enum _NOK_HALP_DMA_MAP_BUFFER_TYPE NOK_HALP_DMA_MAP_BUFFER_TYPE, * NOK_PHALP_DMA_MAP_BUFFER_TYPE;
typedef enum _NOK_HALP_EMERGENCY_LA_QUEUE_TYPE NOK_HALP_EMERGENCY_LA_QUEUE_TYPE, * NOK_PHALP_EMERGENCY_LA_QUEUE_TYPE;
typedef enum _NOK_HAL_CLOCK_TIMER_MODE NOK_HAL_CLOCK_TIMER_MODE, * NOK_PHAL_CLOCK_TIMER_MODE;
typedef enum _NOK_HAL_DMA_CRASH_DUMP_REGISTER_TYPE NOK_HAL_DMA_CRASH_DUMP_REGISTER_TYPE, * NOK_PHAL_DMA_CRASH_DUMP_REGISTER_TYPE;
typedef enum _NOK_HAL_INIT_PHASE NOK_HAL_INIT_PHASE, * NOK_PHAL_INIT_PHASE;
typedef enum _NOK_HAL_PROCESSOR_STAT_TYPE NOK_HAL_PROCESSOR_STAT_TYPE, * NOK_PHAL_PROCESSOR_STAT_TYPE;
typedef enum _NOK_HARDWARE_COUNTER_TYPE NOK_HARDWARE_COUNTER_TYPE, * NOK_PHARDWARE_COUNTER_TYPE;
typedef enum _NOK_HEAP_FAILURE_TYPE NOK_HEAP_FAILURE_TYPE, * NOK_PHEAP_FAILURE_TYPE;
typedef enum _NOK_HEAP_LFH_LOCKMODE NOK_HEAP_LFH_LOCKMODE, * NOK_PHEAP_LFH_LOCKMODE;
typedef enum _NOK_HEAP_SEGMGR_LARGE_PAGE_POLICY NOK_HEAP_SEGMGR_LARGE_PAGE_POLICY, * NOK_PHEAP_SEGMGR_LARGE_PAGE_POLICY;
typedef enum _NOK_HEAP_SEG_RANGE_TYPE NOK_HEAP_SEG_RANGE_TYPE, * NOK_PHEAP_SEG_RANGE_TYPE;
typedef enum _NOK_HV_EXT_EPF_MODE NOK_HV_EXT_EPF_MODE, * NOK_PHV_EXT_EPF_MODE;
typedef enum _NOK_INTERFACE_TYPE NOK_INTERFACE_TYPE, * NOK_PINTERFACE_TYPE;
typedef enum _NOK_INTERLOCKED_RESULT NOK_INTERLOCKED_RESULT, * NOK_PINTERLOCKED_RESULT;
typedef enum _NOK_INTERRUPT_PROBLEM NOK_INTERRUPT_PROBLEM, * NOK_PINTERRUPT_PROBLEM;
typedef enum _NOK_INTERRUPT_RESULT NOK_INTERRUPT_RESULT, * NOK_PINTERRUPT_RESULT;
typedef enum _NOK_INTERRUPT_TARGET_TYPE NOK_INTERRUPT_TARGET_TYPE, * NOK_PINTERRUPT_TARGET_TYPE;
typedef enum _NOK_INVPCID_TYPE NOK_INVPCID_TYPE, * NOK_PINVPCID_TYPE;
typedef enum _NOK_IOP_PRIORITY_HINT NOK_IOP_PRIORITY_HINT, * NOK_PIOP_PRIORITY_HINT;
typedef enum _NOK_IO_ALLOCATION_ACTION NOK_IO_ALLOCATION_ACTION, * NOK_PIO_ALLOCATION_ACTION;
typedef enum _NOK_IO_PRIORITY_HINT NOK_IO_PRIORITY_HINT, * NOK_PIO_PRIORITY_HINT;
typedef enum _NOK_IO_RATE_CONTROL_TYPE NOK_IO_RATE_CONTROL_TYPE, * NOK_PIO_RATE_CONTROL_TYPE;
typedef enum _NOK_IO_SESSION_STATE NOK_IO_SESSION_STATE, * NOK_PIO_SESSION_STATE;
typedef enum _NOK_IRQ_PRIORITY NOK_IRQ_PRIORITY, * NOK_PIRQ_PRIORITY;
typedef enum _NOK_JOBOBJECTINFOCLASS NOK_JOBOBJECTINFOCLASS, * NOK_PJOBOBJECTINFOCLASS;
typedef enum _NOK_KCONTINUE_TYPE NOK_KCONTINUE_TYPE, * NOK_PKCONTINUE_TYPE;
typedef enum _NOK_KENLISTMENT_STATE NOK_KENLISTMENT_STATE, * NOK_PKENLISTMENT_STATE;
typedef enum _NOK_KERNEL_STACK_LIMITS NOK_KERNEL_STACK_LIMITS, * NOK_PKERNEL_STACK_LIMITS;
typedef enum _NOK_KE_WAKE_SOURCE_TYPE NOK_KE_WAKE_SOURCE_TYPE, * NOK_PKE_WAKE_SOURCE_TYPE;
typedef enum _NOK_KHETERO_CPU_POLICY NOK_KHETERO_CPU_POLICY, * NOK_PKHETERO_CPU_POLICY;
typedef enum _NOK_KHETERO_CPU_QOS NOK_KHETERO_CPU_QOS, * NOK_PKHETERO_CPU_QOS;
typedef enum _NOK_KHETERO_RUNNING_TYPE NOK_KHETERO_RUNNING_TYPE, * NOK_PKHETERO_RUNNING_TYPE;
typedef enum _NOK_KINTERRUPT_MODE NOK_KINTERRUPT_MODE, * NOK_PKINTERRUPT_MODE;
typedef enum _NOK_KINTERRUPT_POLARITY NOK_KINTERRUPT_POLARITY, * NOK_PKINTERRUPT_POLARITY;
typedef enum _NOK_KI_CALLBACK NOK_KI_CALLBACK, * NOK_PKI_CALLBACK;
typedef enum _NOK_KNOWN_CONTROLLER_TYPE NOK_KNOWN_CONTROLLER_TYPE, * NOK_PKNOWN_CONTROLLER_TYPE;
typedef enum _NOK_KOBJECTS NOK_KOBJECTS, * NOK_PKOBJECTS;
typedef enum _NOK_KPROCESS_PPM_POLICY NOK_KPROCESS_PPM_POLICY, * NOK_PKPROCESS_PPM_POLICY;
typedef enum _NOK_KPROCESS_STATE NOK_KPROCESS_STATE, * NOK_PKPROCESS_STATE;
typedef enum _NOK_KPROFILE_SOURCE NOK_KPROFILE_SOURCE, * NOK_PKPROFILE_SOURCE;
typedef enum _NOK_KRESOURCEMANAGER_STATE NOK_KRESOURCEMANAGER_STATE, * NOK_PKRESOURCEMANAGER_STATE;
typedef enum _NOK_KTHREAD_PPM_POLICY NOK_KTHREAD_PPM_POLICY, * NOK_PKTHREAD_PPM_POLICY;
typedef enum _NOK_KTHREAD_STATE NOK_KTHREAD_STATE, * NOK_PKTHREAD_STATE;
typedef enum _NOK_KTHREAD_TAG NOK_KTHREAD_TAG, * NOK_PKTHREAD_TAG;
typedef enum _NOK_KTIMER2_COLLECTION_INDEX NOK_KTIMER2_COLLECTION_INDEX, * NOK_PKTIMER2_COLLECTION_INDEX;
typedef enum _NOK_KTRANSACTION_OUTCOME NOK_KTRANSACTION_OUTCOME, * NOK_PKTRANSACTION_OUTCOME;
typedef enum _NOK_KTRANSACTION_STATE NOK_KTRANSACTION_STATE, * NOK_PKTRANSACTION_STATE;
typedef enum _NOK_KWAIT_BLOCK_STATE NOK_KWAIT_BLOCK_STATE, * NOK_PKWAIT_BLOCK_STATE;
typedef enum _NOK_KWAIT_REASON NOK_KWAIT_REASON, * NOK_PKWAIT_REASON;
typedef enum _NOK_KWAIT_STATE NOK_KWAIT_STATE, * NOK_PKWAIT_STATE;
typedef enum _NOK_LDR_DDAG_STATE NOK_LDR_DDAG_STATE, * NOK_PLDR_DDAG_STATE;
typedef enum _NOK_LDR_DLL_LOAD_REASON NOK_LDR_DLL_LOAD_REASON, * NOK_PLDR_DLL_LOAD_REASON;
typedef enum _NOK_LOCK_OPERATION NOK_LOCK_OPERATION, * NOK_PLOCK_OPERATION;
typedef enum _NOK_MACHINE_CHECK_NESTING_LEVEL NOK_MACHINE_CHECK_NESTING_LEVEL, * NOK_PMACHINE_CHECK_NESTING_LEVEL;
typedef enum _NOK_MEMORY_CACHING_TYPE NOK_MEMORY_CACHING_TYPE, * NOK_PMEMORY_CACHING_TYPE;
typedef enum _NOK_MEMORY_CACHING_TYPE_ORIG NOK_MEMORY_CACHING_TYPE_ORIG, * NOK_PMEMORY_CACHING_TYPE_ORIG;
typedef enum _NOK_MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE NOK_MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE, * NOK_PMEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
typedef enum _NOK_MI_ALTERNATE_LOCK_VA_TYPE NOK_MI_ALTERNATE_LOCK_VA_TYPE, * NOK_PMI_ALTERNATE_LOCK_VA_TYPE;
typedef enum _NOK_MI_ASSIGNED_REGION_TYPES NOK_MI_ASSIGNED_REGION_TYPES, * NOK_PMI_ASSIGNED_REGION_TYPES;
typedef enum _NOK_MI_AVAILABLE_PAGE_WAIT_TYPES NOK_MI_AVAILABLE_PAGE_WAIT_TYPES, * NOK_PMI_AVAILABLE_PAGE_WAIT_TYPES;
typedef enum _NOK_MI_CFG_BITMAP_TYPE NOK_MI_CFG_BITMAP_TYPE, * NOK_PMI_CFG_BITMAP_TYPE;
typedef enum _NOK_MI_CROSS_PARTITION_CHARGE_TYPE NOK_MI_CROSS_PARTITION_CHARGE_TYPE, * NOK_PMI_CROSS_PARTITION_CHARGE_TYPE;
typedef enum _NOK_MI_DYNAMICBASE_BITMAP NOK_MI_DYNAMICBASE_BITMAP, * NOK_PMI_DYNAMICBASE_BITMAP;
typedef enum _NOK_MI_ENCLAVE_TYPE NOK_MI_ENCLAVE_TYPE, * NOK_PMI_ENCLAVE_TYPE;
typedef enum _NOK_MI_INPAGE_SUPPORT_TYPES NOK_MI_INPAGE_SUPPORT_TYPES, * NOK_PMI_INPAGE_SUPPORT_TYPES;
typedef enum _NOK_MI_IO_PFN_TYPE NOK_MI_IO_PFN_TYPE, * NOK_PMI_IO_PFN_TYPE;
typedef enum _NOK_MI_KSTACK_TYPE NOK_MI_KSTACK_TYPE, * NOK_PMI_KSTACK_TYPE;
typedef enum _NOK_MI_MEMORY_EVENT_TYPES NOK_MI_MEMORY_EVENT_TYPES, * NOK_PMI_MEMORY_EVENT_TYPES;
typedef enum _NOK_MI_MEMORY_HIGHLOW NOK_MI_MEMORY_HIGHLOW, * NOK_PMI_MEMORY_HIGHLOW;
typedef enum _NOK_MI_MIRROR_BITMAP_TYPES NOK_MI_MIRROR_BITMAP_TYPES, * NOK_PMI_MIRROR_BITMAP_TYPES;
typedef enum _NOK_MI_PARTITION_THREAD NOK_MI_PARTITION_THREAD, * NOK_PMI_PARTITION_THREAD;
typedef enum _NOK_MI_PFN_CACHE_ATTRIBUTE NOK_MI_PFN_CACHE_ATTRIBUTE, * NOK_PMI_PFN_CACHE_ATTRIBUTE;
typedef enum _NOK_MI_SHARED_USER_PAGE_TYPES NOK_MI_SHARED_USER_PAGE_TYPES, * NOK_PMI_SHARED_USER_PAGE_TYPES;
typedef enum _NOK_MI_SLAB_ALLOCATOR_PROTECTION NOK_MI_SLAB_ALLOCATOR_PROTECTION, * NOK_PMI_SLAB_ALLOCATOR_PROTECTION;
typedef enum _NOK_MI_SLAB_ALLOCATOR_TYPE NOK_MI_SLAB_ALLOCATOR_TYPE, * NOK_PMI_SLAB_ALLOCATOR_TYPE;
typedef enum _NOK_MI_SUBVAD_LISTS NOK_MI_SUBVAD_LISTS, * NOK_PMI_SUBVAD_LISTS;
typedef enum _NOK_MI_SYSTEM_VA_TYPE NOK_MI_SYSTEM_VA_TYPE, * NOK_PMI_SYSTEM_VA_TYPE;
typedef enum _NOK_MI_VAD_64K_TYPES NOK_MI_VAD_64K_TYPES, * NOK_PMI_VAD_64K_TYPES;
typedef enum _NOK_MI_VAD_ALLOCATION_CELL_TYPE NOK_MI_VAD_ALLOCATION_CELL_TYPE, * NOK_PMI_VAD_ALLOCATION_CELL_TYPE;
typedef enum _NOK_MI_WORKING_SET_TYPE NOK_MI_WORKING_SET_TYPE, * NOK_PMI_WORKING_SET_TYPE;
typedef enum _NOK_MI_WRITE_TYPES NOK_MI_WRITE_TYPES, * NOK_PMI_WRITE_TYPES;
typedef enum _NOK_MMLISTS NOK_MMLISTS, * NOK_PMMLISTS;
typedef enum _NOK_MM_PAGE_ACCESS_TYPE NOK_MM_PAGE_ACCESS_TYPE, * NOK_PMM_PAGE_ACCESS_TYPE;
typedef enum _NOK_MODE NOK_MODE, * NOK_PMODE;
typedef enum _NOK_NT_PRODUCT_TYPE NOK_NT_PRODUCT_TYPE, * NOK_PNT_PRODUCT_TYPE;
typedef enum _NOK_OBJECT_INFORMATION_CLASS NOK_OBJECT_INFORMATION_CLASS, * NOK_POBJECT_INFORMATION_CLASS;
typedef enum _NOK_OB_OPEN_REASON NOK_OB_OPEN_REASON, * NOK_POB_OPEN_REASON;
typedef enum _NOK_OPENCOUNT_REASON NOK_OPENCOUNT_REASON, * NOK_POPENCOUNT_REASON;
typedef enum _NOK_PCI_BUSMASTER_RID_TYPE NOK_PCI_BUSMASTER_RID_TYPE, * NOK_PPCI_BUSMASTER_RID_TYPE;
typedef enum _NOK_PCW_CALLBACK_TYPE NOK_PCW_CALLBACK_TYPE, * NOK_PPCW_CALLBACK_TYPE;
typedef enum _NOK_PEP_ACPI_RESOURCE_TYPE NOK_PEP_ACPI_RESOURCE_TYPE, * NOK_PPEP_ACPI_RESOURCE_TYPE;
typedef enum _NOK_PEP_WORK_TYPE NOK_PEP_WORK_TYPE, * NOK_PPEP_WORK_TYPE;
typedef enum _NOK_PERFINFO_KERNELMEMORY_USAGE_TYPE NOK_PERFINFO_KERNELMEMORY_USAGE_TYPE, * NOK_PPERFINFO_KERNELMEMORY_USAGE_TYPE;
typedef enum _NOK_PERFINFO_MM_STAT NOK_PERFINFO_MM_STAT, * NOK_PPERFINFO_MM_STAT;
typedef enum _NOK_PF_FILE_ACCESS_TYPE NOK_PF_FILE_ACCESS_TYPE, * NOK_PPF_FILE_ACCESS_TYPE;
typedef enum _NOK_PLUGPLAY_EVENT_CATEGORY NOK_PLUGPLAY_EVENT_CATEGORY, * NOK_PPLUGPLAY_EVENT_CATEGORY;
typedef enum _NOK_PNP_DEVICE_ACTION_REQUEST NOK_PNP_DEVICE_ACTION_REQUEST, * NOK_PPNP_DEVICE_ACTION_REQUEST;
typedef enum _NOK_PNP_DEVICE_DELETE_TYPE NOK_PNP_DEVICE_DELETE_TYPE, * NOK_PPNP_DEVICE_DELETE_TYPE;
typedef enum _NOK_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON NOK_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON, * NOK_PPNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;
typedef enum _NOK_PNP_DEVNODE_STATE NOK_PNP_DEVNODE_STATE, * NOK_PPNP_DEVNODE_STATE;
typedef enum _NOK_PNP_REBALANCE_FAILURE NOK_PNP_REBALANCE_FAILURE, * NOK_PPNP_REBALANCE_FAILURE;
typedef enum _NOK_PNP_REBALANCE_REASON NOK_PNP_REBALANCE_REASON, * NOK_PPNP_REBALANCE_REASON;
typedef enum _NOK_PNP_VETO_TYPE NOK_PNP_VETO_TYPE, * NOK_PPNP_VETO_TYPE;
typedef enum _NOK_PNP_WATCHDOG_TYPE NOK_PNP_WATCHDOG_TYPE, * NOK_PPNP_WATCHDOG_TYPE;
typedef enum _NOK_POLICY_AUDIT_EVENT_TYPE NOK_POLICY_AUDIT_EVENT_TYPE, * NOK_PPOLICY_AUDIT_EVENT_TYPE;
typedef enum _NOK_POOL_TYPE NOK_POOL_TYPE, * NOK_PPOOL_TYPE;
typedef enum _NOK_POP_DEEP_SLEEP_DISENGAGE_REASON NOK_POP_DEEP_SLEEP_DISENGAGE_REASON, * NOK_PPOP_DEEP_SLEEP_DISENGAGE_REASON;
typedef enum _NOK_POP_DEVICE_IDLE_TYPE NOK_POP_DEVICE_IDLE_TYPE, * NOK_PPOP_DEVICE_IDLE_TYPE;
typedef enum _NOK_POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON NOK_POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON, * NOK_PPOP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;
typedef enum _NOK_POP_FX_WORK_POOL_QUEUE NOK_POP_FX_WORK_POOL_QUEUE, * NOK_PPOP_FX_WORK_POOL_QUEUE;
typedef enum _NOK_POP_IO_STATUS NOK_POP_IO_STATUS, * NOK_PPOP_IO_STATUS;
typedef enum _NOK_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON NOK_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON, * NOK_PPOP_PEP_NOTIFY_DEVICE_DSTATE_REASON;
typedef enum _NOK_POP_POWER_ACTION_WATCHDOG_STATE NOK_POP_POWER_ACTION_WATCHDOG_STATE, * NOK_PPOP_POWER_ACTION_WATCHDOG_STATE;
typedef enum _NOK_POP_SLEEP_CHECKPOINT NOK_POP_SLEEP_CHECKPOINT, * NOK_PPOP_SLEEP_CHECKPOINT;
typedef enum _NOK_POP_SLEEP_CHECKPOINT_STATUS NOK_POP_SLEEP_CHECKPOINT_STATUS, * NOK_PPOP_SLEEP_CHECKPOINT_STATUS;
typedef enum _NOK_POP_SYSTEM_IDLE_EVENT_TYPE NOK_POP_SYSTEM_IDLE_EVENT_TYPE, * NOK_PPOP_SYSTEM_IDLE_EVENT_TYPE;
typedef enum _NOK_POWER_INFORMATION_LEVEL_INTERNAL NOK_POWER_INFORMATION_LEVEL_INTERNAL, * NOK_PPOWER_INFORMATION_LEVEL_INTERNAL;
typedef enum _NOK_POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI NOK_POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI, * NOK_PPOWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;
typedef enum _NOK_POWER_REQUEST_TYPE NOK_POWER_REQUEST_TYPE, * NOK_PPOWER_REQUEST_TYPE;
typedef enum _NOK_POWER_REQUEST_TYPE_INTERNAL NOK_POWER_REQUEST_TYPE_INTERNAL, * NOK_PPOWER_REQUEST_TYPE_INTERNAL;
typedef enum _NOK_POWER_STATE_TYPE NOK_POWER_STATE_TYPE, * NOK_PPOWER_STATE_TYPE;
typedef enum _NOK_PO_CS_DEVICE_NOTIFICATION_TYPE NOK_PO_CS_DEVICE_NOTIFICATION_TYPE, * NOK_PPO_CS_DEVICE_NOTIFICATION_TYPE;
typedef enum _NOK_PO_FX_PERF_STATE_TYPE NOK_PO_FX_PERF_STATE_TYPE, * NOK_PPO_FX_PERF_STATE_TYPE;
typedef enum _NOK_PO_FX_PERF_STATE_UNIT NOK_PO_FX_PERF_STATE_UNIT, * NOK_PPO_FX_PERF_STATE_UNIT;
typedef enum _NOK_PO_HIBER_FORCE_DISABLE_REASON NOK_PO_HIBER_FORCE_DISABLE_REASON, * NOK_PPO_HIBER_FORCE_DISABLE_REASON;
typedef enum _NOK_PO_MODERN_SLEEP_ACTION NOK_PO_MODERN_SLEEP_ACTION, * NOK_PPO_MODERN_SLEEP_ACTION;
typedef enum _NOK_PPM_PERF_QOS_DISABLE_REASON NOK_PPM_PERF_QOS_DISABLE_REASON, * NOK_PPPM_PERF_QOS_DISABLE_REASON;
typedef enum _NOK_PP_NPAGED_LOOKASIDE_NUMBER NOK_PP_NPAGED_LOOKASIDE_NUMBER, * NOK_PPP_NPAGED_LOOKASIDE_NUMBER;
typedef enum _NOK_PROCESSOR_CACHE_TYPE NOK_PROCESSOR_CACHE_TYPE, * NOK_PPROCESSOR_CACHE_TYPE;
typedef enum _NOK_PROCESSOR_PRESENCE NOK_PROCESSOR_PRESENCE, * NOK_PPROCESSOR_PRESENCE;
typedef enum _NOK_PROCESS_SECTION_TYPE NOK_PROCESS_SECTION_TYPE, * NOK_PPROCESS_SECTION_TYPE;
typedef enum _NOK_PROCESS_TERMINATE_REQUEST_REASON NOK_PROCESS_TERMINATE_REQUEST_REASON, * NOK_PPROCESS_TERMINATE_REQUEST_REASON;
typedef enum _NOK_PROCESS_VA_TYPE NOK_PROCESS_VA_TYPE, * NOK_PPROCESS_VA_TYPE;
typedef enum _NOK_PROC_HYPERVISOR_STATE NOK_PROC_HYPERVISOR_STATE, * NOK_PPROC_HYPERVISOR_STATE;
typedef enum _NOK_PS_ATTRIBUTE_NUM NOK_PS_ATTRIBUTE_NUM, * NOK_PPS_ATTRIBUTE_NUM;
typedef enum _NOK_PS_MITIGATION_OPTION NOK_PS_MITIGATION_OPTION, * NOK_PPS_MITIGATION_OPTION;
typedef enum _NOK_PS_PROTECTED_SIGNER NOK_PS_PROTECTED_SIGNER, * NOK_PPS_PROTECTED_SIGNER;
typedef enum _NOK_PS_PROTECTED_TYPE NOK_PS_PROTECTED_TYPE, * NOK_PPS_PROTECTED_TYPE;
typedef enum _NOK_PS_RESOURCE_TYPE NOK_PS_RESOURCE_TYPE, * NOK_PPS_RESOURCE_TYPE;
typedef enum _NOK_PS_STD_HANDLE_STATE NOK_PS_STD_HANDLE_STATE, * NOK_PPS_STD_HANDLE_STATE;
typedef enum _NOK_PS_WAKE_REASON NOK_PS_WAKE_REASON, * NOK_PPS_WAKE_REASON;
typedef enum _NOK_REG_NOTIFY_CLASS NOK_REG_NOTIFY_CLASS, * NOK_PREG_NOTIFY_CLASS;
typedef enum _NOK_REQUESTER_TYPE NOK_REQUESTER_TYPE, * NOK_PREQUESTER_TYPE;
typedef enum _NOK_RTLP_HP_ADDRESS_SPACE_TYPE NOK_RTLP_HP_ADDRESS_SPACE_TYPE, * NOK_PRTLP_HP_ADDRESS_SPACE_TYPE;
typedef enum _NOK_RTLP_HP_ALLOCATOR NOK_RTLP_HP_ALLOCATOR, * NOK_PRTLP_HP_ALLOCATOR;
typedef enum _NOK_RTLP_HP_LOCK_TYPE NOK_RTLP_HP_LOCK_TYPE, * NOK_PRTLP_HP_LOCK_TYPE;
typedef enum _NOK_RTLP_HP_MEMORY_TYPE NOK_RTLP_HP_MEMORY_TYPE, * NOK_PRTLP_HP_MEMORY_TYPE;
typedef enum _NOK_RTL_FEATURE_CONFIGURATION_PRIORITY NOK_RTL_FEATURE_CONFIGURATION_PRIORITY, * NOK_PRTL_FEATURE_CONFIGURATION_PRIORITY;
typedef enum _NOK_RTL_FEATURE_CONFIGURATION_TYPE NOK_RTL_FEATURE_CONFIGURATION_TYPE, * NOK_PRTL_FEATURE_CONFIGURATION_TYPE;
typedef enum _NOK_RTL_FEATURE_ENABLED_STATE_OPTIONS NOK_RTL_FEATURE_ENABLED_STATE_OPTIONS, * NOK_PRTL_FEATURE_ENABLED_STATE_OPTIONS;
typedef enum _NOK_RTL_GENERIC_COMPARE_RESULTS NOK_RTL_GENERIC_COMPARE_RESULTS, * NOK_PRTL_GENERIC_COMPARE_RESULTS;
typedef enum _NOK_RTL_MEMORY_TYPE NOK_RTL_MEMORY_TYPE, * NOK_PRTL_MEMORY_TYPE;
typedef enum _NOK_SECURITY_IMPERSONATION_LEVEL NOK_SECURITY_IMPERSONATION_LEVEL, * NOK_PSECURITY_IMPERSONATION_LEVEL;
typedef enum _NOK_SECURITY_OPERATION_CODE NOK_SECURITY_OPERATION_CODE, * NOK_PSECURITY_OPERATION_CODE;
typedef enum _NOK_SEP_CACHED_HANDLES_ENTRY_TYPE NOK_SEP_CACHED_HANDLES_ENTRY_TYPE, * NOK_PSEP_CACHED_HANDLES_ENTRY_TYPE;
typedef enum _NOK_SERVERSILO_STATE NOK_SERVERSILO_STATE, * NOK_PSERVERSILO_STATE;
typedef enum _NOK_SKSERVICE NOK_SKSERVICE, * NOK_PSKSERVICE;
typedef enum _NOK_SYSTEM_DLL_TYPE NOK_SYSTEM_DLL_TYPE, * NOK_PSYSTEM_DLL_TYPE;
typedef enum _NOK_SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE NOK_SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE, * NOK_PSYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
typedef enum _NOK_SYSTEM_INFORMATION_CLASS NOK_SYSTEM_INFORMATION_CLASS, * NOK_PSYSTEM_INFORMATION_CLASS;
typedef enum _NOK_SYSTEM_POWER_STATE NOK_SYSTEM_POWER_STATE, * NOK_PSYSTEM_POWER_STATE;
typedef enum _NOK_SYSTEM_PROCESS_CLASSIFICATION NOK_SYSTEM_PROCESS_CLASSIFICATION, * NOK_PSYSTEM_PROCESS_CLASSIFICATION;
typedef enum _NOK_THREAD_WORKLOAD_CLASS NOK_THREAD_WORKLOAD_CLASS, * NOK_PTHREAD_WORKLOAD_CLASS;
typedef enum _NOK_TOKEN_TYPE NOK_TOKEN_TYPE, * NOK_PTOKEN_TYPE;
typedef enum _NOK_TP_CALLBACK_PRIORITY NOK_TP_CALLBACK_PRIORITY, * NOK_PTP_CALLBACK_PRIORITY;
typedef enum _NOK_TRACE_INFORMATION_CLASS NOK_TRACE_INFORMATION_CLASS, * NOK_PTRACE_INFORMATION_CLASS;
typedef enum _NOK_TRANSFER_TYPE NOK_TRANSFER_TYPE, * NOK_PTRANSFER_TYPE;
typedef enum _NOK_TYPE_OF_MEMORY NOK_TYPE_OF_MEMORY, * NOK_PTYPE_OF_MEMORY;
typedef enum _NOK_TlgBlob_t NOK_TlgBlob_t, * NOK_PTlgBlob_t;
typedef enum _NOK_USER_ACTIVITY_PRESENCE NOK_USER_ACTIVITY_PRESENCE, * NOK_PUSER_ACTIVITY_PRESENCE;
typedef enum _NOK_VI_DEADLOCK_RESOURCE_TYPE NOK_VI_DEADLOCK_RESOURCE_TYPE, * NOK_PVI_DEADLOCK_RESOURCE_TYPE;
typedef enum _NOK_VRF_RULE_CLASS_ID NOK_VRF_RULE_CLASS_ID, * NOK_PVRF_RULE_CLASS_ID;
typedef enum _NOK_VRF_TRIAGE_CONTEXT NOK_VRF_TRIAGE_CONTEXT, * NOK_PVRF_TRIAGE_CONTEXT;
typedef enum _NOK_WHEA_CPU_VENDOR NOK_WHEA_CPU_VENDOR, * NOK_PWHEA_CPU_VENDOR;
typedef enum _NOK_WHEA_ERROR_PACKET_DATA_FORMAT NOK_WHEA_ERROR_PACKET_DATA_FORMAT, * NOK_PWHEA_ERROR_PACKET_DATA_FORMAT;
typedef enum _NOK_WHEA_ERROR_SEVERITY NOK_WHEA_ERROR_SEVERITY, * NOK_PWHEA_ERROR_SEVERITY;
typedef enum _NOK_WHEA_ERROR_SOURCE_STATE NOK_WHEA_ERROR_SOURCE_STATE, * NOK_PWHEA_ERROR_SOURCE_STATE;
typedef enum _NOK_WHEA_ERROR_SOURCE_TYPE NOK_WHEA_ERROR_SOURCE_TYPE, * NOK_PWHEA_ERROR_SOURCE_TYPE;
typedef enum _NOK_WHEA_ERROR_TYPE NOK_WHEA_ERROR_TYPE, * NOK_PWHEA_ERROR_TYPE;
typedef enum _NOK_WHEA_EVENT_LOG_ENTRY_ID NOK_WHEA_EVENT_LOG_ENTRY_ID, * NOK_PWHEA_EVENT_LOG_ENTRY_ID;
typedef enum _NOK_WHEA_EVENT_LOG_ENTRY_TYPE NOK_WHEA_EVENT_LOG_ENTRY_TYPE, * NOK_PWHEA_EVENT_LOG_ENTRY_TYPE;
typedef enum _NOK_WHEA_RECOVERY_CONTEXT_ERROR_TYPE NOK_WHEA_RECOVERY_CONTEXT_ERROR_TYPE, * NOK_PWHEA_RECOVERY_CONTEXT_ERROR_TYPE;
typedef enum _NOK_WNF_DATA_SCOPE NOK_WNF_DATA_SCOPE, * NOK_PWNF_DATA_SCOPE;
typedef enum _NOK_WNF_STATE_NAME_LIFETIME NOK_WNF_STATE_NAME_LIFETIME, * NOK_PWNF_STATE_NAME_LIFETIME;
typedef enum _NOK_WNF_SUBSCRIPTION_STATE NOK_WNF_SUBSCRIPTION_STATE, * NOK_PWNF_SUBSCRIPTION_STATE;
typedef enum _NOK_WORKING_SET_TYPE NOK_WORKING_SET_TYPE, * NOK_PWORKING_SET_TYPE;
typedef enum _NOK_WOW64_SHARED_INFORMATION NOK_WOW64_SHARED_INFORMATION, * NOK_PWOW64_SHARED_INFORMATION;
typedef enum _NOK_wil_FeatureChangeTime NOK_wil_FeatureChangeTime, * NOK_Pwil_FeatureChangeTime;
typedef enum _NOK_wil_FeatureEnabledState NOK_wil_FeatureEnabledState, * NOK_Pwil_FeatureEnabledState;
typedef enum _NOK_wil_FeatureEnabledStateKind NOK_wil_FeatureEnabledStateKind, * NOK_Pwil_FeatureEnabledStateKind;
typedef enum _NOK_wil_FeatureEnabledStateOptions NOK_wil_FeatureEnabledStateOptions, * NOK_Pwil_FeatureEnabledStateOptions;
typedef enum _NOK_wil_FeatureStage NOK_wil_FeatureStage, * NOK_Pwil_FeatureStage;
typedef enum _NOK_wil_FeatureStore NOK_wil_FeatureStore, * NOK_Pwil_FeatureStore;
typedef enum _NOK_wil_FeatureVariantPayloadKind NOK_wil_FeatureVariantPayloadKind, * NOK_Pwil_FeatureVariantPayloadKind;
typedef enum _NOK_wil_ReportingKind NOK_wil_ReportingKind, * NOK_Pwil_ReportingKind;
typedef enum _NOK_wil_UsageReportingMode NOK_wil_UsageReportingMode, * NOK_Pwil_UsageReportingMode;
typedef enum _NOK_wil_VariantReportingKind NOK_wil_VariantReportingKind, * NOK_Pwil_VariantReportingKind;
typedef enum _NOK_wil_details_FeatureTestStateKind NOK_wil_details_FeatureTestStateKind, * NOK_Pwil_details_FeatureTestStateKind;
typedef enum _NOK_wil_details_ServiceReportingKind NOK_wil_details_ServiceReportingKind, * NOK_Pwil_details_ServiceReportingKind;
typedef enum _NOK_wil_details_ServiceReportingOptions NOK_wil_details_ServiceReportingOptions, * NOK_Pwil_details_ServiceReportingOptions;
typedef enum _NOK_wil_details_StagingConfigFeatureFields NOK_wil_details_StagingConfigFeatureFields, * NOK_Pwil_details_StagingConfigFeatureFields;
typedef union _NOK_RTLP_HP_LFH_PERF_FLAGS NOK_RTLP_HP_LFH_PERF_FLAGS, * NOK_PRTLP_HP_LFH_PERF_FLAGS;
typedef union _NOK_AER_BRIDGE_DESCRIPTOR_FLAGS NOK_AER_BRIDGE_DESCRIPTOR_FLAGS, * NOK_PAER_BRIDGE_DESCRIPTOR_FLAGS;
typedef union _NOK_AER_ENDPOINT_DESCRIPTOR_FLAGS NOK_AER_ENDPOINT_DESCRIPTOR_FLAGS, * NOK_PAER_ENDPOINT_DESCRIPTOR_FLAGS;
typedef union _NOK_AER_ROOTPORT_DESCRIPTOR_FLAGS NOK_AER_ROOTPORT_DESCRIPTOR_FLAGS, * NOK_PAER_ROOTPORT_DESCRIPTOR_FLAGS;
typedef union _NOK_CLS_LSN NOK_CLS_LSN, * NOK_PCLS_LSN;
typedef union _NOK_CM_TRANS_PTR NOK_CM_TRANS_PTR, * NOK_PCM_TRANS_PTR;
typedef union _NOK_CPU_INFO NOK_CPU_INFO, * NOK_PCPU_INFO;
typedef union _NOK_CVDD NOK_CVDD, * NOK_PCVDD;
typedef union _NOK_ENERGY_STATE_DURATION NOK_ENERGY_STATE_DURATION, * NOK_PENERGY_STATE_DURATION;
typedef union _NOK_FILE_SEGMENT_ELEMENT NOK_FILE_SEGMENT_ELEMENT, * NOK_PFILE_SEGMENT_ELEMENT;
typedef union _NOK_FS_FILTER_PARAMETERS NOK_FS_FILTER_PARAMETERS, * NOK_PFS_FILTER_PARAMETERS;
typedef union _NOK_HAL_UNMASKED_INTERRUPT_FLAGS NOK_HAL_UNMASKED_INTERRUPT_FLAGS, * NOK_PHAL_UNMASKED_INTERRUPT_FLAGS;
typedef union _NOK_HANDLE_TABLE_ENTRY NOK_HANDLE_TABLE_ENTRY, * NOK_PHANDLE_TABLE_ENTRY;
typedef union _NOK_HEAP_LFH_ONDEMAND_POINTER NOK_HEAP_LFH_ONDEMAND_POINTER, * NOK_PHEAP_LFH_ONDEMAND_POINTER;
typedef union _NOK_HEAP_LFH_SUBSEGMENT_DELAY_FREE NOK_HEAP_LFH_SUBSEGMENT_DELAY_FREE, * NOK_PHEAP_LFH_SUBSEGMENT_DELAY_FREE;
typedef union _NOK_HEAP_LFH_SUBSEGMENT_STATS NOK_HEAP_LFH_SUBSEGMENT_STATS, * NOK_PHEAP_LFH_SUBSEGMENT_STATS;
typedef union _NOK_HEAP_PAGE_SEGMENT NOK_HEAP_PAGE_SEGMENT, * NOK_PHEAP_PAGE_SEGMENT;
typedef union _NOK_HEAP_SEGMENT_MGR_COMMIT_STATE NOK_HEAP_SEGMENT_MGR_COMMIT_STATE, * NOK_PHEAP_SEGMENT_MGR_COMMIT_STATE;
typedef union _NOK_HEAP_VS_CHUNK_HEADER_SIZE NOK_HEAP_VS_CHUNK_HEADER_SIZE, * NOK_PHEAP_VS_CHUNK_HEADER_SIZE;
typedef union _NOK_HV_PARTITION_PRIVILEGE_MASK NOK_HV_PARTITION_PRIVILEGE_MASK, * NOK_PHV_PARTITION_PRIVILEGE_MASK;
typedef union _NOK_INVPCID_DESCRIPTOR NOK_INVPCID_DESCRIPTOR, * NOK_PINVPCID_DESCRIPTOR;
typedef union _NOK_IOMMU_SVM_CAPABILITIES NOK_IOMMU_SVM_CAPABILITIES, * NOK_PIOMMU_SVM_CAPABILITIES;
typedef union _NOK_JOBOBJECT_ENERGY_TRACKING_STATE NOK_JOBOBJECT_ENERGY_TRACKING_STATE, * NOK_PJOBOBJECT_ENERGY_TRACKING_STATE;
typedef union _NOK_KALPC_DIRECT_EVENT NOK_KALPC_DIRECT_EVENT, * NOK_PKALPC_DIRECT_EVENT;
typedef union _NOK_KEXECUTE_OPTIONS NOK_KEXECUTE_OPTIONS, * NOK_PKEXECUTE_OPTIONS;
typedef union _NOK_KGDTENTRY64 NOK_KGDTENTRY64, * NOK_PKGDTENTRY64;
typedef union _NOK_KIDTENTRY64 NOK_KIDTENTRY64, * NOK_PKIDTENTRY64;
typedef union _NOK_KLOCK_ENTRY_BOOST_BITMAP NOK_KLOCK_ENTRY_BOOST_BITMAP, * NOK_PKLOCK_ENTRY_BOOST_BITMAP;
typedef union _NOK_KPRCBFLAG NOK_KPRCBFLAG, * NOK_PKPRCBFLAG;
typedef union _NOK_KQOS_GROUPING_SETS NOK_KQOS_GROUPING_SETS, * NOK_PKQOS_GROUPING_SETS;
typedef union _NOK_KSTACK_COUNT NOK_KSTACK_COUNT, * NOK_PKSTACK_COUNT;
typedef union _NOK_KWAIT_STATUS_REGISTER NOK_KWAIT_STATUS_REGISTER, * NOK_PKWAIT_STATUS_REGISTER;
typedef union _NOK_LARGE_INTEGER NOK_LARGE_INTEGER, * NOK_PLARGE_INTEGER;
typedef union _NOK_LARGE_INTEGER NOK_LARGE_INTEGER, * NOK_PLARGE_INTEGER;
typedef union _NOK_LFH_RANDOM_DATA NOK_LFH_RANDOM_DATA, * NOK_PLFH_RANDOM_DATA;
typedef union _NOK_MCG_CAP NOK_MCG_CAP, * NOK_PMCG_CAP;
typedef union _NOK_MCG_STATUS NOK_MCG_STATUS, * NOK_PMCG_STATUS;
typedef union _NOK_MCI_STATUS NOK_MCI_STATUS, * NOK_PMCI_STATUS;
typedef union _NOK_MI_FLAGS NOK_MI_FLAGS, * NOK_PMI_FLAGS;
typedef union _NOK_MI_RESERVATION_CLUSTER_INFO NOK_MI_RESERVATION_CLUSTER_INFO, * NOK_PMI_RESERVATION_CLUSTER_INFO;
typedef union _NOK_MM_PAGE_ACCESS_INFO_FLAGS NOK_MM_PAGE_ACCESS_INFO_FLAGS, * NOK_PMM_PAGE_ACCESS_INFO_FLAGS;
typedef union _NOK_MM_STORE_KEY NOK_MM_STORE_KEY, * NOK_PMM_STORE_KEY;
typedef union _NOK_PCW_CALLBACK_INFORMATION NOK_PCW_CALLBACK_INFORMATION, * NOK_PPCW_CALLBACK_INFORMATION;
typedef union _NOK_PEP_ACPI_RESOURCE NOK_PEP_ACPI_RESOURCE, * NOK_PPEP_ACPI_RESOURCE;
typedef union _NOK_PEP_ACPI_RESOURCE_FLAGS NOK_PEP_ACPI_RESOURCE_FLAGS, * NOK_PPEP_ACPI_RESOURCE_FLAGS;
typedef union _NOK_POP_FX_COMPONENT_FLAGS NOK_POP_FX_COMPONENT_FLAGS, * NOK_PPOP_FX_COMPONENT_FLAGS;
typedef union _NOK_POP_FX_DEVICE_STATUS NOK_POP_FX_DEVICE_STATUS, * NOK_PPOP_FX_DEVICE_STATUS;
typedef union _NOK_POP_FX_PERF_FLAGS NOK_POP_FX_PERF_FLAGS, * NOK_PPOP_FX_PERF_FLAGS;
typedef union _NOK_POWER_STATE NOK_POWER_STATE, * NOK_PPOWER_STATE;
typedef union _NOK_PPM_COORDINATED_SYNCHRONIZATION NOK_PPM_COORDINATED_SYNCHRONIZATION, * NOK_PPPM_COORDINATED_SYNCHRONIZATION;
typedef union _NOK_PPM_IDLE_SYNCHRONIZATION_STATE NOK_PPM_IDLE_SYNCHRONIZATION_STATE, * NOK_PPPM_IDLE_SYNCHRONIZATION_STATE;
typedef union _NOK_PPM_POLICY_SETTINGS_MASK NOK_PPM_POLICY_SETTINGS_MASK, * NOK_PPPM_POLICY_SETTINGS_MASK;
typedef union _NOK_PS_CLIENT_SECURITY_CONTEXT NOK_PS_CLIENT_SECURITY_CONTEXT, * NOK_PPS_CLIENT_SECURITY_CONTEXT;
typedef union _NOK_PS_INTERLOCKED_TIMER_DELAY_VALUES NOK_PS_INTERLOCKED_TIMER_DELAY_VALUES, * NOK_PPS_INTERLOCKED_TIMER_DELAY_VALUES;
typedef union _NOK_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS NOK_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, * NOK_PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
typedef union _NOK_RTL_RUN_ONCE NOK_RTL_RUN_ONCE, * NOK_PRTL_RUN_ONCE;
typedef union _NOK_SLIST_HEADER NOK_SLIST_HEADER, * NOK_PSLIST_HEADER;
typedef union _NOK_TIMELINE_BITMAP NOK_TIMELINE_BITMAP, * NOK_PTIMELINE_BITMAP;
typedef union _NOK_ULARGE_INTEGER NOK_ULARGE_INTEGER, * NOK_PULARGE_INTEGER;
typedef union _NOK_WHEAP_ERROR_RECORD_WRAPPER_FLAGS NOK_WHEAP_ERROR_RECORD_WRAPPER_FLAGS, * NOK_PWHEAP_ERROR_RECORD_WRAPPER_FLAGS;
typedef union _NOK_WHEA_ERROR_PACKET_FLAGS NOK_WHEA_ERROR_PACKET_FLAGS, * NOK_PWHEA_ERROR_PACKET_FLAGS;
typedef union _NOK_WHEA_ERROR_RECORD_HEADER_FLAGS NOK_WHEA_ERROR_RECORD_HEADER_FLAGS, * NOK_PWHEA_ERROR_RECORD_HEADER_FLAGS;
typedef union _NOK_WHEA_ERROR_RECORD_HEADER_VALIDBITS NOK_WHEA_ERROR_RECORD_HEADER_VALIDBITS, * NOK_PWHEA_ERROR_RECORD_HEADER_VALIDBITS;
typedef union _NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, * NOK_PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
typedef union _NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, * NOK_PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
typedef union _NOK_WHEA_ERROR_STATUS NOK_WHEA_ERROR_STATUS, * NOK_PWHEA_ERROR_STATUS;
typedef union _NOK_WHEA_EVENT_LOG_ENTRY_FLAGS NOK_WHEA_EVENT_LOG_ENTRY_FLAGS, * NOK_PWHEA_EVENT_LOG_ENTRY_FLAGS;
typedef union _NOK_WHEA_MEMORY_ERROR_SECTION_VALIDBITS NOK_WHEA_MEMORY_ERROR_SECTION_VALIDBITS, * NOK_PWHEA_MEMORY_ERROR_SECTION_VALIDBITS;
typedef union _NOK_WHEA_NOTIFICATION_FLAGS NOK_WHEA_NOTIFICATION_FLAGS, * NOK_PWHEA_NOTIFICATION_FLAGS;
typedef union _NOK_WHEA_PERSISTENCE_INFO NOK_WHEA_PERSISTENCE_INFO, * NOK_PWHEA_PERSISTENCE_INFO;
typedef union _NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS, * NOK_PWHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
typedef union _NOK_WHEA_REVISION NOK_WHEA_REVISION, * NOK_PWHEA_REVISION;
typedef union _NOK_WHEA_TIMESTAMP NOK_WHEA_TIMESTAMP, * NOK_PWHEA_TIMESTAMP;
typedef union _NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS, * NOK_PWHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS;
typedef union _NOK_XPF_MCE_FLAGS NOK_XPF_MCE_FLAGS, * NOK_PXPF_MCE_FLAGS;
typedef union _NOK_XPF_MC_BANK_FLAGS NOK_XPF_MC_BANK_FLAGS, * NOK_PXPF_MC_BANK_FLAGS;
typedef union _NOK__m128 NOK__m128, * NOK_P_m128;
typedef union _NOK__m64 NOK__m64, * NOK_P_m64;
typedef union _NOK_u NOK_u, * NOK_Pu;
typedef union _NOK_wil_details_FeatureStateCache NOK_wil_details_FeatureStateCache, * NOK_Pwil_details_FeatureStateCache;
typedef union _NOK_wil_details_RecordedState NOK_wil_details_RecordedState, * NOK_Pwil_details_RecordedState;
typedef union _NOK_wil_details_ReportedState NOK_wil_details_ReportedState, * NOK_Pwil_details_ReportedState;
//0x8 bytes (sizeof)
typedef struct _NOK_BATTERY_REPORTING_SCALE
{
    ULONG Granularity;                                                      //0x0
    ULONG Capacity;                                                         //0x4
}NOK_BATTERY_REPORTING_SCALE, * NOK_PBATTERY_REPORTING_SCALE;
//0x18 bytes (sizeof)
typedef struct _NOK_CMP_OFFSET_ARRAY
{
    ULONG FileOffset;                                                       //0x0
    VOID* DataBuffer;                                                       //0x8
    ULONG DataLength;                                                       //0x10
}NOK_CMP_OFFSET_ARRAY, * NOK_PCMP_OFFSET_ARRAY;
//0x18 bytes (sizeof)
typedef struct _NOK_DEBUG_DEVICE_ADDRESS
{
    UCHAR Type;                                                             //0x0
    UCHAR Valid;                                                            //0x1
    union
    {
        UCHAR Reserved[2];                                                  //0x2
        struct
        {
            UCHAR BitWidth;                                                 //0x2
            UCHAR AccessSize;                                               //0x3
        };
    };
    UCHAR* TranslatedAddress;                                               //0x8
    ULONG Length;                                                           //0x10
}NOK_DEBUG_DEVICE_ADDRESS, * NOK_PDEBUG_DEVICE_ADDRESS;
//0x8 bytes (sizeof)
typedef union _NOK_LARGE_INTEGER
{
    struct
    {
        ULONG LowPart;                                                      //0x0
        LONG HighPart;                                                      //0x4
    };
    struct
    {
        ULONG LowPart;                                                      //0x0
        LONG HighPart;                                                      //0x4
    } u;                                                                    //0x0
    LONGLONG QuadPart;                                                      //0x0
}NOK_LARGE_INTEGER, * NOK_PLARGE_INTEGER;
//0x4 bytes (sizeof)
typedef enum _NOK_PROFILE_DEPARTURE_STYLE
{
    NOK_PDS_UPDATE_DEFAULT = 1,
    NOK_PDS_UPDATE_ON_REMOVE = 2,
    NOK_PDS_UPDATE_ON_INTERFACE = 3,
    NOK_PDS_UPDATE_ON_EJECT = 4
}NOK_PROFILE_DEPARTURE_STYLE, * NOK_PPROFILE_DEPARTURE_STYLE;
//0x68 bytes (sizeof)
typedef struct _NOK_FEATURE_ERROR
{
    HRESULT hr;                                                             //0x0
    USHORT lineNumber;                                                      //0x4
    CHAR* file;                                                             //0x8
    CHAR* process;                                                          //0x10
    CHAR* modulePath;                                                       //0x18
    ULONG callerReturnAddressOffset;                                        //0x20
    CHAR* callerModule;                                                     //0x28
    CHAR* message;                                                          //0x30
    USHORT originLineNumber;                                                //0x38
    CHAR* originFile;                                                       //0x40
    CHAR* originModule;                                                     //0x48
    ULONG originCallerReturnAddressOffset;                                  //0x50
    CHAR* originCallerModule;                                               //0x58
    CHAR* originName;                                                       //0x60
}NOK_FEATURE_ERROR, * NOK_PFEATURE_ERROR;
//0x6 bytes (sizeof)
typedef struct _NOK_FEATURE_LOGGED_TRAITS
{
    USHORT version;                                                         //0x0
    USHORT baseVersion;                                                     //0x2
    UCHAR stage;                                                            //0x4
}NOK_FEATURE_LOGGED_TRAITS, * NOK_PFEATURE_LOGGED_TRAITS;
//0x4 bytes (sizeof)
typedef struct _NOK_FEATURE_STATE_CHANGE_SUBSCRIPTION__
{
    LONG unused;                                                            //0x0
}NOK_FEATURE_STATE_CHANGE_SUBSCRIPTION__, * NOK_PFEATURE_STATE_CHANGE_SUBSCRIPTION__;
//0x20 bytes (sizeof)
typedef struct _NOK_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
}NOK_INTERFACE, * NOK_PINTERFACE;
//0x10 bytes (sizeof)
typedef struct _NOK_LIST_ENTRY
{
    NOK_PLIST_ENTRY Flink;                                              //0x0
    NOK_PLIST_ENTRY Blink;                                              //0x8
}NOK_LIST_ENTRY, * NOK_PLIST_ENTRY;
//0x8 bytes (sizeof)
typedef struct _NOK_LIST_ENTRY32
{
    ULONG Flink;                                                            //0x0
    ULONG Blink;                                                            //0x4
}NOK_LIST_ENTRY32, * NOK_PLIST_ENTRY32;
//0x4 bytes (sizeof)
typedef struct _NOK_PEPHANDLE__
{
    LONG unused;                                                            //0x0
}NOK_PEPHANDLE__, * NOK_PPEPHANDLE__;
//0x4 bytes (sizeof)
typedef struct _NOK_POHANDLE__
{
    LONG unused;                                                            //0x0
}NOK_POHANDLE__, * NOK_PPOHANDLE__;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_ACTION
{
    NOK_PowerActionNone = 0,
    NOK_PowerActionReserved = 1,
    NOK_PowerActionSleep = 2,
    NOK_PowerActionHibernate = 3,
    NOK_PowerActionShutdown = 4,
    NOK_PowerActionShutdownReset = 5,
    NOK_PowerActionShutdownOff = 6,
    NOK_PowerActionWarmEject = 7,
    NOK_PowerActionDisplayOff = 8
}NOK_POWER_ACTION, * NOK_PPOWER_ACTION;
//0x8 bytes (sizeof)
typedef struct _NOK_PROCESSOR_IDLESTATE_INFO
{
    ULONG TimeCheck;                                                        //0x0
    UCHAR DemotePercent;                                                    //0x4
    UCHAR PromotePercent;                                                   //0x5
    UCHAR Spare[2];                                                         //0x6
}NOK_PROCESSOR_IDLESTATE_INFO, * NOK_PPROCESSOR_IDLESTATE_INFO;
//0x20 bytes (sizeof)
typedef struct _NOK_PROCESSOR_IDLESTATE_POLICY
{
    USHORT Revision;                                                        //0x0
    union
    {
        USHORT AsUSHORT;                                                    //0x2
        USHORT AllowScaling:1;                                              //0x2
        USHORT Disabled:1;                                                  //0x2
        USHORT Reserved:14;                                                 //0x2
    } Flags;                                                                //0x2
    ULONG PolicyCount;                                                      //0x4
    NOK_PROCESSOR_IDLESTATE_INFO Policy[3];                              //0x8
}NOK_PROCESSOR_IDLESTATE_POLICY, * NOK_PPROCESSOR_IDLESTATE_POLICY;
//0x1c bytes (sizeof)
typedef struct _NOK_PROCESSOR_PERFSTATE_POLICY
{
    ULONG Revision;                                                         //0x0
    UCHAR MaxThrottle;                                                      //0x4
    UCHAR MinThrottle;                                                      //0x5
    UCHAR BusyAdjThreshold;                                                 //0x6
    union
    {
        UCHAR Spare;                                                        //0x7
        union
        {
            UCHAR AsUCHAR;                                                  //0x7
            UCHAR NoDomainAccounting:1;                                     //0x7
            UCHAR IncreasePolicy:2;                                         //0x7
            UCHAR DecreasePolicy:2;                                         //0x7
            UCHAR Reserved:3;                                               //0x7
        } Flags;                                                            //0x7
    };
    ULONG TimeCheck;                                                        //0x8
    ULONG IncreaseTime;                                                     //0xc
    ULONG DecreaseTime;                                                     //0x10
    ULONG IncreasePercent;                                                  //0x14
    ULONG DecreasePercent;                                                  //0x18
}NOK_PROCESSOR_PERFSTATE_POLICY, * NOK_PPROCESSOR_PERFSTATE_POLICY;
//0x10 bytes (sizeof)
typedef struct _NOK_RTL_HP_ENV_HANDLE
{
    VOID* h[2];                                                             //0x0
}NOK_RTL_HP_ENV_HANDLE, * NOK_PRTL_HP_ENV_HANDLE;
//0x4 bytes (sizeof)
typedef enum _NOK_SYSTEM_POWER_STATE
{
    NOK_PowerSystemUnspecified = 0,
    NOK_PowerSystemWorking = 1,
    NOK_PowerSystemSleeping1 = 2,
    NOK_PowerSystemSleeping2 = 3,
    NOK_PowerSystemSleeping3 = 4,
    NOK_PowerSystemHibernate = 5,
    NOK_PowerSystemShutdown = 6,
    NOK_PowerSystemMaximum = 7
}NOK_SYSTEM_POWER_STATE, * NOK_PSYSTEM_POWER_STATE;
//0xc bytes (sizeof)
typedef struct _NOK_POWER_ACTION_POLICY
{
    NOK_POWER_ACTION Action;                                               //0x0
    ULONG Flags;                                                            //0x4
    ULONG EventCode;                                                        //0x8
}NOK_POWER_ACTION_POLICY, * NOK_PPOWER_ACTION_POLICY;
//0x10 bytes (sizeof)
typedef struct _NOK_LIST_ENTRY64
{
    ULONGLONG Flink;                                                        //0x0
    ULONGLONG Blink;                                                        //0x8
}NOK_LIST_ENTRY64, * NOK_PLIST_ENTRY64;
//0x80 bytes (sizeof)
typedef struct _NOK_ACCESS_REASONS
{
    ULONG Data[32];                                                         //0x0
}NOK_ACCESS_REASONS, * NOK_PACCESS_REASONS;
//0x8 bytes (sizeof)
typedef struct _NOK_LUID
{
    ULONG LowPart;                                                          //0x0
    LONG HighPart;                                                          //0x4
}NOK_LUID, * NOK_PLUID;
//0x8 bytes (sizeof)
typedef struct _NOK_ACL
{
    UCHAR AclRevision;                                                      //0x0
    UCHAR Sbz1;                                                             //0x1
    USHORT AclSize;                                                         //0x2
    USHORT AceCount;                                                        //0x4
    USHORT Sbz2;                                                            //0x6
}NOK_ACL, * NOK_PACL;
//0x24 bytes (sizeof)
typedef struct _NOK_DESCRIPTION_HEADER
{
    ULONG Signature;                                                        //0x0
    ULONG Length;                                                           //0x4
    UCHAR Revision;                                                         //0x8
    UCHAR Checksum;                                                         //0x9
    CHAR OEMID[6];                                                          //0xa
    CHAR OEMTableID[8];                                                     //0x10
    ULONG OEMRevision;                                                      //0x18
    CHAR CreatorID[4];                                                      //0x1c
    ULONG CreatorRev;                                                       //0x20
}NOK_DESCRIPTION_HEADER, * NOK_PDESCRIPTION_HEADER;
//0x8 bytes (sizeof)
typedef struct _NOK_ACPI_METHOD_ARGUMENT_V1
{
    USHORT Type;                                                            //0x0
    USHORT DataLength;                                                      //0x2
    union
    {
        ULONG Argument;                                                     //0x4
        UCHAR Data[1];                                                      //0x4
    };
}NOK_ACPI_METHOD_ARGUMENT_V1, * NOK_PACPI_METHOD_ARGUMENT_V1;
//0x28 bytes (sizeof)
typedef struct _NOK_VACB
{
    VOID* BaseAddress;                                                      //0x0
    NOK_PSHARED_CACHE_MAP SharedCacheMap;                               //0x8
    union
    {
        NOK_LARGE_INTEGER FileOffset;                                    //0x10
        USHORT ActiveCount;                                                 //0x10
        NOK_LIST_ENTRY Links;                                           //0x10
    } Overlay;                                                              //0x10
    NOK_VACB_ARRAY_HEADER* ArrayHead;                                   //0x20
}NOK_VACB, * NOK_PVACB;
//0x28 bytes (sizeof)
typedef struct _NOK_ACTIVATION_CONTEXT_STACK
{
    NOK_PRTL_ACTIVATION_CONTEXT_STACK_FRAME ActiveFrame;                //0x0
    NOK_LIST_ENTRY FrameListCache;                                      //0x8
    ULONG Flags;                                                            //0x18
    ULONG NextCookieSequenceNumber;                                         //0x1c
    ULONG StackId;                                                          //0x20
}NOK_ACTIVATION_CONTEXT_STACK, * NOK_PACTIVATION_CONTEXT_STACK;
//0x18 bytes (sizeof)
typedef struct _NOK_ACTIVATION_CONTEXT_STACK32
{
    ULONG ActiveFrame;                                                      //0x0
    NOK_LIST_ENTRY32 FrameListCache;                                     //0x4
    ULONG Flags;                                                            //0xc
    ULONG NextCookieSequenceNumber;                                         //0x10
    ULONG StackId;                                                          //0x14
}NOK_ACTIVATION_CONTEXT_STACK32, * NOK_PACTIVATION_CONTEXT_STACK32;
//0x8 bytes (sizeof)
typedef struct _NOK_EX_PUSH_LOCK
{
    union
    {
        struct
        {
            ULONGLONG Locked:1;                                             //0x0
            ULONGLONG Waiting:1;                                            //0x0
            ULONGLONG Waking:1;                                             //0x0
            ULONGLONG MultipleShared:1;                                     //0x0
            ULONGLONG Shared:60;                                            //0x0
        };
        ULONGLONG Value;                                                    //0x0
        VOID* Ptr;                                                          //0x0
    };
}NOK_EX_PUSH_LOCK, * NOK_PEX_PUSH_LOCK;
//0x18 bytes (sizeof)
typedef struct _NOK_EVENT_PAYLOAD_PREDICATE
{
    USHORT FieldIndex;                                                      //0x0
    USHORT CompareOp;                                                       //0x2
    ULONGLONG Value[2];                                                     //0x8
}NOK_EVENT_PAYLOAD_PREDICATE, * NOK_PEVENT_PAYLOAD_PREDICATE;
//0x18 bytes (sizeof)
typedef struct _NOK_HALP_DMA_TRANSLATION_BUFFER
{
    NOK_PHALP_DMA_TRANSLATION_BUFFER Next;                              //0x0
    ULONG EntryCount;                                                       //0x8
    NOK_PHALP_DMA_TRANSLATION_ENTRY Entries;                            //0x10
}NOK_HALP_DMA_TRANSLATION_BUFFER, * NOK_PHALP_DMA_TRANSLATION_BUFFER;
//0x8 bytes (sizeof)
typedef struct _NOK_RTL_SRWLOCK
{
    union
    {
        struct
        {
            ULONGLONG Locked:1;                                             //0x0
            ULONGLONG Waiting:1;                                            //0x0
            ULONGLONG Waking:1;                                             //0x0
            ULONGLONG MultipleShared:1;                                     //0x0
            ULONGLONG Shared:60;                                            //0x0
        };
        ULONGLONG Value;                                                    //0x0
        VOID* Ptr;                                                          //0x0
    };
}NOK_RTL_SRWLOCK, * NOK_PRTL_SRWLOCK;
//0x18 bytes (sizeof)
typedef struct _NOK_ALPC_HANDLE_TABLE
{
    NOK_PALPC_HANDLE_ENTRY Handles;                                     //0x0
    ULONG TotalHandles;                                                     //0x8
    ULONG Flags;                                                            //0xc
    NOK_EX_PUSH_LOCK Lock;                                              //0x10
}NOK_ALPC_HANDLE_TABLE, * NOK_PALPC_HANDLE_TABLE;
//0x8 bytes (sizeof)
typedef struct _NOK_ALPC_COMPLETION_LIST_STATE
{
    union
    {
        struct
        {
            ULONGLONG Head:24;                                              //0x0
            ULONGLONG Tail:24;                                              //0x0
            ULONGLONG ActiveThreadCount:16;                                 //0x0
        } s1;                                                               //0x0
        LONGLONG Value;                                                     //0x0
    } u1;                                                                   //0x0
}NOK_ALPC_COMPLETION_LIST_STATE, * NOK_PALPC_COMPLETION_LIST_STATE;
//0x180 bytes (sizeof)
typedef struct _NOK_ALPC_COMPLETION_LIST_HEADER
{
    ULONGLONG StartMagic;                                                   //0x0
    ULONG TotalSize;                                                        //0x8
    ULONG ListOffset;                                                       //0xc
    ULONG ListSize;                                                         //0x10
    ULONG BitmapOffset;                                                     //0x14
    ULONG BitmapSize;                                                       //0x18
    ULONG DataOffset;                                                       //0x1c
    ULONG DataSize;                                                         //0x20
    ULONG AttributeFlags;                                                   //0x24
    ULONG AttributeSize;                                                    //0x28
    volatile NOK_ALPC_COMPLETION_LIST_STATE State;                      //0x40
    volatile ULONG LastMessageId;                                           //0x48
    volatile ULONG LastCallbackId;                                          //0x4c
    volatile ULONG PostCount;                                               //0x80
    volatile ULONG ReturnCount;                                             //0xc0
    volatile ULONG LogSequenceNumber;                                       //0x100
    NOK_RTL_SRWLOCK UserLock;                                           //0x140
    ULONGLONG EndMagic;                                                     //0x148
}NOK_ALPC_COMPLETION_LIST_HEADER, * NOK_PALPC_COMPLETION_LIST_HEADER;
//0x8 bytes (sizeof)
typedef struct _NOK_SINGLE_LIST_ENTRY
{
    NOK_PSINGLE_LIST_ENTRY Next;                                        //0x0
}NOK_SINGLE_LIST_ENTRY, * NOK_PSINGLE_LIST_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
    NOK_SINGLE_LIST_ENTRY ListEntry;                                    //0x0
    NOK_PIO_MINI_COMPLETION_PACKET_USER Packet;                         //0x8
    NOK_PALPC_COMPLETION_PACKET_LOOKASIDE Lookaside;                    //0x10
}NOK_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, * NOK_PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
//0x50 bytes (sizeof)
typedef struct _NOK_ALPC_COMPLETION_PACKET_LOOKASIDE
{
    ULONGLONG Lock;                                                         //0x0
    ULONG Size;                                                             //0x8
    ULONG ActiveCount;                                                      //0xc
    ULONG PendingNullCount;                                                 //0x10
    ULONG PendingCheckCompletionListCount;                                  //0x14
    ULONG PendingDelete;                                                    //0x18
    NOK_SINGLE_LIST_ENTRY FreeListHead;                                 //0x20
    VOID* CompletionPort;                                                   //0x28
    VOID* CompletionKey;                                                    //0x30
    NOK_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];                //0x38
}NOK_ALPC_COMPLETION_PACKET_LOOKASIDE, * NOK_PALPC_COMPLETION_PACKET_LOOKASIDE;
//0x8 bytes (sizeof)
typedef union _NOK_KALPC_DIRECT_EVENT
{
    ULONGLONG Value;                                                        //0x0
    ULONGLONG DirectType:1;                                                 //0x0
    ULONGLONG EventReferenced:1;                                            //0x0
    ULONGLONG EventObjectBits:62;                                           //0x0
}NOK_KALPC_DIRECT_EVENT, * NOK_PKALPC_DIRECT_EVENT;
//0x8 bytes (sizeof)
typedef struct _NOK_ALPC_HANDLE_ENTRY
{
    VOID* Object;                                                           //0x0
}NOK_ALPC_HANDLE_ENTRY, * NOK_PALPC_HANDLE_ENTRY;
//0x28 bytes (sizeof)
typedef struct _NOK_ACTIVATION_CONTEXT_STACK64
{
    ULONGLONG ActiveFrame;                                                  //0x0
    NOK_LIST_ENTRY64 FrameListCache;                                     //0x8
    ULONG Flags;                                                            //0x18
    ULONG NextCookieSequenceNumber;                                         //0x1c
    ULONG StackId;                                                          //0x20
}NOK_ACTIVATION_CONTEXT_STACK64, * NOK_PACTIVATION_CONTEXT_STACK64;
//0x8 bytes (sizeof)
typedef struct _NOK_ALPC_MESSAGE_ATTRIBUTES
{
    ULONG AllocatedAttributes;                                              //0x0
    ULONG ValidAttributes;                                                  //0x4
}NOK_ALPC_MESSAGE_ATTRIBUTES, * NOK_PALPC_MESSAGE_ATTRIBUTES;
//0x4 bytes (sizeof)
typedef enum _NOK_SECURITY_IMPERSONATION_LEVEL
{
    NOK_SecurityAnonymous = 0,
    NOK_SecurityIdentification = 1,
    NOK_SecurityImpersonation = 2,
    NOK_SecurityDelegation = 3
}NOK_SECURITY_IMPERSONATION_LEVEL, * NOK_PSECURITY_IMPERSONATION_LEVEL;
//0x48 bytes (sizeof)
typedef struct _NOK_ALPC_COMMUNICATION_INFO
{
    NOK_PALPC_PORT ConnectionPort;                                      //0x0
    NOK_PALPC_PORT ServerCommunicationPort;                             //0x8
    NOK_PALPC_PORT ClientCommunicationPort;                             //0x10
    NOK_LIST_ENTRY CommunicationList;                                   //0x18
    NOK_ALPC_HANDLE_TABLE HandleTable;                                  //0x28
    NOK_PKALPC_MESSAGE CloseMessage;                                    //0x40
}NOK_ALPC_COMMUNICATION_INFO, * NOK_PALPC_COMMUNICATION_INFO;
//0x8 bytes (sizeof)
typedef struct _NOK_ALPC_WORK_ON_BEHALF_TICKET
{
    ULONG ThreadId;                                                         //0x0
    ULONG ThreadCreationTimeLow;                                            //0x4
}NOK_ALPC_WORK_ON_BEHALF_TICKET, * NOK_PALPC_WORK_ON_BEHALF_TICKET;
//0x1c bytes (sizeof)
typedef struct _NOK_AMD64_DBGKD_CONTROL_SET
{
    ULONG TraceFlag;                                                        //0x0
    ULONGLONG Dr7;                                                          //0x4
    ULONGLONG CurrentSymbolStart;                                           //0xc
    ULONGLONG CurrentSymbolEnd;                                             //0x14
}NOK_AMD64_DBGKD_CONTROL_SET, * NOK_PAMD64_DBGKD_CONTROL_SET;
//0x8 bytes (sizeof)
typedef struct _NOK_ARBITER_ADD_RESERVED_PARAMETERS
{
    NOK_PDEVICE_OBJECT ReserveDevice;                                   //0x0
}NOK_ARBITER_ADD_RESERVED_PARAMETERS, * NOK_PARBITER_ADD_RESERVED_PARAMETERS;
//0x50 bytes (sizeof)
typedef struct _NOK_ARBITER_ALLOCATION_STATE
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
    ULONGLONG CurrentMinimum;                                               //0x10
    ULONGLONG CurrentMaximum;                                               //0x18
    NOK_PARBITER_LIST_ENTRY Entry;                                      //0x20
    NOK_PARBITER_ALTERNATIVE CurrentAlternative;                        //0x28
    ULONG AlternativeCount;                                                 //0x30
    NOK_PARBITER_ALTERNATIVE Alternatives;                              //0x38
    USHORT Flags;                                                           //0x40
    UCHAR RangeAttributes;                                                  //0x42
    UCHAR RangeAvailableAttributes;                                         //0x43
    ULONGLONG WorkSpace;                                                    //0x48
}NOK_ARBITER_ALLOCATION_STATE, * NOK_PARBITER_ALLOCATION_STATE;
//0x40 bytes (sizeof)
typedef struct _NOK_ARBITER_ALTERNATIVE
{
    ULONGLONG Minimum;                                                      //0x0
    ULONGLONG Maximum;                                                      //0x8
    ULONGLONG Length;                                                       //0x10
    ULONGLONG Alignment;                                                    //0x18
    LONG Priority;                                                          //0x20
    ULONG Flags;                                                            //0x24
    NOK_PIO_RESOURCE_DESCRIPTOR Descriptor;                             //0x28
    ULONG Reserved[3];                                                      //0x30
}NOK_ARBITER_ALTERNATIVE, * NOK_PARBITER_ALTERNATIVE;
//0x8 bytes (sizeof)
typedef struct _NOK_ARBITER_BOOT_ALLOCATION_PARAMETERS
{
    NOK_PLIST_ENTRY ArbitrationList;                                    //0x0
}NOK_ARBITER_BOOT_ALLOCATION_PARAMETERS, * NOK_PARBITER_BOOT_ALLOCATION_PARAMETERS;
//0x18 bytes (sizeof)
typedef struct _NOK_ARBITER_CONFLICT_INFO
{
    NOK_PDEVICE_OBJECT OwningObject;                                    //0x0
    ULONGLONG Start;                                                        //0x8
    ULONGLONG End;                                                          //0x10
}NOK_ARBITER_CONFLICT_INFO, * NOK_PARBITER_CONFLICT_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_ARBITER_ORDERING
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
}NOK_ARBITER_ORDERING, * NOK_PARBITER_ORDERING;
//0x4 bytes (sizeof)
typedef enum _NOK_ARBITER_ACTION
{
    NOK_ArbiterActionTestAllocation = 0,
    NOK_ArbiterActionRetestAllocation = 1,
    NOK_ArbiterActionCommitAllocation = 2,
    NOK_ArbiterActionRollbackAllocation = 3,
    NOK_ArbiterActionQueryAllocatedResources = 4,
    NOK_ArbiterActionWriteReservedResources = 5,
    NOK_ArbiterActionQueryConflict = 6,
    NOK_ArbiterActionQueryArbitrate = 7,
    NOK_ArbiterActionAddReserved = 8,
    NOK_ArbiterActionBootAllocation = 9
}NOK_ARBITER_ACTION, * NOK_PARBITER_ACTION;
//0xc bytes (sizeof)
typedef struct _NOK_SECURITY_QUALITY_OF_SERVICE
{
    ULONG Length;                                                           //0x0
    NOK_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0x4
    UCHAR ContextTrackingMode;                                              //0x8
    UCHAR EffectiveOnly;                                                    //0x9
}NOK_SECURITY_QUALITY_OF_SERVICE, * NOK_PSECURITY_QUALITY_OF_SERVICE;
//0x10 bytes (sizeof)
typedef struct _NOK_ARBITER_ORDERING_LIST
{
    USHORT Count;                                                           //0x0
    USHORT Maximum;                                                         //0x2
    NOK_PARBITER_ORDERING Orderings;                                    //0x8
}NOK_ARBITER_ORDERING_LIST, * NOK_PARBITER_ORDERING_LIST;
//0x28 bytes (sizeof)
typedef struct _NOK_RTL_RANGE
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
    VOID* UserData;                                                         //0x10
    VOID* Owner;                                                            //0x18
    UCHAR Attributes;                                                       //0x20
    UCHAR Flags;                                                            //0x21
}NOK_RTL_RANGE, * NOK_PRTL_RANGE;
//0x8 bytes (sizeof)
typedef struct _NOK_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
    NOK_PCM_PARTIAL_RESOURCE_LIST* AllocatedResources;                  //0x0
}NOK_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, * NOK_PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
//0x8 bytes (sizeof)
typedef struct _NOK_ARBITER_QUERY_ARBITRATE_PARAMETERS
{
    NOK_PLIST_ENTRY ArbitrationList;                                    //0x0
}NOK_ARBITER_QUERY_ARBITRATE_PARAMETERS, * NOK_PARBITER_QUERY_ARBITRATE_PARAMETERS;
//0x20 bytes (sizeof)
typedef struct _NOK_ARBITER_QUERY_CONFLICT_PARAMETERS
{
    NOK_PDEVICE_OBJECT PhysicalDeviceObject;                            //0x0
    NOK_PIO_RESOURCE_DESCRIPTOR ConflictingResource;                    //0x8
    ULONG* ConflictCount;                                                   //0x10
    NOK_PARBITER_CONFLICT_INFO* Conflicts;                              //0x18
}NOK_ARBITER_QUERY_CONFLICT_PARAMETERS, * NOK_PARBITER_QUERY_CONFLICT_PARAMETERS;
//0x18 bytes (sizeof)
typedef struct _NOK_ARBITER_RETEST_ALLOCATION_PARAMETERS
{
    NOK_PLIST_ENTRY ArbitrationList;                                    //0x0
    ULONG AllocateFromCount;                                                //0x8
    NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR AllocateFrom;                   //0x10
}NOK_ARBITER_RETEST_ALLOCATION_PARAMETERS, * NOK_PARBITER_RETEST_ALLOCATION_PARAMETERS;
//0x18 bytes (sizeof)
typedef struct _NOK_ARBITER_TEST_ALLOCATION_PARAMETERS
{
    NOK_PLIST_ENTRY ArbitrationList;                                    //0x0
    ULONG AllocateFromCount;                                                //0x8
    NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR AllocateFrom;                   //0x10
}NOK_ARBITER_TEST_ALLOCATION_PARAMETERS, * NOK_PARBITER_TEST_ALLOCATION_PARAMETERS;
//0x20 bytes (sizeof)
typedef struct _NOK_ARBITER_PARAMETERS
{
    union
    {
        NOK_ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;          //0x0
        NOK_ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;      //0x0
        NOK_ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;          //0x0
        NOK_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources; //0x0
        NOK_ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;            //0x0
        NOK_ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;          //0x0
        NOK_ARBITER_ADD_RESERVED_PARAMETERS AddReserved;                //0x0
    } Parameters;                                                           //0x0
}NOK_ARBITER_PARAMETERS, * NOK_PARBITER_PARAMETERS;
//0x28 bytes (sizeof)
typedef struct _NOK_ISRDPCSTATS_SEQUENCE
{
    ULONG SequenceNumber;                                                   //0x0
    ULONGLONG IsrTime;                                                      //0x8
    ULONGLONG IsrCount;                                                     //0x10
    ULONGLONG DpcTime;                                                      //0x18
    ULONGLONG DpcCount;                                                     //0x20
}NOK_ISRDPCSTATS_SEQUENCE, * NOK_PISRDPCSTATS_SEQUENCE;
//0x60 bytes (sizeof)
typedef struct _NOK_ISRDPCSTATS
{
    ULONGLONG IsrTime;                                                      //0x0
    ULONGLONG IsrTimeStart;                                                 //0x8
    ULONGLONG IsrCount;                                                     //0x10
    ULONGLONG DpcTime;                                                      //0x18
    ULONGLONG DpcTimeStart;                                                 //0x20
    ULONGLONG DpcCount;                                                     //0x28
    UCHAR IsrActive;                                                        //0x30
    UCHAR Reserved[7];                                                      //0x31
    NOK_ISRDPCSTATS_SEQUENCE DpcWatchdog;                               //0x38
}NOK_ISRDPCSTATS, * NOK_PISRDPCSTATS;
//0x18 bytes (sizeof)
typedef struct _NOK_ARM64_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG TraceFlag;                                                        //0x4
    ULONGLONG CurrentSymbolStart;                                           //0x8
    ULONGLONG CurrentSymbolEnd;                                             //0x10
}NOK_ARM64_DBGKD_CONTROL_SET, * NOK_PARM64_DBGKD_CONTROL_SET;
//0xc bytes (sizeof)
typedef struct _NOK_ARMCE_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG CurrentSymbolStart;                                               //0x4
    ULONG CurrentSymbolEnd;                                                 //0x8
}NOK_ARMCE_DBGKD_CONTROL_SET, * NOK_PARMCE_DBGKD_CONTROL_SET;
//0xc bytes (sizeof)
typedef struct _NOK_ARM_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG CurrentSymbolStart;                                               //0x4
    ULONG CurrentSymbolEnd;                                                 //0x8
}NOK_ARM_DBGKD_CONTROL_SET, * NOK_PARM_DBGKD_CONTROL_SET;
//0x4 bytes (sizeof)
typedef struct _NOK_ARM_LOADER_BLOCK
{
    ULONG PlaceHolder;                                                      //0x0
}NOK_ARM_LOADER_BLOCK, * NOK_PARM_LOADER_BLOCK;
//0x194 bytes (sizeof)
typedef struct _NOK_ASYNC_READ_THREAD_STATS
{
    ULONG CurrentLoad[101];                                                 //0x0
}NOK_ASYNC_READ_THREAD_STATS, * NOK_PASYNC_READ_THREAD_STATS;
//0x6 bytes (sizeof)
typedef struct _NOK_SID_IDENTIFIER_AUTHORITY
{
    UCHAR Value[6];                                                         //0x0
}NOK_SID_IDENTIFIER_AUTHORITY, * NOK_PSID_IDENTIFIER_AUTHORITY;
//0xc bytes (sizeof)
typedef struct _NOK_SID
{
    UCHAR Revision;                                                         //0x0
    UCHAR SubAuthorityCount;                                                //0x1
    NOK_SID_IDENTIFIER_AUTHORITY IdentifierAuthority;                   //0x2
    ULONG SubAuthority[1];                                                  //0x8
}NOK_SID, * NOK_PSID;
//0x10 bytes (sizeof)
typedef struct _NOK_ARC_DISK_INFORMATION
{
    NOK_LIST_ENTRY DiskSignatures;                                      //0x0
}NOK_ARC_DISK_INFORMATION, * NOK_PARC_DISK_INFORMATION;
//0x10 bytes (sizeof)
typedef struct _NOK_GENERIC_MAPPING
{
    ULONG GenericRead;                                                      //0x0
    ULONG GenericWrite;                                                     //0x4
    ULONG GenericExecute;                                                   //0x8
    ULONG GenericAll;                                                       //0xc
}NOK_GENERIC_MAPPING, * NOK_PGENERIC_MAPPING;
//0x30 bytes (sizeof)
typedef struct _NOK_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
    ULONG SecurityAttributeCount;                                           //0x0
    NOK_LIST_ENTRY SecurityAttributesList;                              //0x8
    ULONG WorkingSecurityAttributeCount;                                    //0x18
    NOK_LIST_ENTRY WorkingSecurityAttributesList;                       //0x20
}NOK_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, * NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
//0x30 bytes (sizeof)
typedef struct _NOK_BITMAP_RANGE
{
    NOK_LIST_ENTRY Links;                                               //0x0
    LONGLONG BasePage;                                                      //0x10
    ULONG FirstDirtyPage;                                                   //0x18
    ULONG LastDirtyPage;                                                    //0x1c
    ULONG DirtyPages;                                                       //0x20
    ULONG* Bitmap;                                                          //0x28
}NOK_BITMAP_RANGE, * NOK_PBITMAP_RANGE;
//0x10 bytes (sizeof)
typedef struct _NOK_SLIST_ENTRY
{
    NOK_PSLIST_ENTRY Next;                                              //0x0
}NOK_SLIST_ENTRY, * NOK_PSLIST_ENTRY;
//0x30 bytes (sizeof)
typedef struct _NOK_BLOB
{
    union
    {
        NOK_LIST_ENTRY ResourceList;                                    //0x0
        NOK_SLIST_ENTRY FreeListEntry;                                  //0x0
    };
    union
    {
        struct
        {
            UCHAR ReferenceCache:1;                                         //0x10
            UCHAR Lookaside:1;                                              //0x10
            UCHAR Initializing:1;                                           //0x10
            UCHAR Deleted:1;                                                //0x10
        } s1;                                                               //0x10
        UCHAR Flags;                                                        //0x10
    } u1;                                                                   //0x10
    UCHAR ResourceId;                                                       //0x11
    SHORT CachedReferences;                                                 //0x12
    LONGLONG ReferenceCount;                                                //0x18
    NOK_EX_PUSH_LOCK Lock;                                              //0x20
}NOK_BLOB, * NOK_PBLOB;
//0x4 bytes (sizeof)
typedef enum _NOK_BOOT_ENTROPY_SOURCE_ID
{
    NOK_BootEntropySourceNone = 0,
    NOK_BootEntropySourceSeedfile = 1,
    NOK_BootEntropySourceExternal = 2,
    NOK_BootEntropySourceTpm = 3,
    NOK_BootEntropySourceRdrand = 4,
    NOK_BootEntropySourceTime = 5,
    NOK_BootEntropySourceAcpiOem0 = 6,
    NOK_BootEntropySourceUefi = 7,
    NOK_BootEntropySourceCng = 8,
    NOK_BootEntropySourceTcbTpm = 9,
    NOK_BootEntropySourceTcbRdrand = 10,
    NOK_BootMaxEntropySources = 10
}NOK_BOOT_ENTROPY_SOURCE_ID, * NOK_PBOOT_ENTROPY_SOURCE_ID;
//0x4 bytes (sizeof)
typedef enum _NOK_BOOT_ENTROPY_SOURCE_RESULT_CODE
{
    NOK_BootEntropySourceStructureUninitialized = 0,
    NOK_BootEntropySourceDisabledByPolicy = 1,
    NOK_BootEntropySourceNotPresent = 2,
    NOK_BootEntropySourceError = 3,
    NOK_BootEntropySourceSuccess = 4
}NOK_BOOT_ENTROPY_SOURCE_RESULT_CODE, * NOK_PBOOT_ENTROPY_SOURCE_RESULT_CODE;
//0x10 bytes (sizeof)
typedef struct _NOK_BUS_EXTENSION_LIST
{
    VOID* Next;                                                             //0x0
    NOK_PPI_BUS_EXTENSION BusExtension;                                 //0x8
}NOK_BUS_EXTENSION_LIST, * NOK_PBUS_EXTENSION_LIST;
//0x20 bytes (sizeof)
typedef struct _NOK_ALPC_PROCESS_CONTEXT
{
    NOK_EX_PUSH_LOCK Lock;                                              //0x0
    NOK_LIST_ENTRY ViewListHead;                                        //0x8
    volatile ULONGLONG PagedPoolQuotaCache;                                 //0x18
}NOK_ALPC_PROCESS_CONTEXT, * NOK_PALPC_PROCESS_CONTEXT;
//0x10 bytes (sizeof)
typedef union _NOK_SLIST_HEADER
{
    struct
    {
        ULONGLONG Alignment;                                                //0x0
        ULONGLONG Region;                                                   //0x8
    };
    struct
    {
        ULONGLONG Depth:16;                                                 //0x0
        ULONGLONG Sequence:48;                                              //0x0
        ULONGLONG Reserved:4;                                               //0x8
        ULONGLONG NextEntry:60;                                             //0x8
    } HeaderX64;                                                            //0x0
}NOK_SLIST_HEADER, * NOK_PSLIST_HEADER;
//0x4 bytes (sizeof)
typedef enum _NOK_PROCESSOR_CACHE_TYPE
{
    NOK_CacheUnified = 0,
    NOK_CacheInstruction = 1,
    NOK_CacheData = 2,
    NOK_CacheTrace = 3
}NOK_PROCESSOR_CACHE_TYPE, * NOK_PPROCESSOR_CACHE_TYPE;
//0x20 bytes (sizeof)
typedef struct _NOK_CACHE_MANAGER_CALLBACKS
{
    UCHAR (*AcquireForLazyWrite)(VOID* arg1, UCHAR arg2);                   //0x0
    VOID (*ReleaseFromLazyWrite)(VOID* arg1);                               //0x8
    UCHAR (*AcquireForReadAhead)(VOID* arg1, UCHAR arg2);                   //0x10
    VOID (*ReleaseFromReadAhead)(VOID* arg1);                               //0x18
}NOK_CACHE_MANAGER_CALLBACKS, * NOK_PCACHE_MANAGER_CALLBACKS;
//0x18 bytes (sizeof)
typedef struct _NOK_DISPATCHER_HEADER
{
    union
    {
        volatile LONG Lock;                                                 //0x0
        LONG LockNV;                                                        //0x0
        struct
        {
            UCHAR Type;                                                     //0x0
            UCHAR Signalling;                                               //0x1
            UCHAR Size;                                                     //0x2
            UCHAR Reserved1;                                                //0x3
        };
        struct
        {
            UCHAR TimerType;                                                //0x0
            union
            {
                UCHAR TimerControlFlags;                                    //0x1
                struct
                {
                    UCHAR Absolute:1;                                       //0x1
                    UCHAR Wake:1;                                           //0x1
                    UCHAR EncodedTolerableDelay:6;                          //0x1
                };
            };
            UCHAR Hand;                                                     //0x2
            union
            {
                UCHAR TimerMiscFlags;                                       //0x3
                struct
                {
                    UCHAR Index:6;                                          //0x3
                    UCHAR Inserted:1;                                       //0x3
                    volatile UCHAR Expired:1;                               //0x3
                };
            };
        };
        struct
        {
            UCHAR Timer2Type;                                               //0x0
            union
            {
                UCHAR Timer2Flags;                                          //0x1
                struct
                {
                    UCHAR Timer2Inserted:1;                                 //0x1
                    UCHAR Timer2Expiring:1;                                 //0x1
                    UCHAR Timer2CancelPending:1;                            //0x1
                    UCHAR Timer2SetPending:1;                               //0x1
                    UCHAR Timer2Running:1;                                  //0x1
                    UCHAR Timer2Disabled:1;                                 //0x1
                    UCHAR Timer2ReservedFlags:2;                            //0x1
                };
            };
            UCHAR Timer2ComponentId;                                        //0x2
            UCHAR Timer2RelativeId;                                         //0x3
        };
        struct
        {
            UCHAR QueueType;                                                //0x0
            union
            {
                UCHAR QueueControlFlags;                                    //0x1
                struct
                {
                    UCHAR Abandoned:1;                                      //0x1
                    UCHAR DisableIncrement:1;                               //0x1
                    UCHAR QueueReservedControlFlags:6;                      //0x1
                };
            };
            UCHAR QueueSize;                                                //0x2
            UCHAR QueueReserved;                                            //0x3
        };
        struct
        {
            UCHAR ThreadType;                                               //0x0
            UCHAR ThreadReserved;                                           //0x1
            union
            {
                UCHAR ThreadControlFlags;                                   //0x2
                struct
                {
                    UCHAR CycleProfiling:1;                                 //0x2
                    UCHAR CounterProfiling:1;                               //0x2
                    UCHAR GroupScheduling:1;                                //0x2
                    UCHAR AffinitySet:1;                                    //0x2
                    UCHAR Tagged:1;                                         //0x2
                    UCHAR EnergyProfiling:1;                                //0x2
                    UCHAR SchedulerAssist:1;                                //0x2
                    UCHAR ThreadReservedControlFlags:1;                     //0x2
                };
            };
            union
            {
                UCHAR DebugActive;                                          //0x3
                struct
                {
                    UCHAR ActiveDR7:1;                                      //0x3
                    UCHAR Instrumented:1;                                   //0x3
                    UCHAR Minimal:1;                                        //0x3
                    UCHAR Reserved4:2;                                      //0x3
                    UCHAR AltSyscall:1;                                     //0x3
                    UCHAR UmsScheduled:1;                                   //0x3
                    UCHAR UmsPrimary:1;                                     //0x3
                };
            };
        };
        struct
        {
            UCHAR MutantType;                                               //0x0
            UCHAR MutantSize;                                               //0x1
            UCHAR DpcActive;                                                //0x2
            UCHAR MutantReserved;                                           //0x3
        };
    };
    LONG SignalState;                                                       //0x4
    NOK_LIST_ENTRY WaitListHead;                                        //0x8
}NOK_DISPATCHER_HEADER, * NOK_PDISPATCHER_HEADER;
//0x4 bytes (sizeof)
typedef enum _NOK_ARBITER_REQUEST_SOURCE
{
    NOK_ArbiterRequestUndefined = -1,
    NOK_ArbiterRequestLegacyReported = 0,
    NOK_ArbiterRequestHalReported = 1,
    NOK_ArbiterRequestLegacyAssigned = 2,
    NOK_ArbiterRequestPnpDetected = 3,
    NOK_ArbiterRequestPnpEnumerated = 4
}NOK_ARBITER_REQUEST_SOURCE, * NOK_PARBITER_REQUEST_SOURCE;
//0x28 bytes (sizeof)
typedef struct _NOK_CALL_HASH_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    VOID* CallersAddress;                                                   //0x10
    VOID* CallersCaller;                                                    //0x18
    ULONG CallCount;                                                        //0x20
}NOK_CALL_HASH_ENTRY, * NOK_PCALL_HASH_ENTRY;
//0x20 bytes (sizeof)
typedef struct _NOK_CC_ASYNC_READ_CONTEXT
{
    UCHAR (*CompletionRoutine)(VOID* arg1);                                 //0x0
    VOID* Context;                                                          //0x8
    NOK_PMDL Mdl;                                                       //0x10
    CHAR RequestorMode;                                                     //0x18
    ULONG NestingLevel;                                                     //0x1c
}NOK_CC_ASYNC_READ_CONTEXT, * NOK_PCC_ASYNC_READ_CONTEXT;
//0x18 bytes (sizeof)
typedef struct _NOK_DIRTY_PAGE_STATISTICS
{
    ULONGLONG DirtyPages;                                                   //0x0
    ULONGLONG DirtyPagesLastScan;                                           //0x8
    ULONG DirtyPagesScheduledLastScan;                                      //0x10
}NOK_DIRTY_PAGE_STATISTICS, * NOK_PDIRTY_PAGE_STATISTICS;
//0x408 bytes (sizeof)
typedef struct _NOK_CALL_PERFORMANCE_DATA
{
    ULONGLONG SpinLock;                                                     //0x0
    NOK_LIST_ENTRY HashTable[64];                                       //0x8
}NOK_CALL_PERFORMANCE_DATA, * NOK_PCALL_PERFORMANCE_DATA;
//0x8 bytes (sizeof)
typedef struct _NOK_CM_BIG_DATA
{
    USHORT Signature;                                                       //0x0
    USHORT Count;                                                           //0x2
    ULONG List;                                                             //0x4
}NOK_CM_BIG_DATA, * NOK_PCM_BIG_DATA;
//0x8 bytes (sizeof)
typedef struct _NOK_CHILD_LIST
{
    ULONG Count;                                                            //0x0
    ULONG List;                                                             //0x4
}NOK_CHILD_LIST, * NOK_PCHILD_LIST;
//0x10 bytes (sizeof)
typedef struct _NOK_CLIENT_ID
{
    VOID* UniqueProcess;                                                    //0x0
    VOID* UniqueThread;                                                     //0x8
}NOK_CLIENT_ID, * NOK_PCLIENT_ID;
//0x8 bytes (sizeof)
typedef struct _NOK_CLIENT_ID32
{
    ULONG UniqueProcess;                                                    //0x0
    ULONG UniqueThread;                                                     //0x4
}NOK_CLIENT_ID32, * NOK_PCLIENT_ID32;
//0x10 bytes (sizeof)
typedef struct _NOK_CLIENT_ID64
{
    ULONGLONG UniqueProcess;                                                //0x0
    ULONGLONG UniqueThread;                                                 //0x8
}NOK_CLIENT_ID64, * NOK_PCLIENT_ID64;
//0x8 bytes (sizeof)
typedef struct _NOK_CMSI_RW_LOCK
{
    VOID* Reserved;                                                         //0x0
}NOK_CMSI_RW_LOCK, * NOK_PCMSI_RW_LOCK;
//0x30 bytes (sizeof)
typedef struct _NOK_CC_EXTERNAL_CACHE_INFO
{
    VOID (*Callback)(VOID* arg1, ULONGLONG arg2, ULONG arg3);               //0x0
    NOK_DIRTY_PAGE_STATISTICS DirtyPageStatistics;                      //0x8
    NOK_LIST_ENTRY Links;                                               //0x20
}NOK_CC_EXTERNAL_CACHE_INFO, * NOK_PCC_EXTERNAL_CACHE_INFO;
//0x4 bytes (sizeof)
typedef enum _NOK_CM_DIRTY_VECTOR_OPERATION
{
    NOK_DirtyVectorModified = 0,
    NOK_DirtyDataCaptureStart = 1,
    NOK_DirtyDataCaptureEnd = 2
}NOK_CM_DIRTY_VECTOR_OPERATION, * NOK_PCM_DIRTY_VECTOR_OPERATION;
//0x10 bytes (sizeof)
typedef struct _NOK_GUID
{
    ULONG Data1;                                                            //0x0
    USHORT Data2;                                                           //0x4
    USHORT Data3;                                                           //0x6
    UCHAR Data4[8];                                                         //0x8
}NOK_GUID, * NOK_PGUID;
//0x10 bytes (sizeof)
typedef struct _NOK_CMSI_PROCESS_TUPLE
{
    VOID* ProcessHandle;                                                    //0x0
    VOID* ProcessReference;                                                 //0x8
}NOK_CMSI_PROCESS_TUPLE, * NOK_PCMSI_PROCESS_TUPLE;
//0x20 bytes (sizeof)
typedef struct _NOK_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
{
    NOK_PCM_KEY_CONTROL_BLOCK BaseKcb;                                  //0x0
    LONG PrepareStatus;                                                     //0x8
    NOK_LIST_ENTRY ClonedKcbListHead;                                   //0x10
}NOK_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT, * NOK_PCMP_DISCARD_AND_REPLACE_KCB_CONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_CM_KEY_INDEX
{
    USHORT Signature;                                                       //0x0
    USHORT Count;                                                           //0x2
    ULONG List[1];                                                          //0x4
}NOK_CM_KEY_INDEX, * NOK_PCM_KEY_INDEX;
//0x4 bytes (sizeof)
typedef struct _NOK_CM_COMPONENT_HASH
{
    ULONG Hash;                                                             //0x0
}NOK_CM_COMPONENT_HASH, * NOK_PCM_COMPONENT_HASH;
//0x4 bytes (sizeof)
typedef struct _NOK_CM_PATH_HASH
{
    ULONG Hash;                                                             //0x0
}NOK_CM_PATH_HASH, * NOK_PCM_PATH_HASH;
//0x48 bytes (sizeof)
typedef struct _NOK_CM_DIRTY_VECTOR_LOG_ENTRY
{
    NOK_PETHREAD Thread;                                                //0x0
    NOK_CM_DIRTY_VECTOR_OPERATION Operation;                              //0x8
    union
    {
        struct
        {
            ULONG Start;                                                    //0xc
            ULONG Length;                                                   //0x10
        } DirtyVectorModifiedContext;                                       //0xc
        struct
        {
            ULONG RangeCount;                                               //0xc
            ULONG SetBitCount;                                              //0x10
        } DirtyDataCaptureContext;                                          //0xc
        struct
        {
            ULONG Context1;                                                 //0xc
            ULONG Context2;                                                 //0x10
        } Raw;                                                              //0xc
    } Data;                                                                 //0xc
    VOID* Stack[6];                                                         //0x18
}NOK_CM_DIRTY_VECTOR_LOG_ENTRY, * NOK_PCM_DIRTY_VECTOR_LOG_ENTRY;
//0x4 bytes (sizeof)
typedef struct _NOK_CM_FAST_LEAF_HINT
{
    union
    {
        UCHAR Characters[4];                                                //0x0
        ULONG FullHint;                                                     //0x0
    };
}NOK_CM_FAST_LEAF_HINT, * NOK_PCM_FAST_LEAF_HINT;
//0x14 bytes (sizeof)
typedef struct _NOK_CM_PARTIAL_RESOURCE_DESCRIPTOR
{
    UCHAR Type;                                                             //0x0
    UCHAR ShareDisposition;                                                 //0x1
    USHORT Flags;                                                           //0x2
    union
    {
        struct
        {
            NOK_LARGE_INTEGER Start;                                     //0x4
            ULONG Length;                                                   //0xc
        } Generic;                                                          //0x4
        struct
        {
            NOK_LARGE_INTEGER Start;                                     //0x4
            ULONG Length;                                                   //0xc
        } Port;                                                             //0x4
        struct
        {
            USHORT Level;                                                   //0x4
            USHORT Group;                                                   //0x6
            ULONG Vector;                                                   //0x8
            ULONGLONG Affinity;                                             //0xc
        } Interrupt;                                                        //0x4
        struct
        {
            union
            {
                struct
                {
                    USHORT Group;                                           //0x4
                    USHORT MessageCount;                                    //0x6
                    ULONG Vector;                                           //0x8
                    ULONGLONG Affinity;                                     //0xc
                } Raw;                                                      //0x4
                struct
                {
                    USHORT Level;                                           //0x4
                    USHORT Group;                                           //0x6
                    ULONG Vector;                                           //0x8
                    ULONGLONG Affinity;                                     //0xc
                } Translated;                                               //0x4
            };
        } MessageInterrupt;                                                 //0x4
        struct
        {
            NOK_LARGE_INTEGER Start;                                     //0x4
            ULONG Length;                                                   //0xc
        } Memory;                                                           //0x4
        struct
        {
            ULONG Channel;                                                  //0x4
            ULONG Port;                                                     //0x8
            ULONG Reserved1;                                                //0xc
        } Dma;                                                              //0x4
        struct
        {
            ULONG Channel;                                                  //0x4
            ULONG RequestLine;                                              //0x8
            UCHAR TransferWidth;                                            //0xc
            UCHAR Reserved1;                                                //0xd
            UCHAR Reserved2;                                                //0xe
            UCHAR Reserved3;                                                //0xf
        } DmaV3;                                                            //0x4
        struct
        {
            ULONG Data[3];                                                  //0x4
        } DevicePrivate;                                                    //0x4
        struct
        {
            ULONG Start;                                                    //0x4
            ULONG Length;                                                   //0x8
            ULONG Reserved;                                                 //0xc
        } BusNumber;                                                        //0x4
        struct
        {
            ULONG DataSize;                                                 //0x4
            ULONG Reserved1;                                                //0x8
            ULONG Reserved2;                                                //0xc
        } DeviceSpecificData;                                               //0x4
        struct
        {
            NOK_LARGE_INTEGER Start;                                     //0x4
            ULONG Length40;                                                 //0xc
        } Memory40;                                                         //0x4
        struct
        {
            NOK_LARGE_INTEGER Start;                                     //0x4
            ULONG Length48;                                                 //0xc
        } Memory48;                                                         //0x4
        struct
        {
            NOK_LARGE_INTEGER Start;                                     //0x4
            ULONG Length64;                                                 //0xc
        } Memory64;                                                         //0x4
        struct
        {
            UCHAR Class;                                                    //0x4
            UCHAR Type;                                                     //0x5
            UCHAR Reserved1;                                                //0x6
            UCHAR Reserved2;                                                //0x7
            ULONG IdLowPart;                                                //0x8
            ULONG IdHighPart;                                               //0xc
        } Connection;                                                       //0x4
    } u;                                                                    //0x4
}NOK_CM_PARTIAL_RESOURCE_DESCRIPTOR, * NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR;
//0x8 bytes (sizeof)
typedef struct _NOK_CM_INDEX
{
    ULONG Cell;                                                             //0x0
    union
    {
        NOK_CM_FAST_LEAF_HINT NameHint;                                 //0x4
        NOK_CM_COMPONENT_HASH HashKey;                                  //0x4
    };
}NOK_CM_INDEX, * NOK_PCM_INDEX;
//0x8 bytes (sizeof)
typedef struct _NOK_CM_INDEX_HINT_BLOCK
{
    ULONG Count;                                                            //0x0
    ULONG HashKey[1];                                                       //0x4
}NOK_CM_INDEX_HINT_BLOCK, * NOK_PCM_INDEX_HINT_BLOCK;
//0x10 bytes (sizeof)
typedef struct _NOK_CM_INTENT_LOCK
{
    ULONG OwnerCount;                                                       //0x0
    NOK_PCM_KCB_UOW* OwnerTable;                                        //0x8
}NOK_CM_INTENT_LOCK, * NOK_PCM_INTENT_LOCK;
//0x18 bytes (sizeof)
typedef struct _NOK_CMP_VOLUME_MANAGER
{
    NOK_CMSI_RW_LOCK VolumeContextListLock;                             //0x0
    NOK_LIST_ENTRY VolumeContextListHead;                               //0x8
}NOK_CMP_VOLUME_MANAGER, * NOK_PCMP_VOLUME_MANAGER;
//0x28 bytes (sizeof)
typedef struct _NOK_SECURITY_DESCRIPTOR
{
    UCHAR Revision;                                                         //0x0
    UCHAR Sbz1;                                                             //0x1
    USHORT Control;                                                         //0x2
    VOID* Owner;                                                            //0x8
    VOID* Group;                                                            //0x10
    NOK_PACL Sacl;                                                      //0x18
    NOK_PACL Dacl;                                                      //0x20
}NOK_SECURITY_DESCRIPTOR, * NOK_PSECURITY_DESCRIPTOR;
//0x30 bytes (sizeof)
typedef struct _NOK_CM_KCB_LAYER_INFO
{
    NOK_LIST_ENTRY LayerListEntry;                                      //0x0
    NOK_PCM_KEY_CONTROL_BLOCK Kcb;                                      //0x10
    NOK_PCM_KCB_LAYER_INFO LowerLayer;                                  //0x18
    NOK_LIST_ENTRY UpperLayerListHead;                                  //0x20
}NOK_CM_KCB_LAYER_INFO, * NOK_PCM_KCB_LAYER_INFO;
//0x48 bytes (sizeof)
typedef struct _NOK_CMP_VOLUME_CONTEXT
{
    NOK_LIST_ENTRY VolumeContextListEntry;                              //0x0
    NOK_PCMP_VOLUME_MANAGER VolumeManager;                              //0x10
    LONGLONG RefCount;                                                      //0x18
    NOK_GUID VolumeGuid;                                                //0x20
    VOID* VolumeFileObject;                                                 //0x30
    NOK_CMSI_RW_LOCK VolumeContextLock;                                 //0x38
    UCHAR DeviceUsageNotificationSent;                                      //0x40
}NOK_CMP_VOLUME_CONTEXT, * NOK_PCMP_VOLUME_CONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_BLOB_COUNTERS
{
    ULONG CreatedObjects;                                                   //0x0
    ULONG DeletedObjects;                                                   //0x4
}NOK_BLOB_COUNTERS, * NOK_PBLOB_COUNTERS;
//0x14 bytes (sizeof)
typedef struct _NOK_SECURITY_DESCRIPTOR_RELATIVE
{
    UCHAR Revision;                                                         //0x0
    UCHAR Sbz1;                                                             //0x1
    USHORT Control;                                                         //0x2
    ULONG Owner;                                                            //0x4
    ULONG Group;                                                            //0x8
    ULONG Sacl;                                                             //0xc
    ULONG Dacl;                                                             //0x10
}NOK_SECURITY_DESCRIPTOR_RELATIVE, * NOK_PSECURITY_DESCRIPTOR_RELATIVE;
//0x18 bytes (sizeof)
typedef struct _NOK_CM_KEY_VALUE
{
    USHORT Signature;                                                       //0x0
    USHORT NameLength;                                                      //0x2
    ULONG DataLength;                                                       //0x4
    ULONG Data;                                                             //0x8
    ULONG Type;                                                             //0xc
    USHORT Flags;                                                           //0x10
    USHORT Spare;                                                           //0x12
    WCHAR Name[1];                                                          //0x14
}NOK_CM_KEY_VALUE, * NOK_PCM_KEY_VALUE;
//0x10 bytes (sizeof)
typedef struct _NOK_CM_KEY_REFERENCE
{
    ULONG KeyCell;                                                          //0x0
    NOK_PHHIVE KeyHive;                                                 //0x8
}NOK_CM_KEY_REFERENCE, * NOK_PCM_KEY_REFERENCE;
//0x20 bytes (sizeof)
typedef struct _NOK_DEBUG_MEMORY_REQUIREMENTS
{
    NOK_LARGE_INTEGER Start;                                             //0x0
    NOK_LARGE_INTEGER MaxEnd;                                            //0x8
    VOID* VirtualAddress;                                                   //0x10
    ULONG Length;                                                           //0x18
    UCHAR Cached;                                                           //0x1c
    UCHAR Aligned;                                                          //0x1d
}NOK_DEBUG_MEMORY_REQUIREMENTS, * NOK_PDEBUG_MEMORY_REQUIREMENTS;
//0x20 bytes (sizeof)
typedef struct _NOK_CM_KEY_HASH
{
    NOK_CM_PATH_HASH ConvKey;                                           //0x0
    NOK_PCM_KEY_HASH NextHash;                                          //0x8
    NOK_PHHIVE KeyHive;                                                 //0x10
    ULONG KeyCell;                                                          //0x18
}NOK_CM_KEY_HASH, * NOK_PCM_KEY_HASH;
//0x28 bytes (sizeof)
typedef struct _NOK_CM_KEY_SECURITY
{
    USHORT Signature;                                                       //0x0
    USHORT Reserved;                                                        //0x2
    ULONG Flink;                                                            //0x4
    ULONG Blink;                                                            //0x8
    ULONG ReferenceCount;                                                   //0xc
    ULONG DescriptorLength;                                                 //0x10
    NOK_SECURITY_DESCRIPTOR_RELATIVE Descriptor;                        //0x14
}NOK_CM_KEY_SECURITY, * NOK_PCM_KEY_SECURITY;
//0x4 bytes (sizeof)
typedef enum _NOK_HSTORAGE_TYPE
{
    NOK_Stable = 0,
    NOK_Volatile = 1,
    NOK_InvalidStorage = 2
}NOK_HSTORAGE_TYPE, * NOK_PHSTORAGE_TYPE;
//0x50 bytes (sizeof)
typedef struct _NOK_CM_KEY_NODE
{
    USHORT Signature;                                                       //0x0
    USHORT Flags;                                                           //0x2
    NOK_LARGE_INTEGER LastWriteTime;                                     //0x4
    UCHAR AccessBits;                                                       //0xc
    UCHAR LayerSemantics:2;                                                 //0xd
    UCHAR Spare1:5;                                                         //0xd
    UCHAR InheritClass:1;                                                   //0xd
    USHORT Spare2;                                                          //0xe
    ULONG Parent;                                                           //0x10
    ULONG SubKeyCounts[2];                                                  //0x14
    union
    {
        struct
        {
            ULONG SubKeyLists[2];                                           //0x1c
            NOK_CHILD_LIST ValueList;                                   //0x24
        };
        NOK_CM_KEY_REFERENCE ChildHiveReference;                        //0x1c
    };
    ULONG Security;                                                         //0x2c
    ULONG Class;                                                            //0x30
    ULONG MaxNameLen:16;                                                    //0x34
    ULONG UserFlags:4;                                                      //0x34
    ULONG VirtControlFlags:4;                                               //0x34
    ULONG Debug:8;                                                          //0x34
    ULONG MaxClassLen;                                                      //0x38
    ULONG MaxValueNameLen;                                                  //0x3c
    ULONG MaxValueDataLen;                                                  //0x40
    ULONG WorkVar;                                                          //0x44
    USHORT NameLength;                                                      //0x48
    USHORT ClassLength;                                                     //0x4a
    WCHAR Name[1];                                                          //0x4c
}NOK_CM_KEY_NODE, * NOK_PCM_KEY_NODE;
//0x18 bytes (sizeof)
typedef struct _NOK_CM_NAME_HASH
{
    NOK_CM_COMPONENT_HASH ConvKey;                                      //0x0
    NOK_PCM_NAME_HASH NextHash;                                         //0x8
    USHORT NameLength;                                                      //0x10
    WCHAR Name[1];                                                          //0x12
}NOK_CM_NAME_HASH, * NOK_PCM_NAME_HASH;
//0x20 bytes (sizeof)
typedef struct _NOK_CM_NAME_CONTROL_BLOCK
{
    ULONG Compressed:1;                                                     //0x0
    ULONG RefCount:31;                                                      //0x0
    union
    {
        NOK_CM_NAME_HASH NameHash;                                      //0x8
        struct
        {
            NOK_CM_COMPONENT_HASH ConvKey;                              //0x8
            NOK_PCM_KEY_HASH NextHash;                                  //0x10
            USHORT NameLength;                                              //0x18
            WCHAR Name[1];                                                  //0x1a
        };
    };
}NOK_CM_NAME_CONTROL_BLOCK, * NOK_PCM_NAME_CONTROL_BLOCK;
//0x28 bytes (sizeof)
typedef struct _NOK_CM_WORKITEM
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG Private;                                                          //0x10
    VOID (*WorkerRoutine)(VOID* arg1);                                      //0x18
    VOID* Parameter;                                                        //0x20
}NOK_CM_WORKITEM, * NOK_PCM_WORKITEM;
//0x50 bytes (sizeof)
typedef struct _NOK_CM_PARSE_DEBUG_INFO
{
    NOK_PCM_KEY_CONTROL_BLOCK SymlinkCachedKcb;                         //0x0
    NOK_PCM_KEY_CONTROL_BLOCK StartingKcb;                              //0x8
    NOK_PCM_KEY_CONTROL_BLOCK KcbCacheResult;                           //0x10
    NOK_PCM_KEY_CONTROL_BLOCK WalkResult;                               //0x18
    NOK_PCM_KEY_CONTROL_BLOCK DeepestKcbFound;                          //0x20
    UCHAR KcbCacheLevels;                                                   //0x28
    UCHAR WalkLevels;                                                       //0x29
    UCHAR FailureCount;                                                     //0x2a
    struct
    {
        LONG Status;                                                        //0x2c
        ULONG Point;                                                        //0x30
    } FailurePoints[4];                                                     //0x2c
}NOK_CM_PARSE_DEBUG_INFO, * NOK_PCM_PARSE_DEBUG_INFO;
//0x1f8 bytes (sizeof)
typedef struct _NOK_PO_HIBER_PERF
{
    ULONGLONG HiberIoTicks;                                                 //0x0
    ULONGLONG HiberIoCpuTicks;                                              //0x8
    ULONGLONG HiberInitTicks;                                               //0x10
    ULONGLONG HiberHiberFileTicks;                                          //0x18
    ULONGLONG HiberCompressTicks;                                           //0x20
    ULONGLONG HiberSharedBufferTicks;                                       //0x28
    ULONGLONG HiberChecksumTicks;                                           //0x30
    ULONGLONG HiberChecksumIoTicks;                                         //0x38
    NOK_LARGE_INTEGER TotalHibernateTime;                                //0x40
    NOK_LARGE_INTEGER HibernateCompleteTimestamp;                        //0x48
    ULONG POSTTime;                                                         //0x50
    ULONG ResumeBootMgrTime;                                                //0x54
    ULONG BootmgrUserInputTime;                                             //0x58
    ULONGLONG ResumeAppTicks;                                               //0x60
    ULONGLONG ResumeAppStartTimestamp;                                      //0x68
    ULONGLONG ResumeLibraryInitTicks;                                       //0x70
    ULONGLONG ResumeInitTicks;                                              //0x78
    ULONGLONG ResumeRestoreImageStartTimestamp;                             //0x80
    ULONGLONG ResumeHiberFileTicks;                                         //0x88
    ULONGLONG ResumeIoTicks;                                                //0x90
    ULONGLONG ResumeDecompressTicks;                                        //0x98
    ULONGLONG ResumeAllocateTicks;                                          //0xa0
    ULONGLONG ResumeUserInOutTicks;                                         //0xa8
    ULONGLONG ResumeMapTicks;                                               //0xb0
    ULONGLONG ResumeUnmapTicks;                                             //0xb8
    ULONGLONG ResumeChecksumTicks;                                          //0xc0
    ULONGLONG ResumeChecksumIoTicks;                                        //0xc8
    ULONGLONG ResumeKernelSwitchTimestamp;                                  //0xd0
    ULONGLONG CyclesPerMs;                                                  //0xd8
    ULONGLONG WriteLogDataTimestamp;                                        //0xe0
    ULONGLONG KernelReturnFromHandler;                                      //0xe8
    ULONGLONG TimeStampCounterAtSwitchTime;                                 //0xf0
    ULONGLONG HalTscOffset;                                                 //0xf8
    ULONGLONG HvlTscOffset;                                                 //0x100
    ULONGLONG SleeperThreadEnd;                                             //0x108
    ULONGLONG PostCmosUpdateTimestamp;                                      //0x110
    ULONGLONG KernelReturnSystemPowerStateTimestamp;                        //0x118
    ULONGLONG IoBoundedness;                                                //0x120
    ULONGLONG KernelDecompressTicks;                                        //0x128
    ULONGLONG KernelIoTicks;                                                //0x130
    ULONGLONG KernelCopyTicks;                                              //0x138
    ULONGLONG ReadCheckCount;                                               //0x140
    ULONGLONG KernelInitTicks;                                              //0x148
    ULONGLONG KernelResumeHiberFileTicks;                                   //0x150
    ULONGLONG KernelIoCpuTicks;                                             //0x158
    ULONGLONG KernelSharedBufferTicks;                                      //0x160
    ULONGLONG KernelAnimationTicks;                                         //0x168
    ULONGLONG KernelChecksumTicks;                                          //0x170
    ULONGLONG KernelChecksumIoTicks;                                        //0x178
    NOK_LARGE_INTEGER AnimationStart;                                    //0x180
    NOK_LARGE_INTEGER AnimationStop;                                     //0x188
    ULONG DeviceResumeTime;                                                 //0x190
    ULONGLONG SecurePagesProcessed;                                         //0x198
    ULONGLONG BootPagesProcessed;                                           //0x1a0
    ULONGLONG KernelPagesProcessed;                                         //0x1a8
    ULONGLONG BootBytesWritten;                                             //0x1b0
    ULONGLONG KernelBytesWritten;                                           //0x1b8
    ULONGLONG BootPagesWritten;                                             //0x1c0
    ULONGLONG KernelPagesWritten;                                           //0x1c8
    ULONGLONG BytesWritten;                                                 //0x1d0
    ULONG PagesWritten;                                                     //0x1d8
    ULONG FileRuns;                                                         //0x1dc
    ULONG NoMultiStageResumeReason;                                         //0x1e0
    ULONG MaxHuffRatio;                                                     //0x1e4
    ULONGLONG AdjustedTotalResumeTime;                                      //0x1e8
    ULONGLONG ResumeCompleteTimestamp;                                      //0x1f0
}NOK_PO_HIBER_PERF, * NOK_PPO_HIBER_PERF;
//0x28 bytes (sizeof)
typedef struct _NOK_SUPPORTED_RANGE
{
    NOK_PSUPPORTED_RANGE Next;                                          //0x0
    ULONG SystemAddressSpace;                                               //0x8
    LONGLONG SystemBase;                                                    //0x10
    LONGLONG Base;                                                          //0x18
    LONGLONG Limit;                                                         //0x20
}NOK_SUPPORTED_RANGE, * NOK_PSUPPORTED_RANGE;
//0x18 bytes (sizeof)
typedef struct _NOK_CM_KEY_HASH_TABLE_ENTRY
{
    NOK_EX_PUSH_LOCK Lock;                                              //0x0
    NOK_PKTHREAD Owner;                                                 //0x8
    NOK_PCM_KEY_HASH Entry;                                             //0x10
}NOK_CM_KEY_HASH_TABLE_ENTRY, * NOK_PCM_KEY_HASH_TABLE_ENTRY;
//0x1c bytes (sizeof)
typedef struct _NOK_CM_PARTIAL_RESOURCE_LIST
{
    USHORT Version;                                                         //0x0
    USHORT Revision;                                                        //0x2
    ULONG Count;                                                            //0x4
    NOK_CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];           //0x8
}NOK_CM_PARTIAL_RESOURCE_LIST, * NOK_PCM_PARTIAL_RESOURCE_LIST;
//0x18 bytes (sizeof)
typedef struct _NOK_SEP_TOKEN_PRIVILEGES
{
    ULONGLONG Present;                                                      //0x0
    ULONGLONG Enabled;                                                      //0x8
    ULONGLONG EnabledByDefault;                                             //0x10
}NOK_SEP_TOKEN_PRIVILEGES, * NOK_PSEP_TOKEN_PRIVILEGES;
//0x88 bytes (sizeof)
typedef struct _NOK_CM_RM
{
    NOK_LIST_ENTRY RmListEntry;                                         //0x0
    NOK_LIST_ENTRY TransactionListHead;                                 //0x10
    VOID* TmHandle;                                                         //0x20
    VOID* Tm;                                                               //0x28
    VOID* RmHandle;                                                         //0x30
    VOID* KtmRm;                                                            //0x38
    ULONG RefCount;                                                         //0x40
    ULONG ContainerNum;                                                     //0x44
    ULONGLONG ContainerSize;                                                //0x48
    NOK_PCMHIVE CmHive;                                                 //0x50
    VOID* LogFileObject;                                                    //0x58
    VOID* MarshallingContext;                                               //0x60
    ULONG RmFlags;                                                          //0x68
    LONG LogStartStatus1;                                                   //0x6c
    LONG LogStartStatus2;                                                   //0x70
    ULONGLONG BaseLsn;                                                      //0x78
    NOK_PERESOURCE RmLock;                                              //0x80
}NOK_CM_RM, * NOK_PCM_RM;
//0x14 bytes (sizeof)
typedef struct _NOK_CM_UOW_KEY_STATE_MODIFICATION
{
    ULONG RefCount;                                                         //0x0
    ULONG SubKeyListCount[2];                                               //0x4
    ULONG NewSubKeyList[2];                                                 //0xc
}NOK_CM_UOW_KEY_STATE_MODIFICATION, * NOK_PCM_UOW_KEY_STATE_MODIFICATION;
//0x4 bytes (sizeof)
typedef struct _NOK_CM_UOW_SET_SD_DATA
{
    ULONG SecurityCell;                                                     //0x0
}NOK_CM_UOW_SET_SD_DATA, * NOK_PCM_UOW_SET_SD_DATA;
//0x10 bytes (sizeof)
typedef struct _NOK_CM_UOW_SET_VALUE_KEY_DATA
{
    ULONG PreparedCell;                                                     //0x0
    ULONG OldValueCell;                                                     //0x4
    USHORT NameLength;                                                      //0x8
    ULONG DataSize;                                                         //0xc
}NOK_CM_UOW_SET_VALUE_KEY_DATA, * NOK_PCM_UOW_SET_VALUE_KEY_DATA;
//0xc bytes (sizeof)
typedef struct _NOK_CM_UOW_SET_VALUE_LIST_DATA
{
    ULONG RefCount;                                                         //0x0
    NOK_CHILD_LIST ValueList;                                           //0x4
}NOK_CM_UOW_SET_VALUE_LIST_DATA, * NOK_PCM_UOW_SET_VALUE_LIST_DATA;
//0x8 bytes (sizeof)
typedef union _NOK_CM_TRANS_PTR
{
    ULONGLONG LightWeight:1;                                                //0x0
    VOID* TransPtr;                                                         //0x0
}NOK_CM_TRANS_PTR, * NOK_PCM_TRANS_PTR;
//0xb8 bytes (sizeof)
typedef struct _NOK_CM_TRANS
{
    NOK_LIST_ENTRY TransactionListEntry;                                //0x0
    NOK_LIST_ENTRY KCBUoWListHead;                                      //0x10
    NOK_LIST_ENTRY LazyCommitListEntry;                                 //0x20
    union
    {
        struct
        {
            ULONG Prepared:1;                                               //0x30
            ULONG Aborted:1;                                                //0x30
            ULONG Committed:1;                                              //0x30
            ULONG Initializing:1;                                           //0x30
            ULONG Invalid:1;                                                //0x30
            ULONG UseReservation:1;                                         //0x30
            ULONG TmCallbacksActive:1;                                      //0x30
            ULONG LightWeight:1;                                            //0x30
            ULONG Freed1:1;                                                 //0x30
            ULONG Freed2:1;                                                 //0x30
            ULONG Spare1:2;                                                 //0x30
            ULONG Freed:1;                                                  //0x30
            ULONG Spare:19;                                                 //0x30
        };
        ULONG TransState;                                                   //0x30
    };
    NOK_CM_TRANS_PTR Trans;                                              //0x38
    NOK_PCM_RM CmRm;                                                    //0x40
    NOK_PKENLISTMENT KtmEnlistmentObject;                               //0x48
    VOID* KtmEnlistmentHandle;                                              //0x50
    NOK_GUID KtmUow;                                                    //0x58
    ULONGLONG StartLsn;                                                     //0x68
    ULONG HiveCount;                                                        //0x70
    NOK_PCMHIVE HiveArray[8];                                           //0x78
}NOK_CM_TRANS, * NOK_PCM_TRANS;
//0xc bytes (sizeof)
typedef struct _NOK_COMPRESSED_DATA_INFO
{
    USHORT CompressionFormatAndEngine;                                      //0x0
    UCHAR CompressionUnitShift;                                             //0x2
    UCHAR ChunkShift;                                                       //0x3
    UCHAR ClusterShift;                                                     //0x4
    UCHAR Reserved;                                                         //0x5
    USHORT NumberOfChunks;                                                  //0x6
    ULONG CompressedChunkSizes[1];                                          //0x8
}NOK_COMPRESSED_DATA_INFO, * NOK_PCOMPRESSED_DATA_INFO;
//0x4 bytes (sizeof)
typedef struct _NOK_DEVICE_FLAGS
{
    ULONG Failed:1;                                                         //0x0
    ULONG ReadOnly:1;                                                       //0x0
    ULONG Removable:1;                                                      //0x0
    ULONG ConsoleIn:1;                                                      //0x0
    ULONG ConsoleOut:1;                                                     //0x0
    ULONG Input:1;                                                          //0x0
    ULONG Output:1;                                                         //0x0
}NOK_DEVICE_FLAGS, * NOK_PDEVICE_FLAGS;
//0x4 bytes (sizeof)
typedef enum _NOK_CONFIGURATION_CLASS
{
    NOK_SystemClass = 0,
    NOK_ProcessorClass = 1,
    NOK_CacheClass = 2,
    NOK_AdapterClass = 3,
    NOK_ControllerClass = 4,
    NOK_PeripheralClass = 5,
    NOK_MemoryClass = 6,
    NOK_MaximumClass = 7
}NOK_CONFIGURATION_CLASS, * NOK_PCONFIGURATION_CLASS;
//0x10 bytes (sizeof)
typedef struct _NOK_M128A
{
    ULONGLONG Low;                                                          //0x0
    LONGLONG High;                                                          //0x8
}NOK_M128A, * NOK_PM128A;
//0x38 bytes (sizeof)
typedef struct _NOK_CM_KEY_SECURITY_CACHE
{
    ULONG Cell;                                                             //0x0
    ULONG ConvKey;                                                          //0x4
    NOK_LIST_ENTRY List;                                                //0x8
    ULONG DescriptorLength;                                                 //0x18
    ULONG RealRefCount;                                                     //0x1c
    NOK_SECURITY_DESCRIPTOR_RELATIVE Descriptor;                        //0x20
}NOK_CM_KEY_SECURITY_CACHE, * NOK_PCM_KEY_SECURITY_CACHE;
//0x8 bytes (sizeof)
typedef struct _NOK_EX_FAST_REF
{
    union
    {
        VOID* Object;                                                       //0x0
        ULONGLONG RefCnt:4;                                                 //0x0
        ULONGLONG Value;                                                    //0x0
    };
}NOK_EX_FAST_REF, * NOK_PEX_FAST_REF;
//0x4 bytes (sizeof)
typedef enum _NOK_HARDWARE_COUNTER_TYPE
{
    NOK_PMCCounter = 0,
    NOK_MaxHardwareCounterType = 1
}NOK_HARDWARE_COUNTER_TYPE, * NOK_PHARDWARE_COUNTER_TYPE;
//0x28 bytes (sizeof)
typedef struct _NOK_KDEVICE_QUEUE
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    NOK_LIST_ENTRY DeviceListHead;                                      //0x8
    ULONGLONG Lock;                                                         //0x18
    union
    {
        UCHAR Busy;                                                         //0x20
        struct
        {
            LONGLONG Reserved:8;                                            //0x20
            LONGLONG Hint:56;                                               //0x20
        };
    };
}NOK_KDEVICE_QUEUE, * NOK_PKDEVICE_QUEUE;
//0x10 bytes (sizeof)
typedef struct _NOK_UNICODE_STRING
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    WCHAR* Buffer;                                                          //0x8
}NOK_UNICODE_STRING, * NOK_PUNICODE_STRING;
//0x10 bytes (sizeof)
typedef struct _NOK_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
    ULONG Size;                                                             //0x0
    WCHAR* TriggerId;                                                       //0x8
}NOK_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, * NOK_PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
//0x14 bytes (sizeof)
typedef struct _NOK_IA64_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONGLONG CurrentSymbolStart;                                           //0x4
    ULONGLONG CurrentSymbolEnd;                                             //0xc
}NOK_IA64_DBGKD_CONTROL_SET, * NOK_PIA64_DBGKD_CONTROL_SET;
//0x8 bytes (sizeof)
typedef struct _NOK_DBGKD_BREAKPOINTEX
{
    ULONG BreakPointCount;                                                  //0x0
    LONG ContinueStatus;                                                    //0x4
}NOK_DBGKD_BREAKPOINTEX, * NOK_PDBGKD_BREAKPOINTEX;
//0xc bytes (sizeof)
typedef struct _NOK_DBGKD_CONTEXT_EX
{
    ULONG Offset;                                                           //0x0
    ULONG ByteCount;                                                        //0x4
    ULONG BytesCopied;                                                      //0x8
}NOK_DBGKD_CONTEXT_EX, * NOK_PDBGKD_CONTEXT_EX;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_CONTINUE
{
    LONG ContinueStatus;                                                    //0x0
}NOK_DBGKD_CONTINUE, * NOK_PDBGKD_CONTINUE;
//0xc bytes (sizeof)
typedef struct _NOK_PPC_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG CurrentSymbolStart;                                               //0x4
    ULONG CurrentSymbolEnd;                                                 //0x8
}NOK_PPC_DBGKD_CONTROL_SET, * NOK_PPPC_DBGKD_CONTROL_SET;
//0x10 bytes (sizeof)
typedef struct _NOK_DBGKD_FILL_MEMORY
{
    ULONGLONG Address;                                                      //0x0
    ULONG Length;                                                           //0x8
    USHORT Flags;                                                           //0xc
    USHORT PatternLength;                                                   //0xe
}NOK_DBGKD_FILL_MEMORY, * NOK_PDBGKD_FILL_MEMORY;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_GET_CONTEXT
{
    ULONG Unused;                                                           //0x0
}NOK_DBGKD_GET_CONTEXT, * NOK_PDBGKD_GET_CONTEXT;
//0x1c bytes (sizeof)
typedef struct _NOK_DBGKD_GET_INTERNAL_BREAKPOINT32
{
    ULONG BreakpointAddress;                                                //0x0
    ULONG Flags;                                                            //0x4
    ULONG Calls;                                                            //0x8
    ULONG MaxCallsPerPeriod;                                                //0xc
    ULONG MinInstructions;                                                  //0x10
    ULONG MaxInstructions;                                                  //0x14
    ULONG TotalInstructions;                                                //0x18
}NOK_DBGKD_GET_INTERNAL_BREAKPOINT32, * NOK_PDBGKD_GET_INTERNAL_BREAKPOINT32;
//0x20 bytes (sizeof)
typedef struct _NOK_DBGKD_GET_INTERNAL_BREAKPOINT64
{
    ULONGLONG BreakpointAddress;                                            //0x0
    ULONG Flags;                                                            //0x8
    ULONG Calls;                                                            //0xc
    ULONG MaxCallsPerPeriod;                                                //0x10
    ULONG MinInstructions;                                                  //0x14
    ULONG MaxInstructions;                                                  //0x18
    ULONG TotalInstructions;                                                //0x1c
}NOK_DBGKD_GET_INTERNAL_BREAKPOINT64, * NOK_PDBGKD_GET_INTERNAL_BREAKPOINT64;
//0x14 bytes (sizeof)
typedef struct _NOK_DBGKD_GET_SET_BUS_DATA
{
    ULONG BusDataType;                                                      //0x0
    ULONG BusNumber;                                                        //0x4
    ULONG SlotNumber;                                                       //0x8
    ULONG Offset;                                                           //0xc
    ULONG Length;                                                           //0x10
}NOK_DBGKD_GET_SET_BUS_DATA, * NOK_PDBGKD_GET_SET_BUS_DATA;
//0x28 bytes (sizeof)
typedef struct _NOK_DBGKD_GET_VERSION32
{
    USHORT MajorVersion;                                                    //0x0
    USHORT MinorVersion;                                                    //0x2
    USHORT ProtocolVersion;                                                 //0x4
    USHORT Flags;                                                           //0x6
    ULONG KernBase;                                                         //0x8
    ULONG PsLoadedModuleList;                                               //0xc
    USHORT MachineType;                                                     //0x10
    USHORT ThCallbackStack;                                                 //0x12
    USHORT NextCallback;                                                    //0x14
    USHORT FramePointer;                                                    //0x16
    ULONG KiCallUserMode;                                                   //0x18
    ULONG KeUserCallbackDispatcher;                                         //0x1c
    ULONG BreakpointWithStatus;                                             //0x20
    ULONG DebuggerDataList;                                                 //0x24
}NOK_DBGKD_GET_VERSION32, * NOK_PDBGKD_GET_VERSION32;
//0x28 bytes (sizeof)
typedef struct _NOK_DBGKD_GET_VERSION64
{
    USHORT MajorVersion;                                                    //0x0
    USHORT MinorVersion;                                                    //0x2
    UCHAR ProtocolVersion;                                                  //0x4
    UCHAR KdSecondaryVersion;                                               //0x5
    USHORT Flags;                                                           //0x6
    USHORT MachineType;                                                     //0x8
    UCHAR MaxPacketType;                                                    //0xa
    UCHAR MaxStateChange;                                                   //0xb
    UCHAR MaxManipulate;                                                    //0xc
    UCHAR Simulation;                                                       //0xd
    USHORT Unused[1];                                                       //0xe
    ULONGLONG KernBase;                                                     //0x10
    ULONGLONG PsLoadedModuleList;                                           //0x18
    ULONGLONG DebuggerDataList;                                             //0x20
}NOK_DBGKD_GET_VERSION64, * NOK_PDBGKD_GET_VERSION64;
//0x18 bytes (sizeof)
typedef struct _NOK_DBGKD_LOAD_SYMBOLS32
{
    ULONG PathNameLength;                                                   //0x0
    ULONG BaseOfDll;                                                        //0x4
    ULONG ProcessId;                                                        //0x8
    ULONG CheckSum;                                                         //0xc
    ULONG SizeOfImage;                                                      //0x10
    UCHAR UnloadSymbols;                                                    //0x14
}NOK_DBGKD_LOAD_SYMBOLS32, * NOK_PDBGKD_LOAD_SYMBOLS32;
//0x28 bytes (sizeof)
typedef struct _NOK_DBGKD_LOAD_SYMBOLS64
{
    ULONG PathNameLength;                                                   //0x0
    ULONGLONG BaseOfDll;                                                    //0x8
    ULONGLONG ProcessId;                                                    //0x10
    ULONG CheckSum;                                                         //0x18
    ULONG SizeOfImage;                                                      //0x1c
    UCHAR UnloadSymbols;                                                    //0x20
}NOK_DBGKD_LOAD_SYMBOLS64, * NOK_PDBGKD_LOAD_SYMBOLS64;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_QUERY_SPECIAL_CALLS
{
    ULONG NumberOfSpecialCalls;                                             //0x0
}NOK_DBGKD_QUERY_SPECIAL_CALLS, * NOK_PDBGKD_QUERY_SPECIAL_CALLS;
//0x18 bytes (sizeof)
typedef struct _NOK_DBGKD_QUERY_MEMORY
{
    ULONGLONG Address;                                                      //0x0
    ULONGLONG Reserved;                                                     //0x8
    ULONG AddressSpace;                                                     //0x10
    ULONG Flags;                                                            //0x14
}NOK_DBGKD_QUERY_MEMORY, * NOK_PDBGKD_QUERY_MEMORY;
//0xc bytes (sizeof)
typedef struct _NOK_DBGKD_READ_MEMORY32
{
    ULONG TargetBaseAddress;                                                //0x0
    ULONG TransferCount;                                                    //0x4
    ULONG ActualBytesRead;                                                  //0x8
}NOK_DBGKD_READ_MEMORY32, * NOK_PDBGKD_READ_MEMORY32;
//0x10 bytes (sizeof)
typedef struct _NOK_DBGKD_READ_MEMORY64
{
    ULONGLONG TargetBaseAddress;                                            //0x0
    ULONG TransferCount;                                                    //0x8
    ULONG ActualBytesRead;                                                  //0xc
}NOK_DBGKD_READ_MEMORY64, * NOK_PDBGKD_READ_MEMORY64;
//0x10 bytes (sizeof)
typedef struct _NOK_DBGKD_READ_WRITE_IO64
{
    ULONGLONG IoAddress;                                                    //0x0
    ULONG DataSize;                                                         //0x8
    ULONG DataValue;                                                        //0xc
}NOK_DBGKD_READ_WRITE_IO64, * NOK_PDBGKD_READ_WRITE_IO64;
//0xc bytes (sizeof)
typedef struct _NOK_DBGKD_READ_WRITE_IO32
{
    ULONG DataSize;                                                         //0x0
    ULONG IoAddress;                                                        //0x4
    ULONG DataValue;                                                        //0x8
}NOK_DBGKD_READ_WRITE_IO32, * NOK_PDBGKD_READ_WRITE_IO32;
//0x18 bytes (sizeof)
typedef struct _NOK_DBGKD_READ_WRITE_IO_EXTENDED32
{
    ULONG DataSize;                                                         //0x0
    ULONG InterfaceType;                                                    //0x4
    ULONG BusNumber;                                                        //0x8
    ULONG AddressSpace;                                                     //0xc
    ULONG IoAddress;                                                        //0x10
    ULONG DataValue;                                                        //0x14
}NOK_DBGKD_READ_WRITE_IO_EXTENDED32, * NOK_PDBGKD_READ_WRITE_IO_EXTENDED32;
//0x20 bytes (sizeof)
typedef struct _NOK_DBGKD_READ_WRITE_IO_EXTENDED64
{
    ULONG DataSize;                                                         //0x0
    ULONG InterfaceType;                                                    //0x4
    ULONG BusNumber;                                                        //0x8
    ULONG AddressSpace;                                                     //0xc
    ULONGLONG IoAddress;                                                    //0x10
    ULONG DataValue;                                                        //0x18
}NOK_DBGKD_READ_WRITE_IO_EXTENDED64, * NOK_PDBGKD_READ_WRITE_IO_EXTENDED64;
//0xc bytes (sizeof)
typedef struct _NOK_DBGKD_READ_WRITE_MSR
{
    ULONG Msr;                                                              //0x0
    ULONG DataValueLow;                                                     //0x4
    ULONG DataValueHigh;                                                    //0x8
}NOK_DBGKD_READ_WRITE_MSR, * NOK_PDBGKD_READ_WRITE_MSR;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_RESTORE_BREAKPOINT
{
    ULONG BreakPointHandle;                                                 //0x0
}NOK_DBGKD_RESTORE_BREAKPOINT, * NOK_PDBGKD_RESTORE_BREAKPOINT;
//0x18 bytes (sizeof)
typedef struct _NOK_DBGKD_SEARCH_MEMORY
{
    union
    {
        ULONGLONG SearchAddress;                                            //0x0
        ULONGLONG FoundAddress;                                             //0x0
    };
    ULONGLONG SearchLength;                                                 //0x8
    ULONG PatternLength;                                                    //0x10
}NOK_DBGKD_SEARCH_MEMORY, * NOK_PDBGKD_SEARCH_MEMORY;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_SET_CONTEXT
{
    ULONG ContextFlags;                                                     //0x0
}NOK_DBGKD_SET_CONTEXT, * NOK_PDBGKD_SET_CONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_DBGKD_SET_INTERNAL_BREAKPOINT32
{
    ULONG BreakpointAddress;                                                //0x0
    ULONG Flags;                                                            //0x4
}NOK_DBGKD_SET_INTERNAL_BREAKPOINT32, * NOK_PDBGKD_SET_INTERNAL_BREAKPOINT32;
//0x10 bytes (sizeof)
typedef struct _NOK_DBGKD_SET_INTERNAL_BREAKPOINT64
{
    ULONGLONG BreakpointAddress;                                            //0x0
    ULONG Flags;                                                            //0x8
}NOK_DBGKD_SET_INTERNAL_BREAKPOINT64, * NOK_PDBGKD_SET_INTERNAL_BREAKPOINT64;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_SET_SPECIAL_CALL32
{
    ULONG SpecialCall;                                                      //0x0
}NOK_DBGKD_SET_SPECIAL_CALL32, * NOK_PDBGKD_SET_SPECIAL_CALL32;
//0x8 bytes (sizeof)
typedef struct _NOK_DBGKD_SET_SPECIAL_CALL64
{
    ULONGLONG SpecialCall;                                                  //0x0
}NOK_DBGKD_SET_SPECIAL_CALL64, * NOK_PDBGKD_SET_SPECIAL_CALL64;
//0x8 bytes (sizeof)
typedef struct _NOK_DBGKD_WRITE_BREAKPOINT32
{
    ULONG BreakPointAddress;                                                //0x0
    ULONG BreakPointHandle;                                                 //0x4
}NOK_DBGKD_WRITE_BREAKPOINT32, * NOK_PDBGKD_WRITE_BREAKPOINT32;
//0x4 bytes (sizeof)
typedef struct _NOK_DBGKD_SWITCH_PARTITION
{
    ULONG Partition;                                                        //0x0
}NOK_DBGKD_SWITCH_PARTITION, * NOK_PDBGKD_SWITCH_PARTITION;
//0x10 bytes (sizeof)
typedef struct _NOK_DBGKD_WRITE_BREAKPOINT64
{
    ULONGLONG BreakPointAddress;                                            //0x0
    ULONG BreakPointHandle;                                                 //0x8
}NOK_DBGKD_WRITE_BREAKPOINT64, * NOK_PDBGKD_WRITE_BREAKPOINT64;
//0xc bytes (sizeof)
typedef struct _NOK_DBGKD_WRITE_MEMORY32
{
    ULONG TargetBaseAddress;                                                //0x0
    ULONG TransferCount;                                                    //0x4
    ULONG ActualBytesWritten;                                               //0x8
}NOK_DBGKD_WRITE_MEMORY32, * NOK_PDBGKD_WRITE_MEMORY32;
//0x18 bytes (sizeof)
typedef struct _NOK_DBGKD_WRITE_CUSTOM_BREAKPOINT
{
    ULONGLONG BreakPointAddress;                                            //0x0
    ULONGLONG BreakPointInstruction;                                        //0x8
    ULONG BreakPointHandle;                                                 //0x10
    UCHAR BreakPointInstructionSize;                                        //0x14
    UCHAR BreakPointInstructionAlignment;                                   //0x15
}NOK_DBGKD_WRITE_CUSTOM_BREAKPOINT, * NOK_PDBGKD_WRITE_CUSTOM_BREAKPOINT;
//0x10 bytes (sizeof)
typedef struct _NOK_DBGKD_WRITE_MEMORY64
{
    ULONGLONG TargetBaseAddress;                                            //0x0
    ULONG TransferCount;                                                    //0x8
    ULONG ActualBytesWritten;                                               //0xc
}NOK_DBGKD_WRITE_MEMORY64, * NOK_PDBGKD_WRITE_MEMORY64;
//0x10 bytes (sizeof)
typedef struct _NOK_X86_DBGKD_CONTROL_SET
{
    ULONG TraceFlag;                                                        //0x0
    ULONG Dr7;                                                              //0x4
    ULONG CurrentSymbolStart;                                               //0x8
    ULONG CurrentSymbolEnd;                                                 //0xc
}NOK_X86_DBGKD_CONTROL_SET, * NOK_PX86_DBGKD_CONTROL_SET;
//0x1c bytes (sizeof)
typedef struct _NOK_DBGKD_ANY_CONTROL_SET
{
    union
    {
        NOK_X86_DBGKD_CONTROL_SET X86ControlSet;                        //0x0
        ULONG AlphaControlSet;                                              //0x0
        NOK_IA64_DBGKD_CONTROL_SET IA64ControlSet;                      //0x0
        NOK_AMD64_DBGKD_CONTROL_SET Amd64ControlSet;                    //0x0
        NOK_ARM_DBGKD_CONTROL_SET ArmControlSet;                        //0x0
        NOK_ARM64_DBGKD_CONTROL_SET Arm64ControlSet;                    //0x0
        NOK_ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;                    //0x0
        NOK_PPC_DBGKD_CONTROL_SET PpcControlSet;                        //0x0
    };
}NOK_DBGKD_ANY_CONTROL_SET, * NOK_PDBGKD_ANY_CONTROL_SET;
//0x98 bytes (sizeof)
typedef struct _NOK_EXCEPTION_RECORD
{
    LONG ExceptionCode;                                                     //0x0
    ULONG ExceptionFlags;                                                   //0x4
    NOK_PEXCEPTION_RECORD ExceptionRecord;                              //0x8
    VOID* ExceptionAddress;                                                 //0x10
    ULONG NumberParameters;                                                 //0x18
    ULONGLONG ExceptionInformation[15];                                     //0x20
}NOK_EXCEPTION_RECORD, * NOK_PEXCEPTION_RECORD;
//0x50 bytes (sizeof)
typedef struct _NOK_EXCEPTION_RECORD32
{
    LONG ExceptionCode;                                                     //0x0
    ULONG ExceptionFlags;                                                   //0x4
    ULONG ExceptionRecord;                                                  //0x8
    ULONG ExceptionAddress;                                                 //0xc
    ULONG NumberParameters;                                                 //0x10
    ULONG ExceptionInformation[15];                                         //0x14
}NOK_EXCEPTION_RECORD32, * NOK_PEXCEPTION_RECORD32;
//0x8 bytes (sizeof)
typedef struct _NOK_EX_RUNDOWN_REF
{
    union
    {
        ULONGLONG Count;                                                    //0x0
        VOID* Ptr;                                                          //0x0
    };
}NOK_EX_RUNDOWN_REF, * NOK_PEX_RUNDOWN_REF;
//0x8 bytes (sizeof)
typedef struct _NOK_DEBUG_TRANSPORT_DATA
{
    ULONG HwContextSize;                                                    //0x0
    UCHAR UseSerialFraming;                                                 //0x4
    UCHAR ValidUSBCoreId;                                                   //0x5
    UCHAR USBCoreId;                                                        //0x6
}NOK_DEBUG_TRANSPORT_DATA, * NOK_PDEBUG_TRANSPORT_DATA;
//0x4 bytes (sizeof)
typedef enum _NOK_KD_NAMESPACE_ENUM
{
    NOK_KdNameSpacePCI = 0,
    NOK_KdNameSpaceACPI = 1,
    NOK_KdNameSpaceAny = 2,
    NOK_KdNameSpaceNone = 3,
    NOK_KdNameSpaceMax = 4
}NOK_KD_NAMESPACE_ENUM, * NOK_PKD_NAMESPACE_ENUM;
//0x4 bytes (sizeof)
typedef enum _NOK_INTERFACE_TYPE
{
    NOK_InterfaceTypeUndefined = -1,
    NOK_Internal = 0,
    NOK_Isa = 1,
    NOK_Eisa = 2,
    NOK_MicroChannel = 3,
    NOK_TurboChannel = 4,
    NOK_PCIBus = 5,
    NOK_VMEBus = 6,
    NOK_NuBus = 7,
    NOK_PCMCIABus = 8,
    NOK_CBus = 9,
    NOK_MPIBus = 10,
    NOK_MPSABus = 11,
    NOK_ProcessorInternal = 12,
    NOK_InternalPowerBus = 13,
    NOK_PNPISABus = 14,
    NOK_PNPBus = 15,
    NOK_Vmcs = 16,
    NOK_ACPIBus = 17,
    NOK_MaximumInterfaceType = 18
}NOK_INTERFACE_TYPE, * NOK_PINTERFACE_TYPE;
//0x18 bytes (sizeof)
typedef struct _NOK_DELAY_ACK_FO
{
    NOK_LIST_ENTRY Links;                                               //0x0
    NOK_PFILE_OBJECT OriginalFileObject;                                //0x10
}NOK_DELAY_ACK_FO, * NOK_PDELAY_ACK_FO;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVICE_POWER_STATE
{
    NOK_PowerDeviceUnspecified = 0,
    NOK_PowerDeviceD0 = 1,
    NOK_PowerDeviceD1 = 2,
    NOK_PowerDeviceD2 = 3,
    NOK_PowerDeviceD3 = 4,
    NOK_PowerDeviceMaximum = 5
}NOK_DEVICE_POWER_STATE, * NOK_PDEVICE_POWER_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_DEVICE_DATA_SET_RANGE
{
    LONGLONG StartingOffset;                                                //0x0
    ULONGLONG LengthInBytes;                                                //0x8
}NOK_DEVICE_DATA_SET_RANGE, * NOK_PDEVICE_DATA_SET_RANGE;
//0x24 bytes (sizeof)
typedef struct _NOK_CM_FULL_RESOURCE_DESCRIPTOR
{
    NOK_INTERFACE_TYPE InterfaceType;                                     //0x0
    ULONG BusNumber;                                                        //0x4
    NOK_CM_PARTIAL_RESOURCE_LIST PartialResourceList;                   //0x8
}NOK_CM_FULL_RESOURCE_DESCRIPTOR, * NOK_PCM_FULL_RESOURCE_DESCRIPTOR;
//0x1c bytes (sizeof)
typedef struct _NOK_DEVICE_DSM_DEFINITION
{
    ULONG Action;                                                           //0x0
    UCHAR SingleRange;                                                      //0x4
    ULONG ParameterBlockAlignment;                                          //0x8
    ULONG ParameterBlockLength;                                             //0xc
    UCHAR HasOutput;                                                        //0x10
    ULONG OutputBlockAlignment;                                             //0x14
    ULONG OutputBlockLength;                                                //0x18
}NOK_DEVICE_DSM_DEFINITION, * NOK_PDEVICE_DSM_DEFINITION;
//0x10 bytes (sizeof)
typedef struct _NOK_DEVICE_FAULT_CONFIGURATION
{
    VOID (*FaultHandler)(VOID* arg1, NOK_PFAULT_INFORMATION arg2);      //0x0
    VOID* FaultContext;                                                     //0x8
}NOK_DEVICE_FAULT_CONFIGURATION, * NOK_PDEVICE_FAULT_CONFIGURATION;
//0x4 bytes (sizeof)
typedef enum _NOK_CONFIGURATION_TYPE
{
    NOK_ArcSystem = 0,
    NOK_CentralProcessor = 1,
    NOK_FloatingPointProcessor = 2,
    NOK_PrimaryIcache = 3,
    NOK_PrimaryDcache = 4,
    NOK_SecondaryIcache = 5,
    NOK_SecondaryDcache = 6,
    NOK_SecondaryCache = 7,
    NOK_EisaAdapter = 8,
    NOK_TcAdapter = 9,
    NOK_ScsiAdapter = 10,
    NOK_DtiAdapter = 11,
    NOK_MultiFunctionAdapter = 12,
    NOK_DiskController = 13,
    NOK_TapeController = 14,
    NOK_CdromController = 15,
    NOK_WormController = 16,
    NOK_SerialController = 17,
    NOK_NetworkController = 18,
    NOK_DisplayController = 19,
    NOK_ParallelController = 20,
    NOK_PointerController = 21,
    NOK_KeyboardController = 22,
    NOK_AudioController = 23,
    NOK_OtherController = 24,
    NOK_DiskPeripheral = 25,
    NOK_FloppyDiskPeripheral = 26,
    NOK_TapePeripheral = 27,
    NOK_ModemPeripheral = 28,
    NOK_MonitorPeripheral = 29,
    NOK_PrinterPeripheral = 30,
    NOK_PointerPeripheral = 31,
    NOK_KeyboardPeripheral = 32,
    NOK_TerminalPeripheral = 33,
    NOK_OtherPeripheral = 34,
    NOK_LinePeripheral = 35,
    NOK_NetworkPeripheral = 36,
    NOK_SystemMemory = 37,
    NOK_DockingInformation = 38,
    NOK_RealModeIrqRoutingTable = 39,
    NOK_RealModePCIEnumeration = 40,
    NOK_MaximumType = 41
}NOK_CONFIGURATION_TYPE, * NOK_PCONFIGURATION_TYPE;
//0x1c bytes (sizeof)
typedef struct _NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
    ULONG Size;                                                             //0x0
    ULONG Action;                                                           //0x4
    ULONG Flags;                                                            //0x8
    ULONG ParameterBlockOffset;                                             //0xc
    ULONG ParameterBlockLength;                                             //0x10
    ULONG DataSetRangesOffset;                                              //0x14
    ULONG DataSetRangesLength;                                              //0x18
}NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES, * NOK_PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;
//0x24 bytes (sizeof)
typedef struct _NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
    ULONG Size;                                                             //0x0
    ULONG Action;                                                           //0x4
    ULONG Flags;                                                            //0x8
    ULONG OperationStatus;                                                  //0xc
    ULONG ExtendedError;                                                    //0x10
    ULONG TargetDetailedError;                                              //0x14
    ULONG ReservedStatus;                                                   //0x18
    ULONG OutputBlockOffset;                                                //0x1c
    ULONG OutputBlockLength;                                                //0x20
}NOK_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, * NOK_PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
//0x48 bytes (sizeof)
typedef struct _NOK_DEVICE_MAP
{
    NOK_POBJECT_DIRECTORY DosDevicesDirectory;                          //0x0
    NOK_POBJECT_DIRECTORY GlobalDosDevicesDirectory;                    //0x8
    VOID* DosDevicesDirectoryHandle;                                        //0x10
    volatile LONG ReferenceCount;                                           //0x18
    ULONG DriveMap;                                                         //0x1c
    UCHAR DriveType[32];                                                    //0x20
    NOK_PEJOB ServerSilo;                                               //0x40
}NOK_DEVICE_MAP, * NOK_PDEVICE_MAP;
//0x18 bytes (sizeof)
typedef struct _NOK_KEVENT
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
}NOK_KEVENT, * NOK_PKEVENT;
//0x18 bytes (sizeof)
typedef struct _NOK_CURDIR
{
    NOK_UNICODE_STRING DosPath;                                         //0x0
    VOID* Handle;                                                           //0x10
}NOK_CURDIR, * NOK_PCURDIR;
//0x50 bytes (sizeof)
typedef union _NOK_u
{
    NOK_CM_KEY_NODE KeyNode;                                            //0x0
    NOK_CM_KEY_VALUE KeyValue;                                          //0x0
    NOK_CM_KEY_SECURITY KeySecurity;                                    //0x0
    NOK_CM_KEY_INDEX KeyIndex;                                          //0x0
    NOK_CM_BIG_DATA ValueData;                                          //0x0
    ULONG KeyList[1];                                                       //0x0
    WCHAR KeyString[1];                                                     //0x0
}NOK_u, * NOK_Pu;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVICE_RELATION_LEVEL
{
    NOK_RELATION_LEVEL_REMOVE_EJECT = 0,
    NOK_RELATION_LEVEL_DEPENDENT = 1,
    NOK_RELATION_LEVEL_DIRECT_DESCENDANT = 2
}NOK_DEVICE_RELATION_LEVEL, * NOK_PDEVICE_RELATION_LEVEL;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_DEVICE_DELETE_TYPE
{
    NOK_QueryRemoveDevice = 0,
    NOK_CancelRemoveDevice = 1,
    NOK_RemoveDevice = 2,
    NOK_SurpriseRemoveDevice = 3,
    NOK_EjectDevice = 4,
    NOK_RemoveFailedDevice = 5,
    NOK_RemoveUnstartedFailedDevice = 6,
    NOK_MaxDeviceDeleteType = 7
}NOK_PNP_DEVICE_DELETE_TYPE, * NOK_PPNP_DEVICE_DELETE_TYPE;
//0x60 bytes (sizeof)
typedef struct _NOK_DEFERRED_WRITE
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    NOK_PFILE_OBJECT FileObject;                                        //0x8
    ULONG BytesToWrite;                                                     //0x10
    NOK_LIST_ENTRY DeferredWriteLinks;                                  //0x18
    NOK_PKEVENT Event;                                                  //0x28
    VOID (*PostRoutine)(VOID* arg1, VOID* arg2);                            //0x30
    VOID* Context1;                                                         //0x38
    VOID* Context2;                                                         //0x40
    NOK_PCC_PARTITION Partition;                                        //0x48
    UCHAR SoftThrottle;                                                     //0x50
    NOK_LARGE_INTEGER TimeAdded;                                         //0x58
}NOK_DEFERRED_WRITE, * NOK_PDEFERRED_WRITE;
//0x10 bytes (sizeof)
typedef struct _NOK_DEVICE_RELATIONS
{
    ULONG Count;                                                            //0x0
    NOK_PDEVICE_OBJECT Objects[1];                                      //0x8
}NOK_DEVICE_RELATIONS, * NOK_PDEVICE_RELATIONS;
//0x68 bytes (sizeof)
typedef struct _NOK_PO_DEVICE_NOTIFY
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_LIST_ENTRY PowerChildren;                                       //0x10
    NOK_LIST_ENTRY PowerParents;                                        //0x20
    NOK_PDEVICE_OBJECT TargetDevice;                                    //0x30
    UCHAR OrderLevel;                                                       //0x38
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x40
    WCHAR* DeviceName;                                                      //0x48
    WCHAR* DriverName;                                                      //0x50
    ULONG ChildCount;                                                       //0x58
    ULONG ActiveChild;                                                      //0x5c
    ULONG ParentCount;                                                      //0x60
    ULONG ActiveParent;                                                     //0x64
}NOK_PO_DEVICE_NOTIFY, * NOK_PPO_DEVICE_NOTIFY;
//0x4 bytes (sizeof)
typedef enum _NOK_DMA_SPEED
{
    NOK_Compatible = 0,
    NOK_TypeA = 1,
    NOK_TypeB = 2,
    NOK_TypeC = 3,
    NOK_TypeF = 4,
    NOK_MaximumDmaSpeed = 5
}NOK_DMA_SPEED, * NOK_PDMA_SPEED;
//0x4 bytes (sizeof)
typedef enum _NOK_REQUESTER_TYPE
{
    NOK_KernelRequester = 0,
    NOK_UserProcessRequester = 1,
    NOK_UserSharedServiceRequester = 2
}NOK_REQUESTER_TYPE, * NOK_PREQUESTER_TYPE;
//0x28 bytes (sizeof)
typedef struct _NOK_DIAGNOSTIC_BUFFER
{
    ULONGLONG Size;                                                         //0x0
    NOK_REQUESTER_TYPE CallerType;                                        //0x8
    union
    {
        struct
        {
            ULONGLONG ProcessImageNameOffset;                               //0x10
            ULONG ProcessId;                                                //0x18
            ULONG ServiceTag;                                               //0x1c
        };
        struct
        {
            ULONGLONG DeviceDescriptionOffset;                              //0x10
            ULONGLONG DevicePathOffset;                                     //0x18
        };
    };
    ULONGLONG ReasonOffset;                                                 //0x20
}NOK_DIAGNOSTIC_BUFFER, * NOK_PDIAGNOSTIC_BUFFER;
//0x38 bytes (sizeof)
typedef struct _NOK_DIRTY_PAGE_THRESHOLDS
{
    ULONGLONG DirtyPageThreshold;                                           //0x0
    ULONGLONG DirtyPageThresholdTop;                                        //0x8
    ULONGLONG DirtyPageThresholdBottom;                                     //0x10
    ULONG DirtyPageTarget;                                                  //0x18
    ULONGLONG AggregateAvailablePages;                                      //0x20
    ULONGLONG AggregateDirtyPages;                                          //0x28
    ULONG AvailableHistory;                                                 //0x30
}NOK_DIRTY_PAGE_THRESHOLDS, * NOK_PDIRTY_PAGE_THRESHOLDS;
//0x20 bytes (sizeof)
typedef struct _NOK_DBGK_SILOSTATE
{
    NOK_EX_PUSH_LOCK ErrorPortLock;                                     //0x0
    NOK_PDBGKP_ERROR_PORT ErrorPort;                                    //0x8
    NOK_PEPROCESS ErrorProcess;                                         //0x10
    NOK_PKEVENT ErrorPortRegisteredEvent;                               //0x18
}NOK_DBGK_SILOSTATE, * NOK_PDBGK_SILOSTATE;
//0x10 bytes (sizeof)
typedef struct _NOK_DISALLOWED_GUIDS
{
    USHORT Count;                                                           //0x0
    NOK_PGUID Guids;                                                    //0x8
}NOK_DISALLOWED_GUIDS, * NOK_PDISALLOWED_GUIDS;
//0x4c bytes (sizeof)
typedef struct _NOK_SYSTEM_POWER_CAPABILITIES
{
    UCHAR PowerButtonPresent;                                               //0x0
    UCHAR SleepButtonPresent;                                               //0x1
    UCHAR LidPresent;                                                       //0x2
    UCHAR SystemS1;                                                         //0x3
    UCHAR SystemS2;                                                         //0x4
    UCHAR SystemS3;                                                         //0x5
    UCHAR SystemS4;                                                         //0x6
    UCHAR SystemS5;                                                         //0x7
    UCHAR HiberFilePresent;                                                 //0x8
    UCHAR FullWake;                                                         //0x9
    UCHAR VideoDimPresent;                                                  //0xa
    UCHAR ApmPresent;                                                       //0xb
    UCHAR UpsPresent;                                                       //0xc
    UCHAR ThermalControl;                                                   //0xd
    UCHAR ProcessorThrottle;                                                //0xe
    UCHAR ProcessorMinThrottle;                                             //0xf
    UCHAR ProcessorMaxThrottle;                                             //0x10
    UCHAR FastSystemS4;                                                     //0x11
    UCHAR Hiberboot;                                                        //0x12
    UCHAR WakeAlarmPresent;                                                 //0x13
    UCHAR AoAc;                                                             //0x14
    UCHAR DiskSpinDown;                                                     //0x15
    UCHAR HiberFileType;                                                    //0x16
    UCHAR AoAcConnectivitySupported;                                        //0x17
    UCHAR spare3[6];                                                        //0x18
    UCHAR SystemBatteriesPresent;                                           //0x1e
    UCHAR BatteriesAreShortTerm;                                            //0x1f
    NOK_BATTERY_REPORTING_SCALE BatteryScale[3];                         //0x20
    NOK_SYSTEM_POWER_STATE AcOnLineWake;                                  //0x38
    NOK_SYSTEM_POWER_STATE SoftLidWake;                                   //0x3c
    NOK_SYSTEM_POWER_STATE RtcWake;                                       //0x40
    NOK_SYSTEM_POWER_STATE MinDeviceWakeState;                            //0x44
    NOK_SYSTEM_POWER_STATE DefaultLowLatencyWake;                         //0x48
}NOK_SYSTEM_POWER_CAPABILITIES, * NOK_PSYSTEM_POWER_CAPABILITIES;
//0x10 bytes (sizeof)
typedef struct _NOK_DMA_ADAPTER
{
    USHORT Version;                                                         //0x0
    USHORT Size;                                                            //0x2
    NOK_PDMA_OPERATIONS DmaOperations;                                  //0x8
}NOK_DMA_ADAPTER, * NOK_PDMA_ADAPTER;
//0x14 bytes (sizeof)
typedef struct _NOK_DMA_ADAPTER_INFO_V1
{
    ULONG ReadDmaCounterAvailable;                                          //0x0
    ULONG ScatterGatherLimit;                                               //0x4
    ULONG DmaAddressWidth;                                                  //0x8
    ULONG Flags;                                                            //0xc
    ULONG MinimumTransferUnit;                                              //0x10
}NOK_DMA_ADAPTER_INFO_V1, * NOK_PDMA_ADAPTER_INFO_V1;
//0x18 bytes (sizeof)
typedef struct _NOK_DMA_ADAPTER_INFO
{
    ULONG Version;                                                          //0x0
    NOK_DMA_ADAPTER_INFO_V1 V1;                                         //0x4
}NOK_DMA_ADAPTER_INFO, * NOK_PDMA_ADAPTER_INFO;
//0x48 bytes (sizeof)
typedef struct _NOK_CONTROLLER_OBJECT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    VOID* ControllerExtension;                                              //0x8
    NOK_KDEVICE_QUEUE DeviceWaitQueue;                                  //0x10
    ULONG Spare1;                                                           //0x38
    NOK_LARGE_INTEGER Spare2;                                            //0x40
}NOK_CONTROLLER_OBJECT, * NOK_PCONTROLLER_OBJECT;
//0x40 bytes (sizeof)
typedef struct _NOK_KDPC
{
    union
    {
        ULONG TargetInfoAsUlong;                                            //0x0
        struct
        {
            UCHAR Type;                                                     //0x0
            UCHAR Importance;                                               //0x1
            volatile USHORT Number;                                         //0x2
        };
    };
    NOK_SINGLE_LIST_ENTRY DpcListEntry;                                 //0x8
    ULONGLONG ProcessorHistory;                                             //0x10
    VOID (*DeferredRoutine)(NOK_PKDPC arg1, VOID* arg2, VOID* arg3, VOID* arg4); //0x18
    VOID* DeferredContext;                                                  //0x20
    VOID* SystemArgument1;                                                  //0x28
    VOID* SystemArgument2;                                                  //0x30
    VOID* DpcData;                                                          //0x38
}NOK_KDPC, * NOK_PKDPC;
//0x40 bytes (sizeof)
typedef struct _NOK_ACPI_CACHED_TABLE
{
    NOK_LIST_ENTRY Links;                                               //0x0
    NOK_LARGE_INTEGER PhysicalAddress;                                   //0x10
    NOK_DESCRIPTION_HEADER Header;                                      //0x18
}NOK_ACPI_CACHED_TABLE, * NOK_PACPI_CACHED_TABLE;
//0x70 bytes (sizeof)
typedef struct _NOK_DMA_IOMMU_INTERFACE
{
    ULONG Version;                                                          //0x0
    LONG (*CreateDomain)(UCHAR arg1, NOK_PIOMMU_DMA_DOMAIN* arg2);      //0x8
    LONG (*DeleteDomain)(NOK_PIOMMU_DMA_DOMAIN arg1);                   //0x10
    LONG (*AttachDevice)(NOK_PIOMMU_DMA_DOMAIN arg1, NOK_PDEVICE_OBJECT arg2, ULONG arg3, ULONG arg4); //0x18
    LONG (*DetachDevice)(NOK_PIOMMU_DMA_DOMAIN arg1, NOK_PDEVICE_OBJECT arg2, ULONG arg3); //0x20
    LONG (*FlushDomain)(NOK_PIOMMU_DMA_DOMAIN arg1);                    //0x28
    LONG (*FlushDomainByVaList)(NOK_PIOMMU_DMA_DOMAIN arg1, UCHAR arg2, ULONG arg3, VOID* arg4); //0x30
    LONG (*QueryInputMappings)(NOK_PDEVICE_OBJECT arg1, NOK_PINPUT_MAPPING_ELEMENT arg2, ULONG arg3, ULONG* arg4); //0x38
    LONG (*MapLogicalRange)(NOK_PIOMMU_DMA_DOMAIN arg1, ULONG arg2, NOK_PMDL arg3, ULONGLONG arg4); //0x40
    LONG (*UnmapLogicalRange)(NOK_PIOMMU_DMA_DOMAIN arg1, ULONGLONG arg2, ULONGLONG arg3); //0x48
    LONG (*MapIdentityRange)(NOK_PIOMMU_DMA_DOMAIN arg1, ULONG arg2, NOK_PMDL arg3); //0x50
    LONG (*UnmapIdentityRange)(NOK_PIOMMU_DMA_DOMAIN arg1, NOK_PMDL arg2); //0x58
    LONG (*SetDeviceFaultReporting)(NOK_PDEVICE_OBJECT arg1, ULONG arg2, UCHAR arg3, NOK_PDEVICE_FAULT_CONFIGURATION arg4); //0x60
    LONG (*ConfigureDomain)(NOK_PIOMMU_DMA_DOMAIN arg1, NOK_PDOMAIN_CONFIGURATION arg2); //0x68
}NOK_DMA_IOMMU_INTERFACE, * NOK_PDMA_IOMMU_INTERFACE;
//0x4 bytes (sizeof)
typedef enum _NOK_DMA_COMPLETION_STATUS
{
    NOK_DmaComplete = 0,
    NOK_DmaAborted = 1,
    NOK_DmaError = 2,
    NOK_DmaCancelled = 3
}NOK_DMA_COMPLETION_STATUS, * NOK_PDMA_COMPLETION_STATUS;
//0x8 bytes (sizeof)
typedef struct _NOK_DMA_REQUEST_LINE_BINDING_DESCRIPTION
{
    ULONG RequestLine;                                                      //0x0
    ULONG ChannelNumber;                                                    //0x4
}NOK_DMA_REQUEST_LINE_BINDING_DESCRIPTION, * NOK_PDMA_REQUEST_LINE_BINDING_DESCRIPTION;
//0x10 bytes (sizeof)
typedef struct _NOK_DMA_COMMON_BUFFER_ENTRY
{
    VOID* VirtualAddress;                                                   //0x0
    NOK_LARGE_INTEGER LogicalAddress;                                    //0x8
}NOK_DMA_COMMON_BUFFER_ENTRY, * NOK_PDMA_COMMON_BUFFER_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_IO_ALLOCATION_ACTION
{
    NOK_KeepObject = 1,
    NOK_DeallocateObject = 2,
    NOK_DeallocateObjectKeepRegisters = 3
}NOK_IO_ALLOCATION_ACTION, * NOK_PIO_ALLOCATION_ACTION;
//0x18 bytes (sizeof)
typedef struct _NOK_KDEVICE_QUEUE_ENTRY
{
    NOK_LIST_ENTRY DeviceListEntry;                                     //0x0
    ULONG SortKey;                                                          //0x10
    UCHAR Inserted;                                                         //0x14
}NOK_KDEVICE_QUEUE_ENTRY, * NOK_PKDEVICE_QUEUE_ENTRY;
//0xc bytes (sizeof)
typedef struct _NOK_DMA_TRANSFER_INFO_V1
{
    ULONG MapRegisterCount;                                                 //0x0
    ULONG ScatterGatherElementCount;                                        //0x4
    ULONG ScatterGatherListSize;                                            //0x8
}NOK_DMA_TRANSFER_INFO_V1, * NOK_PDMA_TRANSFER_INFO_V1;
//0x10 bytes (sizeof)
typedef struct _NOK_DMA_TRANSFER_INFO_V2
{
    ULONG MapRegisterCount;                                                 //0x0
    ULONG ScatterGatherElementCount;                                        //0x4
    ULONG ScatterGatherListSize;                                            //0x8
    ULONG LogicalPageCount;                                                 //0xc
}NOK_DMA_TRANSFER_INFO_V2, * NOK_PDMA_TRANSFER_INFO_V2;
//0x14 bytes (sizeof)
typedef struct _NOK_DMA_TRANSFER_INFO
{
    ULONG Version;                                                          //0x0
    union
    {
        NOK_DMA_TRANSFER_INFO_V1 V1;                                    //0x4
        NOK_DMA_TRANSFER_INFO_V2 V2;                                    //0x4
    };
}NOK_DMA_TRANSFER_INFO, * NOK_PDMA_TRANSFER_INFO;
//0x50 bytes (sizeof)
typedef struct _NOK_DMA_FUNCTION_TABLE
{
    VOID (*InitializeController)(VOID* arg1);                               //0x0
    UCHAR (*ValidateRequestLineBinding)(VOID* arg1, NOK_PDMA_REQUEST_LINE_BINDING_DESCRIPTION arg2); //0x8
    ULONG (*QueryMaxFragments)(VOID* arg1, ULONG arg2, ULONG arg3);         //0x10
    VOID (*ProgramChannel)(VOID* arg1, ULONG arg2, ULONG arg3, NOK_PDMA_SCATTER_GATHER_LIST arg4, NOK_LARGE_INTEGER arg5, UCHAR arg6, UCHAR arg7); //0x18
    LONG (*ConfigureChannel)(VOID* arg1, ULONG arg2, ULONG arg3, VOID* arg4); //0x20
    VOID (*FlushChannel)(VOID* arg1, ULONG arg2);                           //0x28
    UCHAR (*HandleInterrupt)(VOID* arg1, ULONG* arg2, NOK_PDMA_INTERRUPT_TYPE arg3); //0x30
    ULONG (*ReadDmaCounter)(VOID* arg1, ULONG arg2);                        //0x38
    VOID (*ReportCommonBuffer)(VOID* arg1, ULONG arg2, VOID* arg3, NOK_LARGE_INTEGER arg4); //0x40
    UCHAR (*CancelTransfer)(VOID* arg1, ULONG arg2);                        //0x48
}NOK_DMA_FUNCTION_TABLE, * NOK_PDMA_FUNCTION_TABLE;
//0x20 bytes (sizeof)
typedef struct _NOK_DOMAIN_CONFIGURATION_ARM64
{
    NOK_LARGE_INTEGER Ttbr0;                                             //0x0
    NOK_LARGE_INTEGER Ttbr1;                                             //0x8
    ULONG Mair0;                                                            //0x10
    ULONG Mair1;                                                            //0x14
    UCHAR InputSize0;                                                       //0x18
    UCHAR InputSize1;                                                       //0x19
    UCHAR CoherentTableWalks;                                               //0x1a
    UCHAR TranslationEnabled;                                               //0x1b
}NOK_DOMAIN_CONFIGURATION_ARM64, * NOK_PDOMAIN_CONFIGURATION_ARM64;
//0x28 bytes (sizeof)
typedef struct _NOK_DOMAIN_CONFIGURATION
{
    NOK_DOMAIN_CONFIGURATION_ARCH Type;                                   //0x0
    NOK_DOMAIN_CONFIGURATION_ARM64 Arm64;                               //0x8
}NOK_DOMAIN_CONFIGURATION, * NOK_PDOMAIN_CONFIGURATION;
//0x30 bytes (sizeof)
typedef struct _NOK_CRITICAL_PROCESS_EXCEPTION_DATA
{
    NOK_GUID ReportId;                                                  //0x0
    NOK_UNICODE_STRING ModuleName;                                      //0x10
    ULONG ModuleTimestamp;                                                  //0x20
    ULONG ModuleSize;                                                       //0x24
    ULONGLONG Offset;                                                       //0x28
}NOK_CRITICAL_PROCESS_EXCEPTION_DATA, * NOK_PCRITICAL_PROCESS_EXCEPTION_DATA;
//0x28 bytes (sizeof)
typedef struct _NOK_DRIVER_EXTENSION
{
    NOK_PDRIVER_OBJECT DriverObject;                                    //0x0
    LONG (*AddDevice)(NOK_PDRIVER_OBJECT arg1, NOK_PDEVICE_OBJECT arg2); //0x8
    ULONG Count;                                                            //0x10
    NOK_UNICODE_STRING ServiceKeyName;                                  //0x18
}NOK_DRIVER_EXTENSION, * NOK_PDRIVER_EXTENSION;
//0x10 bytes (sizeof)
typedef struct _NOK_RTL_BITMAP
{
    ULONG SizeOfBitMap;                                                     //0x0
    ULONG* Buffer;                                                          //0x8
}NOK_RTL_BITMAP, * NOK_PRTL_BITMAP;
//0x8 bytes (sizeof)
typedef struct _NOK_QUAD
{
    union
    {
        LONGLONG UseThisFieldToCopy;                                        //0x0
        double DoNotUseThisField;                                           //0x0
    };
}NOK_QUAD, * NOK_PQUAD;
//0x14 bytes (sizeof)
typedef struct _NOK_DEVPROPKEY
{
    NOK_GUID fmtid;                                                     //0x0
    ULONG pid;                                                              //0x10
}NOK_DEVPROPKEY, * NOK_PDEVPROPKEY;
//0x48 bytes (sizeof)
typedef struct _NOK_DMA_COMMON_BUFFER_VECTOR
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONGLONG SizeOfEntries;                                                //0x10
    ULONG NumberOfEntries;                                                  //0x18
    NOK_PHALP_DMA_DOMAIN_OBJECT Domain;                                 //0x20
    NOK_PMDL Mdl;                                                       //0x28
    VOID* BaseAddress;                                                      //0x30
    ULONGLONG BaseLogicalAddress;                                           //0x38
    NOK_PDMA_COMMON_BUFFER_ENTRY Entries;                               //0x40
}NOK_DMA_COMMON_BUFFER_VECTOR, * NOK_PDMA_COMMON_BUFFER_VECTOR;
//0x10 bytes (sizeof)
typedef struct _NOK_STRING
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    CHAR* Buffer;                                                           //0x8
}NOK_STRING, * NOK_PSTRING;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_BALANCED_NODE
{
    union
    {
        NOK_PRTL_BALANCED_NODE Children[2];                             //0x0
        struct
        {
            NOK_PRTL_BALANCED_NODE Left;                                //0x0
            NOK_PRTL_BALANCED_NODE Right;                               //0x8
        };
    };
    union
    {
        struct
        {
            UCHAR Red:1;                                                    //0x10
            UCHAR Balance:2;                                                //0x10
        };
        ULONGLONG ParentValue;                                              //0x10
    };
}NOK_RTL_BALANCED_NODE, * NOK_PRTL_BALANCED_NODE;
//0x18 bytes (sizeof)
typedef struct _NOK_ECP_LIST
{
    ULONG Signature;                                                        //0x0
    ULONG Flags;                                                            //0x4
    NOK_LIST_ENTRY EcpList;                                             //0x8
}NOK_ECP_LIST, * NOK_PECP_LIST;
//0x1 bytes (sizeof)
typedef union _NOK_KEXECUTE_OPTIONS
{
    UCHAR ExecuteDisable:1;                                                 //0x0
    UCHAR ExecuteEnable:1;                                                  //0x0
    UCHAR DisableThunkEmulation:1;                                          //0x0
    UCHAR Permanent:1;                                                      //0x0
    UCHAR ExecuteDispatchEnable:1;                                          //0x0
    UCHAR ImageDispatchEnable:1;                                            //0x0
    UCHAR DisableExceptionChainValidation:1;                                //0x0
    UCHAR Spare:1;                                                          //0x0
    volatile UCHAR ExecuteOptions;                                          //0x0
    UCHAR ExecuteOptionsNV;                                                 //0x0
}NOK_KEXECUTE_OPTIONS, * NOK_PKEXECUTE_OPTIONS;
//0x1 bytes (sizeof)
typedef struct _NOK_flags
{
    UCHAR Removable:1;                                                      //0x0
    UCHAR GroupAssigned:1;                                                  //0x0
    UCHAR GroupCommitted:1;                                                 //0x0
    UCHAR GroupAssignmentFixed:1;                                           //0x0
    UCHAR ProcessorOnly:1;                                                  //0x0
    UCHAR SmtSetsPresent:1;                                                 //0x0
    UCHAR Fill:2;                                                           //0x0
}NOK_flags, * NOK_Pflags;
//0x20 bytes (sizeof)
typedef struct _NOK_CACHE_UNINITIALIZE_EVENT
{
    NOK_PCACHE_UNINITIALIZE_EVENT Next;                                 //0x0
    NOK_KEVENT Event;                                                   //0x8
}NOK_CACHE_UNINITIALIZE_EVENT, * NOK_PCACHE_UNINITIALIZE_EVENT;
//0xa8 bytes (sizeof)
typedef struct _NOK_KAFFINITY_EX
{
    USHORT Count;                                                           //0x0
    USHORT Size;                                                            //0x2
    ULONG Reserved;                                                         //0x4
    ULONGLONG Bitmap[20];                                                   //0x8
}NOK_KAFFINITY_EX, * NOK_PKAFFINITY_EX;
//0x38 bytes (sizeof)
typedef struct _NOK_EFI_FIRMWARE_INFORMATION
{
    ULONG FirmwareVersion;                                                  //0x0
    NOK_PVIRTUAL_EFI_RUNTIME_SERVICES VirtualEfiRuntimeServices;        //0x8
    LONG SetVirtualAddressMapStatus;                                        //0x10
    ULONG MissedMappingsCount;                                              //0x14
    NOK_LIST_ENTRY FirmwareResourceList;                                //0x18
    VOID* EfiMemoryMap;                                                     //0x28
    ULONG EfiMemoryMapSize;                                                 //0x30
    ULONG EfiMemoryMapDescriptorSize;                                       //0x34
}NOK_EFI_FIRMWARE_INFORMATION, * NOK_PEFI_FIRMWARE_INFORMATION;
//0x20 bytes (sizeof)
typedef struct _NOK_WORK_QUEUE_ITEM
{
    NOK_LIST_ENTRY List;                                                //0x0
    VOID (*WorkerRoutine)(VOID* arg1);                                      //0x10
    VOID* Parameter;                                                        //0x18
}NOK_WORK_QUEUE_ITEM, * NOK_PWORK_QUEUE_ITEM;
//0x10 bytes (sizeof)
typedef struct _NOK_OWNER_ENTRY
{
    ULONGLONG OwnerThread;                                                  //0x0
    union
    {
        struct
        {
            ULONG IoPriorityBoosted:1;                                      //0x8
            ULONG OwnerReferenced:1;                                        //0x8
            ULONG IoQoSPriorityBoosted:1;                                   //0x8
            ULONG OwnerCount:29;                                            //0x8
        };
        ULONG TableSize;                                                    //0x8
    };
}NOK_OWNER_ENTRY, * NOK_POWNER_ENTRY;
//0x6c bytes (sizeof)
typedef struct _NOK_OBP_SYSTEM_DOS_DEVICE_STATE
{
    ULONG GlobalDeviceMap;                                                  //0x0
    ULONG LocalDeviceCount[26];                                             //0x4
}NOK_OBP_SYSTEM_DOS_DEVICE_STATE, * NOK_POBP_SYSTEM_DOS_DEVICE_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_DUMP_EVENTS
{
    NOK_DUMP_EVENT_NONE = 0,
    NOK_DUMP_EVENT_HIBER_RESUME = 1,
    NOK_DUMP_EVENT_HIBER_RESUME_END = 2
}NOK_DUMP_EVENTS, * NOK_PDUMP_EVENTS;
//0x4 bytes (sizeof)
typedef struct _NOK_MMSECTION_FLAGS
{
    ULONG BeingDeleted:1;                                                   //0x0
    ULONG BeingCreated:1;                                                   //0x0
    ULONG BeingPurged:1;                                                    //0x0
    ULONG NoModifiedWriting:1;                                              //0x0
    ULONG FailAllIo:1;                                                      //0x0
    ULONG Image:1;                                                          //0x0
    ULONG Based:1;                                                          //0x0
    ULONG File:1;                                                           //0x0
    ULONG AttemptingDelete:1;                                               //0x0
    ULONG PrefetchCreated:1;                                                //0x0
    ULONG PhysicalMemory:1;                                                 //0x0
    ULONG ImageControlAreaOnRemovableMedia:1;                               //0x0
    ULONG Reserve:1;                                                        //0x0
    ULONG Commit:1;                                                         //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG WasPurged:1;                                                      //0x0
    ULONG UserReference:1;                                                  //0x0
    ULONG GlobalMemory:1;                                                   //0x0
    ULONG DeleteOnClose:1;                                                  //0x0
    ULONG FilePointerNull:1;                                                //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG GlobalOnlyPerSession:1;                                           //0x0
    ULONG UserWritable:1;                                                   //0x0
    ULONG SystemVaAllocated:1;                                              //0x0
    ULONG PreferredFsCompressionBoundary:1;                                 //0x0
    ULONG UsingFileExtents:1;                                               //0x0
    ULONG PageSize64K:1;                                                    //0x0
}NOK_MMSECTION_FLAGS, * NOK_PMMSECTION_FLAGS;
//0x8 bytes (sizeof)
typedef struct _NOK_JOBOBJECT_WAKE_FILTER
{
    ULONG HighEdgeFilter;                                                   //0x0
    ULONG LowEdgeFilter;                                                    //0x4
}NOK_JOBOBJECT_WAKE_FILTER, * NOK_PJOBOBJECT_WAKE_FILTER;
//0x58 bytes (sizeof)
typedef struct _NOK_KAPC
{
    UCHAR Type;                                                             //0x0
    UCHAR SpareByte0;                                                       //0x1
    UCHAR Size;                                                             //0x2
    UCHAR SpareByte1;                                                       //0x3
    ULONG SpareLong0;                                                       //0x4
    NOK_PKTHREAD Thread;                                                //0x8
    NOK_LIST_ENTRY ApcListEntry;                                        //0x10
    VOID* Reserved[3];                                                      //0x20
    VOID* NormalContext;                                                    //0x38
    VOID* SystemArgument1;                                                  //0x40
    VOID* SystemArgument2;                                                  //0x48
    CHAR ApcStateIndex;                                                     //0x50
    CHAR ApcMode;                                                           //0x51
    UCHAR Inserted;                                                         //0x52
}NOK_KAPC, * NOK_PKAPC;
//0x4 bytes (sizeof)
typedef struct _NOK_ETW_BUFFER_CONTEXT
{
    union
    {
        struct
        {
            UCHAR ProcessorNumber;                                          //0x0
            UCHAR Alignment;                                                //0x1
        };
        USHORT ProcessorIndex;                                              //0x0
    };
    USHORT LoggerId;                                                        //0x2
}NOK_ETW_BUFFER_CONTEXT, * NOK_PETW_BUFFER_CONTEXT;
//0x10 bytes (sizeof)
typedef struct _NOK_ETW_COUNTERS
{
    LONG GuidCount;                                                         //0x0
    LONG PoolUsage[2];                                                      //0x4
    LONG SessionCount;                                                      //0xc
}NOK_ETW_COUNTERS, * NOK_PETW_COUNTERS;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_NOTIFICATION_TYPE
{
    NOK_EtwNotificationTypeNoReply = 1,
    NOK_EtwNotificationTypeLegacyEnable = 2,
    NOK_EtwNotificationTypeEnable = 3,
    NOK_EtwNotificationTypePrivateLogger = 4,
    NOK_EtwNotificationTypePerflib = 5,
    NOK_EtwNotificationTypeAudio = 6,
    NOK_EtwNotificationTypeSession = 7,
    NOK_EtwNotificationTypeReserved = 8,
    NOK_EtwNotificationTypeCredentialUI = 9,
    NOK_EtwNotificationTypeInProcSession = 10,
    NOK_EtwNotificationTypeFilteredPrivateLogger = 11,
    NOK_EtwNotificationTypeMax = 12
}NOK_ETW_NOTIFICATION_TYPE, * NOK_PETW_NOTIFICATION_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_RTL_HASH_TABLE
{
    ULONG EntryCount;                                                       //0x0
    ULONG MaskBitCount:5;                                                   //0x4
    ULONG BucketCount:27;                                                   //0x4
    NOK_PSINGLE_LIST_ENTRY Buckets;                                     //0x8
}NOK_RTL_HASH_TABLE, * NOK_PRTL_HASH_TABLE;
//0x68 bytes (sizeof)
typedef struct _NOK_ETW_FILTER_HEADER
{
    LONG FilterFlags;                                                       //0x0
    NOK_PETW_FILTER_PID PidFilter;                                      //0x8
    NOK_PETW_FILTER_STRING_TOKEN ExeFilter;                             //0x10
    NOK_PETW_FILTER_STRING_TOKEN PkgIdFilter;                           //0x18
    NOK_PETW_FILTER_STRING_TOKEN PkgAppIdFilter;                        //0x20
    NOK_PETW_FILTER_STRING_TOKEN ContainerFilter;                       //0x28
    NOK_PETW_PERFECT_HASH_FUNCTION StackWalkIdFilter;                   //0x30
    NOK_PETW_FILTER_EVENT_NAME_DATA StackWalkNameFilter;                //0x38
    NOK_PEVENT_FILTER_LEVEL_KW StackWalkLevelKwFilter;                  //0x40
    NOK_PETW_PERFECT_HASH_FUNCTION EventIdFilter;                       //0x48
    NOK_PETW_PAYLOAD_FILTER PayloadFilter;                              //0x50
    NOK_PEVENT_FILTER_HEADER ProviderSideFilter;                        //0x58
    NOK_PETW_FILTER_EVENT_NAME_DATA EventNameFilter;                    //0x60
}NOK_ETW_FILTER_HEADER, * NOK_PETW_FILTER_HEADER;
//0x24 bytes (sizeof)
typedef struct _NOK_ETW_FILTER_PID
{
    ULONG Count;                                                            //0x0
    ULONG Pids[8];                                                          //0x4
}NOK_ETW_FILTER_PID, * NOK_PETW_FILTER_PID;
//0x10 bytes (sizeof)
typedef struct _NOK_ETW_FILTER_STRING_TOKEN_ELEMENT
{
    USHORT Length;                                                          //0x0
    WCHAR* String;                                                          //0x8
}NOK_ETW_FILTER_STRING_TOKEN_ELEMENT, * NOK_PETW_FILTER_STRING_TOKEN_ELEMENT;
//0x18 bytes (sizeof)
typedef struct _NOK_ETW_FILTER_STRING_TOKEN
{
    USHORT Count;                                                           //0x0
    NOK_ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];                      //0x8
}NOK_ETW_FILTER_STRING_TOKEN, * NOK_PETW_FILTER_STRING_TOKEN;
//0x18 bytes (sizeof)
typedef struct _NOK_SCATTER_GATHER_ELEMENT
{
    NOK_LARGE_INTEGER Address;                                           //0x0
    ULONG Length;                                                           //0x8
    ULONGLONG Reserved;                                                     //0x10
}NOK_SCATTER_GATHER_ELEMENT, * NOK_PSCATTER_GATHER_ELEMENT;
//0x10 bytes (sizeof)
typedef struct _NOK_RTL_RB_TREE
{
    NOK_PRTL_BALANCED_NODE Root;                                        //0x0
    union
    {
        UCHAR Encoded:1;                                                    //0x8
        NOK_PRTL_BALANCED_NODE Min;                                     //0x8
    };
}NOK_RTL_RB_TREE, * NOK_PRTL_RB_TREE;
//0x18 bytes (sizeof)
typedef struct _NOK_ETW_HW_TRACE_EXT_INTERFACE
{
    LONG (*StartProcessorTraceOnEachCore)(ULONGLONG arg1, VOID** arg2);     //0x0
    LONG (*StopProcessorTraceOnEachCore)(VOID* arg1);                       //0x8
    LONG (*LogProcessorTraceOnCurrentCore)(VOID* arg1, VOID* arg2);         //0x10
}NOK_ETW_HW_TRACE_EXT_INTERFACE, * NOK_PETW_HW_TRACE_EXT_INTERFACE;
//0x28 bytes (sizeof)
typedef struct _NOK_ETW_IPT_SUPPORT
{
    VOID* IptHandle;                                                        //0x0
    ULONGLONG IptOption;                                                    //0x8
    NOK_PETW_HW_TRACE_EXT_INTERFACE EtwHwTraceExtInterface;             //0x10
    volatile ULONG HookIdCount;                                             //0x18
    USHORT HookId[4];                                                       //0x1c
}NOK_ETW_IPT_SUPPORT, * NOK_PETW_IPT_SUPPORT;
//0x14 bytes (sizeof)
typedef struct _NOK_NB10
{
    ULONG Signature;                                                        //0x0
    ULONG Offset;                                                           //0x4
    ULONG TimeStamp;                                                        //0x8
    ULONG Age;                                                              //0xc
    CHAR PdbName[1];                                                        //0x10
}NOK_NB10, * NOK_PNB10;
//0x14 bytes (sizeof)
typedef struct _NOK_ETW_LBR_SUPPORT
{
    ULONG LbrHandle;                                                        //0x0
    ULONG LbrOptions;                                                       //0x4
    volatile ULONG HookIdCount;                                             //0x8
    USHORT HookId[4];                                                       //0xc
}NOK_ETW_LBR_SUPPORT, * NOK_PETW_LBR_SUPPORT;
//0x1 bytes (sizeof)
typedef struct _NOK_ETW_LOGGER_HANDLE
{
    UCHAR DereferenceAndLeave;                                              //0x0
}NOK_ETW_LOGGER_HANDLE, * NOK_PETW_LOGGER_HANDLE;
//0x8 bytes (sizeof)
typedef struct _NOK_ETW_PARTITION_CONTEXT
{
    NOK_PEPARTITION Partition;                                          //0x0
}NOK_ETW_PARTITION_CONTEXT, * NOK_PETW_PARTITION_CONTEXT;
//0x50 bytes (sizeof)
typedef struct _NOK_AGGREGATED_PAYLOAD_FILTER
{
    USHORT MagicValue:12;                                                   //0x0
    USHORT DescriptorVersion:4;                                             //0x0
    USHORT Size;                                                            //0x2
    USHORT PredicateCount;                                                  //0x4
    USHORT Reserved;                                                        //0x6
    ULONGLONG HashedEventIdBitmap;                                          //0x8
    NOK_GUID ProviderGuid;                                              //0x10
    USHORT EachEventTableOffset;                                            //0x20
    USHORT EachEventTableLength;                                            //0x22
    USHORT PayloadDecoderTableOffset;                                       //0x24
    USHORT PayloadDecoderTableLength;                                       //0x26
    USHORT EventFilterTableOffset;                                          //0x28
    USHORT EventFilterTableLength;                                          //0x2a
    USHORT UNICODEStringTableOffset;                                        //0x2c
    USHORT UNICODEStringTableLength;                                        //0x2e
    USHORT ANSIStringTableOffset;                                           //0x30
    USHORT ANSIStringTableLength;                                           //0x32
    NOK_EVENT_PAYLOAD_PREDICATE PredicateTable[1];                      //0x38
}NOK_AGGREGATED_PAYLOAD_FILTER, * NOK_PAGGREGATED_PAYLOAD_FILTER;
//0x18 bytes (sizeof)
typedef struct _NOK_ETW_PERF_COUNTERS
{
    LONG TotalActiveSessions;                                               //0x0
    LONG TotalBufferMemoryNonPagedPool;                                     //0x4
    LONG TotalBufferMemoryPagedPool;                                        //0x8
    LONG TotalGuidsEnabled;                                                 //0xc
    LONG TotalGuidsNotEnabled;                                              //0x10
    LONG TotalGuidsPreEnabled;                                              //0x14
}NOK_ETW_PERF_COUNTERS, * NOK_PETW_PERF_COUNTERS;
//0x20 bytes (sizeof)
typedef struct _NOK_ETW_PMC_SUPPORT
{
    NOK_PKPROFILE_SOURCE Source;                                          //0x0
    volatile ULONG HookIdCount;                                             //0x8
    USHORT HookId[4];                                                       //0xc
    volatile ULONG CountersCount;                                           //0x14
    NOK_PHAL_PMC_COUNTERS ProcessorCtrs[1];                             //0x18
}NOK_ETW_PMC_SUPPORT, * NOK_PETW_PMC_SUPPORT;
//0x30 bytes (sizeof)
typedef struct _NOK_ETW_DECODE_CONTROL_ENTRY
{
    NOK_PETW_DECODE_CONTROL_ENTRY Next;                                 //0x0
    NOK_GUID Decode;                                                    //0x8
    NOK_GUID Control;                                                   //0x18
    UCHAR ConsumersNotified;                                                //0x28
}NOK_ETW_DECODE_CONTROL_ENTRY, * NOK_PETW_DECODE_CONTROL_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_FUNCTION_TABLE_TYPE
{
    NOK_RF_SORTED = 0,
    NOK_RF_UNSORTED = 1,
    NOK_RF_CALLBACK = 2,
    NOK_RF_KERNEL_DYNAMIC = 3
}NOK_FUNCTION_TABLE_TYPE, * NOK_PFUNCTION_TABLE_TYPE;
//0x38 bytes (sizeof)
typedef struct _NOK_ETW_HASH_BUCKET
{
    NOK_LIST_ENTRY ListHead[3];                                         //0x0
    NOK_EX_PUSH_LOCK BucketLock;                                        //0x30
}NOK_ETW_HASH_BUCKET, * NOK_PETW_HASH_BUCKET;
//0x38 bytes (sizeof)
typedef struct _NOK_ETW_QUEUE_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PETWP_NOTIFICATION_HEADER DataBlock;                            //0x10
    NOK_PETW_REG_ENTRY RegEntry;                                        //0x18
    NOK_PETW_REG_ENTRY ReplyObject;                                     //0x20
    VOID* WakeReference;                                                    //0x28
    USHORT RegIndex;                                                        //0x30
    USHORT ReplyIndex;                                                      //0x32
    ULONG Flags;                                                            //0x34
}NOK_ETW_QUEUE_ENTRY, * NOK_PETW_QUEUE_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_DOMAIN_CONFIGURATION_ARCH
{
    NOK_DomainConfigurationArm64 = 0,
    NOK_DomainConfigurationInvalid = 1
}NOK_DOMAIN_CONFIGURATION_ARCH, * NOK_PDOMAIN_CONFIGURATION_ARCH;
//0x18 bytes (sizeof)
typedef struct _NOK_FREE_DISPLAY
{
    ULONG RealVectorSize;                                                   //0x0
    ULONG Hint;                                                             //0x4
    NOK_RTL_BITMAP Display;                                             //0x8
}NOK_FREE_DISPLAY, * NOK_PFREE_DISPLAY;
//0x70 bytes (sizeof)
typedef struct _NOK_ETW_REG_ENTRY
{
    NOK_LIST_ENTRY RegList;                                             //0x0
    NOK_LIST_ENTRY GroupRegList;                                        //0x10
    NOK_PETW_GUID_ENTRY GuidEntry;                                      //0x20
    NOK_PETW_GUID_ENTRY GroupEntry;                                     //0x28
    union
    {
        NOK_PETW_REPLY_QUEUE ReplyQueue;                                //0x30
        NOK_PETW_QUEUE_ENTRY ReplySlot[4];                              //0x30
        struct
        {
            VOID* Caller;                                                   //0x30
            ULONG SessionId;                                                //0x38
        };
    };
    union
    {
        NOK_PEPROCESS Process;                                          //0x50
        VOID* CallbackContext;                                              //0x50
    };
    VOID* Callback;                                                         //0x58
    USHORT Index;                                                           //0x60
    union
    {
        USHORT Flags;                                                       //0x62
        struct
        {
            USHORT DbgKernelRegistration:1;                                 //0x62
            USHORT DbgUserRegistration:1;                                   //0x62
            USHORT DbgReplyRegistration:1;                                  //0x62
            USHORT DbgClassicRegistration:1;                                //0x62
            USHORT DbgSessionSpaceRegistration:1;                           //0x62
            USHORT DbgModernRegistration:1;                                 //0x62
            USHORT DbgClosed:1;                                             //0x62
            USHORT DbgInserted:1;                                           //0x62
            USHORT DbgWow64:1;                                              //0x62
            USHORT DbgUseDescriptorType:1;                                  //0x62
            USHORT DbgDropProviderTraits:1;                                 //0x62
        };
    };
    UCHAR EnableMask;                                                       //0x64
    UCHAR GroupEnableMask;                                                  //0x65
    UCHAR HostEnableMask;                                                   //0x66
    UCHAR HostGroupEnableMask;                                              //0x67
    NOK_PETW_PROVIDER_TRAITS Traits;                                    //0x68
}NOK_ETW_REG_ENTRY, * NOK_PETW_REG_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_ETW_SESSION_PERF_COUNTERS
{
    LONG BufferMemoryPagedPool;                                             //0x0
    LONG BufferMemoryNonPagedPool;                                          //0x4
    ULONGLONG EventsLoggedCount;                                            //0x8
    LONG EventsLost;                                                        //0x10
    LONG NumConsumers;                                                      //0x14
}NOK_ETW_SESSION_PERF_COUNTERS, * NOK_PETW_SESSION_PERF_COUNTERS;
//0x2 bytes (sizeof)
typedef struct _NOK_ETW_SYSTEM_LOGGER
{
    UCHAR LoggerId;                                                         //0x0
    UCHAR ClockType;                                                        //0x1
}NOK_ETW_SYSTEM_LOGGER, * NOK_PETW_SYSTEM_LOGGER;
//0x40 bytes (sizeof)
typedef struct _NOK_ETW_SILO_TRACING_BLOCK
{
    NOK_PEX_FAST_REF ProcessorBuffers;                                  //0x0
    ULONGLONG* EventsLoggedCount;                                           //0x8
    LONGLONG* QpcDelta;                                                     //0x10
}NOK_ETW_SILO_TRACING_BLOCK, * NOK_PETW_SILO_TRACING_BLOCK;
//0x10 bytes (sizeof)
typedef struct _NOK_ETW_BUFFER_QUEUE
{
    NOK_PSINGLE_LIST_ENTRY QueueTail;                                   //0x0
    NOK_SINGLE_LIST_ENTRY QueueEntry;                                   //0x8
}NOK_ETW_BUFFER_QUEUE, * NOK_PETW_BUFFER_QUEUE;
//0x10 bytes (sizeof)
typedef struct _NOK_ETW_SYSTEMTIME
{
    USHORT Year;                                                            //0x0
    USHORT Month;                                                           //0x2
    USHORT DayOfWeek;                                                       //0x4
    USHORT Day;                                                             //0x6
    USHORT Hour;                                                            //0x8
    USHORT Minute;                                                          //0xa
    USHORT Second;                                                          //0xc
    USHORT Milliseconds;                                                    //0xe
}NOK_ETW_SYSTEMTIME, * NOK_PETW_SYSTEMTIME;
//0x20 bytes (sizeof)
typedef struct _NOK_PERFINFO_GROUPMASK
{
    ULONG Masks[8];                                                         //0x0
}NOK_PERFINFO_GROUPMASK, * NOK_PPERFINFO_GROUPMASK;
//0x10 bytes (sizeof)
typedef struct _NOK_KLOCK_ENTRY_LOCK_STATE
{
    union
    {
        struct
        {
            ULONGLONG CrossThreadReleasable:1;                              //0x0
            ULONGLONG Busy:1;                                               //0x0
            ULONGLONG Reserved:61;                                          //0x0
            ULONGLONG InTree:1;                                             //0x0
        };
        VOID* LockState;                                                    //0x0
    };
    union
    {
        VOID* SessionState;                                                 //0x8
        struct
        {
            ULONG SessionId;                                                //0x8
            ULONG SessionPad;                                               //0xc
        };
    };
}NOK_KLOCK_ENTRY_LOCK_STATE, * NOK_PKLOCK_ENTRY_LOCK_STATE;
//0x4 bytes (sizeof)
typedef union _NOK_KLOCK_ENTRY_BOOST_BITMAP
{
    ULONG AllFields;                                                        //0x0
    ULONG AllBoosts:17;                                                     //0x0
    ULONG Reserved:15;                                                      //0x0
    USHORT CpuBoostsBitmap:15;                                              //0x0
    struct
    {
        USHORT IoBoost:1;                                                   //0x0
        USHORT IoQoSBoost:1;                                                    //0x2
        USHORT IoNormalPriorityWaiterCount:8;                                   //0x2
    };
    USHORT IoQoSWaiterCount:7;                                              //0x2
}NOK_KLOCK_ENTRY_BOOST_BITMAP, * NOK_PKLOCK_ENTRY_BOOST_BITMAP;
//0x60 bytes (sizeof)
typedef struct _NOK_KLOCK_ENTRY
{
    union
    {
        NOK_RTL_BALANCED_NODE TreeNode;                                 //0x0
        NOK_SINGLE_LIST_ENTRY FreeListEntry;                            //0x0
    };
    union
    {
        ULONG EntryFlags;                                                   //0x18
        struct
        {
            UCHAR EntryOffset;                                              //0x18
            union
            {
                UCHAR ThreadLocalFlags;                                     //0x19
                struct
                {
                    UCHAR WaitingBit:1;                                     //0x19
                    UCHAR Spare0:7;                                         //0x19
                };
            };
            union
            {
                UCHAR AcquiredByte;                                         //0x1a
                UCHAR AcquiredBit:1;                                        //0x1a
            };
            union
            {
                UCHAR CrossThreadFlags;                                     //0x1b
                struct
                {
                    UCHAR HeadNodeBit:1;                                    //0x1b
                    UCHAR IoPriorityBit:1;                                  //0x1b
                    UCHAR IoQoSWaiter:1;                                    //0x1b
                    UCHAR Spare1:5;                                         //0x1b
                };
            };
        };
        struct
        {
            ULONG StaticState:8;                                            //0x18
            ULONG AllFlags:24;                                              //0x18
        };
    };
    ULONG SpareFlags;                                                       //0x1c
    union
    {
        NOK_KLOCK_ENTRY_LOCK_STATE LockState;                           //0x20
        VOID* volatile LockUnsafe;                                          //0x20
        struct
        {
            volatile UCHAR CrossThreadReleasableAndBusyByte;                //0x20
            UCHAR Reserved[6];                                              //0x21
            volatile UCHAR InTreeByte;                                      //0x27
            union
            {
                VOID* SessionState;                                         //0x28
                struct
                {
                    ULONG SessionId;                                        //0x28
                    ULONG SessionPad;                                       //0x2c
                };
            };
        };
    };
    union
    {
        struct
        {
            NOK_RTL_RB_TREE OwnerTree;                                  //0x30
            NOK_RTL_RB_TREE WaiterTree;                                 //0x40
        };
        CHAR CpuPriorityKey;                                                //0x30
    };
    ULONGLONG EntryLock;                                                    //0x50
    NOK_KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;                            //0x58
    ULONG SparePad;                                                         //0x5c
}NOK_KLOCK_ENTRY, * NOK_PKLOCK_ENTRY;
//0x40 bytes (sizeof)
typedef struct _NOK_KQUEUE
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    NOK_LIST_ENTRY EntryListHead;                                       //0x18
    volatile ULONG CurrentCount;                                            //0x28
    ULONG MaximumCount;                                                     //0x2c
    NOK_LIST_ENTRY ThreadListHead;                                      //0x30
}NOK_KQUEUE, * NOK_PKQUEUE;
//0x10 bytes (sizeof)
typedef struct _NOK_EVENT_DATA_DESCRIPTOR
{
    ULONGLONG Ptr;                                                          //0x0
    ULONG Size;                                                             //0x8
    union
    {
        ULONG Reserved;                                                     //0xc
        struct
        {
            UCHAR Type;                                                     //0xc
            UCHAR Reserved1;                                                //0xd
            USHORT Reserved2;                                               //0xe
        };
    };
}NOK_EVENT_DATA_DESCRIPTOR, * NOK_PEVENT_DATA_DESCRIPTOR;
//0x10 bytes (sizeof)
typedef struct _NOK_EVENT_DESCRIPTOR
{
    USHORT Id;                                                              //0x0
    UCHAR Version;                                                          //0x2
    UCHAR Channel;                                                          //0x3
    UCHAR Level;                                                            //0x4
    UCHAR Opcode;                                                           //0x5
    USHORT Task;                                                            //0x6
    ULONGLONG Keyword;                                                      //0x8
}NOK_EVENT_DESCRIPTOR, * NOK_PEVENT_DESCRIPTOR;
//0x10 bytes (sizeof)
typedef struct _NOK_EVENT_FILTER_DESCRIPTOR
{
    ULONGLONG Ptr;                                                          //0x0
    ULONG Size;                                                             //0x8
    ULONG Type;                                                             //0xc
}NOK_EVENT_FILTER_DESCRIPTOR, * NOK_PEVENT_FILTER_DESCRIPTOR;
//0x18 bytes (sizeof)
typedef struct _NOK_EVENT_FILTER_HEADER
{
    USHORT Id;                                                              //0x0
    UCHAR Version;                                                          //0x2
    UCHAR Reserved[5];                                                      //0x3
    ULONGLONG InstanceId;                                                   //0x8
    ULONG Size;                                                             //0x10
    ULONG NextOffset;                                                       //0x14
}NOK_EVENT_FILTER_HEADER, * NOK_PEVENT_FILTER_HEADER;
//0x18 bytes (sizeof)
typedef struct _NOK_EVENT_FILTER_LEVEL_KW
{
    ULONGLONG MatchAnyKeyword;                                              //0x0
    ULONGLONG MatchAllKeyword;                                              //0x8
    UCHAR Level;                                                            //0x10
    UCHAR FilterIn;                                                         //0x11
}NOK_EVENT_FILTER_LEVEL_KW, * NOK_PEVENT_FILTER_LEVEL_KW;
//0xf0 bytes (sizeof)
typedef struct _NOK_ETW_WMITRACE_WORK
{
    ULONG LoggerId;                                                         //0x0
    ULONG SiloSessionId;                                                    //0x4
    union
    {
        struct
        {
            CHAR LoggerName[65];                                            //0x8
            CHAR FileName[129];                                             //0x49
            ULONG MaximumFileSize;                                          //0xcc
            ULONG MinBuffers;                                               //0xd0
            ULONG MaxBuffers;                                               //0xd4
            ULONG BufferSize;                                               //0xd8
            ULONG Mode;                                                     //0xdc
            ULONG FlushTimer;                                               //0xe0
        };
        struct
        {
            ULONGLONG MatchAny;                                             //0x8
            ULONGLONG MatchAll;                                             //0x10
            ULONG EnableProperty;                                           //0x18
            NOK_GUID Guid;                                              //0x1c
            UCHAR Level;                                                    //0x2c
        };
    };
    LONG Status;                                                            //0xe8
}NOK_ETW_WMITRACE_WORK, * NOK_PETW_WMITRACE_WORK;
//0x50 bytes (sizeof)
typedef struct _NOK_EVENT_HEADER
{
    USHORT Size;                                                            //0x0
    USHORT HeaderType;                                                      //0x2
    USHORT Flags;                                                           //0x4
    USHORT EventProperty;                                                   //0x6
    ULONG ThreadId;                                                         //0x8
    ULONG ProcessId;                                                        //0xc
    NOK_LARGE_INTEGER TimeStamp;                                         //0x10
    NOK_GUID ProviderId;                                                //0x18
    NOK_EVENT_DESCRIPTOR EventDescriptor;                               //0x28
    union
    {
        struct
        {
            ULONG KernelTime;                                               //0x38
            ULONG UserTime;                                                 //0x3c
        };
        ULONGLONG ProcessorTime;                                            //0x38
    };
    NOK_GUID ActivityId;                                                //0x40
}NOK_EVENT_HEADER, * NOK_PEVENT_HEADER;
//0x10 bytes (sizeof)
typedef struct _NOK_ETW_LAST_ENABLE_INFO
{
    NOK_LARGE_INTEGER EnableFlags;                                       //0x0
    USHORT LoggerId;                                                        //0x8
    UCHAR Level;                                                            //0xa
    UCHAR Enabled:1;                                                        //0xb
    UCHAR InternalFlag:7;                                                   //0xb
}NOK_ETW_LAST_ENABLE_INFO, * NOK_PETW_LAST_ENABLE_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_EVENT_HEADER_EXTENDED_DATA_ITEM
{
    USHORT Reserved1;                                                       //0x0
    USHORT ExtType;                                                         //0x2
    USHORT Linkage:1;                                                       //0x4
    USHORT Reserved2:15;                                                    //0x4
    USHORT DataSize;                                                        //0x6
    ULONGLONG DataPtr;                                                      //0x8
}NOK_EVENT_HEADER_EXTENDED_DATA_ITEM, * NOK_PEVENT_HEADER_EXTENDED_DATA_ITEM;
//0x4 bytes (sizeof)
typedef enum _NOK_SYSTEM_DLL_TYPE
{
    NOK_PsNativeSystemDll = 0,
    NOK_PsWowX86SystemDll = 1,
    NOK_PsWowArm32SystemDll = 2,
    NOK_PsWowAmd64SystemDll = 3,
    NOK_PsWowChpeX86SystemDll = 4,
    NOK_PsVsmEnclaveRuntimeDll = 5,
    NOK_PsSystemDllTotalTypes = 6
}NOK_SYSTEM_DLL_TYPE, * NOK_PSYSTEM_DLL_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_EXCEPTION_POINTERS
{
    NOK_PEXCEPTION_RECORD ExceptionRecord;                              //0x0
    NOK_PCONTEXT ContextRecord;                                         //0x8
}NOK_EXCEPTION_POINTERS, * NOK_PEXCEPTION_POINTERS;
//0x98 bytes (sizeof)
typedef struct _NOK_EXCEPTION_RECORD64
{
    LONG ExceptionCode;                                                     //0x0
    ULONG ExceptionFlags;                                                   //0x4
    ULONGLONG ExceptionRecord;                                              //0x8
    ULONGLONG ExceptionAddress;                                             //0x10
    ULONG NumberParameters;                                                 //0x18
    ULONG __unusedAlignment;                                                //0x1c
    ULONGLONG ExceptionInformation[15];                                     //0x20
}NOK_EXCEPTION_RECORD64, * NOK_PEXCEPTION_RECORD64;
//0x54 bytes (sizeof)
typedef struct _NOK_DBGKM_EXCEPTION32
{
    NOK_EXCEPTION_RECORD32 ExceptionRecord;                             //0x0
    ULONG FirstChance;                                                      //0x50
}NOK_DBGKM_EXCEPTION32, * NOK_PDBGKM_EXCEPTION32;
//0xa0 bytes (sizeof)
typedef struct _NOK_DBGKM_EXCEPTION64
{
    NOK_EXCEPTION_RECORD64 ExceptionRecord;                             //0x0
    ULONG FirstChance;                                                      //0x98
}NOK_DBGKM_EXCEPTION64, * NOK_PDBGKM_EXCEPTION64;
//0x4 bytes (sizeof)
typedef enum _NOK_EXCEPTION_DISPOSITION
{
    NOK_ExceptionContinueExecution = 0,
    NOK_ExceptionContinueSearch = 1,
    NOK_ExceptionNestedException = 2,
    NOK_ExceptionCollidedUnwind = 3
}NOK_EXCEPTION_DISPOSITION, * NOK_PEXCEPTION_DISPOSITION;
//0x8 bytes (sizeof)
typedef struct _NOK_EXHANDLE
{
    union
    {
        struct
        {
            ULONG TagBits:2;                                                //0x0
            ULONG Index:30;                                                 //0x0
        };
        VOID* GenericHandleOverlay;                                         //0x0
        ULONGLONG Value;                                                    //0x0
    };
}NOK_EXHANDLE, * NOK_PEXHANDLE;
//0x18 bytes (sizeof)
typedef struct _NOK_EXT_DELETE_PARAMETERS
{
    ULONG Version;                                                          //0x0
    ULONG Reserved;                                                         //0x4
    VOID (*DeleteCallback)(VOID* arg1);                                     //0x8
    VOID* DeleteContext;                                                    //0x10
}NOK_EXT_DELETE_PARAMETERS, * NOK_PEXT_DELETE_PARAMETERS;
//0x4 bytes (sizeof)
typedef enum _NOK_EXT_IOMMU_DEVICE_TYPE
{
    NOK_EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
    NOK_EXT_IOMMU_DEVICE_TYPE_PCI = 1,
    NOK_EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
    NOK_EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
    NOK_EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
    NOK_EXT_IOMMU_DEVICE_TYPE_GIC = 5,
    NOK_EXT_IOMMU_DEVICE_TYPE_TEST = 6,
    NOK_EXT_IOMMU_DEVICE_TYPE_MAX = 7
}NOK_EXT_IOMMU_DEVICE_TYPE, * NOK_PEXT_IOMMU_DEVICE_TYPE;
//0x8 bytes (sizeof)
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_ACPI
{
    CHAR* ObjectName;                                                       //0x0
}NOK_EXT_IOMMU_DEVICE_ID_ACPI, * NOK_PEXT_IOMMU_DEVICE_ID_ACPI;
//0x4 bytes (sizeof)
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_GIC
{
    ULONG LineNumber;                                                       //0x0
}NOK_EXT_IOMMU_DEVICE_ID_GIC, * NOK_PEXT_IOMMU_DEVICE_ID_GIC;
//0x10 bytes (sizeof)
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_PCI
{
    union
    {
        ULONGLONG AsUINT64;                                                 //0x0
        struct
        {
            USHORT PciSegmentNumber;                                        //0x0
            USHORT PhantomFunctionBits:2;                                   //0x2
            USHORT BusRange:1;                                              //0x2
            USHORT Reserved:5;                                              //0x2
            USHORT StartBusNumber:8;                                        //0x2
            union
            {
                USHORT Bdf;                                                 //0x4
                struct
                {
                    UCHAR SubordinateBus;                                   //0x4
                    UCHAR SecondaryBus;                                     //0x5
                };
            };
            USHORT DevicePathLength;                                        //0x6
        };
    };
    WCHAR* DevicePath;                                                      //0x8
}NOK_EXT_IOMMU_DEVICE_ID_PCI, * NOK_PEXT_IOMMU_DEVICE_ID_PCI;
//0x8 bytes (sizeof)
typedef struct _NOK_EXT_IOMMU_DEVICE_ID_TEST
{
    ULONGLONG UniqueId;                                                     //0x0
}NOK_EXT_IOMMU_DEVICE_ID_TEST, * NOK_PEXT_IOMMU_DEVICE_ID_TEST;
//0x18 bytes (sizeof)
typedef struct _NOK_EXT_IOMMU_DEVICE_ID
{
    NOK_EXT_IOMMU_DEVICE_TYPE DeviceType;                                 //0x0
    union
    {
        NOK_EXT_IOMMU_DEVICE_ID_PCI Pci;                                //0x8
        NOK_EXT_IOMMU_DEVICE_ID_ACPI Acpi;                              //0x8
        UCHAR IoApicId;                                                     //0x8
        ULONGLONG LogicalId;                                                //0x8
        NOK_EXT_IOMMU_DEVICE_ID_TEST Test;                              //0x8
        NOK_EXT_IOMMU_DEVICE_ID_GIC Gic;                                //0x8
    };
}NOK_EXT_IOMMU_DEVICE_ID, * NOK_PEXT_IOMMU_DEVICE_ID;
//0x10 bytes (sizeof)
typedef struct _NOK_EXT_SET_PARAMETERS_V0
{
    ULONG Version;                                                          //0x0
    ULONG Reserved;                                                         //0x4
    LONGLONG NoWakeTolerance;                                               //0x8
}NOK_EXT_SET_PARAMETERS_V0, * NOK_PEXT_SET_PARAMETERS_V0;
//0x38 bytes (sizeof)
typedef struct _NOK_HVP_VIEW_MAP
{
    VOID* SectionReference;                                                 //0x0
    LONGLONG StorageEndFileOffset;                                          //0x8
    LONGLONG SectionEndFileOffset;                                          //0x10
    NOK_PCMSI_PROCESS_TUPLE ProcessTuple;                               //0x18
    ULONG Flags;                                                            //0x20
    NOK_RTL_RB_TREE ViewTree;                                           //0x28
}NOK_HVP_VIEW_MAP, * NOK_PHVP_VIEW_MAP;
//0x20 bytes (sizeof)
typedef struct _NOK_CACHED_KSTACK_LIST
{
    NOK_SLIST_HEADER SListHead;                                          //0x0
    LONG MinimumFree;                                                       //0x10
    ULONG Misses;                                                           //0x14
    ULONG MissesLast;                                                       //0x18
    ULONG AllStacksInUse;                                                   //0x1c
}NOK_CACHED_KSTACK_LIST, * NOK_PCACHED_KSTACK_LIST;
//0x4 bytes (sizeof)
typedef struct _NOK_SEGMENT_FLAGS
{
    union
    {
        struct
        {
            USHORT TotalNumberOfPtes4132:10;                                //0x0
            USHORT Spare0:1;                                                //0x0
            USHORT SessionDriverProtos:1;                                   //0x0
            USHORT LargePages:1;                                            //0x0
            USHORT DebugSymbolsLoaded:1;                                    //0x0
            USHORT WriteCombined:1;                                         //0x0
            USHORT NoCache:1;                                               //0x0
        };
        USHORT Short0;                                                      //0x0
    };
    union
    {
        struct
        {
            UCHAR Spare:1;                                                  //0x2
            UCHAR DefaultProtectionMask:5;                                  //0x2
            UCHAR Binary32:1;                                               //0x2
            UCHAR ContainsDebug:1;                                          //0x2
        };
        UCHAR UChar1;                                                       //0x2
    };
    union
    {
        struct
        {
            UCHAR ForceCollision:1;                                         //0x3
            UCHAR ImageSigningType:3;                                       //0x3
            UCHAR ImageSigningLevel:4;                                      //0x3
        };
        UCHAR UChar2;                                                       //0x3
    };
}NOK_SEGMENT_FLAGS, * NOK_PSEGMENT_FLAGS;
//0x48 bytes (sizeof)
typedef struct _NOK_SEGMENT
{
    NOK_PCONTROL_AREA ControlArea;                                      //0x0
    ULONG TotalNumberOfPtes;                                                //0x8
    NOK_SEGMENT_FLAGS SegmentFlags;                                     //0xc
    ULONGLONG NumberOfCommittedPages;                                       //0x10
    ULONGLONG SizeOfSegment;                                                //0x18
    union
    {
        NOK_PMMEXTEND_INFO ExtendInfo;                                  //0x20
        VOID* BasedAddress;                                                 //0x20
    };
    NOK_EX_PUSH_LOCK SegmentLock;                                       //0x28
    union
    {
        ULONGLONG ImageCommitment;                                          //0x30
        ULONG CreatingProcessId;                                            //0x30
    } u1;                                                                   //0x30
    union
    {
        NOK_PMI_SECTION_IMAGE_INFORMATION ImageInformation;             //0x38
        VOID* FirstMappedVa;                                                //0x38
    } u2;                                                                   //0x38
    NOK_PMMPTE PrototypePte;                                            //0x40
}NOK_SEGMENT, * NOK_PSEGMENT;
//0x20 bytes (sizeof)
typedef struct _NOK_TRACE_ENABLE_INFO
{
    ULONG IsEnabled;                                                        //0x0
    UCHAR Level;                                                            //0x4
    UCHAR Reserved1;                                                        //0x5
    USHORT LoggerId;                                                        //0x6
    ULONG EnableProperty;                                                   //0x8
    ULONG Reserved2;                                                        //0xc
    ULONGLONG MatchAnyKeyword;                                              //0x10
    ULONGLONG MatchAllKeyword;                                              //0x18
}NOK_TRACE_ENABLE_INFO, * NOK_PTRACE_ENABLE_INFO;
//0x8 bytes (sizeof)
typedef union _NOK_RTL_RUN_ONCE
{
    VOID* Ptr;                                                              //0x0
    ULONGLONG Value;                                                        //0x0
    ULONGLONG State:2;                                                      //0x0
}NOK_RTL_RUN_ONCE, * NOK_PRTL_RUN_ONCE;
//0x18 bytes (sizeof)
typedef struct _NOK_EX_RUNDOWN_REF_CACHE_AWARE
{
    NOK_PEX_RUNDOWN_REF RunRefs;                                        //0x0
    VOID* PoolToFree;                                                       //0x8
    ULONG RunRefSize;                                                       //0x10
    ULONG Number;                                                           //0x14
}NOK_EX_RUNDOWN_REF_CACHE_AWARE, * NOK_PEX_RUNDOWN_REF_CACHE_AWARE;
//0x4 bytes (sizeof)
typedef struct _NOK_EX_PUSH_LOCK_AUTO_EXPAND_STATE
{
    union
    {
        struct
        {
            ULONG Expanded:1;                                               //0x0
            ULONG Transitioning:1;                                          //0x0
            ULONG Pageable:1;                                               //0x0
        };
        ULONG Value;                                                        //0x0
    };
}NOK_EX_PUSH_LOCK_AUTO_EXPAND_STATE, * NOK_PEX_PUSH_LOCK_AUTO_EXPAND_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_EX_PUSH_LOCK_AUTO_EXPAND
{
    NOK_EX_PUSH_LOCK LocalLock;                                         //0x0
    NOK_EX_PUSH_LOCK_AUTO_EXPAND_STATE State;                           //0x8
    ULONG Stats;                                                            //0xc
}NOK_EX_PUSH_LOCK_AUTO_EXPAND, * NOK_PEX_PUSH_LOCK_AUTO_EXPAND;
//0x2b0 bytes (sizeof)
typedef struct _NOK_KPRIQUEUE
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    NOK_LIST_ENTRY EntryListHead[32];                                   //0x18
    volatile LONG CurrentCount[32];                                         //0x218
    ULONG MaximumCount;                                                     //0x298
    NOK_LIST_ENTRY ThreadListHead;                                      //0x2a0
}NOK_KPRIQUEUE, * NOK_PKPRIQUEUE;
//0x58 bytes (sizeof)
typedef struct _NOK_ETW_PAYLOAD_FILTER
{
    LONG RefCount;                                                          //0x0
    NOK_AGGREGATED_PAYLOAD_FILTER PayloadFilter;                        //0x8
}NOK_ETW_PAYLOAD_FILTER, * NOK_PETW_PAYLOAD_FILTER;
//0x10 bytes (sizeof)
typedef struct _NOK_TIME_FIELDS
{
    SHORT Year;                                                             //0x0
    SHORT Month;                                                            //0x2
    SHORT Day;                                                              //0x4
    SHORT Hour;                                                             //0x6
    SHORT Minute;                                                           //0x8
    SHORT Second;                                                           //0xa
    SHORT Milliseconds;                                                     //0xc
    SHORT Weekday;                                                          //0xe
}NOK_TIME_FIELDS, * NOK_PTIME_FIELDS;
//0x48 bytes (sizeof)
typedef struct _NOK_WAIT_CONTEXT_BLOCK
{
    union
    {
        NOK_KDEVICE_QUEUE_ENTRY WaitQueueEntry;                         //0x0
        struct
        {
            NOK_LIST_ENTRY DmaWaitEntry;                                //0x0
            ULONG NumberOfChannels;                                         //0x10
            ULONG SyncCallback:1;                                           //0x14
            ULONG DmaContext:1;                                             //0x14
            ULONG ZeroMapRegisters:1;                                       //0x14
            ULONG Reserved:9;                                               //0x14
            ULONG NumberOfRemapPages:20;                                    //0x14
        };
    };
    NOK_IO_ALLOCATION_ACTION (*DeviceRoutine)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, VOID* arg3, VOID* arg4); //0x18
    VOID* DeviceContext;                                                    //0x20
    ULONG NumberOfMapRegisters;                                             //0x28
    VOID* DeviceObject;                                                     //0x30
    VOID* CurrentIrp;                                                       //0x38
    NOK_PKDPC BufferChainingDpc;                                        //0x40
}NOK_WAIT_CONTEXT_BLOCK, * NOK_PWAIT_CONTEXT_BLOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_EXQUEUEINDEX
{
    NOK_ExPoolUntrusted = 0,
    NOK_IoPoolUntrusted = 1,
    NOK_ExPoolMax = 8
}NOK_EXQUEUEINDEX, * NOK_PEXQUEUEINDEX;
//0x10 bytes (sizeof)
typedef struct _NOK_ETW_REF_CLOCK
{
    NOK_LARGE_INTEGER StartTime;                                         //0x0
    NOK_LARGE_INTEGER StartPerfClock;                                    //0x8
}NOK_ETW_REF_CLOCK, * NOK_PETW_REF_CLOCK;
//0x70 bytes (sizeof)
typedef struct _NOK_EVENT_RECORD
{
    NOK_EVENT_HEADER EventHeader;                                       //0x0
    NOK_ETW_BUFFER_CONTEXT BufferContext;                               //0x50
    USHORT ExtendedDataCount;                                               //0x54
    USHORT UserDataLength;                                                  //0x56
    NOK_EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;                  //0x58
    VOID* UserData;                                                         //0x60
    VOID* UserContext;                                                      //0x68
}NOK_EVENT_RECORD, * NOK_PEVENT_RECORD;
//0x10 bytes (sizeof)
typedef struct _NOK_FAKE_HEAP_ENTRY
{
    ULONGLONG Size;                                                         //0x0
    ULONGLONG PreviousSize;                                                 //0x8
}NOK_FAKE_HEAP_ENTRY, * NOK_PFAKE_HEAP_ENTRY;
//0x68 bytes (sizeof)
typedef struct _NOK_FAST_ERESOURCE
{
    VOID* Reserved1[3];                                                     //0x0
    ULONG Reserved2;                                                        //0x18
    VOID* Reserved3[4];                                                     //0x20
    ULONG Reserved4[4];                                                     //0x40
    VOID* Reserved5;                                                        //0x50
    VOID* Reserved6[2];                                                     //0x58
}NOK_FAST_ERESOURCE, * NOK_PFAST_ERESOURCE;
//0x8 bytes (sizeof)
typedef struct _NOK_KWAIT_CHAIN
{
    VOID* Head;                                                             //0x0
}NOK_KWAIT_CHAIN, * NOK_PKWAIT_CHAIN;
//0xe0 bytes (sizeof)
typedef struct _NOK_FAST_IO_DISPATCH
{
    ULONG SizeOfFastIoDispatch;                                             //0x0
    UCHAR (*FastIoCheckIfPossible)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, UCHAR arg4, ULONG arg5, UCHAR arg6, NOK_PIO_STATUS_BLOCK arg7, NOK_PDEVICE_OBJECT arg8); //0x8
    UCHAR (*FastIoRead)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, UCHAR arg4, ULONG arg5, VOID* arg6, NOK_PIO_STATUS_BLOCK arg7, NOK_PDEVICE_OBJECT arg8); //0x10
    UCHAR (*FastIoWrite)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, UCHAR arg4, ULONG arg5, VOID* arg6, NOK_PIO_STATUS_BLOCK arg7, NOK_PDEVICE_OBJECT arg8); //0x18
    UCHAR (*FastIoQueryBasicInfo)(NOK_PFILE_OBJECT arg1, UCHAR arg2, NOK_PFILE_BASIC_INFORMATION arg3, NOK_PIO_STATUS_BLOCK arg4, NOK_PDEVICE_OBJECT arg5); //0x20
    UCHAR (*FastIoQueryStandardInfo)(NOK_PFILE_OBJECT arg1, UCHAR arg2, NOK_PFILE_STANDARD_INFORMATION arg3, NOK_PIO_STATUS_BLOCK arg4, NOK_PDEVICE_OBJECT arg5); //0x28
    UCHAR (*FastIoLock)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, NOK_PLARGE_INTEGER arg3, NOK_PKPROCESS arg4, ULONG arg5, UCHAR arg6, UCHAR arg7, NOK_PIO_STATUS_BLOCK arg8, NOK_PDEVICE_OBJECT arg9); //0x30
    UCHAR (*FastIoUnlockSingle)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, NOK_PLARGE_INTEGER arg3, NOK_PKPROCESS arg4, ULONG arg5, NOK_PIO_STATUS_BLOCK arg6, NOK_PDEVICE_OBJECT arg7); //0x38
    UCHAR (*FastIoUnlockAll)(NOK_PFILE_OBJECT arg1, NOK_PKPROCESS arg2, NOK_PIO_STATUS_BLOCK arg3, NOK_PDEVICE_OBJECT arg4); //0x40
    UCHAR (*FastIoUnlockAllByKey)(NOK_PFILE_OBJECT arg1, VOID* arg2, ULONG arg3, NOK_PIO_STATUS_BLOCK arg4, NOK_PDEVICE_OBJECT arg5); //0x48
    UCHAR (*FastIoDeviceControl)(NOK_PFILE_OBJECT arg1, UCHAR arg2, VOID* arg3, ULONG arg4, VOID* arg5, ULONG arg6, ULONG arg7, NOK_PIO_STATUS_BLOCK arg8, NOK_PDEVICE_OBJECT arg9); //0x50
    VOID (*AcquireFileForNtCreateSection)(NOK_PFILE_OBJECT arg1);       //0x58
    VOID (*ReleaseFileForNtCreateSection)(NOK_PFILE_OBJECT arg1);       //0x60
    VOID (*FastIoDetachDevice)(NOK_PDEVICE_OBJECT arg1, NOK_PDEVICE_OBJECT arg2); //0x68
    UCHAR (*FastIoQueryNetworkOpenInfo)(NOK_PFILE_OBJECT arg1, UCHAR arg2, NOK_PFILE_NETWORK_OPEN_INFORMATION arg3, NOK_PIO_STATUS_BLOCK arg4, NOK_PDEVICE_OBJECT arg5); //0x70
    LONG (*AcquireForModWrite)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, NOK_PERESOURCE* arg3, NOK_PDEVICE_OBJECT arg4); //0x78
    UCHAR (*MdlRead)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, ULONG arg4, NOK_PMDL* arg5, NOK_PIO_STATUS_BLOCK arg6, NOK_PDEVICE_OBJECT arg7); //0x80
    UCHAR (*MdlReadComplete)(NOK_PFILE_OBJECT arg1, NOK_PMDL arg2, NOK_PDEVICE_OBJECT arg3); //0x88
    UCHAR (*PrepareMdlWrite)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, ULONG arg4, NOK_PMDL* arg5, NOK_PIO_STATUS_BLOCK arg6, NOK_PDEVICE_OBJECT arg7); //0x90
    UCHAR (*MdlWriteComplete)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, NOK_PMDL arg3, NOK_PDEVICE_OBJECT arg4); //0x98
    UCHAR (*FastIoReadCompressed)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, ULONG arg4, VOID* arg5, NOK_PMDL* arg6, NOK_PIO_STATUS_BLOCK arg7, NOK_PCOMPRESSED_DATA_INFO arg8, ULONG arg9, NOK_PDEVICE_OBJECT arg10); //0xa0
    UCHAR (*FastIoWriteCompressed)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, ULONG arg4, VOID* arg5, NOK_PMDL* arg6, NOK_PIO_STATUS_BLOCK arg7, NOK_PCOMPRESSED_DATA_INFO arg8, ULONG arg9, NOK_PDEVICE_OBJECT arg10); //0xa8
    UCHAR (*MdlReadCompleteCompressed)(NOK_PFILE_OBJECT arg1, NOK_PMDL arg2, NOK_PDEVICE_OBJECT arg3); //0xb0
    UCHAR (*MdlWriteCompleteCompressed)(NOK_PFILE_OBJECT arg1, NOK_PLARGE_INTEGER arg2, NOK_PMDL arg3, NOK_PDEVICE_OBJECT arg4); //0xb8
    UCHAR (*FastIoQueryOpen)(NOK_PIRP arg1, NOK_PFILE_NETWORK_OPEN_INFORMATION arg2, NOK_PDEVICE_OBJECT arg3); //0xc0
    LONG (*ReleaseForModWrite)(NOK_PFILE_OBJECT arg1, NOK_PERESOURCE arg2, NOK_PDEVICE_OBJECT arg3); //0xc8
    LONG (*AcquireForCcFlush)(NOK_PFILE_OBJECT arg1, NOK_PDEVICE_OBJECT arg2); //0xd0
    LONG (*ReleaseForCcFlush)(NOK_PFILE_OBJECT arg1, NOK_PDEVICE_OBJECT arg2); //0xd8
}NOK_FAST_IO_DISPATCH, * NOK_PFAST_IO_DISPATCH;
//0x8 bytes (sizeof)
typedef union _NOK_ULARGE_INTEGER
{
    struct
    {
        ULONG LowPart;                                                      //0x0
        ULONG HighPart;                                                     //0x4
    };
    struct
    {
        ULONG LowPart;                                                      //0x0
        ULONG HighPart;                                                     //0x4
    } u;                                                                    //0x0
    ULONGLONG QuadPart;                                                     //0x0
}NOK_ULARGE_INTEGER, * NOK_PULARGE_INTEGER;
//0x48 bytes (sizeof)
typedef struct _NOK_FAST_OWNER_ENTRY
{
    VOID* Reserved[9];                                                      //0x0
}NOK_FAST_OWNER_ENTRY, * NOK_PFAST_OWNER_ENTRY;
//0x40 bytes (sizeof)
typedef struct _NOK_KTIMER
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    NOK_ULARGE_INTEGER DueTime;                                          //0x18
    NOK_LIST_ENTRY TimerListEntry;                                      //0x20
    NOK_PKDPC Dpc;                                                      //0x30
    USHORT Processor;                                                       //0x38
    USHORT TimerType;                                                       //0x3a
    ULONG Period;                                                           //0x3c
}NOK_KTIMER, * NOK_PKTIMER;
//0x4 bytes (sizeof)
typedef enum _NOK_FAULT_INFORMATION_ARCH
{
    NOK_FaultInformationInvalid = 0,
    NOK_FaultInformationArm64 = 1,
    NOK_FaultInformationX64 = 2
}NOK_FAULT_INFORMATION_ARCH, * NOK_PFAULT_INFORMATION_ARCH;
//0x4 bytes (sizeof)
typedef struct _NOK_FAULT_INFORMATION_ARM64_FLAGS
{
    ULONG WriteNotRead:1;                                                   //0x0
    ULONG InstructionNotData:1;                                             //0x0
    ULONG Privileged:1;                                                     //0x0
    ULONG FaultAddressValid:1;                                              //0x0
    ULONG Reserved:28;                                                      //0x0
}NOK_FAULT_INFORMATION_ARM64_FLAGS, * NOK_PFAULT_INFORMATION_ARM64_FLAGS;
//0x30 bytes (sizeof)
typedef struct _NOK_FAULT_INFORMATION_ARM64
{
    VOID* DomainHandle;                                                     //0x0
    VOID* FaultAddress;                                                     //0x8
    NOK_PDEVICE_OBJECT PhysicalDeviceObject;                            //0x10
    ULONG InputMappingId;                                                   //0x18
    NOK_FAULT_INFORMATION_ARM64_FLAGS Flags;                            //0x1c
    NOK_FAULT_INFORMATION_ARM64_TYPE Type;                                //0x20
    ULONGLONG IommuBaseAddress;                                             //0x28
}NOK_FAULT_INFORMATION_ARM64, * NOK_PFAULT_INFORMATION_ARM64;
//0x4 bytes (sizeof)
typedef struct _NOK_FAULT_INFORMATION_X64_FLAGS
{
    ULONG FaultAddressValid:1;                                              //0x0
    ULONG Reserved:31;                                                      //0x0
}NOK_FAULT_INFORMATION_X64_FLAGS, * NOK_PFAULT_INFORMATION_X64_FLAGS;
//0x28 bytes (sizeof)
typedef struct _NOK_FAULT_INFORMATION_X64
{
    VOID* DomainHandle;                                                     //0x0
    VOID* FaultAddress;                                                     //0x8
    NOK_FAULT_INFORMATION_X64_FLAGS Flags;                              //0x10
    NOK_FAULT_INFORMATION_ARM64_TYPE Type;                                //0x14
    ULONGLONG IommuBaseAddress;                                             //0x18
    ULONG PciSegment;                                                       //0x20
}NOK_FAULT_INFORMATION_X64, * NOK_PFAULT_INFORMATION_X64;
//0x38 bytes (sizeof)
typedef struct _NOK_FAULT_INFORMATION
{
    NOK_FAULT_INFORMATION_ARCH Type;                                      //0x0
    UCHAR IsStage1;                                                         //0x4
    union
    {
        NOK_FAULT_INFORMATION_ARM64 Arm64;                              //0x8
        NOK_FAULT_INFORMATION_X64 X64;                                  //0x8
    };
}NOK_FAULT_INFORMATION, * NOK_PFAULT_INFORMATION;
//0x10 bytes (sizeof)
typedef struct _NOK_FILESYSTEM_DISK_COUNTERS
{
    ULONGLONG FsBytesRead;                                                  //0x0
    ULONGLONG FsBytesWritten;                                               //0x8
}NOK_FILESYSTEM_DISK_COUNTERS, * NOK_PFILESYSTEM_DISK_COUNTERS;
//0x40 bytes (sizeof)
typedef struct _NOK_FACS
{
    ULONG Signature;                                                        //0x0
    ULONG Length;                                                           //0x4
    ULONG HardwareSignature;                                                //0x8
    ULONG pFirmwareWakingVector;                                            //0xc
    ULONG GlobalLock;                                                       //0x10
    ULONG Flags;                                                            //0x14
    NOK_LARGE_INTEGER x_FirmwareWakingVector;                            //0x18
    UCHAR version;                                                          //0x20
    UCHAR Reserved[31];                                                     //0x21
}NOK_FACS, * NOK_PFACS;
//0xc bytes (sizeof)
typedef struct _NOK_GEN_ADDR
{
    UCHAR AddressSpaceID;                                                   //0x0
    UCHAR BitWidth;                                                         //0x1
    UCHAR BitOffset;                                                        //0x2
    UCHAR AccessSize;                                                       //0x3
    NOK_LARGE_INTEGER Address;                                           //0x4
}NOK_GEN_ADDR, * NOK_PGEN_ADDR;
//0x38 bytes (sizeof)
typedef struct _NOK_FAST_MUTEX
{
    LONG Count;                                                             //0x0
    VOID* Owner;                                                            //0x8
    ULONG Contention;                                                       //0x10
    NOK_KEVENT Event;                                                   //0x18
    ULONG OldIrql;                                                          //0x30
}NOK_FAST_MUTEX, * NOK_PFAST_MUTEX;
//0x28 bytes (sizeof)
typedef struct _NOK_FILE_BASIC_INFORMATION
{
    NOK_LARGE_INTEGER CreationTime;                                      //0x0
    NOK_LARGE_INTEGER LastAccessTime;                                    //0x8
    NOK_LARGE_INTEGER LastWriteTime;                                     //0x10
    NOK_LARGE_INTEGER ChangeTime;                                        //0x18
    ULONG FileAttributes;                                                   //0x20
}NOK_FILE_BASIC_INFORMATION, * NOK_PFILE_BASIC_INFORMATION;
//0x4 bytes (sizeof)
typedef struct _NOK_PCAT_FIRMWARE_INFORMATION
{
    ULONG PlaceHolder;                                                      //0x0
}NOK_PCAT_FIRMWARE_INFORMATION, * NOK_PPCAT_FIRMWARE_INFORMATION;
//0x48 bytes (sizeof)
typedef struct _NOK_FAST_OWNER_ENTRY_INTERNAL
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    UCHAR AbLockHandle;                                                     //0x10
    UCHAR Disowned:1;                                                       //0x11
    UCHAR DynamicallyAllocated:1;                                           //0x11
    UCHAR CallerExclusive:1;                                                //0x11
    UCHAR IsSublistHead;                                                    //0x12
    UCHAR IsWaiting;                                                        //0x13
    VOID* LockAddress;                                                      //0x18
    VOID* ThreadAddress;                                                    //0x20
    NOK_LIST_ENTRY SublistHead;                                         //0x28
    NOK_LIST_ENTRY LockListEntry;                                       //0x38
}NOK_FAST_OWNER_ENTRY_INTERNAL, * NOK_PFAST_OWNER_ENTRY_INTERNAL;
//0x278 bytes (sizeof)
typedef struct _NOK_DUAL
{
    ULONG Length;                                                           //0x0
    NOK_PHMAP_DIRECTORY Map;                                            //0x8
    NOK_PHMAP_TABLE SmallDir;                                           //0x10
    ULONG Guard;                                                            //0x18
    NOK_FREE_DISPLAY FreeDisplay[24];                                   //0x20
    NOK_LIST_ENTRY FreeBins;                                            //0x260
    ULONG FreeSummary;                                                      //0x270
}NOK_DUAL, * NOK_PDUAL;
//0x78 bytes (sizeof)
typedef struct _NOK_FS_FILTER_CALLBACKS
{
    ULONG SizeOfFsFilterCallbacks;                                          //0x0
    ULONG Reserved;                                                         //0x4
    LONG (*PreAcquireForSectionSynchronization)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x8
    VOID (*PostAcquireForSectionSynchronization)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x10
    LONG (*PreReleaseForSectionSynchronization)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x18
    VOID (*PostReleaseForSectionSynchronization)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x20
    LONG (*PreAcquireForCcFlush)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x28
    VOID (*PostAcquireForCcFlush)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x30
    LONG (*PreReleaseForCcFlush)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x38
    VOID (*PostReleaseForCcFlush)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x40
    LONG (*PreAcquireForModifiedPageWriter)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x48
    VOID (*PostAcquireForModifiedPageWriter)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x50
    LONG (*PreReleaseForModifiedPageWriter)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x58
    VOID (*PostReleaseForModifiedPageWriter)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x60
    LONG (*PreQueryOpen)(NOK_PFS_FILTER_CALLBACK_DATA arg1, VOID** arg2); //0x68
    VOID (*PostQueryOpen)(NOK_PFS_FILTER_CALLBACK_DATA arg1, LONG arg2, VOID* arg3); //0x70
}NOK_FS_FILTER_CALLBACKS, * NOK_PFS_FILTER_CALLBACKS;
//0x4 bytes (sizeof)
typedef enum _NOK_FILE_INFORMATION_CLASS
{
    NOK_FileDirectoryInformation = 1,
    NOK_FileFullDirectoryInformation = 2,
    NOK_FileBothDirectoryInformation = 3,
    NOK_FileBasicInformation = 4,
    NOK_FileStandardInformation = 5,
    NOK_FileInternalInformation = 6,
    NOK_FileEaInformation = 7,
    NOK_FileAccessInformation = 8,
    NOK_FileNameInformation = 9,
    NOK_FileRenameInformation = 10,
    NOK_FileLinkInformation = 11,
    NOK_FileNamesInformation = 12,
    NOK_FileDispositionInformation = 13,
    NOK_FilePositionInformation = 14,
    NOK_FileFullEaInformation = 15,
    NOK_FileModeInformation = 16,
    NOK_FileAlignmentInformation = 17,
    NOK_FileAllInformation = 18,
    NOK_FileAllocationInformation = 19,
    NOK_FileEndOfFileInformation = 20,
    NOK_FileAlternateNameInformation = 21,
    NOK_FileStreamInformation = 22,
    NOK_FilePipeInformation = 23,
    NOK_FilePipeLocalInformation = 24,
    NOK_FilePipeRemoteInformation = 25,
    NOK_FileMailslotQueryInformation = 26,
    NOK_FileMailslotSetInformation = 27,
    NOK_FileCompressionInformation = 28,
    NOK_FileObjectIdInformation = 29,
    NOK_FileCompletionInformation = 30,
    NOK_FileMoveClusterInformation = 31,
    NOK_FileQuotaInformation = 32,
    NOK_FileReparsePointInformation = 33,
    NOK_FileNetworkOpenInformation = 34,
    NOK_FileAttributeTagInformation = 35,
    NOK_FileTrackingInformation = 36,
    NOK_FileIdBothDirectoryInformation = 37,
    NOK_FileIdFullDirectoryInformation = 38,
    NOK_FileValidDataLengthInformation = 39,
    NOK_FileShortNameInformation = 40,
    NOK_FileIoCompletionNotificationInformation = 41,
    NOK_FileIoStatusBlockRangeInformation = 42,
    NOK_FileIoPriorityHintInformation = 43,
    NOK_FileSfioReserveInformation = 44,
    NOK_FileSfioVolumeInformation = 45,
    NOK_FileHardLinkInformation = 46,
    NOK_FileProcessIdsUsingFileInformation = 47,
    NOK_FileNormalizedNameInformation = 48,
    NOK_FileNetworkPhysicalNameInformation = 49,
    NOK_FileIdGlobalTxDirectoryInformation = 50,
    NOK_FileIsRemoteDeviceInformation = 51,
    NOK_FileUnusedInformation = 52,
    NOK_FileNumaNodeInformation = 53,
    NOK_FileStandardLinkInformation = 54,
    NOK_FileRemoteProtocolInformation = 55,
    NOK_FileRenameInformationBypassAccessCheck = 56,
    NOK_FileLinkInformationBypassAccessCheck = 57,
    NOK_FileVolumeNameInformation = 58,
    NOK_FileIdInformation = 59,
    NOK_FileIdExtdDirectoryInformation = 60,
    NOK_FileReplaceCompletionInformation = 61,
    NOK_FileHardLinkFullIdInformation = 62,
    NOK_FileIdExtdBothDirectoryInformation = 63,
    NOK_FileDispositionInformationEx = 64,
    NOK_FileRenameInformationEx = 65,
    NOK_FileRenameInformationExBypassAccessCheck = 66,
    NOK_FileDesiredStorageClassInformation = 67,
    NOK_FileStatInformation = 68,
    NOK_FileMemoryPartitionInformation = 69,
    NOK_FileStatLxInformation = 70,
    NOK_FileCaseSensitiveInformation = 71,
    NOK_FileLinkInformationEx = 72,
    NOK_FileLinkInformationExBypassAccessCheck = 73,
    NOK_FileStorageReserveIdInformation = 74,
    NOK_FileCaseSensitiveInformationForceAccessCheck = 75,
    NOK_FileMaximumInformation = 76
}NOK_FILE_INFORMATION_CLASS, * NOK_PFILE_INFORMATION_CLASS;
//0x10 bytes (sizeof)
typedef struct _NOK_FS_FILTER_SECTION_SYNC_OUTPUT
{
    ULONG StructureSize;                                                    //0x0
    ULONG SizeReturned;                                                     //0x4
    ULONG Flags;                                                            //0x8
    ULONG DesiredReadAlignment;                                             //0xc
}NOK_FS_FILTER_SECTION_SYNC_OUTPUT, * NOK_PFS_FILTER_SECTION_SYNC_OUTPUT;
//0x4e8 bytes (sizeof)
typedef struct _NOK_GDI_TEB_BATCH
{
    ULONG Offset:31;                                                        //0x0
    ULONG HasRenderingCommand:1;                                            //0x0
    ULONGLONG HDC;                                                          //0x8
    ULONG Buffer[310];                                                      //0x10
}NOK_GDI_TEB_BATCH, * NOK_PGDI_TEB_BATCH;
//0x4e0 bytes (sizeof)
typedef struct _NOK_GDI_TEB_BATCH32
{
    ULONG Offset:31;                                                        //0x0
    ULONG HasRenderingCommand:1;                                            //0x0
    ULONG HDC;                                                              //0x4
    ULONG Buffer[310];                                                      //0x8
}NOK_GDI_TEB_BATCH32, * NOK_PGDI_TEB_BATCH32;
//0x4e8 bytes (sizeof)
typedef struct _NOK_GDI_TEB_BATCH64
{
    ULONG Offset:31;                                                        //0x0
    ULONG HasRenderingCommand:1;                                            //0x0
    ULONGLONG HDC;                                                          //0x8
    ULONG Buffer[310];                                                      //0x10
}NOK_GDI_TEB_BATCH64, * NOK_PGDI_TEB_BATCH64;
//0x38 bytes (sizeof)
typedef struct _NOK_FILE_NETWORK_OPEN_INFORMATION
{
    NOK_LARGE_INTEGER CreationTime;                                      //0x0
    NOK_LARGE_INTEGER LastAccessTime;                                    //0x8
    NOK_LARGE_INTEGER LastWriteTime;                                     //0x10
    NOK_LARGE_INTEGER ChangeTime;                                        //0x18
    NOK_LARGE_INTEGER AllocationSize;                                    //0x20
    NOK_LARGE_INTEGER EndOfFile;                                         //0x28
    ULONG FileAttributes;                                                   //0x30
}NOK_FILE_NETWORK_OPEN_INFORMATION, * NOK_PFILE_NETWORK_OPEN_INFORMATION;
//0x4 bytes (sizeof)
typedef union _NOK_KSTACK_COUNT
{
    LONG Value;                                                             //0x0
    ULONG State:3;                                                          //0x0
    ULONG StackCount:29;                                                    //0x0
}NOK_KSTACK_COUNT, * NOK_PKSTACK_COUNT;
//0x438 bytes (sizeof)
typedef struct _NOK_KPROCESS
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    NOK_LIST_ENTRY ProfileListHead;                                     //0x18
    ULONGLONG DirectoryTableBase;                                           //0x28
    NOK_LIST_ENTRY ThreadListHead;                                      //0x30
    ULONG ProcessLock;                                                      //0x40
    ULONG ProcessTimerDelay;                                                //0x44
    ULONGLONG DeepFreezeStartTime;                                          //0x48
    NOK_KAFFINITY_EX Affinity;                                          //0x50
    ULONGLONG AffinityPadding[12];                                          //0xf8
    NOK_LIST_ENTRY ReadyListHead;                                       //0x158
    NOK_SINGLE_LIST_ENTRY SwapListEntry;                                //0x168
    volatile NOK_KAFFINITY_EX ActiveProcessors;                         //0x170
    ULONGLONG ActiveProcessorsPadding[12];                                  //0x218
    union
    {
        struct
        {
            ULONG AutoAlignment:1;                                          //0x278
            ULONG DisableBoost:1;                                           //0x278
            ULONG DisableQuantum:1;                                         //0x278
            ULONG DeepFreeze:1;                                             //0x278
            ULONG TimerVirtualization:1;                                    //0x278
            ULONG CheckStackExtents:1;                                      //0x278
            ULONG CacheIsolationEnabled:1;                                  //0x278
            ULONG PpmPolicy:3;                                              //0x278
            ULONG VaSpaceDeleted:1;                                         //0x278
            ULONG ReservedFlags:21;                                         //0x278
        };
        volatile LONG ProcessFlags;                                         //0x278
    };
    ULONG ActiveGroupsMask;                                                 //0x27c
    CHAR BasePriority;                                                      //0x280
    CHAR QuantumReset;                                                      //0x281
    CHAR Visited;                                                           //0x282
    NOK_KEXECUTE_OPTIONS Flags;                                          //0x283
    USHORT ThreadSeed[20];                                                  //0x284
    USHORT ThreadSeedPadding[12];                                           //0x2ac
    USHORT IdealProcessor[20];                                              //0x2c4
    USHORT IdealProcessorPadding[12];                                       //0x2ec
    USHORT IdealNode[20];                                                   //0x304
    USHORT IdealNodePadding[12];                                            //0x32c
    USHORT IdealGlobalNode;                                                 //0x344
    USHORT Spare1;                                                          //0x346
    volatile NOK_KSTACK_COUNT StackCount;                                 //0x348
    NOK_LIST_ENTRY ProcessListEntry;                                    //0x350
    ULONGLONG CycleTime;                                                    //0x360
    ULONGLONG ContextSwitches;                                              //0x368
    NOK_PKSCHEDULING_GROUP SchedulingGroup;                             //0x370
    ULONG FreezeCount;                                                      //0x378
    ULONG KernelTime;                                                       //0x37c
    ULONG UserTime;                                                         //0x380
    ULONG ReadyTime;                                                        //0x384
    ULONGLONG UserDirectoryTableBase;                                       //0x388
    UCHAR AddressPolicy;                                                    //0x390
    UCHAR Spare2[71];                                                       //0x391
    VOID* InstrumentationCallback;                                          //0x3d8
    union
    {
        ULONGLONG SecureHandle;                                             //0x3e0
        struct
        {
            ULONGLONG SecureProcess:1;                                      //0x3e0
            ULONGLONG Unused:1;                                             //0x3e0
        } Flags;                                                            //0x3e0
    } SecureState;                                                          //0x3e0
    ULONGLONG KernelWaitTime;                                               //0x3e8
    ULONGLONG UserWaitTime;                                                 //0x3f0
    ULONGLONG EndPadding[8];                                                //0x3f8
}NOK_KPROCESS, * NOK_PKPROCESS;
//0x4 bytes (sizeof)
typedef enum _NOK_POOL_TYPE
{
    NOK_NonPagedPool = 0,
    NOK_NonPagedPoolExecute = 0,
    NOK_PagedPool = 1,
    NOK_NonPagedPoolMustSucceed = 2,
    NOK_DontUseThisType = 3,
    NOK_NonPagedPoolCacheAligned = 4,
    NOK_PagedPoolCacheAligned = 5,
    NOK_NonPagedPoolCacheAlignedMustS = 6,
    NOK_MaxPoolType = 7,
    NOK_NonPagedPoolBase = 0,
    NOK_NonPagedPoolBaseMustSucceed = 2,
    NOK_NonPagedPoolBaseCacheAligned = 4,
    NOK_NonPagedPoolBaseCacheAlignedMustS = 6,
    NOK_NonPagedPoolSession = 32,
    NOK_PagedPoolSession = 33,
    NOK_NonPagedPoolMustSucceedSession = 34,
    NOK_DontUseThisTypeSession = 35,
    NOK_NonPagedPoolCacheAlignedSession = 36,
    NOK_PagedPoolCacheAlignedSession = 37,
    NOK_NonPagedPoolCacheAlignedMustSSession = 38,
    NOK_NonPagedPoolNx = 512,
    NOK_NonPagedPoolNxCacheAligned = 516,
    NOK_NonPagedPoolSessionNx = 544
}NOK_POOL_TYPE, * NOK_PPOOL_TYPE;
//0x18 bytes (sizeof)
typedef struct _NOK_FILE_STANDARD_INFORMATION
{
    NOK_LARGE_INTEGER AllocationSize;                                    //0x0
    NOK_LARGE_INTEGER EndOfFile;                                         //0x8
    ULONG NumberOfLinks;                                                    //0x10
    UCHAR DeletePending;                                                    //0x14
    UCHAR Directory;                                                        //0x15
}NOK_FILE_STANDARD_INFORMATION, * NOK_PFILE_STANDARD_INFORMATION;
//0x10 bytes (sizeof)
typedef struct _NOK_GROUP_AFFINITY
{
    ULONGLONG Mask;                                                         //0x0
    USHORT Group;                                                           //0x8
    USHORT Reserved[3];                                                     //0xa
}NOK_GROUP_AFFINITY, * NOK_PGROUP_AFFINITY;
//0xe0 bytes (sizeof)
typedef struct _NOK_AUX_ACCESS_DATA
{
    NOK_PPRIVILEGE_SET PrivilegesUsed;                                  //0x0
    NOK_GENERIC_MAPPING GenericMapping;                                 //0x8
    ULONG AccessesToAudit;                                                  //0x18
    ULONG MaximumAuditMask;                                                 //0x1c
    NOK_GUID TransactionId;                                             //0x20
    VOID* NewSecurityDescriptor;                                            //0x30
    VOID* ExistingSecurityDescriptor;                                       //0x38
    VOID* ParentSecurityDescriptor;                                         //0x40
    VOID (*DeRefSecurityDescriptor)(VOID* arg1, VOID* arg2);                //0x48
    VOID* SDLock;                                                           //0x50
    NOK_ACCESS_REASONS AccessReasons;                                   //0x58
    UCHAR GenerateStagingEvents;                                            //0xd8
}NOK_AUX_ACCESS_DATA, * NOK_PAUX_ACCESS_DATA;
//0x38 bytes (sizeof)
typedef struct _NOK_KMUTANT
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    NOK_LIST_ENTRY MutantListEntry;                                     //0x18
    NOK_PKTHREAD OwnerThread;                                           //0x28
    union
    {
        UCHAR MutantFlags;                                                  //0x30
        struct
        {
            UCHAR Abandoned:1;                                              //0x30
            UCHAR Spare1:7;                                                 //0x30
            UCHAR Abandoned2:1;                                             //0x30
            UCHAR AbEnabled:1;                                              //0x30
            UCHAR Spare2:6;                                                 //0x30
        };
    };
    UCHAR ApcDisable;                                                       //0x31
}NOK_KMUTANT, * NOK_PKMUTANT;
//0x18 bytes (sizeof)
typedef struct _NOK_HALP_ALLOC_CONTEXT
{
    NOK_LIST_ENTRY BufferList;                                          //0x0
    ULONGLONG Lock;                                                         //0x10
}NOK_HALP_ALLOC_CONTEXT, * NOK_PHALP_ALLOC_CONTEXT;
//0x68 bytes (sizeof)
typedef struct _NOK_FSRTL_ADVANCED_FCB_HEADER
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    UCHAR Flags;                                                            //0x4
    UCHAR IsFastIoPossible;                                                 //0x5
    UCHAR Flags2;                                                           //0x6
    UCHAR Reserved:4;                                                       //0x7
    UCHAR Version:4;                                                        //0x7
    NOK_PERESOURCE Resource;                                            //0x8
    NOK_PERESOURCE PagingIoResource;                                    //0x10
    NOK_LARGE_INTEGER AllocationSize;                                    //0x18
    NOK_LARGE_INTEGER FileSize;                                          //0x20
    NOK_LARGE_INTEGER ValidDataLength;                                   //0x28
    NOK_PFAST_MUTEX FastMutex;                                          //0x30
    NOK_LIST_ENTRY FilterContexts;                                      //0x38
    NOK_EX_PUSH_LOCK PushLock;                                          //0x48
    VOID** FileContextSupportPointer;                                       //0x50
    union
    {
        VOID* Oplock;                                                       //0x58
        VOID* ReservedForRemote;                                            //0x58
    };
    VOID* ReservedContext;                                                  //0x60
}NOK_FSRTL_ADVANCED_FCB_HEADER, * NOK_PFSRTL_ADVANCED_FCB_HEADER;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_ERROR_SEVERITY
{
    NOK_WheaErrSevRecoverable = 0,
    NOK_WheaErrSevFatal = 1,
    NOK_WheaErrSevCorrected = 2,
    NOK_WheaErrSevInformational = 3
}NOK_WHEA_ERROR_SEVERITY, * NOK_PWHEA_ERROR_SEVERITY;
//0x4 bytes (sizeof)
typedef enum _NOK_HALP_EMERGENCY_LA_QUEUE_TYPE
{
    NOK_HalpDmaLegacyLaQueueEntry = 0,
    NOK_HalpDmaThinLaQueueEntry = 1,
    NOK_HalpDmaLaQueueEntryMax = 2
}NOK_HALP_EMERGENCY_LA_QUEUE_TYPE, * NOK_PHALP_EMERGENCY_LA_QUEUE_TYPE;
//0x20 bytes (sizeof)
typedef struct _NOK_ETW_PRIV_HANDLE_DEMUX_TABLE
{
    NOK_RTL_RB_TREE Tree;                                               //0x0
    NOK_EX_PUSH_LOCK Lock;                                              //0x10
    USHORT SequenceNumber;                                                  //0x18
}NOK_ETW_PRIV_HANDLE_DEMUX_TABLE, * NOK_PETW_PRIV_HANDLE_DEMUX_TABLE;
//0x10 bytes (sizeof)
typedef struct _NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION
{
    NOK_PHALP_DMA_TRANSLATION_BUFFER Buffer;                            //0x0
    ULONG Offset;                                                           //0x8
}NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION, * NOK_PHALP_DMA_TRANSLATION_BUFFER_POSITION;
//0x10c bytes (sizeof)
typedef struct _NOK_FADT
{
    NOK_DESCRIPTION_HEADER Header;                                      //0x0
    ULONG facs;                                                             //0x24
    ULONG dsdt;                                                             //0x28
    UCHAR int_model;                                                        //0x2c
    UCHAR pm_profile;                                                       //0x2d
    USHORT sci_int_vector;                                                  //0x2e
    ULONG smi_cmd_io_port;                                                  //0x30
    UCHAR acpi_on_value;                                                    //0x34
    UCHAR acpi_off_value;                                                   //0x35
    UCHAR s4bios_req;                                                       //0x36
    UCHAR pstate_control;                                                   //0x37
    ULONG pm1a_evt_blk_io_port;                                             //0x38
    ULONG pm1b_evt_blk_io_port;                                             //0x3c
    ULONG pm1a_ctrl_blk_io_port;                                            //0x40
    ULONG pm1b_ctrl_blk_io_port;                                            //0x44
    ULONG pm2_ctrl_blk_io_port;                                             //0x48
    ULONG pm_tmr_blk_io_port;                                               //0x4c
    ULONG gp0_blk_io_port;                                                  //0x50
    ULONG gp1_blk_io_port;                                                  //0x54
    UCHAR pm1_evt_len;                                                      //0x58
    UCHAR pm1_ctrl_len;                                                     //0x59
    UCHAR pm2_ctrl_len;                                                     //0x5a
    UCHAR pm_tmr_len;                                                       //0x5b
    UCHAR gp0_blk_len;                                                      //0x5c
    UCHAR gp1_blk_len;                                                      //0x5d
    UCHAR gp1_base;                                                         //0x5e
    UCHAR cstate_control;                                                   //0x5f
    USHORT lvl2_latency;                                                    //0x60
    USHORT lvl3_latency;                                                    //0x62
    USHORT flush_size;                                                      //0x64
    USHORT flush_stride;                                                    //0x66
    UCHAR duty_offset;                                                      //0x68
    UCHAR duty_width;                                                       //0x69
    UCHAR day_alarm_index;                                                  //0x6a
    UCHAR month_alarm_index;                                                //0x6b
    UCHAR century_alarm_index;                                              //0x6c
    USHORT boot_arch;                                                       //0x6d
    UCHAR reserved3[1];                                                     //0x6f
    ULONG flags;                                                            //0x70
    NOK_GEN_ADDR reset_reg;                                             //0x74
    UCHAR reset_val;                                                        //0x80
    USHORT arm_boot_arch;                                                   //0x81
    UCHAR minor_version_number;                                             //0x83
    NOK_LARGE_INTEGER x_firmware_ctrl;                                   //0x84
    NOK_LARGE_INTEGER x_dsdt;                                            //0x8c
    NOK_GEN_ADDR x_pm1a_evt_blk;                                        //0x94
    NOK_GEN_ADDR x_pm1b_evt_blk;                                        //0xa0
    NOK_GEN_ADDR x_pm1a_ctrl_blk;                                       //0xac
    NOK_GEN_ADDR x_pm1b_ctrl_blk;                                       //0xb8
    NOK_GEN_ADDR x_pm2_ctrl_blk;                                        //0xc4
    NOK_GEN_ADDR x_pm_tmr_blk;                                          //0xd0
    NOK_GEN_ADDR x_gp0_blk;                                             //0xdc
    NOK_GEN_ADDR x_gp1_blk;                                             //0xe8
    NOK_GEN_ADDR sleep_control_reg;                                     //0xf4
    NOK_GEN_ADDR sleep_status_reg;                                      //0x100
}NOK_FADT, * NOK_PFADT;
//0x48 bytes (sizeof)
typedef struct _NOK_HALP_DMA_TRANSLATION_ENTRY
{
    ULONGLONG PhysicalAddress;                                              //0x0
    NOK_PHALP_DMA_TRANSLATION_ENTRY Next;                               //0x8
    ULONG MappedLength;                                                     //0x10
    ULONGLONG LogicalAddress;                                               //0x18
    ULONGLONG LogicalMappedLength;                                          //0x20
    ULONGLONG NextLogicalAddress;                                           //0x28
    union
    {
        VOID* VirtualAddress;                                               //0x30
        struct
        {
            ULONGLONG BoundToMaster:1;                                      //0x30
            ULONGLONG BoundToScatterPool:1;                                 //0x30
            ULONGLONG OwnedByMaster:1;                                      //0x30
            ULONGLONG OwnedByScatterPool:1;                                 //0x30
            ULONGLONG TemporaryMapping:1;                                   //0x30
            ULONGLONG ZeroBuffer:1;                                         //0x30
            ULONGLONG Address:58;                                           //0x30
        } Flags;                                                            //0x30
    } u;                                                                    //0x30
    NOK_PHALP_DMA_TRANSLATION_ENTRY NextMapping;                        //0x38
    UCHAR LogicalBounceBufferPremapped;                                     //0x40
}NOK_HALP_DMA_TRANSLATION_ENTRY, * NOK_PHALP_DMA_TRANSLATION_ENTRY;
//0x40 bytes (sizeof)
typedef struct _NOK_RTL_LOOKASIDE
{
    NOK_SLIST_HEADER ListHead;                                           //0x0
    USHORT Depth;                                                           //0x10
    USHORT MaximumDepth;                                                    //0x12
    ULONG TotalAllocates;                                                   //0x14
    ULONG AllocateMisses;                                                   //0x18
    ULONG TotalFrees;                                                       //0x1c
    ULONG FreeMisses;                                                       //0x20
    ULONG LastTotalAllocates;                                               //0x24
    ULONG LastAllocateMisses;                                               //0x28
    ULONG LastTotalFrees;                                                   //0x2c
}NOK_RTL_LOOKASIDE, * NOK_PRTL_LOOKASIDE;
//0x10 bytes (sizeof)
typedef struct _NOK_HAL_CHANNEL_MEMORY_RANGES
{
    ULONGLONG PageFrameIndex;                                               //0x0
    USHORT MpnId;                                                           //0x8
    USHORT Node;                                                            //0xa
    USHORT Channel;                                                         //0xc
    UCHAR IsPowerManageable;                                                //0xe
    UCHAR DeepPowerState;                                                   //0xf
}NOK_HAL_CHANNEL_MEMORY_RANGES, * NOK_PHAL_CHANNEL_MEMORY_RANGES;
//0x20 bytes (sizeof)
typedef struct _NOK_HAL_CLOCK_TIMER_CONFIGURATION
{
    union
    {
        UCHAR Flags;                                                        //0x0
        struct
        {
            UCHAR AlwaysOnTimer:1;                                          //0x0
            UCHAR HighLatency:1;                                            //0x0
            UCHAR PerCpuTimer:1;                                            //0x0
            UCHAR DynamicTickSupported:1;                                   //0x0
        };
    };
    ULONG KnownType;                                                        //0x4
    ULONG Capabilities;                                                     //0x8
    ULONGLONG MaxIncrement;                                                 //0x10
    ULONG MinIncrement;                                                     //0x18
}NOK_HAL_CLOCK_TIMER_CONFIGURATION, * NOK_PHAL_CLOCK_TIMER_CONFIGURATION;
//0x18 bytes (sizeof)
typedef struct _NOK_HAL_DP_REPLACE_PARAMETERS
{
    ULONG Flags;                                                            //0x0
    NOK_PPNP_REPLACE_PROCESSOR_LIST TargetProcessors;                   //0x8
    NOK_PPNP_REPLACE_PROCESSOR_LIST SpareProcessors;                    //0x10
}NOK_HAL_DP_REPLACE_PARAMETERS, * NOK_PHAL_DP_REPLACE_PARAMETERS;
//0x8 bytes (sizeof)
typedef struct _NOK_HAL_HV_DMA_DOMAIN_INFO
{
    ULONG DomainId;                                                         //0x0
    UCHAR IsStage1;                                                         //0x4
}NOK_HAL_HV_DMA_DOMAIN_INFO, * NOK_PHAL_HV_DMA_DOMAIN_INFO;
//0xc bytes (sizeof)
typedef struct _NOK_HAL_HV_SVM_DEVICE_CAPABILITIES
{
    ULONG SvmSupported:1;                                                   //0x0
    ULONG PciExecute:1;                                                     //0x0
    ULONG NoExecute:1;                                                      //0x0
    ULONG Reserved:28;                                                      //0x0
    ULONG OverflowPossible:1;                                               //0x0
    ULONG PasidCount;                                                       //0x4
    ULONG IommuIndex;                                                       //0x8
}NOK_HAL_HV_SVM_DEVICE_CAPABILITIES, * NOK_PHAL_HV_SVM_DEVICE_CAPABILITIES;
//0x18 bytes (sizeof)
typedef struct _NOK_HAL_HV_SVM_SYSTEM_CAPABILITIES
{
    ULONG SvmSupported:1;                                                   //0x0
    ULONG GpaAlwaysValid:1;                                                 //0x0
    ULONG MaxPasidSpaceCount;                                               //0x4
    ULONG MaxPasidSpacePasidCount;                                          //0x8
    ULONG MaxPrqSize;                                                       //0xc
    ULONG IommuCount;                                                       //0x10
    ULONG MinIommuPasidCount;                                               //0x14
}NOK_HAL_HV_SVM_SYSTEM_CAPABILITIES, * NOK_PHAL_HV_SVM_SYSTEM_CAPABILITIES;
//0x98 bytes (sizeof)
typedef struct _NOK_HALP_DMA_ADAPTER_OBJECT
{
    NOK_DMA_ADAPTER DmaHeader;                                          //0x0
    NOK_PRTL_BITMAP ContiguousMapRegisters;                             //0x10
    NOK_PHALP_DMA_TRANSLATION_ENTRY ScatterBufferListHead;              //0x18
    ULONG NumberOfFreeScatterBuffers;                                       //0x20
    NOK_PHALP_DMA_TRANSLATION_BUFFER ContiguousTranslations;            //0x28
    NOK_PHALP_DMA_TRANSLATION_BUFFER ScatterTranslations;               //0x30
    NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousTranslationEnd;  //0x38
    NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterTranslationEnd;     //0x48
    struct
    {
        NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousHint;        //0x58
        NOK_HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterHint;           //0x68
    } CrashDump;                                                            //0x58
    ULONGLONG SpinLock;                                                     //0x78
    ULONGLONG GrowLock;                                                     //0x80
    NOK_LARGE_INTEGER MaximumPhysicalAddress;                            //0x88
    UCHAR IsMasterAdapter;                                                  //0x90
    UCHAR DmaCanCross64K;                                                   //0x91
    ULONG LibraryVersion;                                                   //0x94
}NOK_HALP_DMA_ADAPTER_OBJECT, * NOK_PHALP_DMA_ADAPTER_OBJECT;
//0x98 bytes (sizeof)
typedef struct _NOK_HAL_IOMMU_DISPATCH
{
    UCHAR (*HalIommuSupportEnabled)();                                      //0x0
    LONG (*HalIommuGetConfiguration)(ULONG arg1, ULONG* arg2, ULONG* arg3, VOID** arg4); //0x8
    LONG (*HalIommuGetLibraryContext)(ULONG arg1, ULONG arg2, VOID** arg3); //0x10
    LONG (*HalIommuMapDevice)(VOID* arg1, NOK_PEXT_IOMMU_DEVICE_ID arg2, NOK_PIOMMU_SVM_CAPABILITIES arg3, VOID** arg4); //0x18
    LONG (*HalIommuEnableDevicePasid)(VOID* arg1, VOID* arg2);              //0x20
    LONG (*HalIommuSetAddressSpace)(VOID* arg1, ULONGLONG arg2);            //0x28
    LONG (*HalIommuDisableDevicePasid)(VOID* arg1, VOID* arg2);             //0x30
    LONG (*HalIommuUnmapDevice)(VOID* arg1, VOID* arg2);                    //0x38
    LONG (*HalIommuFreeLibraryContext)(VOID* arg1);                         //0x40
    VOID (*HalIommuFlushTb)(VOID* arg1, ULONG arg2, NOK_PKTB_FLUSH_VA arg3); //0x48
    VOID (*HalIommuFlushAllPasid)(VOID* arg1, ULONG arg2, NOK_PKTB_FLUSH_VA arg3); //0x50
    UCHAR (*HalIommuProcessPageRequestQueue)(ULONG arg1);                   //0x58
    VOID (*HalIommuFaultRoutine)(ULONG arg1);                               //0x60
    VOID* (*HalIommuReferenceAsid)(ULONG arg1);                             //0x68
    VOID (*HalIommuDereferenceAsid)(ULONG arg1);                            //0x70
    LONG (*HalIommuServicePageFault)(ULONGLONG arg1, VOID* arg2, ULONG arg3); //0x78
    LONG (*HalIommuDevicePowerChange)(VOID* arg1, VOID* arg2, UCHAR arg3);  //0x80
    LONG (*HalIommuBeginDeviceReset)(VOID* arg1, ULONG* arg2);              //0x88
    LONG (*HalIommuFinalizeDeviceReset)(VOID* arg1);                        //0x90
}NOK_HAL_IOMMU_DISPATCH, * NOK_PHAL_IOMMU_DISPATCH;
//0x18 bytes (sizeof)
typedef struct _NOK_HAL_LBR_ENTRY
{
    VOID* FromAddress;                                                      //0x0
    VOID* ToAddress;                                                        //0x8
    VOID* Reserved;                                                         //0x10
}NOK_HAL_LBR_ENTRY, * NOK_PHAL_LBR_ENTRY;
//0x10 bytes (sizeof)
typedef struct _NOK_HAL_LOG_REGISTER_CONTEXT
{
    VOID (*LogRoutine)(ULONG arg1, VOID* arg2, ULONG arg3);                 //0x0
    ULONG Flag;                                                             //0x8
}NOK_HAL_LOG_REGISTER_CONTEXT, * NOK_PHAL_LOG_REGISTER_CONTEXT;
//0x10 bytes (sizeof)
typedef struct _NOK_HAL_NODE_RANGE
{
    ULONGLONG PageFrameIndex;                                               //0x0
    ULONG Node;                                                             //0x8
}NOK_HAL_NODE_RANGE, * NOK_PHAL_NODE_RANGE;
//0x150 bytes (sizeof)
typedef struct _NOK_DRIVER_OBJECT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x8
    ULONG Flags;                                                            //0x10
    VOID* DriverStart;                                                      //0x18
    ULONG DriverSize;                                                       //0x20
    VOID* DriverSection;                                                    //0x28
    NOK_PDRIVER_EXTENSION DriverExtension;                              //0x30
    NOK_UNICODE_STRING DriverName;                                      //0x38
    NOK_PUNICODE_STRING HardwareDatabase;                               //0x48
    NOK_PFAST_IO_DISPATCH FastIoDispatch;                               //0x50
    LONG (*DriverInit)(NOK_PDRIVER_OBJECT arg1, NOK_PUNICODE_STRING arg2); //0x58
    VOID (*DriverStartIo)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2);  //0x60
    VOID (*DriverUnload)(NOK_PDRIVER_OBJECT arg1);                      //0x68
    LONG (*MajorFunction[28])(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2); //0x70
}NOK_DRIVER_OBJECT, * NOK_PDRIVER_OBJECT;
//0x58 bytes (sizeof)
typedef struct _NOK_DMA_TRANSFER_CONTEXT_V1
{
    LONG DmaState;                                                          //0x0
    ULONG TransferState;                                                    //0x4
    NOK_WAIT_CONTEXT_BLOCK Wcb;                                         //0x8
    VOID* HalWcb;                                                           //0x50
}NOK_DMA_TRANSFER_CONTEXT_V1, * NOK_PDMA_TRANSFER_CONTEXT_V1;
//0x40 bytes (sizeof)
typedef struct _NOK_HANDLE_TABLE_FREE_LIST
{
    NOK_EX_PUSH_LOCK FreeListLock;                                      //0x0
    NOK_PHANDLE_TABLE_ENTRY FirstFreeHandleEntry;                        //0x8
    NOK_PHANDLE_TABLE_ENTRY LastFreeHandleEntry;                         //0x10
    LONG HandleCount;                                                       //0x18
    ULONG HighWaterMark;                                                    //0x1c
}NOK_HANDLE_TABLE_FREE_LIST, * NOK_PHANDLE_TABLE_FREE_LIST;
//0x80 bytes (sizeof)
typedef struct _NOK_HANDLE_TABLE
{
    ULONG NextHandleNeedingPool;                                            //0x0
    LONG ExtraInfoPages;                                                    //0x4
    volatile ULONGLONG TableCode;                                           //0x8
    NOK_PEPROCESS QuotaProcess;                                         //0x10
    NOK_LIST_ENTRY HandleTableList;                                     //0x18
    ULONG UniqueProcessId;                                                  //0x28
    union
    {
        ULONG Flags;                                                        //0x2c
        struct
        {
            UCHAR StrictFIFO:1;                                             //0x2c
            UCHAR EnableHandleExceptions:1;                                 //0x2c
            UCHAR Rundown:1;                                                //0x2c
            UCHAR Duplicated:1;                                             //0x2c
            UCHAR RaiseUMExceptionOnInvalidHandleClose:1;                   //0x2c
        };
    };
    NOK_EX_PUSH_LOCK HandleContentionEvent;                             //0x30
    NOK_EX_PUSH_LOCK HandleTableLock;                                   //0x38
    union
    {
        NOK_HANDLE_TABLE_FREE_LIST FreeLists[1];                        //0x40
        struct
        {
            UCHAR ActualEntry[32];                                          //0x40
            NOK_PHANDLE_TRACE_DEBUG_INFO DebugInfo;                     //0x60
        };
    };
}NOK_HANDLE_TABLE, * NOK_PHANDLE_TABLE;
//0x20 bytes (sizeof)
typedef struct _NOK_HANDLE_REVOCATION_INFO
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_POB_HANDLE_REVOCATION_BLOCK RevocationBlock;                    //0x10
    UCHAR AllowHandleRevocation;                                            //0x18
    UCHAR Padding1[3];                                                      //0x19
    UCHAR Padding2[4];                                                      //0x1c
}NOK_HANDLE_REVOCATION_INFO, * NOK_PHANDLE_REVOCATION_INFO;
//0xa0 bytes (sizeof)
typedef struct _NOK_HANDLE_TRACE_DB_ENTRY
{
    NOK_CLIENT_ID ClientId;                                             //0x0
    VOID* Handle;                                                           //0x10
    ULONG Type;                                                             //0x18
    VOID* StackTrace[16];                                                   //0x20
}NOK_HANDLE_TRACE_DB_ENTRY, * NOK_PHANDLE_TRACE_DB_ENTRY;
//0xf0 bytes (sizeof)
typedef struct _NOK_HANDLE_TRACE_DEBUG_INFO
{
    LONG RefCount;                                                          //0x0
    ULONG TableSize;                                                        //0x4
    ULONG BitMaskFlags;                                                     //0x8
    NOK_FAST_MUTEX CloseCompactionLock;                                 //0x10
    ULONG CurrentStackIndex;                                                //0x48
    NOK_HANDLE_TRACE_DB_ENTRY TraceDb[1];                               //0x50
}NOK_HANDLE_TRACE_DEBUG_INFO, * NOK_PHANDLE_TRACE_DEBUG_INFO;
//0x8 bytes (sizeof)
typedef struct _NOK_HARDWARE_PTE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Write:1;                                                      //0x0
    ULONGLONG Owner:1;                                                      //0x0
    ULONGLONG WriteThrough:1;                                               //0x0
    ULONGLONG CacheDisable:1;                                               //0x0
    ULONGLONG Accessed:1;                                                   //0x0
    ULONGLONG Dirty:1;                                                      //0x0
    ULONGLONG LargePage:1;                                                  //0x0
    ULONGLONG Global:1;                                                     //0x0
    ULONGLONG CopyOnWrite:1;                                                //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG reserved0:1;                                                  //0x0
    ULONGLONG PageFrameNumber:36;                                           //0x0
    ULONGLONG reserved1:4;                                                  //0x0
    ULONGLONG SoftwareWsIndex:11;                                           //0x0
    ULONGLONG NoExecute:1;                                                  //0x0
}NOK_HARDWARE_PTE, * NOK_PHARDWARE_PTE;
//0xd8 bytes (sizeof)
typedef struct _NOK_HALP_DMA_MASTER_ADAPTER_OBJECT
{
    NOK_HALP_DMA_ADAPTER_OBJECT AdapterObject;                          //0x0
    NOK_LIST_ENTRY ContiguousAdapterQueue;                              //0x98
    NOK_LIST_ENTRY ScatterAdapterQueue;                                 //0xa8
    ULONG MapBufferSize;                                                    //0xb8
    NOK_LARGE_INTEGER MapBufferPhysicalAddress;                          //0xc0
    ULONG ContiguousPageCount;                                              //0xc8
    ULONG ContiguousPageLimit;                                              //0xcc
    ULONG ScatterPageCount;                                                 //0xd0
    ULONG ScatterPageLimit;                                                 //0xd4
}NOK_HALP_DMA_MASTER_ADAPTER_OBJECT, * NOK_PHALP_DMA_MASTER_ADAPTER_OBJECT;
//0x1f0 bytes (sizeof)
typedef struct _NOK_HAL_INTEL_ENLIGHTENMENT_INFORMATION
{
    ULONG Enlightenments;                                                   //0x0
    ULONG HypervisorConnected;                                              //0x4
    VOID (*EndOfInterrupt)();                                               //0x8
    VOID (*ApicWriteIcr)(ULONG arg1, ULONG arg2);                           //0x10
    ULONG Reserved0;                                                        //0x18
    ULONG SpinCountMask;                                                    //0x1c
    VOID (*LongSpinWait)(ULONG arg1);                                       //0x20
    ULONGLONG (*GetReferenceTime)();                                        //0x28
    LONG (*SetSystemSleepProperty)(ULONG arg1, UCHAR arg2, UCHAR arg3);     //0x30
    LONG (*EnterSleepState)(ULONG arg1);                                    //0x38
    LONG (*NotifyDebugDeviceAvailable)();                                   //0x40
    LONG (*MapDeviceInterrupt)(ULONGLONG arg1, VOID* arg2, NOK_PGROUP_AFFINITY arg3, VOID* arg4); //0x48
    LONG (*UnmapDeviceInterrupt)(ULONGLONG arg1, VOID* arg2);               //0x50
    LONG (*RetargetDeviceInterrupt)(ULONGLONG arg1, VOID* arg2, VOID* arg3, NOK_PGROUP_AFFINITY arg4, VOID* arg5); //0x58
    LONG (*SetHpetConfig)(NOK_LARGE_INTEGER arg1, ULONG arg2, ULONGLONG arg3, UCHAR arg4, VOID* arg5); //0x60
    LONG (*NotifyHpetEnabled)();                                            //0x68
    LONG (*QueryAssociatedProcessors)(ULONG arg1, ULONG* arg2, ULONG* arg3); //0x70
    LONG (*ReadMultipleMsr)(ULONG arg1, ULONG arg2, ULONG* arg3, ULONGLONG* arg4); //0x78
    LONG (*WriteMultipleMsr)(ULONG arg1, ULONG arg2, ULONG* arg3, ULONGLONG* arg4); //0x80
    LONG (*ReadCpuid)(ULONG arg1, ULONG arg2, ULONG* arg3, ULONG* arg4, ULONG* arg5, ULONG* arg6); //0x88
    LONG (*LpWritebackInvalidate)(ULONG arg1);                              //0x90
    LONG (*GetMachineCheckContext)(ULONG arg1, ULONG* arg2, ULONGLONG* arg3, ULONG* arg4); //0x98
    LONG (*SuspendPartition)(ULONGLONG arg1);                               //0xa0
    LONG (*ResumePartition)(ULONGLONG arg1);                                //0xa8
    LONG (*SetSystemMachineCheckProperty)(VOID* arg1);                      //0xb0
    LONG (*WheaErrorNotification)(NOK_PWHEA_RECOVERY_CONTEXT arg1, UCHAR arg2, UCHAR arg3); //0xb8
    ULONG (*GetProcessorIndexFromVpIndex)(ULONG arg1);                      //0xc0
    LONG (*SyntheticClusterIpi)(NOK_PKAFFINITY_EX arg1, ULONG arg2);    //0xc8
    UCHAR (*VpStartEnabled)();                                              //0xd0
    LONG (*StartVirtualProcessor)(ULONG arg1, VOID* arg2);                  //0xd8
    LONG (*GetVpIndexFromApicId)(ULONG arg1, ULONG* arg2);                  //0xe0
    LONG (*IumAccessPciDevice)(UCHAR arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7, VOID* arg8); //0xe8
    ULONGLONG (*IumEfiRuntimeService)(ULONG arg1, VOID* arg2, ULONGLONG arg3, ULONGLONG* arg4); //0xf0
    VOID (*SvmGetSystemCapabilities)(NOK_PHAL_HV_SVM_SYSTEM_CAPABILITIES arg1); //0xf8
    LONG (*SvmGetDeviceCapabilities)(ULONG arg1, NOK_PHAL_HV_SVM_DEVICE_CAPABILITIES arg2); //0x100
    LONG (*SvmCreatePasidSpace)(ULONG arg1, ULONG arg2);                    //0x108
    LONG (*SvmSetPasidAddressSpace)(ULONG arg1, ULONG arg2, ULONGLONG arg3); //0x110
    VOID (*SvmFlushPasid)(ULONG arg1, ULONG arg2, ULONG arg3, NOK_PKTB_FLUSH_VA arg4); //0x118
    LONG (*SvmAttachPasidSpace)(ULONG arg1, ULONG arg2, ULONG arg3, ULONG arg4); //0x120
    LONG (*SvmDetachPasidSpace)(ULONG arg1);                                //0x128
    LONG (*SvmEnablePasid)(ULONG arg1, ULONG arg2);                         //0x130
    LONG (*SvmDisablePasid)(ULONG arg1, ULONG arg2);                        //0x138
    LONG (*SvmAcknowledgePageRequest)(ULONG arg1, VOID* arg2, ULONG* arg3); //0x140
    LONG (*SvmCreatePrQueue)(ULONG arg1, ULONG arg2, NOK_LARGE_INTEGER arg3, ULONG arg4, ULONG arg5); //0x148
    LONG (*SvmDeletePrQueue)(ULONG arg1);                                   //0x150
    LONG (*SvmClearPrqStalled)(ULONG arg1);                                 //0x158
    LONG (*SvmSetDeviceEnabled)(ULONG arg1, UCHAR arg2);                    //0x160
    LONG (*HvDebuggerPowerHandler)(UCHAR arg1);                             //0x168
    LONG (*SetQpcBias)(ULONGLONG arg1);                                     //0x170
    ULONGLONG (*GetQpcBias)();                                              //0x178
    LONG (*RegisterDeviceId)(NOK_PEXT_IOMMU_DEVICE_ID arg1, ULONGLONG arg2); //0x180
    LONG (*UnregisterDeviceId)(ULONGLONG arg1);                             //0x188
    LONG (*AllocateDeviceDomain)(NOK_PHAL_HV_DMA_DOMAIN_INFO arg1);     //0x190
    LONG (*AttachDeviceDomain)(NOK_PEXT_IOMMU_DEVICE_ID arg1, NOK_PHAL_HV_DMA_DOMAIN_INFO arg2); //0x198
    LONG (*DetachDeviceDomain)(ULONGLONG arg1);                             //0x1a0
    LONG (*DeleteDeviceDomain)(NOK_PHAL_HV_DMA_DOMAIN_INFO arg1);       //0x1a8
    LONG (*MapDeviceLogicalRange)(NOK_PHAL_HV_DMA_DOMAIN_INFO arg1, ULONG arg2, ULONGLONG arg3, ULONGLONG* arg4, ULONGLONG* arg5, UCHAR arg6); //0x1b0
    LONG (*UnmapDeviceLogicalRange)(NOK_PHAL_HV_DMA_DOMAIN_INFO arg1, ULONGLONG arg2, ULONGLONG* arg3); //0x1b8
    LONG (*MapDeviceSparsePages)(NOK_PHAL_HV_DMA_DOMAIN_INFO arg1, ULONG arg2, ULONGLONG* arg3, ULONGLONG* arg4); //0x1c0
    LONG (*UnmapDeviceSparsePages)(NOK_PHAL_HV_DMA_DOMAIN_INFO arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x1c8
    LONG (*GetDmaGuardEnabled)(UCHAR* arg1);                                //0x1d0
    LONG (*UpdateMicrocode)(VOID* arg1, ULONG arg2);                        //0x1d8
    LONG (*GetSintMessage)(UCHAR arg1, VOID** arg2);                        //0x1e0
    LONG (*SetRootFaultReportingReady)();                                   //0x1e8
}NOK_HAL_INTEL_ENLIGHTENMENT_INFORMATION, * NOK_PHAL_INTEL_ENLIGHTENMENT_INFORMATION;
//0x8 bytes (sizeof)
typedef struct _NOK_HCELL
{
    LONG Size;                                                              //0x0
    union
    {
        struct
        {
            union
            {
                ULONG UserData;                                             //0x4
                ULONG Next;                                                 //0x4
            } u;                                                            //0x4
        } NewCell;                                                          //0x4
    } u;                                                                    //0x4
}NOK_HCELL, * NOK_PHCELL;
//0x40 bytes (sizeof)
typedef struct _NOK_HEADLESS_LOADER_BLOCK
{
    UCHAR UsedBiosSettings;                                                 //0x0
    UCHAR DataBits;                                                         //0x1
    UCHAR StopBits;                                                         //0x2
    UCHAR Parity;                                                           //0x3
    ULONG BaudRate;                                                         //0x4
    ULONG PortNumber;                                                       //0x8
    UCHAR* PortAddress;                                                     //0x10
    USHORT PciDeviceId;                                                     //0x18
    USHORT PciVendorId;                                                     //0x1a
    UCHAR PciBusNumber;                                                     //0x1c
    USHORT PciBusSegment;                                                   //0x1e
    UCHAR PciSlotNumber;                                                    //0x20
    UCHAR PciFunctionNumber;                                                //0x21
    ULONG PciFlags;                                                         //0x24
    NOK_GUID SystemGUID;                                                //0x28
    UCHAR IsMMIODevice;                                                     //0x38
    UCHAR TerminalType;                                                     //0x39
    UCHAR InterfaceType;                                                    //0x3a
    UCHAR RegisterBitWidth;                                                 //0x3b
    UCHAR RegisterAccessSize;                                               //0x3c
}NOK_HEADLESS_LOADER_BLOCK, * NOK_PHEADLESS_LOADER_BLOCK;
//0x20 bytes (sizeof)
typedef struct _NOK_RTL_HEAP_MEMORY_LIMIT_DATA
{
    ULONGLONG CommitLimitBytes;                                             //0x0
    ULONGLONG CommitLimitFailureCode;                                       //0x8
    ULONGLONG MaxAllocationSizeBytes;                                       //0x10
    ULONGLONG AllocationLimitFailureCode;                                   //0x18
}NOK_RTL_HEAP_MEMORY_LIMIT_DATA, * NOK_PRTL_HEAP_MEMORY_LIMIT_DATA;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_UNPACKED_ENTRY
{
    VOID* PreviousBlockPrivateData;                                         //0x0
    union
    {
        struct
        {
            USHORT Size;                                                    //0x8
            UCHAR Flags;                                                    //0xa
            UCHAR SmallTagIndex;                                            //0xb
        };
        struct
        {
            ULONG SubSegmentCode;                                           //0x8
            USHORT PreviousSize;                                            //0xc
            union
            {
                UCHAR SegmentOffset;                                        //0xe
                UCHAR LFHFlags;                                             //0xe
            };
            UCHAR UnusedBytes;                                              //0xf
        };
        ULONGLONG CompactHeader;                                            //0x8
    };
}NOK_HEAP_UNPACKED_ENTRY, * NOK_PHEAP_UNPACKED_ENTRY;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_EXTENDED_ENTRY
{
    VOID* Reserved;                                                         //0x0
    union
    {
        struct
        {
            USHORT FunctionIndex;                                           //0x8
            USHORT ContextValue;                                            //0xa
        };
        ULONG InterceptorValue;                                             //0x8
    };
    USHORT UnusedBytesLength;                                               //0xc
    UCHAR EntryOffset;                                                      //0xe
    UCHAR ExtendedBlockSignature;                                           //0xf
}NOK_HEAP_EXTENDED_ENTRY, * NOK_PHEAP_EXTENDED_ENTRY;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_ENTRY
{
    union
    {
        NOK_HEAP_UNPACKED_ENTRY UnpackedEntry;                          //0x0
        struct
        {
            VOID* PreviousBlockPrivateData;                                 //0x0
            union
            {
                struct
                {
                    USHORT Size;                                            //0x8
                    UCHAR Flags;                                            //0xa
                    UCHAR SmallTagIndex;                                    //0xb
                };
                struct
                {
                    ULONG SubSegmentCode;                                   //0x8
                    USHORT PreviousSize;                                    //0xc
                    union
                    {
                        UCHAR SegmentOffset;                                //0xe
                        UCHAR LFHFlags;                                     //0xe
                    };
                    UCHAR UnusedBytes;                                      //0xf
                };
                ULONGLONG CompactHeader;                                    //0x8
            };
        };
        NOK_HEAP_EXTENDED_ENTRY ExtendedEntry;                          //0x0
        struct
        {
            VOID* Reserved;                                                 //0x0
            union
            {
                struct
                {
                    USHORT FunctionIndex;                                   //0x8
                    USHORT ContextValue;                                    //0xa
                };
                ULONG InterceptorValue;                                     //0x8
            };
            USHORT UnusedBytesLength;                                       //0xc
            UCHAR EntryOffset;                                              //0xe
            UCHAR ExtendedBlockSignature;                                   //0xf
        };
        struct
        {
            VOID* ReservedForAlignment;                                     //0x0
            union
            {
                struct
                {
                    ULONG Code1;                                            //0x8
                    union
                    {
                        struct
                        {
                            USHORT Code2;                                   //0xc
                            UCHAR Code3;                                    //0xe
                            UCHAR Code4;                                    //0xf
                        };
                        ULONG Code234;                                      //0xc
                    };
                };
                ULONGLONG AgregateCode;                                     //0x8
            };
        };
    };
}NOK_HEAP_ENTRY, * NOK_PHEAP_ENTRY;
//0x70 bytes (sizeof)
typedef struct _NOK_HEAP_SEGMENT
{
    NOK_HEAP_ENTRY Entry;                                               //0x0
    ULONG SegmentSignature;                                                 //0x10
    ULONG SegmentFlags;                                                     //0x14
    NOK_LIST_ENTRY SegmentListEntry;                                    //0x18
    NOK_PHEAP Heap;                                                     //0x28
    VOID* BaseAddress;                                                      //0x30
    ULONG NumberOfPages;                                                    //0x38
    NOK_HEAP_ENTRY* FirstEntry;                                         //0x40
    NOK_HEAP_ENTRY* LastValidEntry;                                     //0x48
    ULONG NumberOfUnCommittedPages;                                         //0x50
    ULONG NumberOfUnCommittedRanges;                                        //0x54
    USHORT SegmentAllocatorBackTraceIndex;                                  //0x58
    USHORT Reserved;                                                        //0x5a
    NOK_LIST_ENTRY UCRSegmentList;                                      //0x60
}NOK_HEAP_SEGMENT, * NOK_PHEAP_SEGMENT;
//0x78 bytes (sizeof)
typedef struct _NOK_HEAP_COUNTERS
{
    ULONGLONG TotalMemoryReserved;                                          //0x0
    ULONGLONG TotalMemoryCommitted;                                         //0x8
    ULONGLONG TotalMemoryLargeUCR;                                          //0x10
    ULONGLONG TotalSizeInVirtualBlocks;                                     //0x18
    ULONG TotalSegments;                                                    //0x20
    ULONG TotalUCRs;                                                        //0x24
    ULONG CommittOps;                                                       //0x28
    ULONG DeCommitOps;                                                      //0x2c
    ULONG LockAcquires;                                                     //0x30
    ULONG LockCollisions;                                                   //0x34
    ULONG CommitRate;                                                       //0x38
    ULONG DecommittRate;                                                    //0x3c
    ULONG CommitFailures;                                                   //0x40
    ULONG InBlockCommitFailures;                                            //0x44
    ULONG PollIntervalCounter;                                              //0x48
    ULONG DecommitsSinceLastCheck;                                          //0x4c
    ULONG HeapPollInterval;                                                 //0x50
    ULONG AllocAndFreeOps;                                                  //0x54
    ULONG AllocationIndicesActive;                                          //0x58
    ULONG InBlockDeccommits;                                                //0x5c
    ULONGLONG InBlockDeccomitSize;                                          //0x60
    ULONGLONG HighWatermarkSize;                                            //0x68
    ULONGLONG LastPolledSize;                                               //0x70
}NOK_HEAP_COUNTERS, * NOK_PHEAP_COUNTERS;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_TUNING_PARAMETERS
{
    ULONG CommittThresholdShift;                                            //0x0
    ULONGLONG MaxPreCommittThreshold;                                       //0x8
}NOK_HEAP_TUNING_PARAMETERS, * NOK_PHEAP_TUNING_PARAMETERS;
//0x2c0 bytes (sizeof)
typedef struct _NOK_HEAP
{
    union
    {
        NOK_HEAP_SEGMENT Segment;                                       //0x0
        struct
        {
            NOK_HEAP_ENTRY Entry;                                       //0x0
            ULONG SegmentSignature;                                         //0x10
            ULONG SegmentFlags;                                             //0x14
            NOK_LIST_ENTRY SegmentListEntry;                            //0x18
            NOK_PHEAP Heap;                                             //0x28
            VOID* BaseAddress;                                              //0x30
            ULONG NumberOfPages;                                            //0x38
            NOK_HEAP_ENTRY* FirstEntry;                                 //0x40
            NOK_HEAP_ENTRY* LastValidEntry;                             //0x48
            ULONG NumberOfUnCommittedPages;                                 //0x50
            ULONG NumberOfUnCommittedRanges;                                //0x54
            USHORT SegmentAllocatorBackTraceIndex;                          //0x58
            USHORT Reserved;                                                //0x5a
            NOK_LIST_ENTRY UCRSegmentList;                              //0x60
        };
    };
    ULONG Flags;                                                            //0x70
    ULONG ForceFlags;                                                       //0x74
    ULONG CompatibilityFlags;                                               //0x78
    ULONG EncodeFlagMask;                                                   //0x7c
    NOK_HEAP_ENTRY Encoding;                                            //0x80
    ULONG Interceptor;                                                      //0x90
    ULONG VirtualMemoryThreshold;                                           //0x94
    ULONG Signature;                                                        //0x98
    ULONGLONG SegmentReserve;                                               //0xa0
    ULONGLONG SegmentCommit;                                                //0xa8
    ULONGLONG DeCommitFreeBlockThreshold;                                   //0xb0
    ULONGLONG DeCommitTotalFreeThreshold;                                   //0xb8
    ULONGLONG TotalFreeSize;                                                //0xc0
    ULONGLONG MaximumAllocationSize;                                        //0xc8
    USHORT ProcessHeapsListIndex;                                           //0xd0
    USHORT HeaderValidateLength;                                            //0xd2
    VOID* HeaderValidateCopy;                                               //0xd8
    USHORT NextAvailableTagIndex;                                           //0xe0
    USHORT MaximumTagIndex;                                                 //0xe2
    NOK_HEAP_TAG_ENTRY* TagEntries;                                     //0xe8
    NOK_LIST_ENTRY UCRList;                                             //0xf0
    ULONGLONG AlignRound;                                                   //0x100
    ULONGLONG AlignMask;                                                    //0x108
    NOK_LIST_ENTRY VirtualAllocdBlocks;                                 //0x110
    NOK_LIST_ENTRY SegmentList;                                         //0x120
    USHORT AllocatorBackTraceIndex;                                         //0x130
    ULONG NonDedicatedListLength;                                           //0x134
    VOID* BlocksIndex;                                                      //0x138
    VOID* UCRIndex;                                                         //0x140
    NOK_HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;                        //0x148
    NOK_LIST_ENTRY FreeLists;                                           //0x150
    NOK_HEAP_LOCK* LockVariable;                                        //0x160
    LONG (*CommitRoutine)(VOID* arg1, VOID** arg2, ULONGLONG* arg3);        //0x168
    NOK_RTL_RUN_ONCE StackTraceInitVar;                                  //0x170
    NOK_RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;                     //0x178
    VOID* FrontEndHeap;                                                     //0x198
    USHORT FrontHeapLockCount;                                              //0x1a0
    UCHAR FrontEndHeapType;                                                 //0x1a2
    UCHAR RequestedFrontEndHeapType;                                        //0x1a3
    WCHAR* FrontEndHeapUsageData;                                           //0x1a8
    USHORT FrontEndHeapMaximumIndex;                                        //0x1b0
    volatile UCHAR FrontEndHeapStatusBitmap[129];                           //0x1b2
    NOK_HEAP_COUNTERS Counters;                                         //0x238
    NOK_HEAP_TUNING_PARAMETERS TuningParameters;                        //0x2b0
}NOK_HEAP, * NOK_PHEAP;
//0x28 bytes (sizeof)
typedef struct _NOK_RTL_CRITICAL_SECTION
{
    NOK_RTL_CRITICAL_SECTION_DEBUG* DebugInfo;                          //0x0
    LONG LockCount;                                                         //0x8
    LONG RecursionCount;                                                    //0xc
    VOID* OwningThread;                                                     //0x10
    VOID* LockSemaphore;                                                    //0x18
    ULONGLONG SpinCount;                                                    //0x20
}NOK_RTL_CRITICAL_SECTION, * NOK_PRTL_CRITICAL_SECTION;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_PSEUDO_TAG_ENTRY
{
    ULONG Allocs;                                                           //0x0
    ULONG Frees;                                                            //0x4
    ULONGLONG Size;                                                         //0x8
}NOK_HEAP_PSEUDO_TAG_ENTRY, * NOK_PHEAP_PSEUDO_TAG_ENTRY;
//0x48 bytes (sizeof)
typedef struct _NOK_HEAP_TAG_ENTRY
{
    ULONG Allocs;                                                           //0x0
    ULONG Frees;                                                            //0x4
    ULONGLONG Size;                                                         //0x8
    USHORT TagIndex;                                                        //0x10
    USHORT CreatorBackTraceIndex;                                           //0x12
    WCHAR TagName[24];                                                      //0x14
}NOK_HEAP_TAG_ENTRY, * NOK_PHEAP_TAG_ENTRY;
//0x20 bytes (sizeof)
typedef struct _NOK_ETW_PROVIDER_TRAITS
{
    NOK_RTL_BALANCED_NODE Node;                                         //0x0
    ULONG ReferenceCount;                                                   //0x18
    UCHAR Traits[1];                                                        //0x1c
}NOK_ETW_PROVIDER_TRAITS, * NOK_PETW_PROVIDER_TRAITS;
//0x68 bytes (sizeof)
typedef struct _NOK_ERESOURCE
{
    NOK_LIST_ENTRY SystemResourcesList;                                 //0x0
    NOK_POWNER_ENTRY OwnerTable;                                        //0x10
    SHORT ActiveCount;                                                      //0x18
    union
    {
        USHORT Flag;                                                        //0x1a
        struct
        {
            UCHAR ReservedLowFlags;                                         //0x1a
            UCHAR WaiterPriority;                                           //0x1b
        };
    };
    VOID* SharedWaiters;                                                    //0x20
    VOID* ExclusiveWaiters;                                                 //0x28
    NOK_OWNER_ENTRY OwnerEntry;                                         //0x30
    ULONG ActiveEntries;                                                    //0x40
    ULONG ContentionCount;                                                  //0x44
    ULONG NumberOfSharedWaiters;                                            //0x48
    ULONG NumberOfExclusiveWaiters;                                         //0x4c
    VOID* Reserved2;                                                        //0x50
    union
    {
        VOID* Address;                                                      //0x58
        ULONGLONG CreatorBackTraceIndex;                                    //0x58
    };
    ULONGLONG SpinLock;                                                     //0x60
}NOK_ERESOURCE, * NOK_PERESOURCE;
//0x30 bytes (sizeof)
typedef struct _NOK_RTL_CRITICAL_SECTION_DEBUG
{
    USHORT Type;                                                            //0x0
    USHORT CreatorBackTraceIndex;                                           //0x2
    NOK_PRTL_CRITICAL_SECTION CriticalSection;                          //0x8
    NOK_LIST_ENTRY ProcessLocksList;                                    //0x10
    ULONG EntryCount;                                                       //0x20
    ULONG ContentionCount;                                                  //0x24
    ULONG Flags;                                                            //0x28
    USHORT CreatorBackTraceIndexHigh;                                       //0x2c
    USHORT SpareUSHORT;                                                     //0x2e
}NOK_RTL_CRITICAL_SECTION_DEBUG, * NOK_PRTL_CRITICAL_SECTION_DEBUG;
//0x8 bytes (sizeof)
typedef struct _NOK_HANDLE_TABLE_ENTRY_INFO
{
    ULONG AuditMask;                                                        //0x0
    ULONG MaxRelativeAccessMask;                                            //0x4
}NOK_HANDLE_TABLE_ENTRY_INFO, * NOK_PHANDLE_TABLE_ENTRY_INFO;
//0x68 bytes (sizeof)
typedef struct _NOK_HEAP_LOCK
{
    union
    {
        NOK_RTL_CRITICAL_SECTION CriticalSection;                       //0x0
        NOK_ERESOURCE Resource;                                         //0x0
    } Lock;                                                                 //0x0
}NOK_HEAP_LOCK, * NOK_PHEAP_LOCK;
//0x4 bytes (sizeof)
typedef struct _NOK_HEAP_DESCRIPTOR_KEY
{
    union
    {
        ULONG Key;                                                          //0x0
        struct
        {
            ULONG EncodedCommittedPageCount:16;                             //0x0
            ULONG LargePageCost:8;                                          //0x0
            ULONG UnitCount:8;                                              //0x0
        };
    };
}NOK_HEAP_DESCRIPTOR_KEY, * NOK_PHEAP_DESCRIPTOR_KEY;
//0x4 bytes (sizeof)
typedef enum _NOK_HEAP_FAILURE_TYPE
{
    NOK_heap_failure_internal = 0,
    NOK_heap_failure_unknown = 1,
    NOK_heap_failure_generic = 2,
    NOK_heap_failure_entry_corruption = 3,
    NOK_heap_failure_multiple_entries_corruption = 4,
    NOK_heap_failure_virtual_block_corruption = 5,
    NOK_heap_failure_buffer_overrun = 6,
    NOK_heap_failure_buffer_underrun = 7,
    NOK_heap_failure_block_not_busy = 8,
    NOK_heap_failure_invalid_argument = 9,
    NOK_heap_failure_invalid_allocation_type = 10,
    NOK_heap_failure_usage_after_free = 11,
    NOK_heap_failure_cross_heap_operation = 12,
    NOK_heap_failure_freelists_corruption = 13,
    NOK_heap_failure_listentry_corruption = 14,
    NOK_heap_failure_lfh_bitmap_mismatch = 15,
    NOK_heap_failure_segment_lfh_bitmap_corruption = 16,
    NOK_heap_failure_segment_lfh_double_free = 17,
    NOK_heap_failure_vs_subsegment_corruption = 18,
    NOK_heap_failure_null_heap = 19,
    NOK_heap_failure_allocation_limit = 20,
    NOK_heap_failure_commit_limit = 21,
    NOK_heap_failure_invalid_va_mgr_query = 22
}NOK_HEAP_FAILURE_TYPE, * NOK_PHEAP_FAILURE_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_ENTRY_EXTRA
{
    union
    {
        struct
        {
            USHORT AllocatorBackTraceIndex;                                 //0x0
            USHORT TagIndex;                                                //0x2
            ULONGLONG Settable;                                             //0x8
        };
        struct
        {
            ULONGLONG ZeroInit;                                             //0x0
            ULONGLONG ZeroInit1;                                            //0x8
        };
    };
}NOK_HEAP_ENTRY_EXTRA, * NOK_PHEAP_ENTRY_EXTRA;
//0x20 bytes (sizeof)
typedef struct _NOK_HEAP_FREE_ENTRY
{
    union
    {
        NOK_HEAP_ENTRY HeapEntry;                                       //0x0
        NOK_HEAP_UNPACKED_ENTRY UnpackedEntry;                          //0x0
        struct
        {
            VOID* PreviousBlockPrivateData;                                 //0x0
            union
            {
                struct
                {
                    USHORT Size;                                            //0x8
                    UCHAR Flags;                                            //0xa
                    UCHAR SmallTagIndex;                                    //0xb
                };
                struct
                {
                    ULONG SubSegmentCode;                                   //0x8
                    USHORT PreviousSize;                                    //0xc
                    union
                    {
                        UCHAR SegmentOffset;                                //0xe
                        UCHAR LFHFlags;                                     //0xe
                    };
                    UCHAR UnusedBytes;                                      //0xf
                };
                ULONGLONG CompactHeader;                                    //0x8
            };
        };
        NOK_HEAP_EXTENDED_ENTRY ExtendedEntry;                          //0x0
        struct
        {
            VOID* Reserved;                                                 //0x0
            union
            {
                struct
                {
                    USHORT FunctionIndex;                                   //0x8
                    USHORT ContextValue;                                    //0xa
                };
                ULONG InterceptorValue;                                     //0x8
            };
            USHORT UnusedBytesLength;                                       //0xc
            UCHAR EntryOffset;                                              //0xe
            UCHAR ExtendedBlockSignature;                                   //0xf
        };
        struct
        {
            VOID* ReservedForAlignment;                                     //0x0
            union
            {
                struct
                {
                    ULONG Code1;                                            //0x8
                    union
                    {
                        struct
                        {
                            USHORT Code2;                                   //0xc
                            UCHAR Code3;                                    //0xe
                            UCHAR Code4;                                    //0xf
                        };
                        ULONG Code234;                                      //0xc
                    };
                };
                ULONGLONG AgregateCode;                                     //0x8
            };
        };
    };
    NOK_LIST_ENTRY FreeList;                                            //0x10
}NOK_HEAP_FREE_ENTRY, * NOK_PHEAP_FREE_ENTRY;
//0x4 bytes (sizeof)
typedef struct _NOK_HEAP_GLOBAL_APPCOMPAT_FLAGS
{
    ULONG SafeInputValidation:1;                                            //0x0
    ULONG Padding:1;                                                        //0x0
    ULONG CommitLFHSubsegments:1;                                           //0x0
    ULONG AllocateHeapFromEnv:1;                                            //0x0
}NOK_HEAP_GLOBAL_APPCOMPAT_FLAGS, * NOK_PHEAP_GLOBAL_APPCOMPAT_FLAGS;
//0x8 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_FAST_REF
{
    union
    {
        VOID* Target;                                                       //0x0
        ULONGLONG Value;                                                    //0x0
        ULONGLONG RefCount:12;                                              //0x0
    };
}NOK_HEAP_LFH_FAST_REF, * NOK_PHEAP_LFH_FAST_REF;
//0x8 bytes (sizeof)
typedef union _NOK_HEAP_LFH_SUBSEGMENT_DELAY_FREE
{
    ULONGLONG DelayFree:1;                                                  //0x0
    ULONGLONG Count:63;                                                     //0x0
    VOID* AllBits;                                                          //0x0
}NOK_HEAP_LFH_SUBSEGMENT_DELAY_FREE, * NOK_PHEAP_LFH_SUBSEGMENT_DELAY_FREE;
//0x4 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
{
    union
    {
        struct
        {
            USHORT BlockSize;                                               //0x0
            USHORT FirstBlockOffset;                                        //0x2
        };
        ULONG EncodedData;                                                  //0x0
    };
}NOK_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS, * NOK_PHEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;
//0x38 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_SUBSEGMENT
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    union
    {
        NOK_HEAP_LFH_SUBSEGMENT_OWNER* Owner;                           //0x10
        NOK_HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree;                    //0x10
    };
    ULONGLONG CommitLock;                                                   //0x18
    union
    {
        struct
        {
            USHORT FreeCount;                                               //0x20
            USHORT BlockCount;                                              //0x22
        };
        volatile SHORT InterlockedShort;                                    //0x20
        volatile LONG InterlockedLong;                                      //0x20
    };
    USHORT FreeHint;                                                        //0x24
    UCHAR Location;                                                         //0x26
    UCHAR WitheldBlockCount;                                                //0x27
    NOK_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets;               //0x28
    UCHAR CommitUnitShift;                                                  //0x2c
    UCHAR CommitUnitCount;                                                  //0x2d
    USHORT CommitStateOffset;                                               //0x2e
    ULONGLONG BlockBitmap[1];                                               //0x30
}NOK_HEAP_LFH_SUBSEGMENT, * NOK_PHEAP_LFH_SUBSEGMENT;
//0x38 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_SUBSEGMENT_OWNER
{
    UCHAR IsBucket:1;                                                       //0x0
    UCHAR Spare0:7;                                                         //0x0
    UCHAR BucketIndex;                                                      //0x1
    union
    {
        UCHAR SlotCount;                                                    //0x2
        UCHAR SlotIndex;                                                    //0x2
    };
    UCHAR Spare1;                                                           //0x3
    ULONGLONG AvailableSubsegmentCount;                                     //0x8
    ULONGLONG Lock;                                                         //0x10
    NOK_LIST_ENTRY AvailableSubsegmentList;                             //0x18
    NOK_LIST_ENTRY FullSubsegmentList;                                  //0x28
}NOK_HEAP_LFH_SUBSEGMENT_OWNER, * NOK_PHEAP_LFH_SUBSEGMENT_OWNER;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_HP_SEG_ALLOC_POLICY
{
    ULONGLONG MinLargePages;                                                //0x0
    ULONGLONG MaxLargePages;                                                //0x8
    UCHAR MinUtilization;                                                   //0x10
}NOK_RTL_HP_SEG_ALLOC_POLICY, * NOK_PRTL_HP_SEG_ALLOC_POLICY;
//0x2 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_SUBSEGMENT_STAT
{
    UCHAR Index;                                                            //0x0
    UCHAR Count;                                                            //0x1
}NOK_HEAP_LFH_SUBSEGMENT_STAT, * NOK_PHEAP_LFH_SUBSEGMENT_STAT;
//0x28 bytes (sizeof)
typedef struct _NOK_HEAP_SUBALLOCATOR_CALLBACKS
{
    ULONGLONG Allocate;                                                     //0x0
    ULONGLONG Free;                                                         //0x8
    ULONGLONG Commit;                                                       //0x10
    ULONGLONG Decommit;                                                     //0x18
    ULONGLONG ExtendContext;                                                //0x20
}NOK_HEAP_SUBALLOCATOR_CALLBACKS, * NOK_PHEAP_SUBALLOCATOR_CALLBACKS;
//0x2 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_UNUSED_BYTES_INFO
{
    union
    {
        struct
        {
            USHORT UnusedBytes:14;                                          //0x0
            USHORT ExtraPresent:1;                                          //0x0
            USHORT OneByteUnused:1;                                         //0x0
        };
        UCHAR Bytes[2];                                                     //0x0
    };
}NOK_HEAP_LFH_UNUSED_BYTES_INFO, * NOK_PHEAP_LFH_UNUSED_BYTES_INFO;
//0x4 bytes (sizeof)
typedef struct _NOK_RTL_HP_LFH_CONFIG
{
    USHORT MaxBlockSize;                                                    //0x0
    USHORT WitholdPageCrossingBlocks:1;                                     //0x2
    USHORT DisableRandomization:1;                                          //0x2
}NOK_RTL_HP_LFH_CONFIG, * NOK_PRTL_HP_LFH_CONFIG;
//0x38 bytes (sizeof)
typedef struct _NOK_HEAP_LIST_LOOKUP
{
    NOK_HEAP_LIST_LOOKUP* ExtendedLookup;                               //0x0
    ULONG ArraySize;                                                        //0x8
    ULONG ExtraItem;                                                        //0xc
    ULONG ItemCount;                                                        //0x10
    ULONG OutOfRangeItems;                                                  //0x14
    ULONG BaseIndex;                                                        //0x18
    NOK_PLIST_ENTRY ListHead;                                           //0x20
    ULONG* ListsInUseUlong;                                                 //0x28
    NOK_PLIST_ENTRY* ListHints;                                         //0x30
}NOK_HEAP_LIST_LOOKUP, * NOK_PHEAP_LIST_LOOKUP;
//0x4 bytes (sizeof)
typedef enum _NOK_EXT_IOMMU_TRANSLATION_TYPE
{
    NOK_ExtTranslationTypePassThrough = 0,
    NOK_ExtTranslationTypeBlocked = 1,
    NOK_ExtTranslationTypeTranslate = 2,
    NOK_ExtTranslationTypeSafePassThrough = 3,
    NOK_ExtTranslationTypeInvalid = 4
}NOK_EXT_IOMMU_TRANSLATION_TYPE, * NOK_PEXT_IOMMU_TRANSLATION_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
{
    volatile ULONGLONG SmallPagesInUseWithinLarge;                          //0x0
    volatile ULONGLONG OpportunisticLargePageCount;                         //0x8
}NOK_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS, * NOK_PHEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;
//0x28 bytes (sizeof)
typedef struct _NOK_HEAP_LARGE_ALLOC_DATA
{
    NOK_RTL_BALANCED_NODE TreeNode;                                     //0x0
    union
    {
        ULONGLONG VirtualAddress;                                           //0x18
        ULONGLONG UnusedBytes:16;                                           //0x18
    };
    ULONGLONG ExtraPresent:1;                                               //0x20
    ULONGLONG GuardPageCount:1;                                             //0x20
    ULONGLONG GuardPageAlignment:6;                                         //0x20
    ULONGLONG Spare:4;                                                      //0x20
    ULONGLONG AllocatedPages:52;                                            //0x20
}NOK_HEAP_LARGE_ALLOC_DATA, * NOK_PHEAP_LARGE_ALLOC_DATA;
//0x40 bytes (sizeof)
typedef struct _NOK_RTL_CSPARSE_BITMAP
{
    ULONGLONG* CommitBitmap;                                                //0x0
    ULONGLONG* UserBitmap;                                                  //0x8
    ULONGLONG BitCount;                                                     //0x10
    ULONGLONG BitmapLock;                                                   //0x18
    ULONGLONG DecommitPageIndex;                                            //0x20
    ULONGLONG RtlpCSparseBitmapWakeLock;                                    //0x28
    UCHAR LockType;                                                         //0x30
    UCHAR AddressSpace;                                                     //0x31
    UCHAR MemType;                                                          //0x32
    UCHAR AllocAlignment;                                                   //0x33
    ULONG CommitDirectoryMaxSize;                                           //0x34
    ULONGLONG CommitDirectory[1];                                           //0x38
}NOK_RTL_CSPARSE_BITMAP, * NOK_PRTL_CSPARSE_BITMAP;
//0x80 bytes (sizeof)
typedef struct _NOK_ETW_STACK_TRACE_BLOCK
{
    NOK_LARGE_INTEGER RelatedTimestamp;                                  //0x0
    NOK_PETHREAD Thread;                                                //0x8
    NOK_KDPC StackWalkDpc;                                              //0x10
    NOK_SLIST_HEADER ApcListHead;                                        //0x50
    NOK_PETW_APC_ENTRY ApcEntry;                                        //0x60
    ULONG ApcEntryCount;                                                    //0x68
    LONG Flags;                                                             //0x6c
    LONG ApcCount;                                                          //0x70
    LONG MaxApcCount;                                                       //0x74
}NOK_ETW_STACK_TRACE_BLOCK, * NOK_PETW_STACK_TRACE_BLOCK;
//0x40 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_AFFINITY_SLOT
{
    NOK_HEAP_LFH_SUBSEGMENT_OWNER State;                                //0x0
    NOK_HEAP_LFH_FAST_REF ActiveSubsegment;                             //0x38
}NOK_HEAP_LFH_AFFINITY_SLOT, * NOK_PHEAP_LFH_AFFINITY_SLOT;
//0x4 bytes (sizeof)
typedef struct _NOK_HEAP_STOP_ON_TAG
{
    union
    {
        ULONG HeapAndTagIndex;                                              //0x0
        struct
        {
            USHORT TagIndex;                                                //0x0
            USHORT HeapIndex;                                               //0x2
        };
    };
}NOK_HEAP_STOP_ON_TAG, * NOK_PHEAP_STOP_ON_TAG;
//0x50 bytes (sizeof)
typedef struct _NOK_RTL_SPARSE_ARRAY
{
    ULONGLONG ElementCount;                                                 //0x0
    ULONG ElementSizeShift;                                                 //0x8
    NOK_RTL_CSPARSE_BITMAP Bitmap;                                      //0x10
}NOK_RTL_SPARSE_ARRAY, * NOK_PRTL_SPARSE_ARRAY;
//0x30 bytes (sizeof)
typedef struct _NOK_HEAP_STOP_ON_VALUES
{
    ULONGLONG AllocAddress;                                                 //0x0
    NOK_HEAP_STOP_ON_TAG AllocTag;                                      //0x8
    ULONGLONG ReAllocAddress;                                               //0x10
    NOK_HEAP_STOP_ON_TAG ReAllocTag;                                    //0x18
    ULONGLONG FreeAddress;                                                  //0x20
    NOK_HEAP_STOP_ON_TAG FreeTag;                                       //0x28
}NOK_HEAP_STOP_ON_VALUES, * NOK_PHEAP_STOP_ON_VALUES;
//0x30 bytes (sizeof)
typedef struct _NOK_HEAP_UCR_DESCRIPTOR
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_LIST_ENTRY SegmentEntry;                                        //0x10
    VOID* Address;                                                          //0x20
    ULONGLONG Size;                                                         //0x28
}NOK_HEAP_UCR_DESCRIPTOR, * NOK_PHEAP_UCR_DESCRIPTOR;
//0x80 bytes (sizeof)
typedef struct _NOK_GENERAL_LOOKASIDE
{
    union
    {
        NOK_SLIST_HEADER ListHead;                                       //0x0
        NOK_SINGLE_LIST_ENTRY SingleListHead;                           //0x0
    };
    USHORT Depth;                                                           //0x10
    USHORT MaximumDepth;                                                    //0x12
    ULONG TotalAllocates;                                                   //0x14
    union
    {
        ULONG AllocateMisses;                                               //0x18
        ULONG AllocateHits;                                                 //0x18
    };
    ULONG TotalFrees;                                                       //0x1c
    union
    {
        ULONG FreeMisses;                                                   //0x20
        ULONG FreeHits;                                                     //0x20
    };
    NOK_POOL_TYPE Type;                                                   //0x24
    ULONG Tag;                                                              //0x28
    ULONG Size;                                                             //0x2c
    union
    {
        VOID* (*AllocateEx)(NOK_POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3, NOK_PLOOKASIDE_LIST_EX arg4); //0x30
        VOID* (*Allocate)(NOK_POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3); //0x30
    };
    union
    {
        VOID (*FreeEx)(VOID* arg1, NOK_PLOOKASIDE_LIST_EX arg2);        //0x38
        VOID (*Free)(VOID* arg1);                                           //0x38
    };
    NOK_LIST_ENTRY ListEntry;                                           //0x40
    ULONG LastTotalAllocates;                                               //0x50
    union
    {
        ULONG LastAllocateMisses;                                           //0x54
        ULONG LastAllocateHits;                                             //0x54
    };
    ULONG Future[2];                                                        //0x58
}NOK_GENERAL_LOOKASIDE, * NOK_PGENERAL_LOOKASIDE;
//0x20 bytes (sizeof)
typedef struct _NOK_HEAP_PAGE_RANGE_DESCRIPTOR
{
    union
    {
        NOK_RTL_BALANCED_NODE TreeNode;                                 //0x0
        struct
        {
            ULONG TreeSignature;                                            //0x0
            ULONG UnusedBytes;                                              //0x4
            USHORT ExtraPresent:1;                                          //0x8
            USHORT Spare0:15;                                               //0x8
        };
    };
    volatile UCHAR RangeFlags;                                              //0x18
    UCHAR CommittedPageCount;                                               //0x19
    USHORT Spare;                                                           //0x1a
    union
    {
        NOK_HEAP_DESCRIPTOR_KEY Key;                                    //0x1c
        struct
        {
            UCHAR Align[3];                                                 //0x1c
            union
            {
                UCHAR UnitOffset;                                           //0x1f
                UCHAR UnitSize;                                             //0x1f
            };
        };
    };
}NOK_HEAP_PAGE_RANGE_DESCRIPTOR, * NOK_PHEAP_PAGE_RANGE_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef struct _NOK_RTL_HP_VS_CONFIG
{
    struct
    {
        ULONG PageAlignLargeAllocs:1;                                       //0x0
        ULONG FullDecommit:1;                                               //0x0
        ULONG EnableDelayFree:1;                                            //0x0
    } Flags;                                                                //0x0
}NOK_RTL_HP_VS_CONFIG, * NOK_PRTL_HP_VS_CONFIG;
//0x4 bytes (sizeof)
typedef struct _NOK_HEAP_FREE_ENTRY_EXTRA
{
    USHORT TagIndex;                                                        //0x0
    USHORT FreeBackTraceIndex;                                              //0x2
}NOK_HEAP_FREE_ENTRY_EXTRA, * NOK_PHEAP_FREE_ENTRY_EXTRA;
//0x10 bytes (sizeof)
typedef struct _NOK_HIVE_WRITE_WAIT_QUEUE
{
    NOK_PETHREAD ActiveThread;                                          //0x0
    NOK_PHIVE_WAIT_PACKET WaitList;                                     //0x8
}NOK_HIVE_WRITE_WAIT_QUEUE, * NOK_PHIVE_WRITE_WAIT_QUEUE;
//0x28 bytes (sizeof)
typedef struct _NOK_HIDDEN_PROCESSOR_POWER_INTERFACE
{
    ULONG Version;                                                          //0x0
    LONG (*ReadPerfMsr)(ULONG arg1, ULONG arg2, ULONGLONG* arg3);           //0x8
    LONG (*WritePerfMsr)(ULONG arg1, ULONG arg2, ULONGLONG arg3, ULONGLONG arg4); //0x10
    LONG (*ReadPerfIoPort)(ULONG arg1, USHORT arg2, USHORT arg3, ULONG* arg4); //0x18
    LONG (*WritePerfIoPort)(ULONG arg1, USHORT arg2, USHORT arg3, ULONG arg4, ULONG arg5); //0x20
}NOK_HIDDEN_PROCESSOR_POWER_INTERFACE, * NOK_PHIDDEN_PROCESSOR_POWER_INTERFACE;
//0x8 bytes (sizeof)
typedef union _NOK_HEAP_VS_CHUNK_HEADER_SIZE
{
    ULONG MemoryCost:16;                                                    //0x0
    struct
    {
        ULONG UnsafeSize:16;                                                //0x0
        ULONG UnsafePrevSize:16;                                                //0x4
        ULONG Allocated:8;                                                  //0x4
    };
    USHORT KeyUShort;                                                       //0x0
    ULONG KeyULong;                                                         //0x0
    ULONGLONG HeaderBits;                                                   //0x0
}NOK_HEAP_VS_CHUNK_HEADER_SIZE, * NOK_PHEAP_VS_CHUNK_HEADER_SIZE;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_VS_CHUNK_HEADER
{
    NOK_HEAP_VS_CHUNK_HEADER_SIZE Sizes;                                 //0x0
    union
    {
        struct
        {
            ULONG EncodedSegmentPageOffset:8;                               //0x8
            ULONG UnusedBytes:1;                                            //0x8
            ULONG SkipDuringWalk:1;                                         //0x8
            ULONG Spare:22;                                                 //0x8
        };
        ULONG AllocatedChunkBits;                                           //0x8
    };
}NOK_HEAP_VS_CHUNK_HEADER, * NOK_PHEAP_VS_CHUNK_HEADER;
//0x4 bytes (sizeof)
typedef enum _NOK_CM_LOAD_FAILURE_TYPE
{
    NOK__None = 0,
    NOK__CmpCreateHive = 1,
    NOK__HvpBuildMap = 3,
    NOK__HvpBuildMapForLoaderHive = 4,
    NOK__HvpInitMap = 5,
    NOK__HvLoadHive = 6,
    NOK__HvpMapHiveImage = 7,
    NOK__HvpRecoverData = 8,
    NOK__CmpValidateHiveSecurityDescriptors = 9,
    NOK__HvpEnlistBinInMap = 10,
    NOK__CmCheckRegistry = 11,
    NOK__CmRegistryIO = 12,
    NOK__CmCheckRegistry2 = 13,
    NOK__CmpCheckKey = 14,
    NOK__CmpCheckValueList = 15,
    NOK__HvCheckHive = 16,
    NOK__HvCheckBin = 17,
    NOK__HvpGetLogEntryDirtyVector = 18,
    NOK__HvpReadLogEntryHeader = 19,
    NOK__HvpReadLogEntry = 20,
    NOK__CmpMountPreloadedHives = 21,
    NOK__CmpLoadHiveThread = 22,
    NOK__CmpCheckLeaf = 23,
    NOK__HvHiveStartFileBacked = 24,
    NOK__HvStartHiveMemoryBacked = 25,
    NOK__HvpEnlistFreeCells = 26,
    NOK__HvpPerformLogFileRecovery = 27,
    NOK__CmpInitHiveFromFile = 28,
    NOK__CmpLoadKeyCommon = 29,
    NOK__CmpLinkHiveToMaster = 30,
    NOK__CmLoadKey = 31,
    NOK__CmLoadAppKey = 32,
    NOK__CmpResolveHiveLoadConflict = 33
}NOK_CM_LOAD_FAILURE_TYPE, * NOK_PCM_LOAD_FAILURE_TYPE;
//0x40 bytes (sizeof)
typedef struct _NOK_SECTION
{
    NOK_RTL_BALANCED_NODE SectionNode;                                  //0x0
    ULONGLONG StartingVpn;                                                  //0x18
    ULONGLONG EndingVpn;                                                    //0x20
    union
    {
        NOK_PCONTROL_AREA ControlArea;                                  //0x28
        NOK_PFILE_OBJECT FileObject;                                    //0x28
        ULONGLONG RemoteImageFileObject:1;                                  //0x28
        ULONGLONG RemoteDataFileObject:1;                                   //0x28
    } u1;                                                                   //0x28
    ULONGLONG SizeOfSection;                                                //0x30
    union
    {
        ULONG LongFlags;                                                    //0x38
        NOK_MMSECTION_FLAGS Flags;                                      //0x38
    } u;                                                                    //0x38
    ULONG InitialPageProtection:12;                                         //0x3c
    ULONG SessionId:19;                                                     //0x3c
    ULONG NoValidationNeeded:1;                                             //0x3c
}NOK_SECTION, * NOK_PSECTION;
//0x2000 bytes (sizeof)
typedef struct _NOK_HMAP_DIRECTORY
{
    NOK_PHMAP_TABLE Directory[1024];                                    //0x0
}NOK_HMAP_DIRECTORY, * NOK_PHMAP_DIRECTORY;
//0x18 bytes (sizeof)
typedef struct _NOK_HMAP_ENTRY
{
    ULONGLONG BlockOffset;                                                  //0x0
    ULONGLONG PermanentBinAddress;                                          //0x8
    ULONG MemAlloc;                                                         //0x10
}NOK_HMAP_ENTRY, * NOK_PHMAP_ENTRY;
//0x3000 bytes (sizeof)
typedef struct _NOK_HMAP_TABLE
{
    NOK_HMAP_ENTRY Table[512];                                          //0x0
}NOK_HMAP_TABLE, * NOK_PHMAP_TABLE;
//0xa0 bytes (sizeof)
typedef struct _NOK_ETW_REALTIME_CONSUMER
{
    NOK_LIST_ENTRY Links;                                               //0x0
    VOID* ProcessHandle;                                                    //0x10
    NOK_PEPROCESS ProcessObject;                                        //0x18
    VOID* NextNotDelivered;                                                 //0x20
    VOID* RealtimeConnectContext;                                           //0x28
    NOK_PKEVENT DisconnectEvent;                                        //0x30
    NOK_PKEVENT DataAvailableEvent;                                     //0x38
    ULONG* UserBufferCount;                                                 //0x40
    NOK_PSINGLE_LIST_ENTRY UserBufferListHead;                          //0x48
    ULONG BuffersLost;                                                      //0x50
    ULONG EmptyBuffersCount;                                                //0x54
    USHORT LoggerId;                                                        //0x58
    union
    {
        UCHAR Flags;                                                        //0x5a
        struct
        {
            UCHAR ShutDownRequested:1;                                      //0x5a
            UCHAR NewBuffersLost:1;                                         //0x5a
            UCHAR Disconnected:1;                                           //0x5a
            UCHAR Notified:1;                                               //0x5a
            UCHAR Wow:1;                                                    //0x5a
        };
    };
    NOK_RTL_BITMAP ReservedBufferSpaceBitMap;                           //0x60
    UCHAR* ReservedBufferSpace;                                             //0x70
    ULONG ReservedBufferSpaceSize;                                          //0x78
    ULONG UserPagesAllocated;                                               //0x7c
    ULONG UserPagesReused;                                                  //0x80
    ULONG* EventsLostCount;                                                 //0x88
    ULONG* BuffersLostCount;                                                //0x90
    NOK_PETW_SILODRIVERSTATE SiloState;                                 //0x98
}NOK_ETW_REALTIME_CONSUMER, * NOK_PETW_REALTIME_CONSUMER;
//0x2 bytes (sizeof)
typedef struct _NOK_HV_GET_BIN_CONTEXT
{
    USHORT OutstandingReference:1;                                          //0x0
}NOK_HV_GET_BIN_CONTEXT, * NOK_PHV_GET_BIN_CONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_HV_GET_CELL_CONTEXT
{
    ULONG Cell;                                                             //0x0
    NOK_HV_GET_BIN_CONTEXT BinContext;                                  //0x4
}NOK_HV_GET_CELL_CONTEXT, * NOK_PHV_GET_CELL_CONTEXT;
//0x8 bytes (sizeof)
typedef union _NOK_HV_PARTITION_PRIVILEGE_MASK
{
    ULONGLONG AsUINT64;                                                     //0x0
    ULONGLONG AccessVpRunTimeReg:1;                                         //0x0
    ULONGLONG AccessPartitionReferenceCounter:1;                            //0x0
    ULONGLONG AccessSynicRegs:1;                                            //0x0
    ULONGLONG AccessSyntheticTimerRegs:1;                                   //0x0
    ULONGLONG AccessIntrCtrlRegs:1;                                         //0x0
    ULONGLONG AccessHypercallMsrs:1;                                        //0x0
    ULONGLONG AccessVpIndex:1;                                              //0x0
    ULONGLONG AccessResetReg:1;                                             //0x0
    ULONGLONG AccessStatsReg:1;                                             //0x0
    ULONGLONG AccessPartitionReferenceTsc:1;                                //0x0
    ULONGLONG AccessGuestIdleReg:1;                                         //0x0
    ULONGLONG AccessFrequencyRegs:1;                                        //0x0
    ULONGLONG AccessDebugRegs:1;                                            //0x0
    ULONGLONG AccessReenlightenmentControls:1;                              //0x0
    ULONGLONG AccessRootSchedulerReg:1;                                     //0x0
    ULONGLONG AccessTscInvariantControls:1;                                 //0x0
    ULONGLONG Reserved1:16;                                                 //0x0
    ULONGLONG CreatePartitions:1;                                           //0x0
    ULONGLONG AccessPartitionId:1;                                          //0x0
    ULONGLONG AccessMemoryPool:1;                                           //0x0
    ULONGLONG AdjustMessageBuffers:1;                                       //0x0
    ULONGLONG PostMessages:1;                                               //0x0
    ULONGLONG SignalEvents:1;                                               //0x0
    ULONGLONG CreatePort:1;                                                 //0x0
    ULONGLONG ConnectPort:1;                                                //0x0
    ULONGLONG AccessStats:1;                                                //0x0
    ULONGLONG Reserved2:2;                                                  //0x0
    ULONGLONG Debugging:1;                                                  //0x0
    ULONGLONG CpuManagement:1;                                              //0x0
    ULONGLONG ConfigureProfiler:1;                                          //0x0
    ULONGLONG AccessVpExitTracing:1;                                        //0x0
    ULONGLONG EnableExtendedGvaRangesForFlushVirtualAddressList:1;          //0x0
    ULONGLONG AccessVsm:1;                                                  //0x0
    ULONGLONG AccessVpRegisters:1;                                          //0x0
    ULONGLONG UnusedBit:1;                                                  //0x0
    ULONGLONG FastHypercallOutput:1;                                        //0x0
    ULONGLONG EnableExtendedHypercalls:1;                                   //0x0
    ULONGLONG StartVirtualProcessor:1;                                      //0x0
    ULONGLONG Isolation:1;                                                  //0x0
    ULONGLONG Reserved3:9;                                                  //0x0
}NOK_HV_PARTITION_PRIVILEGE_MASK, * NOK_PHV_PARTITION_PRIVILEGE_MASK;
//0x10 bytes (sizeof)
typedef struct _NOK_I386_LOADER_BLOCK
{
    VOID* CommonDataArea;                                                   //0x0
    ULONG MachineType;                                                      //0x8
    ULONG VirtualBias;                                                      //0xc
}NOK_I386_LOADER_BLOCK, * NOK_PI386_LOADER_BLOCK;
//0x20 bytes (sizeof)
typedef struct _NOK_DBGKD_CONTINUE2
{
    LONG ContinueStatus;                                                    //0x0
    union
    {
        NOK_AMD64_DBGKD_CONTROL_SET ControlSet;                         //0x4
        NOK_DBGKD_ANY_CONTROL_SET AnyControlSet;                        //0x4
    };
}NOK_DBGKD_CONTINUE2, * NOK_PDBGKD_CONTINUE2;
//0x8 bytes (sizeof)
typedef struct _NOK_IMAGE_DATA_DIRECTORY
{
    ULONG VirtualAddress;                                                   //0x0
    ULONG Size;                                                             //0x4
}NOK_IMAGE_DATA_DIRECTORY, * NOK_PIMAGE_DATA_DIRECTORY;
//0x1c bytes (sizeof)
typedef struct _NOK_IMAGE_DEBUG_DIRECTORY
{
    ULONG Characteristics;                                                  //0x0
    ULONG TimeDateStamp;                                                    //0x4
    USHORT MajorVersion;                                                    //0x8
    USHORT MinorVersion;                                                    //0xa
    ULONG Type;                                                             //0xc
    ULONG SizeOfData;                                                       //0x10
    ULONG AddressOfRawData;                                                 //0x14
    ULONG PointerToRawData;                                                 //0x18
}NOK_IMAGE_DEBUG_DIRECTORY, * NOK_PIMAGE_DEBUG_DIRECTORY;
//0x40 bytes (sizeof)
typedef struct _NOK_IMAGE_DOS_HEADER
{
    USHORT e_magic;                                                         //0x0
    USHORT e_cblp;                                                          //0x2
    USHORT e_cp;                                                            //0x4
    USHORT e_crlc;                                                          //0x6
    USHORT e_cparhdr;                                                       //0x8
    USHORT e_minalloc;                                                      //0xa
    USHORT e_maxalloc;                                                      //0xc
    USHORT e_ss;                                                            //0xe
    USHORT e_sp;                                                            //0x10
    USHORT e_csum;                                                          //0x12
    USHORT e_ip;                                                            //0x14
    USHORT e_cs;                                                            //0x16
    USHORT e_lfarlc;                                                        //0x18
    USHORT e_ovno;                                                          //0x1a
    USHORT e_res[4];                                                        //0x1c
    USHORT e_oemid;                                                         //0x24
    USHORT e_oeminfo;                                                       //0x26
    USHORT e_res2[10];                                                      //0x28
    LONG e_lfanew;                                                          //0x3c
}NOK_IMAGE_DOS_HEADER, * NOK_PIMAGE_DOS_HEADER;
//0x14 bytes (sizeof)
typedef struct _NOK_IMAGE_FILE_HEADER
{
    USHORT Machine;                                                         //0x0
    USHORT NumberOfSections;                                                //0x2
    ULONG TimeDateStamp;                                                    //0x4
    ULONG PointerToSymbolTable;                                             //0x8
    ULONG NumberOfSymbols;                                                  //0xc
    USHORT SizeOfOptionalHeader;                                            //0x10
    USHORT Characteristics;                                                 //0x12
}NOK_IMAGE_FILE_HEADER, * NOK_PIMAGE_FILE_HEADER;
//0xf0 bytes (sizeof)
typedef struct _NOK_IMAGE_OPTIONAL_HEADER64
{
    USHORT Magic;                                                           //0x0
    UCHAR MajorLinkerVersion;                                               //0x2
    UCHAR MinorLinkerVersion;                                               //0x3
    ULONG SizeOfCode;                                                       //0x4
    ULONG SizeOfInitializedData;                                            //0x8
    ULONG SizeOfUninitializedData;                                          //0xc
    ULONG AddressOfEntryPoint;                                              //0x10
    ULONG BaseOfCode;                                                       //0x14
    ULONGLONG ImageBase;                                                    //0x18
    ULONG SectionAlignment;                                                 //0x20
    ULONG FileAlignment;                                                    //0x24
    USHORT MajorOperatingSystemVersion;                                     //0x28
    USHORT MinorOperatingSystemVersion;                                     //0x2a
    USHORT MajorImageVersion;                                               //0x2c
    USHORT MinorImageVersion;                                               //0x2e
    USHORT MajorSubsystemVersion;                                           //0x30
    USHORT MinorSubsystemVersion;                                           //0x32
    ULONG Win32VersionValue;                                                //0x34
    ULONG SizeOfImage;                                                      //0x38
    ULONG SizeOfHeaders;                                                    //0x3c
    ULONG CheckSum;                                                         //0x40
    USHORT Subsystem;                                                       //0x44
    USHORT DllCharacteristics;                                              //0x46
    ULONGLONG SizeOfStackReserve;                                           //0x48
    ULONGLONG SizeOfStackCommit;                                            //0x50
    ULONGLONG SizeOfHeapReserve;                                            //0x58
    ULONGLONG SizeOfHeapCommit;                                             //0x60
    ULONG LoaderFlags;                                                      //0x68
    ULONG NumberOfRvaAndSizes;                                              //0x6c
    NOK_IMAGE_DATA_DIRECTORY DataDirectory[16];                         //0x70
}NOK_IMAGE_OPTIONAL_HEADER64, * NOK_PIMAGE_OPTIONAL_HEADER64;
//0x108 bytes (sizeof)
typedef struct _NOK_IMAGE_NT_HEADERS64
{
    ULONG Signature;                                                        //0x0
    NOK_IMAGE_FILE_HEADER FileHeader;                                   //0x4
    NOK_IMAGE_OPTIONAL_HEADER64 OptionalHeader;                         //0x18
}NOK_IMAGE_NT_HEADERS64, * NOK_PIMAGE_NT_HEADERS64;
//0x38 bytes (sizeof)
typedef struct _NOK_IMAGE_ROM_OPTIONAL_HEADER
{
    USHORT Magic;                                                           //0x0
    UCHAR MajorLinkerVersion;                                               //0x2
    UCHAR MinorLinkerVersion;                                               //0x3
    ULONG SizeOfCode;                                                       //0x4
    ULONG SizeOfInitializedData;                                            //0x8
    ULONG SizeOfUninitializedData;                                          //0xc
    ULONG AddressOfEntryPoint;                                              //0x10
    ULONG BaseOfCode;                                                       //0x14
    ULONG BaseOfData;                                                       //0x18
    ULONG BaseOfBss;                                                        //0x1c
    ULONG GprMask;                                                          //0x20
    ULONG CprMask[4];                                                       //0x24
    ULONG GpValue;                                                          //0x34
}NOK_IMAGE_ROM_OPTIONAL_HEADER, * NOK_PIMAGE_ROM_OPTIONAL_HEADER;
//0xc bytes (sizeof)
typedef struct _NOK_IMAGE_RUNTIME_FUNCTION_ENTRY
{
    ULONG BeginAddress;                                                     //0x0
    ULONG EndAddress;                                                       //0x4
    union
    {
        ULONG UnwindInfoAddress;                                            //0x8
        ULONG UnwindData;                                                   //0x8
    };
}NOK_IMAGE_RUNTIME_FUNCTION_ENTRY, * NOK_PIMAGE_RUNTIME_FUNCTION_ENTRY;
//0x28 bytes (sizeof)
typedef struct _NOK_IMAGE_SECTION_HEADER
{
    UCHAR Name[8];                                                          //0x0
    union
    {
        ULONG PhysicalAddress;                                              //0x8
        ULONG VirtualSize;                                                  //0x8
    } Misc;                                                                 //0x8
    ULONG VirtualAddress;                                                   //0xc
    ULONG SizeOfRawData;                                                    //0x10
    ULONG PointerToRawData;                                                 //0x14
    ULONG PointerToRelocations;                                             //0x18
    ULONG PointerToLinenumbers;                                             //0x1c
    USHORT NumberOfRelocations;                                             //0x20
    USHORT NumberOfLinenumbers;                                             //0x22
    ULONG Characteristics;                                                  //0x24
}NOK_IMAGE_SECTION_HEADER, * NOK_PIMAGE_SECTION_HEADER;
//0x8 bytes (sizeof)
typedef struct _NOK_IMAGE_SECURITY_CONTEXT
{
    union
    {
        VOID* PageHashes;                                                   //0x0
        ULONGLONG Value;                                                    //0x0
        struct
        {
            ULONGLONG SecurityBeingCreated:2;                               //0x0
            ULONGLONG SecurityMandatory:1;                                  //0x0
            ULONGLONG PageHashPointer:61;                                   //0x0
        };
    };
}NOK_IMAGE_SECURITY_CONTEXT, * NOK_PIMAGE_SECURITY_CONTEXT;
//0xc bytes (sizeof)
typedef struct _NOK_LUID_AND_ATTRIBUTES
{
    NOK_LUID Luid;                                                      //0x0
    ULONG Attributes;                                                       //0x8
}NOK_LUID_AND_ATTRIBUTES, * NOK_PLUID_AND_ATTRIBUTES;
//0x4 bytes (sizeof)
typedef struct _NOK_INPUT_MAPPING_ELEMENT
{
    ULONG InputMappingId;                                                   //0x0
}NOK_INPUT_MAPPING_ELEMENT, * NOK_PINPUT_MAPPING_ELEMENT;
//0x28 bytes (sizeof)
typedef struct _NOK_HIVE_WAIT_PACKET
{
    NOK_KEVENT WakeEvent;                                               //0x0
    LONG Status;                                                            //0x18
    NOK_PHIVE_WAIT_PACKET Next;                                         //0x20
}NOK_HIVE_WAIT_PACKET, * NOK_PHIVE_WAIT_PACKET;
//0x4 bytes (sizeof)
typedef enum _NOK_KINTERRUPT_MODE
{
    NOK_LevelSensitive = 0,
    NOK_Latched = 1
}NOK_KINTERRUPT_MODE, * NOK_PKINTERRUPT_MODE;
//0x8 bytes (sizeof)
typedef struct _NOK_INTERRUPT_LINE
{
    ULONG UnitId;                                                           //0x0
    LONG Line;                                                              //0x4
}NOK_INTERRUPT_LINE, * NOK_PINTERRUPT_LINE;
//0x8 bytes (sizeof)
typedef struct _NOK_INTERRUPT_HT_INTR_INFO
{
    union
    {
        struct
        {
            ULONG Mask:1;                                                   //0x0
            ULONG Polarity:1;                                               //0x0
            ULONG MessageType:3;                                            //0x0
            ULONG RequestEOI:1;                                             //0x0
            ULONG DestinationMode:1;                                        //0x0
            ULONG MessageType3:1;                                           //0x0
            ULONG Destination:8;                                            //0x0
            ULONG Vector:8;                                                 //0x0
            ULONG ExtendedAddress:8;                                        //0x0
        } bits;                                                             //0x0
        ULONG AsULONG;                                                      //0x0
    } LowPart;                                                              //0x0
    union
    {
        struct
        {
            ULONG ExtendedDestination:24;                                   //0x4
            ULONG Reserved:6;                                               //0x4
            ULONG PassPW:1;                                                 //0x4
            ULONG WaitingForEOI:1;                                          //0x4
        } bits;                                                             //0x4
        ULONG AsULONG;                                                      //0x4
    } HighPart;                                                             //0x4
}NOK_INTERRUPT_HT_INTR_INFO, * NOK_PINTERRUPT_HT_INTR_INFO;
//0x18 bytes (sizeof)
typedef struct _NOK_INTERRUPT_TARGET
{
    NOK_INTERRUPT_TARGET_TYPE Target;                                     //0x0
    union
    {
        ULONG PhysicalTarget;                                               //0x8
        ULONG LogicalFlatTarget;                                            //0x8
        ULONG RemapIndex;                                                   //0x8
        struct
        {
            ULONG ClusterId;                                                //0x8
            ULONG ClusterMask;                                              //0xc
        };
        struct
        {
            ULONG Low32;                                                    //0x8
            ULONG High32;                                                   //0xc
            ULONGLONG InterruptData;                                        //0x10
        } HypervisorTarget;                                                 //0x8
    };
}NOK_INTERRUPT_TARGET, * NOK_PINTERRUPT_TARGET;
//0x4 bytes (sizeof)
typedef enum _NOK_INTERRUPT_RESULT
{
    NOK_InterruptBeginFatalError = 0,
    NOK_InterruptBeginLine = 1,
    NOK_InterruptBeginSpurious = 2,
    NOK_InterruptBeginVector = 3,
    NOK_InterruptBeginNone = 4
}NOK_INTERRUPT_RESULT, * NOK_PINTERRUPT_RESULT;
//0x10 bytes (sizeof)
typedef struct _NOK_INTERRUPT_REMAPPING_INFO
{
    ULONG IrtIndex:30;                                                      //0x0
    ULONG FlagHalInternal:1;                                                //0x0
    ULONG FlagTranslated:1;                                                 //0x0
    union
    {
        struct
        {
            ULONG MessageAddressHigh;                                       //0x4
            ULONG MessageAddressLow;                                        //0x8
            USHORT MessageData;                                             //0xc
            USHORT Reserved;                                                //0xe
        } Msi;                                                              //0x4
    } u;                                                                    //0x4
}NOK_INTERRUPT_REMAPPING_INFO, * NOK_PINTERRUPT_REMAPPING_INFO;
//0x4 bytes (sizeof)
typedef enum _NOK_HAL_APIC_DESTINATION_MODE
{
    NOK_ApicDestinationModePhysical = 1,
    NOK_ApicDestinationModeLogicalFlat = 2,
    NOK_ApicDestinationModeLogicalClustered = 3,
    NOK_ApicDestinationModeUnknown = 4
}NOK_HAL_APIC_DESTINATION_MODE, * NOK_PHAL_APIC_DESTINATION_MODE;
//0x4 bytes (sizeof)
typedef enum _NOK_KINTERRUPT_POLARITY
{
    NOK_InterruptPolarityUnknown = 0,
    NOK_InterruptActiveHigh = 1,
    NOK_InterruptRisingEdge = 1,
    NOK_InterruptActiveLow = 2,
    NOK_InterruptFallingEdge = 2,
    NOK_InterruptActiveBoth = 3,
    NOK_InterruptActiveBothTriggerLow = 3,
    NOK_InterruptActiveBothTriggerHigh = 4
}NOK_KINTERRUPT_POLARITY, * NOK_PKINTERRUPT_POLARITY;
//0x18 bytes (sizeof)
typedef struct _NOK_INVERTED_FUNCTION_TABLE_ENTRY
{
    union
    {
        NOK_PIMAGE_RUNTIME_FUNCTION_ENTRY FunctionTable;                //0x0
        NOK_PDYNAMIC_FUNCTION_TABLE DynamicTable;                       //0x0
    };
    VOID* ImageBase;                                                        //0x8
    ULONG SizeOfImage;                                                      //0x10
    ULONG SizeOfTable;                                                      //0x14
}NOK_INVERTED_FUNCTION_TABLE_ENTRY, * NOK_PINVERTED_FUNCTION_TABLE_ENTRY;
//0x1810 bytes (sizeof)
typedef struct _NOK_INVERTED_FUNCTION_TABLE
{
    ULONG CurrentSize;                                                      //0x0
    ULONG MaximumSize;                                                      //0x4
    volatile ULONG Epoch;                                                   //0x8
    UCHAR Overflow;                                                         //0xc
    NOK_INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];                  //0x10
}NOK_INVERTED_FUNCTION_TABLE, * NOK_PINVERTED_FUNCTION_TABLE;
//0xc bytes (sizeof)
typedef struct _NOK_IOAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR IOAPICID;                                                         //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG IOAPICAddress;                                                    //0x4
    ULONG SystemVectorBase;                                                 //0x8
}NOK_IOAPIC, * NOK_PIOAPIC;
//0x4 bytes (sizeof)
typedef enum _NOK_IOP_PRIORITY_HINT
{
    NOK_IopIoPriorityNotSet = 0,
    NOK_IopIoPriorityVeryLow = 1,
    NOK_IopIoPriorityLow = 2,
    NOK_IopIoPriorityNormal = 3,
    NOK_IopIoPriorityHigh = 4,
    NOK_IopIoPriorityCritical = 5,
    NOK_MaxIopIoPriorityTypes = 6
}NOK_IOP_PRIORITY_HINT, * NOK_PIOP_PRIORITY_HINT;
//0x10 bytes (sizeof)
typedef struct _NOK_IO_ADAPTER_CRYPTO_PARAMETERS
{
    ULONGLONG Tweak;                                                        //0x0
    NOK_PIO_ADAPTER_CRYPTO_KEY_DESCRIPTOR KeyDescriptor;                //0x8
}NOK_IO_ADAPTER_CRYPTO_PARAMETERS, * NOK_PIO_ADAPTER_CRYPTO_PARAMETERS;
//0x40 bytes (sizeof)
typedef struct _NOK_IOP_IRP_EXTENSION
{
    union
    {
        USHORT ExtensionFlags;                                              //0x0
        struct
        {
            USHORT Allocated:1;                                             //0x0
            USHORT PropagateId:1;                                           //0x0
            USHORT SpareBits:14;                                            //0x0
        };
    };
    USHORT TypesAllocated;                                                  //0x2
    UCHAR GenericExtension[4];                                              //0x4
    VOID* VerifierContext;                                                  //0x8
    ULONGLONG DiskIoAttributionHandle;                                      //0x10
    NOK_GUID ActivityId;                                                //0x18
    union
    {
        NOK_LARGE_INTEGER Timestamp;                                     //0x28
        ULONG ZeroingOffset;                                                //0x28
        struct
        {
            NOK_PIO_IRP_EXT_TRACK_OFFSET_HEADER FsTrackOffsetBlob;      //0x28
            LONGLONG FsTrackedOffset;                                       //0x30
        };
        NOK_IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;       //0x28
    };
    union
    {
        ULONGLONG Value;                                                    //0x38
        ULONGLONG UserFlags:32;                                             //0x38
        ULONGLONG SystemFlags:16;                                           //0x38
        ULONGLONG UserFlagsId:16;                                           //0x38
    } DriverFlags;                                                          //0x38
}NOK_IOP_IRP_EXTENSION, * NOK_PIOP_IRP_EXTENSION;
//0x54 bytes (sizeof)
typedef struct _NOK_IOP_IRP_STACK_PROFILER
{
    ULONG Profile[20];                                                      //0x0
    ULONG TotalIrps;                                                        //0x50
}NOK_IOP_IRP_STACK_PROFILER, * NOK_PIOP_IRP_STACK_PROFILER;
//0x10 bytes (sizeof)
typedef struct _NOK_IOSAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR IOSAPICID;                                                        //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG SystemVectorBase;                                                 //0x4
    ULONGLONG IOSAPICAddress;                                               //0x8
}NOK_IOSAPIC, * NOK_PIOSAPIC;
//0x200 bytes (sizeof)
typedef struct _NOK_IOV_FORCED_PENDING_TRACE
{
    NOK_PIRP Irp;                                                       //0x0
    NOK_PETHREAD Thread;                                                //0x8
    VOID* StackTrace[62];                                                   //0x10
}NOK_IOV_FORCED_PENDING_TRACE, * NOK_PIOV_FORCED_PENDING_TRACE;
//0x80 bytes (sizeof)
typedef struct _NOK_IOV_IRP_TRACE
{
    NOK_PIRP Irp;                                                       //0x0
    NOK_PKTHREAD Thread;                                                //0x8
    union
    {
        struct
        {
            SHORT KernelApcDisable;                                         //0x10
            SHORT SpecialApcDisable;                                        //0x12
        };
        ULONG CombinedApcDisable;                                           //0x10
    };
    UCHAR Irql;                                                             //0x14
    VOID* StackTrace[13];                                                   //0x18
}NOK_IOV_IRP_TRACE, * NOK_PIOV_IRP_TRACE;
//0x1000 bytes (sizeof)
typedef struct _NOK_HBASE_BLOCK
{
    ULONG Signature;                                                        //0x0
    ULONG Sequence1;                                                        //0x4
    ULONG Sequence2;                                                        //0x8
    NOK_LARGE_INTEGER TimeStamp;                                         //0xc
    ULONG Major;                                                            //0x14
    ULONG Minor;                                                            //0x18
    ULONG Type;                                                             //0x1c
    ULONG Format;                                                           //0x20
    ULONG RootCell;                                                         //0x24
    ULONG Length;                                                           //0x28
    ULONG Cluster;                                                          //0x2c
    UCHAR FileName[64];                                                     //0x30
    NOK_GUID RmId;                                                      //0x70
    NOK_GUID LogId;                                                     //0x80
    ULONG Flags;                                                            //0x90
    NOK_GUID TmId;                                                      //0x94
    ULONG GuidSignature;                                                    //0xa4
    ULONGLONG LastReorganizeTime;                                           //0xa8
    ULONG Reserved1[83];                                                    //0xb0
    ULONG CheckSum;                                                         //0x1fc
    ULONG Reserved2[882];                                                   //0x200
    NOK_GUID ThawTmId;                                                  //0xfc8
    NOK_GUID ThawRmId;                                                  //0xfd8
    NOK_GUID ThawLogId;                                                 //0xfe8
    ULONG BootType;                                                         //0xff8
    ULONG BootRecover;                                                      //0xffc
}NOK_HBASE_BLOCK, * NOK_PHBASE_BLOCK;
//0x20 bytes (sizeof)
typedef struct _NOK_HBIN
{
    ULONG Signature;                                                        //0x0
    ULONG FileOffset;                                                       //0x4
    ULONG Size;                                                             //0x8
    ULONG Reserved1[2];                                                     //0xc
    NOK_LARGE_INTEGER TimeStamp;                                         //0x14
    ULONG Spare;                                                            //0x1c
}NOK_HBIN, * NOK_PHBIN;
//0x30 bytes (sizeof)
typedef struct _NOK_IO_APIC_DATA
{
    ULONGLONG PhysicalAddress;                                              //0x0
    ULONG Identifier;                                                       //0x8
    NOK_PIO_APIC_REGISTERS BaseAddress;                                 //0x10
    UCHAR Version;                                                          //0x18
    UCHAR PinCount;                                                         //0x19
    UCHAR Initialized;                                                      //0x1a
    UCHAR InitializedFirstLocalUnit;                                        //0x1b
    ULONG GsiBase;                                                          //0x1c
    ULONG CmciRegister;                                                     //0x20
    ULONG DeferredErrorRegister;                                            //0x24
    UCHAR IoUnitMissing;                                                    //0x28
}NOK_IO_APIC_DATA, * NOK_PIO_APIC_DATA;
//0x44 bytes (sizeof)
typedef struct _NOK_IO_APIC_REGISTERS
{
    volatile ULONG RegisterIndex;                                           //0x0
    volatile ULONG Reserved1[3];                                            //0x4
    volatile ULONG RegisterValue;                                           //0x10
    volatile ULONG Reserved2[11];                                           //0x14
    volatile ULONG EndOfInterrupt;                                          //0x40
}NOK_IO_APIC_REGISTERS, * NOK_PIO_APIC_REGISTERS;
//0x10 bytes (sizeof)
typedef struct _NOK_IO_CLIENT_EXTENSION
{
    NOK_PIO_CLIENT_EXTENSION NextExtension;                             //0x0
    VOID* ClientIdentificationAddress;                                      //0x8
}NOK_IO_CLIENT_EXTENSION, * NOK_PIO_CLIENT_EXTENSION;
//0x10 bytes (sizeof)
typedef struct _NOK_IO_COMPLETION_CONTEXT
{
    VOID* Port;                                                             //0x0
    VOID* Key;                                                              //0x8
}NOK_IO_COMPLETION_CONTEXT, * NOK_PIO_COMPLETION_CONTEXT;
//0x28 bytes (sizeof)
typedef struct _NOK_IO_DRIVER_CREATE_CONTEXT
{
    SHORT Size;                                                             //0x0
    NOK_PECP_LIST ExtraCreateParameter;                                 //0x8
    VOID* DeviceObjectHint;                                                 //0x10
    NOK_PTXN_PARAMETER_BLOCK TxnParameters;                             //0x18
    NOK_PEJOB SiloContext;                                              //0x20
}NOK_IO_DRIVER_CREATE_CONTEXT, * NOK_PIO_DRIVER_CREATE_CONTEXT;
//0x10 bytes (sizeof)
typedef struct _NOK_IO_IRP_EXT_TRACK_OFFSET_HEADER
{
    USHORT Validation;                                                      //0x0
    USHORT Flags;                                                           //0x2
    VOID (*TrackedOffsetCallback)(NOK_PIO_IRP_EXT_TRACK_OFFSET_HEADER arg1, NOK_PIO_IRP_EXT_TRACK_OFFSET_HEADER arg2, LONGLONG arg3); //0x8
}NOK_IO_IRP_EXT_TRACK_OFFSET_HEADER, * NOK_PIO_IRP_EXT_TRACK_OFFSET_HEADER;
//0x48 bytes (sizeof)
typedef struct _NOK_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
{
    ULONG Version;                                                          //0x0
    ULONG Size;                                                             //0x4
    ULONG CryptoIndex;                                                      //0x8
    ULONG AlgorithmId;                                                      //0xc
    ULONG DataUnitSize;                                                     //0x10
    ULONG KeySize;                                                          //0x14
    UCHAR KeyHash[32];                                                      //0x18
    VOID* KeyVirtualAddress;                                                //0x38
    NOK_LARGE_INTEGER KeyPhysicalAddress;                                //0x40
}NOK_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR, * NOK_PIO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
//0x8 bytes (sizeof)
typedef struct _NOK_IO_NMISOURCE
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    USHORT Flags;                                                           //0x2
    ULONG GlobalSystemInterruptVector;                                      //0x4
}NOK_IO_NMISOURCE, * NOK_PIO_NMISOURCE;
//0x4 bytes (sizeof)
typedef enum _NOK_IO_PRIORITY_HINT
{
    NOK_IoPriorityVeryLow = 0,
    NOK_IoPriorityLow = 1,
    NOK_IoPriorityNormal = 2,
    NOK_IoPriorityHigh = 3,
    NOK_IoPriorityCritical = 4,
    NOK_MaxIoPriorityTypes = 5
}NOK_IO_PRIORITY_HINT, * NOK_PIO_PRIORITY_HINT;
//0x50 bytes (sizeof)
typedef struct _NOK_IO_MINI_COMPLETION_PACKET_USER
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG PacketType;                                                       //0x10
    VOID* KeyContext;                                                       //0x18
    VOID* ApcContext;                                                       //0x20
    LONG IoStatus;                                                          //0x28
    ULONGLONG IoStatusInformation;                                          //0x30
    VOID (*MiniPacketCallback)(NOK_PIO_MINI_COMPLETION_PACKET_USER arg1, VOID* arg2); //0x38
    VOID* Context;                                                          //0x40
    UCHAR Allocated;                                                        //0x48
}NOK_IO_MINI_COMPLETION_PACKET_USER, * NOK_PIO_MINI_COMPLETION_PACKET_USER;
//0x20 bytes (sizeof)
typedef struct _NOK_IO_REMOVE_LOCK_COMMON_BLOCK
{
    UCHAR Removed;                                                          //0x0
    UCHAR Reserved[3];                                                      //0x1
    LONG IoCount;                                                           //0x4
    NOK_KEVENT RemoveEvent;                                             //0x8
}NOK_IO_REMOVE_LOCK_COMMON_BLOCK, * NOK_PIO_REMOVE_LOCK_COMMON_BLOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_IRQ_PRIORITY
{
    NOK_IrqPriorityUndefined = 0,
    NOK_IrqPriorityLow = 1,
    NOK_IrqPriorityNormal = 2,
    NOK_IrqPriorityHigh = 3
}NOK_IRQ_PRIORITY, * NOK_PIRQ_PRIORITY;
//0x20 bytes (sizeof)
typedef struct _NOK_IO_RESOURCE_DESCRIPTOR
{
    UCHAR Option;                                                           //0x0
    UCHAR Type;                                                             //0x1
    UCHAR ShareDisposition;                                                 //0x2
    UCHAR Spare1;                                                           //0x3
    USHORT Flags;                                                           //0x4
    USHORT Spare2;                                                          //0x6
    union
    {
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Alignment;                                                //0xc
            NOK_LARGE_INTEGER MinimumAddress;                            //0x10
            NOK_LARGE_INTEGER MaximumAddress;                            //0x18
        } Port;                                                             //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Alignment;                                                //0xc
            NOK_LARGE_INTEGER MinimumAddress;                            //0x10
            NOK_LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory;                                                           //0x8
        struct
        {
            ULONG MinimumVector;                                            //0x8
            ULONG MaximumVector;                                            //0xc
            USHORT AffinityPolicy;                                          //0x10
            USHORT Group;                                                   //0x12
            NOK_IRQ_PRIORITY PriorityPolicy;                              //0x14
            ULONGLONG TargetedProcessors;                                   //0x18
        } Interrupt;                                                        //0x8
        struct
        {
            ULONG MinimumChannel;                                           //0x8
            ULONG MaximumChannel;                                           //0xc
        } Dma;                                                              //0x8
        struct
        {
            ULONG RequestLine;                                              //0x8
            ULONG Reserved;                                                 //0xc
            ULONG Channel;                                                  //0x10
            ULONG TransferWidth;                                            //0x14
        } DmaV3;                                                            //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Alignment;                                                //0xc
            NOK_LARGE_INTEGER MinimumAddress;                            //0x10
            NOK_LARGE_INTEGER MaximumAddress;                            //0x18
        } Generic;                                                          //0x8
        struct
        {
            ULONG Data[3];                                                  //0x8
        } DevicePrivate;                                                    //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG MinBusNumber;                                             //0xc
            ULONG MaxBusNumber;                                             //0x10
            ULONG Reserved;                                                 //0x14
        } BusNumber;                                                        //0x8
        struct
        {
            ULONG Priority;                                                 //0x8
            ULONG Reserved1;                                                //0xc
            ULONG Reserved2;                                                //0x10
        } ConfigData;                                                       //0x8
        struct
        {
            ULONG Length40;                                                 //0x8
            ULONG Alignment40;                                              //0xc
            NOK_LARGE_INTEGER MinimumAddress;                            //0x10
            NOK_LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory40;                                                         //0x8
        struct
        {
            ULONG Length48;                                                 //0x8
            ULONG Alignment48;                                              //0xc
            NOK_LARGE_INTEGER MinimumAddress;                            //0x10
            NOK_LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory48;                                                         //0x8
        struct
        {
            ULONG Length64;                                                 //0x8
            ULONG Alignment64;                                              //0xc
            NOK_LARGE_INTEGER MinimumAddress;                            //0x10
            NOK_LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory64;                                                         //0x8
        struct
        {
            UCHAR Class;                                                    //0x8
            UCHAR Type;                                                     //0x9
            UCHAR Reserved1;                                                //0xa
            UCHAR Reserved2;                                                //0xb
            ULONG IdLowPart;                                                //0xc
            ULONG IdHighPart;                                               //0x10
        } Connection;                                                       //0x8
    } u;                                                                    //0x8
}NOK_IO_RESOURCE_DESCRIPTOR, * NOK_PIO_RESOURCE_DESCRIPTOR;
//0x28 bytes (sizeof)
typedef struct _NOK_CM_RESOURCE_LIST
{
    ULONG Count;                                                            //0x0
    NOK_CM_FULL_RESOURCE_DESCRIPTOR List[1];                            //0x4
}NOK_CM_RESOURCE_LIST, * NOK_PCM_RESOURCE_LIST;
//0x18 bytes (sizeof)
typedef struct _NOK_IO_SECURITY_CONTEXT
{
    NOK_PSECURITY_QUALITY_OF_SERVICE SecurityQos;                       //0x0
    NOK_PACCESS_STATE AccessState;                                      //0x8
    ULONG DesiredAccess;                                                    //0x10
    ULONG FullCreateOptions;                                                //0x14
}NOK_IO_SECURITY_CONTEXT, * NOK_PIO_SECURITY_CONTEXT;
//0x40 bytes (sizeof)
typedef struct _NOK_DEVICE_CAPABILITIES
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    ULONG DeviceD1:1;                                                       //0x4
    ULONG DeviceD2:1;                                                       //0x4
    ULONG LockSupported:1;                                                  //0x4
    ULONG EjectSupported:1;                                                 //0x4
    ULONG Removable:1;                                                      //0x4
    ULONG DockDevice:1;                                                     //0x4
    ULONG UniqueID:1;                                                       //0x4
    ULONG SilentInstall:1;                                                  //0x4
    ULONG RawDeviceOK:1;                                                    //0x4
    ULONG SurpriseRemovalOK:1;                                              //0x4
    ULONG WakeFromD0:1;                                                     //0x4
    ULONG WakeFromD1:1;                                                     //0x4
    ULONG WakeFromD2:1;                                                     //0x4
    ULONG WakeFromD3:1;                                                     //0x4
    ULONG HardwareDisabled:1;                                               //0x4
    ULONG NonDynamic:1;                                                     //0x4
    ULONG WarmEjectSupported:1;                                             //0x4
    ULONG NoDisplayInUI:1;                                                  //0x4
    ULONG Reserved1:1;                                                      //0x4
    ULONG WakeFromInterrupt:1;                                              //0x4
    ULONG SecureDevice:1;                                                   //0x4
    ULONG ChildOfVgaEnabledBridge:1;                                        //0x4
    ULONG DecodeIoOnBoot:1;                                                 //0x4
    ULONG Reserved:9;                                                       //0x4
    ULONG Address;                                                          //0x8
    ULONG UINumber;                                                         //0xc
    NOK_DEVICE_POWER_STATE DeviceState[7];                                //0x10
    NOK_SYSTEM_POWER_STATE SystemWake;                                    //0x2c
    NOK_DEVICE_POWER_STATE DeviceWake;                                    //0x30
    ULONG D1Latency;                                                        //0x34
    ULONG D2Latency;                                                        //0x38
    ULONG D3Latency;                                                        //0x3c
}NOK_DEVICE_CAPABILITIES, * NOK_PDEVICE_CAPABILITIES;
//0x10 bytes (sizeof)
typedef struct _NOK_IO_STATUS_BLOCK
{
    union
    {
        LONG Status;                                                        //0x0
        VOID* Pointer;                                                      //0x0
    };
    ULONGLONG Information;                                                  //0x8
}NOK_IO_STATUS_BLOCK, * NOK_PIO_STATUS_BLOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_DEVNODE_STATE
{
    NOK_DeviceNodeUnspecified = 768,
    NOK_DeviceNodeUninitialized = 769,
    NOK_DeviceNodeInitialized = 770,
    NOK_DeviceNodeDriversAdded = 771,
    NOK_DeviceNodeResourcesAssigned = 772,
    NOK_DeviceNodeStartPending = 773,
    NOK_DeviceNodeStartCompletion = 774,
    NOK_DeviceNodeStartPostWork = 775,
    NOK_DeviceNodeStarted = 776,
    NOK_DeviceNodeQueryStopped = 777,
    NOK_DeviceNodeStopped = 778,
    NOK_DeviceNodeRestartCompletion = 779,
    NOK_DeviceNodeEnumeratePending = 780,
    NOK_DeviceNodeEnumerateCompletion = 781,
    NOK_DeviceNodeAwaitingQueuedDeletion = 782,
    NOK_DeviceNodeAwaitingQueuedRemoval = 783,
    NOK_DeviceNodeQueryRemoved = 784,
    NOK_DeviceNodeRemovePendingCloses = 785,
    NOK_DeviceNodeRemoved = 786,
    NOK_DeviceNodeDeletePendingCloses = 787,
    NOK_DeviceNodeDeleted = 788,
    NOK_MaxDeviceNodeState = 789
}NOK_PNP_DEVNODE_STATE, * NOK_PPNP_DEVNODE_STATE;
//0x80 bytes (sizeof)
typedef struct _NOK_EPARTITION
{
    VOID* MmPartition;                                                      //0x0
    VOID* CcPartition;                                                      //0x8
    VOID* ExPartition;                                                      //0x10
    LONGLONG HardReferenceCount;                                            //0x18
    LONGLONG OpenHandleCount;                                               //0x20
    NOK_LIST_ENTRY ActivePartitionLinks;                                //0x28
    NOK_PEPARTITION ParentPartition;                                    //0x38
    NOK_WORK_QUEUE_ITEM TeardownWorkItem;                               //0x40
    NOK_EX_PUSH_LOCK TeardownLock;                                      //0x60
    NOK_PEPROCESS SystemProcess;                                        //0x68
    VOID* SystemProcessHandle;                                              //0x70
    union
    {
        ULONG PartitionFlags;                                               //0x78
        ULONG PairedWithJob:1;                                              //0x78
    };
}NOK_EPARTITION, * NOK_PEPARTITION;
//0x20 bytes (sizeof)
typedef struct _NOK_IO_REMOVE_LOCK
{
    NOK_IO_REMOVE_LOCK_COMMON_BLOCK Common;                             //0x0
}NOK_IO_REMOVE_LOCK, * NOK_PIO_REMOVE_LOCK;
//0x38 bytes (sizeof)
typedef struct _NOK_BLOB_TYPE
{
    NOK_BLOB_ID ResourceId;                                               //0x0
    ULONG PoolTag;                                                          //0x4
    ULONG LookasideIndex;                                                   //0x8
    ULONG Flags;                                                            //0xc
    NOK_BLOB_COUNTERS* Counters;                                        //0x10
    VOID (*CleanupProcedure)(VOID* arg1);                                   //0x18
    VOID (*DeleteProcedure)(VOID* arg1);                                    //0x20
    LONG (*DestroyProcedure)(VOID* arg1);                                   //0x28
    ULONGLONG UsualSize;                                                    //0x30
}NOK_BLOB_TYPE, * NOK_PBLOB_TYPE;
//0xa bytes (sizeof)
typedef struct _NOK_ISA_VECTOR
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR Bus;                                                              //0x2
    UCHAR Source;                                                           //0x3
    ULONG GlobalSystemInterruptVector;                                      //0x4
    USHORT Flags;                                                           //0x8
}NOK_ISA_VECTOR, * NOK_PISA_VECTOR;
//0x4 bytes (sizeof)
typedef enum _NOK_INTERRUPT_CONNECTION_TYPE
{
    NOK_InterruptTypeControllerInput = 0,
    NOK_InterruptTypeXapicMessage = 1,
    NOK_InterruptTypeHypertransport = 2,
    NOK_InterruptTypeMessageRequest = 3
}NOK_INTERRUPT_CONNECTION_TYPE, * NOK_PINTERRUPT_CONNECTION_TYPE;
//0x120 bytes (sizeof)
typedef struct _NOK_KINTERRUPT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    NOK_LIST_ENTRY InterruptListEntry;                                  //0x8
    UCHAR (*ServiceRoutine)(NOK_PKINTERRUPT arg1, VOID* arg2);          //0x18
    UCHAR (*MessageServiceRoutine)(NOK_PKINTERRUPT arg1, VOID* arg2, ULONG arg3); //0x20
    ULONG MessageIndex;                                                     //0x28
    VOID* ServiceContext;                                                   //0x30
    ULONGLONG SpinLock;                                                     //0x38
    ULONG TickCount;                                                        //0x40
    ULONGLONG* ActualLock;                                                  //0x48
    VOID (*DispatchAddress)();                                              //0x50
    ULONG Vector;                                                           //0x58
    UCHAR Irql;                                                             //0x5c
    UCHAR SynchronizeIrql;                                                  //0x5d
    UCHAR FloatingSave;                                                     //0x5e
    UCHAR Connected;                                                        //0x5f
    ULONG Number;                                                           //0x60
    UCHAR ShareVector;                                                      //0x64
    UCHAR EmulateActiveBoth;                                                //0x65
    USHORT ActiveCount;                                                     //0x66
    LONG InternalState;                                                     //0x68
    NOK_KINTERRUPT_MODE Mode;                                             //0x6c
    NOK_KINTERRUPT_POLARITY Polarity;                                     //0x70
    ULONG ServiceCount;                                                     //0x74
    ULONG DispatchCount;                                                    //0x78
    NOK_PKEVENT PassiveEvent;                                           //0x80
    NOK_PKTRAP_FRAME TrapFrame;                                         //0x88
    VOID* DisconnectData;                                                   //0x90
    NOK_PKTHREAD volatile ServiceThread;                                //0x98
    NOK_PINTERRUPT_CONNECTION_DATA ConnectionData;                      //0xa0
    VOID* IntTrackEntry;                                                    //0xa8
    NOK_ISRDPCSTATS IsrDpcStats;                                        //0xb0
    VOID* RedirectObject;                                                   //0x110
    VOID* PhysicalDeviceObject;                                             //0x118
}NOK_KINTERRUPT, * NOK_PKINTERRUPT;
//0x8 bytes (sizeof)
typedef struct _NOK_ISR_THUNK
{
    UCHAR PushImm;                                                          //0x0
    UCHAR Vector;                                                           //0x1
    UCHAR PushRbp;                                                          //0x2
    UCHAR JmpOp;                                                            //0x3
    LONG JmpOffset;                                                         //0x4
}NOK_ISR_THUNK, * NOK_PISR_THUNK;
//0xc8 bytes (sizeof)
typedef struct _NOK_HIVE_LIST_ENTRY
{
    WCHAR* FileName;                                                        //0x0
    WCHAR* BaseName;                                                        //0x8
    WCHAR* RegRootName;                                                     //0x10
    NOK_PCMHIVE CmHive;                                                 //0x18
    ULONG HHiveFlags;                                                       //0x20
    ULONG CmHiveFlags;                                                      //0x24
    ULONG CmKcbCacheSize;                                                   //0x28
    NOK_PCMHIVE CmHive2;                                                //0x30
    UCHAR HiveMounted;                                                      //0x38
    UCHAR ThreadFinished;                                                   //0x39
    UCHAR ThreadStarted;                                                    //0x3a
    UCHAR Allocate;                                                         //0x3b
    UCHAR WinPERequired;                                                    //0x3c
    NOK_KEVENT StartEvent;                                              //0x40
    NOK_KEVENT FinishedEvent;                                           //0x58
    NOK_KEVENT MountLock;                                               //0x70
    NOK_EX_PUSH_LOCK MountCallbackLock;                                 //0x88
    NOK_EX_PUSH_LOCK CallbackListLock;                                  //0x90
    NOK_LIST_ENTRY CallbackListHead;                                    //0x98
    NOK_PWORK_QUEUE_ITEM CallbackWorkItem;                              //0xa8
    volatile LONG CallbackWorkItemBusy;                                     //0xb0
    NOK_UNICODE_STRING FilePath;                                        //0xb8
}NOK_HIVE_LIST_ENTRY, * NOK_PHIVE_LIST_ENTRY;
//0x8 bytes (sizeof)
typedef struct _NOK_RTL_AVL_TREE
{
    NOK_PRTL_BALANCED_NODE Root;                                        //0x0
}NOK_RTL_AVL_TREE, * NOK_PRTL_AVL_TREE;
//0x30 bytes (sizeof)
typedef struct _NOK_IO_TIMER
{
    SHORT Type;                                                             //0x0
    SHORT TimerFlag;                                                        //0x2
    NOK_LIST_ENTRY TimerList;                                           //0x8
    VOID (*TimerRoutine)(NOK_PDEVICE_OBJECT arg1, VOID* arg2);          //0x18
    VOID* Context;                                                          //0x20
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x28
}NOK_IO_TIMER, * NOK_PIO_TIMER;
//0x10 bytes (sizeof)
typedef union _NOK_HANDLE_TABLE_ENTRY
{
    volatile LONGLONG VolatileLowValue;                                     //0x0
    LONGLONG LowValue;                                                      //0x0
    struct
    {
        NOK_HANDLE_TABLE_ENTRY_INFO* volatile InfoTable;                //0x0
    LONGLONG HighValue;                                                     //0x8
    NOK_PHANDLE_TABLE_ENTRY NextFreeHandleEntry;                         //0x8
        NOK_EXHANDLE LeafHandleValue;                                   //0x8
    };
    LONGLONG RefCountField;                                                 //0x0
    ULONGLONG Unlocked:1;                                                   //0x0
    ULONGLONG RefCnt:16;                                                    //0x0
    ULONGLONG Attributes:3;                                                 //0x0
    struct
    {
        ULONGLONG ObjectPointerBits:44;                                     //0x0
    ULONG GrantedAccessBits:25;                                             //0x8
    ULONG NoRightsUpgrade:1;                                                //0x8
        ULONG Spare1:6;                                                     //0x8
    };
    ULONG Spare2;                                                           //0xc
}NOK_HANDLE_TABLE_ENTRY, * NOK_PHANDLE_TABLE_ENTRY;
//0x8 bytes (sizeof)
typedef struct _NOK_KALPC_WORK_ON_BEHALF_DATA
{
    NOK_ALPC_WORK_ON_BEHALF_TICKET Ticket;                              //0x0
}NOK_KALPC_WORK_ON_BEHALF_DATA, * NOK_PKALPC_WORK_ON_BEHALF_DATA;
//0x150 bytes (sizeof)
typedef struct _NOK_DEVICE_OBJECT
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    LONG ReferenceCount;                                                    //0x4
    NOK_PDRIVER_OBJECT DriverObject;                                    //0x8
    NOK_PDEVICE_OBJECT NextDevice;                                      //0x10
    NOK_PDEVICE_OBJECT AttachedDevice;                                  //0x18
    NOK_PIRP CurrentIrp;                                                //0x20
    NOK_PIO_TIMER Timer;                                                //0x28
    ULONG Flags;                                                            //0x30
    ULONG Characteristics;                                                  //0x34
    NOK_PVPB Vpb;                                                       //0x38
    VOID* DeviceExtension;                                                  //0x40
    ULONG DeviceType;                                                       //0x48
    CHAR StackSize;                                                         //0x4c
    union
    {
        NOK_LIST_ENTRY ListEntry;                                       //0x50
        NOK_WAIT_CONTEXT_BLOCK Wcb;                                     //0x50
    } Queue;                                                                //0x50
    ULONG AlignmentRequirement;                                             //0x98
    NOK_KDEVICE_QUEUE DeviceQueue;                                      //0xa0
    NOK_KDPC Dpc;                                                       //0xc8
    ULONG ActiveThreadCount;                                                //0x108
    VOID* SecurityDescriptor;                                               //0x110
    NOK_KEVENT DeviceLock;                                              //0x118
    USHORT SectorSize;                                                      //0x130
    USHORT Spare1;                                                          //0x132
    NOK_PDEVOBJ_EXTENSION DeviceObjectExtension;                        //0x138
    VOID* Reserved;                                                         //0x140
}NOK_DEVICE_OBJECT, * NOK_PDEVICE_OBJECT;
//0x28 bytes (sizeof)
typedef struct _NOK_PORT_MESSAGE
{
    union
    {
        struct
        {
            SHORT DataLength;                                               //0x0
            SHORT TotalLength;                                              //0x2
        } s1;                                                               //0x0
        ULONG Length;                                                       //0x0
    } u1;                                                                   //0x0
    union
    {
        struct
        {
            SHORT Type;                                                     //0x4
            SHORT DataInfoOffset;                                           //0x6
        } s2;                                                               //0x4
        ULONG ZeroInit;                                                     //0x4
    } u2;                                                                   //0x4
    union
    {
        NOK_CLIENT_ID ClientId;                                         //0x8
        double DoNotUseThisField;                                           //0x8
    };
    ULONG MessageId;                                                        //0x18
    union
    {
        ULONGLONG ClientViewSize;                                           //0x20
        ULONG CallbackId;                                                   //0x20
    };
}NOK_PORT_MESSAGE, * NOK_PPORT_MESSAGE;
//0x30 bytes (sizeof)
typedef struct _NOK_KALPC_RESERVE
{
    NOK_PALPC_PORT OwnerPort;                                           //0x0
    NOK_PALPC_HANDLE_TABLE HandleTable;                                 //0x8
    VOID* Handle;                                                           //0x10
    NOK_PKALPC_MESSAGE Message;                                         //0x18
    ULONGLONG Size;                                                         //0x20
    LONG Active;                                                            //0x28
}NOK_KALPC_RESERVE, * NOK_PKALPC_RESERVE;
//0x58 bytes (sizeof)
typedef struct _NOK_KALPC_REGION
{
    NOK_LIST_ENTRY RegionListEntry;                                     //0x0
    NOK_PKALPC_SECTION Section;                                         //0x10
    ULONGLONG Offset;                                                       //0x18
    ULONGLONG Size;                                                         //0x20
    ULONGLONG ViewSize;                                                     //0x28
    union
    {
        struct
        {
            ULONG Secure:1;                                                 //0x30
        } s1;                                                               //0x30
    } u1;                                                                   //0x30
    ULONG NumberOfViews;                                                    //0x34
    NOK_LIST_ENTRY ViewListHead;                                        //0x38
    NOK_PKALPC_VIEW ReadOnlyView;                                       //0x48
    NOK_PKALPC_VIEW ReadWriteView;                                      //0x50
}NOK_KALPC_REGION, * NOK_PKALPC_REGION;
//0x10 bytes (sizeof)
typedef struct _NOK_SID_AND_ATTRIBUTES
{
    VOID* Sid;                                                              //0x0
    ULONG Attributes;                                                       //0x8
}NOK_SID_AND_ATTRIBUTES, * NOK_PSID_AND_ATTRIBUTES;
//0x48 bytes (sizeof)
typedef struct _NOK_KALPC_SECTION
{
    VOID* SectionObject;                                                    //0x0
    ULONGLONG Size;                                                         //0x8
    NOK_PALPC_HANDLE_TABLE HandleTable;                                 //0x10
    VOID* SectionHandle;                                                    //0x18
    NOK_PEPROCESS OwnerProcess;                                         //0x20
    NOK_PALPC_PORT OwnerPort;                                           //0x28
    union
    {
        struct
        {
            ULONG Internal:1;                                               //0x30
            ULONG Secure:1;                                                 //0x30
        } s1;                                                               //0x30
    } u1;                                                                   //0x30
    ULONG NumberOfRegions;                                                  //0x34
    NOK_LIST_ENTRY RegionListHead;                                      //0x38
}NOK_KALPC_SECTION, * NOK_PKALPC_SECTION;
//0x40 bytes (sizeof)
typedef struct _NOK_ALPC_DISPATCH_CONTEXT
{
    NOK_PALPC_PORT PortObject;                                          //0x0
    NOK_PKALPC_MESSAGE Message;                                         //0x8
    NOK_PALPC_COMMUNICATION_INFO CommunicationInfo;                     //0x10
    NOK_PETHREAD TargetThread;                                          //0x18
    NOK_PALPC_PORT TargetPort;                                          //0x20
    NOK_KALPC_DIRECT_EVENT DirectEvent;                                  //0x28
    ULONG Flags;                                                            //0x30
    USHORT TotalLength;                                                     //0x34
    USHORT Type;                                                            //0x36
    USHORT DataInfoOffset;                                                  //0x38
    UCHAR SignalCompletion;                                                 //0x3a
    UCHAR PostedToCompletionList;                                           //0x3b
}NOK_ALPC_DISPATCH_CONTEXT, * NOK_PALPC_DISPATCH_CONTEXT;
//0x60 bytes (sizeof)
typedef struct _NOK_KALPC_VIEW
{
    NOK_LIST_ENTRY ViewListEntry;                                       //0x0
    NOK_PKALPC_REGION Region;                                           //0x10
    NOK_PALPC_PORT OwnerPort;                                           //0x18
    NOK_PEPROCESS OwnerProcess;                                         //0x20
    VOID* Address;                                                          //0x28
    ULONGLONG Size;                                                         //0x30
    VOID* SecureViewHandle;                                                 //0x38
    VOID* WriteAccessHandle;                                                //0x40
    union
    {
        struct
        {
            ULONG WriteAccess:1;                                            //0x48
            ULONG AutoRelease:1;                                            //0x48
            ULONG ForceUnlink:1;                                            //0x48
            ULONG SystemSpace:1;                                            //0x48
        } s1;                                                               //0x48
    } u1;                                                                   //0x48
    ULONG NumberOfOwnerMessages;                                            //0x4c
    NOK_LIST_ENTRY ProcessViewListEntry;                                //0x50
}NOK_KALPC_VIEW, * NOK_PKALPC_VIEW;
//0x10 bytes (sizeof)
typedef struct _NOK_SCATTER_GATHER_LIST
{
    ULONG NumberOfElements;                                                 //0x0
    ULONGLONG Reserved;                                                     //0x8
    NOK_SCATTER_GATHER_ELEMENT Elements[0];                             //0x10
}NOK_SCATTER_GATHER_LIST, * NOK_PSCATTER_GATHER_LIST;
//0x60 bytes (sizeof)
typedef struct _NOK_DMA_TRANSFER_CONTEXT
{
    ULONG Version;                                                          //0x0
    NOK_DMA_TRANSFER_CONTEXT_V1 V1;                                     //0x8
}NOK_DMA_TRANSFER_CONTEXT, * NOK_PDMA_TRANSFER_CONTEXT;
//0x10 bytes (sizeof)
typedef struct _NOK_KDESCRIPTOR
{
    USHORT Pad[3];                                                          //0x0
    USHORT Limit;                                                           //0x6
    VOID* Base;                                                             //0x8
}NOK_KDESCRIPTOR, * NOK_PKDESCRIPTOR;
//0x30 bytes (sizeof)
typedef struct _NOK_KAPC_STATE
{
    NOK_LIST_ENTRY ApcListHead[2];                                      //0x0
    NOK_PKPROCESS Process;                                              //0x20
    union
    {
        UCHAR InProgressFlags;                                              //0x28
        struct
        {
            UCHAR KernelApcInProgress:1;                                    //0x28
            UCHAR SpecialApcInProgress:1;                                   //0x28
        };
    };
    UCHAR KernelApcPending;                                                 //0x29
    union
    {
        UCHAR UserApcPendingAll;                                            //0x2a
        struct
        {
            UCHAR SpecialUserApcPending:1;                                  //0x2a
            UCHAR UserApcPending:1;                                         //0x2a
        };
    };
}NOK_KAPC_STATE, * NOK_PKAPC_STATE;
//0xc bytes (sizeof)
typedef struct _NOK_IOP_IRP_EXTENSION_STATUS
{
    ULONG Flags;                                                            //0x0
    ULONG ActivityId;                                                       //0x4
    ULONG IoTracking;                                                       //0x8
}NOK_IOP_IRP_EXTENSION_STATUS, * NOK_PIOP_IRP_EXTENSION_STATUS;
//0x600 bytes (sizeof)
typedef struct _NOK_HHIVE
{
    ULONG Signature;                                                        //0x0
    NOK_PCELL_DATA (*GetCellRoutine)(NOK_PHHIVE arg1, ULONG arg2, NOK_PHV_GET_CELL_CONTEXT arg3); //0x8
    VOID (*ReleaseCellRoutine)(NOK_PHHIVE arg1, NOK_PHV_GET_CELL_CONTEXT arg2); //0x10
    VOID* (*Allocate)(ULONG arg1, UCHAR arg2, ULONG arg3);                  //0x18
    VOID (*Free)(VOID* arg1, ULONG arg2);                                   //0x20
    LONG (*FileWrite)(NOK_PHHIVE arg1, ULONG arg2, NOK_PCMP_OFFSET_ARRAY arg3, ULONG arg4, ULONG arg5); //0x28
    LONG (*FileRead)(NOK_PHHIVE arg1, ULONG arg2, ULONG arg3, VOID* arg4, ULONG arg5); //0x30
    VOID* HiveLoadFailure;                                                  //0x38
    NOK_PHBASE_BLOCK BaseBlock;                                         //0x40
    NOK_CMSI_RW_LOCK FlusherLock;                                       //0x48
    NOK_CMSI_RW_LOCK WriterLock;                                        //0x50
    NOK_RTL_BITMAP DirtyVector;                                         //0x58
    ULONG DirtyCount;                                                       //0x68
    ULONG DirtyAlloc;                                                       //0x6c
    NOK_RTL_BITMAP UnreconciledVector;                                  //0x70
    ULONG UnreconciledCount;                                                //0x80
    ULONG BaseBlockAlloc;                                                   //0x84
    ULONG Cluster;                                                          //0x88
    UCHAR Flat:1;                                                           //0x8c
    UCHAR ReadOnly:1;                                                       //0x8c
    UCHAR Reserved:6;                                                       //0x8c
    UCHAR DirtyFlag;                                                        //0x8d
    ULONG HvBinHeadersUse;                                                  //0x90
    ULONG HvFreeCellsUse;                                                   //0x94
    ULONG HvUsedCellsUse;                                                   //0x98
    ULONG CmUsedCellsUse;                                                   //0x9c
    ULONG HiveFlags;                                                        //0xa0
    ULONG CurrentLog;                                                       //0xa4
    ULONG CurrentLogSequence;                                               //0xa8
    ULONG CurrentLogMinimumSequence;                                        //0xac
    ULONG CurrentLogOffset;                                                 //0xb0
    ULONG MinimumLogSequence;                                               //0xb4
    ULONG LogFileSizeCap;                                                   //0xb8
    UCHAR LogDataPresent[2];                                                //0xbc
    UCHAR PrimaryFileValid;                                                 //0xbe
    UCHAR BaseBlockDirty;                                                   //0xbf
    NOK_LARGE_INTEGER LastLogSwapTime;                                   //0xc0
    union
    {
        struct
        {
            USHORT FirstLogFile:3;                                          //0xc8
            USHORT SecondLogFile:3;                                         //0xc8
            USHORT HeaderRecovered:1;                                       //0xc8
            USHORT LegacyRecoveryIndicated:1;                               //0xc8
            USHORT RecoveryInformationReserved:8;                           //0xc8
        };
        USHORT RecoveryInformation;                                         //0xc8
    };
    UCHAR LogEntriesRecovered[2];                                           //0xca
    ULONG RefreshCount;                                                     //0xcc
    ULONG StorageTypeCount;                                                 //0xd0
    ULONG Version;                                                          //0xd4
    NOK_HVP_VIEW_MAP ViewMap;                                           //0xd8
    NOK_DUAL Storage[2];                                                //0x110
}NOK_HHIVE, * NOK_PHHIVE;
//0xc0 bytes (sizeof)
typedef struct _NOK_HEAP_SEG_CONTEXT
{
    ULONGLONG SegmentMask;                                                  //0x0
    UCHAR UnitShift;                                                        //0x8
    UCHAR PagesPerUnitShift;                                                //0x9
    UCHAR FirstDescriptorIndex;                                             //0xa
    UCHAR CachedCommitSoftShift;                                            //0xb
    UCHAR CachedCommitHighShift;                                            //0xc
    union
    {
        UCHAR LargePagePolicy:3;                                            //0xd
        UCHAR FullDecommit:1;                                               //0xd
        UCHAR ReleaseEmptySegments:1;                                       //0xd
        UCHAR AllFlags;                                                     //0xd
    } Flags;                                                                //0xd
    ULONG MaxAllocationSize;                                                //0x10
    SHORT OlpStatsOffset;                                                   //0x14
    SHORT MemStatsOffset;                                                   //0x16
    VOID* LfhContext;                                                       //0x18
    VOID* VsContext;                                                        //0x20
    NOK_RTL_HP_ENV_HANDLE EnvHandle;                                     //0x28
    VOID* Heap;                                                             //0x38
    ULONGLONG SegmentLock;                                                  //0x40
    NOK_LIST_ENTRY SegmentListHead;                                     //0x48
    ULONGLONG SegmentCount;                                                 //0x58
    NOK_RTL_RB_TREE FreePageRanges;                                     //0x60
    ULONGLONG FreeSegmentListLock;                                          //0x70
    NOK_SINGLE_LIST_ENTRY FreeSegmentList[2];                           //0x78
}NOK_HEAP_SEG_CONTEXT, * NOK_PHEAP_SEG_CONTEXT;
//0x10 bytes (sizeof)
typedef struct _NOK_KDPC_LIST
{
    NOK_SINGLE_LIST_ENTRY ListHead;                                     //0x0
    NOK_PSINGLE_LIST_ENTRY LastEntry;                                   //0x8
}NOK_KDPC_LIST, * NOK_PKDPC_LIST;
//0x40 bytes (sizeof)
typedef struct _NOK_HEAP_VIRTUAL_ALLOC_ENTRY
{
    NOK_LIST_ENTRY Entry;                                               //0x0
    NOK_HEAP_ENTRY_EXTRA ExtraStuff;                                    //0x10
    ULONGLONG CommitSize;                                                   //0x20
    ULONGLONG ReserveSize;                                                  //0x28
    NOK_HEAP_ENTRY BusyBlock;                                           //0x30
}NOK_HEAP_VIRTUAL_ALLOC_ENTRY, * NOK_PHEAP_VIRTUAL_ALLOC_ENTRY;
//0xd0 bytes (sizeof)
typedef struct _NOK_IRP
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    NOK_PMDL MdlAddress;                                                //0x8
    ULONG Flags;                                                            //0x10
    union
    {
        NOK_PIRP MasterIrp;                                             //0x18
        LONG IrpCount;                                                      //0x18
        VOID* SystemBuffer;                                                 //0x18
    } AssociatedIrp;                                                        //0x18
    NOK_LIST_ENTRY ThreadListEntry;                                     //0x20
    NOK_IO_STATUS_BLOCK IoStatus;                                       //0x30
    CHAR RequestorMode;                                                     //0x40
    UCHAR PendingReturned;                                                  //0x41
    CHAR StackCount;                                                        //0x42
    CHAR CurrentLocation;                                                   //0x43
    UCHAR Cancel;                                                           //0x44
    UCHAR CancelIrql;                                                       //0x45
    CHAR ApcEnvironment;                                                    //0x46
    UCHAR AllocationFlags;                                                  //0x47
    NOK_PIO_STATUS_BLOCK UserIosb;                                      //0x48
    NOK_PKEVENT UserEvent;                                              //0x50
    union
    {
        struct
        {
            union
            {
                VOID (*UserApcRoutine)(VOID* arg1, NOK_PIO_STATUS_BLOCK arg2, ULONG arg3); //0x58
                VOID* IssuingProcess;                                       //0x58
            };
            VOID* UserApcContext;                                           //0x60
        } AsynchronousParameters;                                           //0x58
        NOK_LARGE_INTEGER AllocationSize;                                //0x58
    } Overlay;                                                              //0x58
    VOID (*CancelRoutine)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2);  //0x68
    VOID* UserBuffer;                                                       //0x70
    union
    {
        struct
        {
            union
            {
                NOK_KDEVICE_QUEUE_ENTRY DeviceQueueEntry;               //0x78
                VOID* DriverContext[4];                                     //0x78
            };
            NOK_PETHREAD Thread;                                        //0x98
            CHAR* AuxiliaryBuffer;                                          //0xa0
            NOK_LIST_ENTRY ListEntry;                                   //0xa8
            union
            {
                NOK_PIO_STACK_LOCATION CurrentStackLocation;            //0xb8
                ULONG PacketType;                                           //0xb8
            };
            NOK_PFILE_OBJECT OriginalFileObject;                        //0xc0
        } Overlay;                                                          //0x78
        NOK_KAPC Apc;                                                   //0x78
        VOID* CompletionKey;                                                //0x78
    } Tail;                                                                 //0x78
}NOK_IRP, * NOK_PIRP;
//0x150 bytes (sizeof)
typedef struct _NOK_KENTROPY_TIMING_STATE
{
    ULONG EntropyCount;                                                     //0x0
    ULONG Buffer[64];                                                       //0x4
    NOK_KDPC Dpc;                                                       //0x108
    ULONG LastDeliveredBuffer;                                              //0x148
}NOK_KENTROPY_TIMING_STATE, * NOK_PKENTROPY_TIMING_STATE;
//0x20 bytes (sizeof)
typedef struct _NOK_KERNEL_STACK_SEGMENT
{
    ULONGLONG StackBase;                                                    //0x0
    ULONGLONG StackLimit;                                                   //0x8
    ULONGLONG KernelStack;                                                  //0x10
    ULONGLONG InitialStack;                                                 //0x18
}NOK_KERNEL_STACK_SEGMENT, * NOK_PKERNEL_STACK_SEGMENT;
//0x2 bytes (sizeof)
typedef struct _NOK_HEAP_VS_UNUSED_BYTES_INFO
{
    union
    {
        struct
        {
            USHORT UnusedBytes:13;                                          //0x0
            USHORT LfhSubsegment:1;                                         //0x0
            USHORT ExtraPresent:1;                                          //0x0
            USHORT OneByteUnused:1;                                         //0x0
        };
        UCHAR Bytes[2];                                                     //0x0
    };
}NOK_HEAP_VS_UNUSED_BYTES_INFO, * NOK_PHEAP_VS_UNUSED_BYTES_INFO;
//0x200 bytes (sizeof)
typedef struct _NOK_XSAVE_FORMAT
{
    USHORT ControlWord;                                                     //0x0
    USHORT StatusWord;                                                      //0x2
    UCHAR TagWord;                                                          //0x4
    UCHAR Reserved1;                                                        //0x5
    USHORT ErrorOpcode;                                                     //0x6
    ULONG ErrorOffset;                                                      //0x8
    USHORT ErrorSelector;                                                   //0xc
    USHORT Reserved2;                                                       //0xe
    ULONG DataOffset;                                                       //0x10
    USHORT DataSelector;                                                    //0x14
    USHORT Reserved3;                                                       //0x16
    ULONG MxCsr;                                                            //0x18
    ULONG MxCsr_Mask;                                                       //0x1c
    NOK_M128A FloatRegisters[8];                                        //0x20
    NOK_M128A XmmRegisters[16];                                         //0xa0
    UCHAR Reserved4[96];                                                    //0x1a0
}NOK_XSAVE_FORMAT, * NOK_PXSAVE_FORMAT;
//0x4 bytes (sizeof)
typedef struct _NOK_KFLOATING_SAVE
{
    ULONG Dummy;                                                            //0x0
}NOK_KFLOATING_SAVE, * NOK_PKFLOATING_SAVE;
//0x18 bytes (sizeof)
typedef struct _NOK_KGATE
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
}NOK_KGATE, * NOK_PKGATE;
//0x18 bytes (sizeof)
typedef struct _NOK_KHETERO_PROCESSOR_SET
{
    ULONGLONG IdealMask;                                                    //0x0
    ULONGLONG PreferredMask;                                                //0x8
    ULONGLONG AvailableMask;                                                //0x10
}NOK_KHETERO_PROCESSOR_SET, * NOK_PKHETERO_PROCESSOR_SET;
//0xe0 bytes (sizeof)
typedef struct _NOK_HALP_DMA_CONTROLLER
{
    NOK_LIST_ENTRY Controllers;                                         //0x0
    NOK_LIST_ENTRY AdapterList;                                         //0x10
    ULONG ControllerId;                                                     //0x20
    ULONG MinimumRequestLine;                                               //0x24
    ULONG MaximumRequestLine;                                               //0x28
    ULONG ChannelCount;                                                     //0x2c
    ULONG ScatterGatherLimit;                                               //0x30
    NOK_PHALP_DMA_CHANNEL Channels;                                     //0x38
    VOID* ExtensionData;                                                    //0x40
    UCHAR CacheCoherent;                                                    //0x48
    ULONG DmaAddressWidth;                                                  //0x4c
    NOK_DMA_FUNCTION_TABLE Operations;                                  //0x50
    ULONG SupportedPortWidths;                                              //0xa0
    ULONG MinimumTransferUnit;                                              //0xa4
    ULONGLONG Lock;                                                         //0xa8
    UCHAR Irql;                                                             //0xb0
    UCHAR GeneratesInterrupt;                                               //0xb1
    LONG Gsi;                                                               //0xb4
    NOK_KINTERRUPT_POLARITY InterruptPolarity;                            //0xb8
    NOK_KINTERRUPT_MODE InterruptMode;                                    //0xbc
    NOK_UNICODE_STRING ResourceId;                                      //0xc0
    NOK_PPOHANDLE__ PowerHandle;                                         //0xd0
    UCHAR PowerActive;                                                      //0xd8
}NOK_HALP_DMA_CONTROLLER, * NOK_PHALP_DMA_CONTROLLER;
//0x30 bytes (sizeof)
typedef struct _NOK_KIST_BASE_FRAME
{
    NOK_PKPCR KernelGsBase;                                             //0x0
    NOK_PKIST_LINK_FRAME IstStack;                                      //0x8
    ULONGLONG PreviousGsBase;                                               //0x10
    ULONGLONG PreviousCr3;                                                  //0x18
    ULONGLONG IstPad;                                                       //0x20
    ULONGLONG Reserved;                                                     //0x28
}NOK_KIST_BASE_FRAME, * NOK_PKIST_BASE_FRAME;
//0x20 bytes (sizeof)
typedef struct _NOK_KIST_LINK_FRAME
{
    NOK_PKIST_BASE_FRAME IstBaseFrame;                                  //0x0
    ULONG Signature;                                                        //0x8
    ULONG Reserved0;                                                        //0xc
    ULONGLONG Reserved[2];                                                  //0x10
}NOK_KIST_LINK_FRAME, * NOK_PKIST_LINK_FRAME;
//0x28 bytes (sizeof)
typedef struct _NOK_PROCESS_DISK_COUNTERS
{
    ULONGLONG BytesRead;                                                    //0x0
    ULONGLONG BytesWritten;                                                 //0x8
    ULONGLONG ReadOperationCount;                                           //0x10
    ULONGLONG WriteOperationCount;                                          //0x18
    ULONGLONG FlushOperationCount;                                          //0x20
}NOK_PROCESS_DISK_COUNTERS, * NOK_PPROCESS_DISK_COUNTERS;
//0x20 bytes (sizeof)
typedef struct _NOK_KSEMAPHORE
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    LONG Limit;                                                             //0x18
}NOK_KSEMAPHORE, * NOK_PKSEMAPHORE;
//0x88 bytes (sizeof)
typedef struct _NOK_LAZY_WRITER
{
    NOK_KDPC ScanDpc;                                                   //0x0
    NOK_KTIMER ScanTimer;                                               //0x40
    UCHAR ScanActive;                                                       //0x80
    UCHAR OtherWork;                                                        //0x81
    UCHAR PendingTeardownScan;                                              //0x82
    UCHAR PendingPeriodicScan;                                              //0x83
    UCHAR PendingLowMemoryScan;                                             //0x84
    UCHAR PendingPowerScan;                                                 //0x85
    UCHAR PendingCoalescingFlushScan;                                       //0x86
}NOK_LAZY_WRITER, * NOK_PLAZY_WRITER;
//0x10 bytes (sizeof)
typedef struct _NOK_KSPIN_LOCK_QUEUE
{
    NOK_PKSPIN_LOCK_QUEUE volatile Next;                                //0x0
    ULONGLONG* volatile Lock;                                               //0x8
}NOK_KSPIN_LOCK_QUEUE, * NOK_PKSPIN_LOCK_QUEUE;
//0x20 bytes (sizeof)
typedef struct _NOK_RTL_BALANCED_LINKS
{
    NOK_PRTL_BALANCED_LINKS Parent;                                     //0x0
    NOK_PRTL_BALANCED_LINKS LeftChild;                                  //0x8
    NOK_PRTL_BALANCED_LINKS RightChild;                                 //0x10
    CHAR Balance;                                                           //0x18
    UCHAR Reserved[3];                                                      //0x19
}NOK_RTL_BALANCED_LINKS, * NOK_PRTL_BALANCED_LINKS;
//0x58 bytes (sizeof)
typedef struct _NOK_IO_WORKITEM
{
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x0
    VOID (*Routine)(VOID* arg1, VOID* arg2, NOK_PIO_WORKITEM arg3);     //0x20
    VOID* IoObject;                                                         //0x28
    VOID* Context;                                                          //0x30
    NOK_PETHREAD WorkOnBehalfThread;                                    //0x38
    ULONG Type;                                                             //0x40
    NOK_GUID ActivityId;                                                //0x44
}NOK_IO_WORKITEM, * NOK_PIO_WORKITEM;
//0x38 bytes (sizeof)
typedef struct _NOK_NT_TIB
{
    NOK_PEXCEPTION_REGISTRATION_RECORD ExceptionList;                   //0x0
    VOID* StackBase;                                                        //0x8
    VOID* StackLimit;                                                       //0x10
    VOID* SubSystemTib;                                                     //0x18
    union
    {
        VOID* FiberData;                                                    //0x20
        ULONG Version;                                                      //0x20
    };
    VOID* ArbitraryUserPointer;                                             //0x28
    NOK_PNT_TIB Self;                                                   //0x30
}NOK_NT_TIB, * NOK_PNT_TIB;
//0x178 bytes (sizeof)
typedef struct _NOK_KPCR
{
    union
    {
        NOK_NT_TIB NtTib;                                               //0x0
        struct
        {
            NOK_PKGDTENTRY64 GdtBase;                                    //0x0
            NOK_PKTSS64 TssBase;                                        //0x8
            ULONGLONG UserRsp;                                              //0x10
            NOK_PKPCR Self;                                             //0x18
            NOK_PKPRCB CurrentPrcb;                                     //0x20
            NOK_PKSPIN_LOCK_QUEUE LockArray;                            //0x28
            VOID* Used_Self;                                                //0x30
        };
    };
    NOK_PKIDTENTRY64 IdtBase;                                            //0x38
    ULONGLONG Unused[2];                                                    //0x40
    UCHAR Irql;                                                             //0x50
    UCHAR SecondLevelCacheAssociativity;                                    //0x51
    UCHAR ObsoleteNumber;                                                   //0x52
    UCHAR Fill0;                                                            //0x53
    ULONG Unused0[3];                                                       //0x54
    USHORT MajorVersion;                                                    //0x60
    USHORT MinorVersion;                                                    //0x62
    ULONG StallScaleFactor;                                                 //0x64
    VOID* Unused1[3];                                                       //0x68
    ULONG KernelReserved[15];                                               //0x80
    ULONG SecondLevelCacheSize;                                             //0xbc
    ULONG HalReserved[16];                                                  //0xc0
    ULONG Unused2;                                                          //0x100
    VOID* KdVersionBlock;                                                   //0x108
    VOID* Unused3;                                                          //0x110
    ULONG PcrAlign1[24];                                                    //0x118
}NOK_KPCR, * NOK_PKPCR;
//0xf0 bytes (sizeof)
typedef struct _NOK_KSPECIAL_REGISTERS
{
    ULONGLONG Cr0;                                                          //0x0
    ULONGLONG Cr2;                                                          //0x8
    ULONGLONG Cr3;                                                          //0x10
    ULONGLONG Cr4;                                                          //0x18
    ULONGLONG KernelDr0;                                                    //0x20
    ULONGLONG KernelDr1;                                                    //0x28
    ULONGLONG KernelDr2;                                                    //0x30
    ULONGLONG KernelDr3;                                                    //0x38
    ULONGLONG KernelDr6;                                                    //0x40
    ULONGLONG KernelDr7;                                                    //0x48
    NOK_KDESCRIPTOR Gdtr;                                               //0x50
    NOK_KDESCRIPTOR Idtr;                                               //0x60
    USHORT Tr;                                                              //0x70
    USHORT Ldtr;                                                            //0x72
    ULONG MxCsr;                                                            //0x74
    ULONGLONG DebugControl;                                                 //0x78
    ULONGLONG LastBranchToRip;                                              //0x80
    ULONGLONG LastBranchFromRip;                                            //0x88
    ULONGLONG LastExceptionToRip;                                           //0x90
    ULONGLONG LastExceptionFromRip;                                         //0x98
    ULONGLONG Cr8;                                                          //0xa0
    ULONGLONG MsrGsBase;                                                    //0xa8
    ULONGLONG MsrGsSwap;                                                    //0xb0
    ULONGLONG MsrStar;                                                      //0xb8
    ULONGLONG MsrLStar;                                                     //0xc0
    ULONGLONG MsrCStar;                                                     //0xc8
    ULONGLONG MsrSyscallMask;                                               //0xd0
    ULONGLONG Xcr0;                                                         //0xd8
    ULONGLONG MsrFsBase;                                                    //0xe0
    ULONGLONG SpecialPadding0;                                              //0xe8
}NOK_KSPECIAL_REGISTERS, * NOK_PKSPECIAL_REGISTERS;
//0x2e0 bytes (sizeof)
typedef struct _NOK_EX_WORK_QUEUE
{
    NOK_KPRIQUEUE WorkPriQueue;                                         //0x0
    NOK_PEX_PARTITION Partition;                                        //0x2b0
    NOK_PENODE Node;                                                    //0x2b8
    volatile ULONG WorkItemsProcessed;                                      //0x2c0
    ULONG WorkItemsProcessedLastPass;                                       //0x2c4
    volatile LONG ThreadCount;                                              //0x2c8
    LONG MinThreads:31;                                                     //0x2cc
    volatile ULONG TryFailed:1;                                             //0x2cc
    LONG MaxThreads;                                                        //0x2d0
    NOK_EXQUEUEINDEX QueueIndex;                                          //0x2d4
    NOK_PKEVENT AllThreadsExitedEvent;                                  //0x2d8
}NOK_EX_WORK_QUEUE, * NOK_PEX_WORK_QUEUE;
//0x10 bytes (sizeof)
typedef struct _NOK_KSECURE_FAULT_INFORMATION
{
    ULONGLONG FaultCode;                                                    //0x0
    ULONGLONG FaultVa;                                                      //0x8
}NOK_KSECURE_FAULT_INFORMATION, * NOK_PKSECURE_FAULT_INFORMATION;
//0x4 bytes (sizeof)
typedef struct _NOK_MMSUPPORT_FLAGS
{
    union
    {
        struct
        {
            UCHAR WorkingSetType:3;                                         //0x0
            UCHAR Reserved0:3;                                              //0x0
            UCHAR MaximumWorkingSetHard:1;                                  //0x0
            UCHAR MinimumWorkingSetHard:1;                                  //0x0
            UCHAR SessionMaster:1;                                          //0x1
            UCHAR TrimmerState:2;                                           //0x1
            UCHAR Reserved:1;                                               //0x1
            UCHAR PageStealers:4;                                           //0x1
        };
        USHORT u1;                                                          //0x0
    };
    UCHAR MemoryPriority;                                                   //0x2
    union
    {
        struct
        {
            UCHAR WsleDeleted:1;                                            //0x3
            UCHAR SvmEnabled:1;                                             //0x3
            UCHAR ForceAge:1;                                               //0x3
            UCHAR ForceTrim:1;                                              //0x3
            UCHAR NewMaximum:1;                                             //0x3
            UCHAR CommitReleaseState:2;                                     //0x3
        };
        UCHAR u2;                                                           //0x3
    };
}NOK_MMSUPPORT_FLAGS, * NOK_PMMSUPPORT_FLAGS;
//0x48 bytes (sizeof)
typedef struct _NOK_ETW_REPLY_QUEUE
{
    NOK_KQUEUE Queue;                                                   //0x0
    LONG EventsLost;                                                        //0x40
}NOK_ETW_REPLY_QUEUE, * NOK_PETW_REPLY_QUEUE;
//0x20 bytes (sizeof)
typedef struct _NOK_KREQUEST_PACKET
{
    VOID* CurrentPacket[3];                                                 //0x0
    VOID (*WorkerRoutine)(VOID* arg1, VOID* arg2, VOID* arg3, VOID* arg4);  //0x18
}NOK_KREQUEST_PACKET, * NOK_PKREQUEST_PACKET;
//0x270 bytes (sizeof)
typedef struct _NOK_KSHARED_READY_QUEUE
{
    ULONGLONG Lock;                                                         //0x0
    ULONG ReadySummary;                                                     //0x8
    NOK_LIST_ENTRY ReadyListHead[32];                                   //0x10
    CHAR RunningSummary[64];                                                //0x210
    UCHAR Span;                                                             //0x250
    UCHAR LowProcIndex;                                                     //0x251
    UCHAR QueueIndex;                                                       //0x252
    UCHAR ProcCount;                                                        //0x253
    UCHAR ScanOwner;                                                        //0x254
    UCHAR Spare[3];                                                         //0x255
    ULONGLONG Affinity;                                                     //0x258
    ULONG ReadyThreadCount;                                                 //0x260
    ULONGLONG ReadyQueueExpectedRunTime;                                    //0x268
}NOK_KSHARED_READY_QUEUE, * NOK_PKSHARED_READY_QUEUE;
//0x8 bytes (sizeof)
typedef union _NOK_CLS_LSN
{
    struct
    {
        ULONG idxRecord;                                                    //0x0
        ULONG cidContainer;                                                 //0x4
    } offset;                                                               //0x0
    ULONGLONG ullOffset;                                                    //0x0
}NOK_CLS_LSN, * NOK_PCLS_LSN;
//0x28 bytes (sizeof)
typedef struct _NOK_KTMOBJECT_NAMESPACE_LINK
{
    NOK_RTL_BALANCED_LINKS Links;                                       //0x0
    UCHAR Expired;                                                          //0x20
}NOK_KTMOBJECT_NAMESPACE_LINK, * NOK_PKTMOBJECT_NAMESPACE_LINK;
//0x68 bytes (sizeof)
typedef struct _NOK_RTL_AVL_TABLE
{
    NOK_RTL_BALANCED_LINKS BalancedRoot;                                //0x0
    VOID* OrderedPointer;                                                   //0x20
    ULONG WhichOrderedElement;                                              //0x28
    ULONG NumberGenericTableElements;                                       //0x2c
    ULONG DepthOfTree;                                                      //0x30
    NOK_PRTL_BALANCED_LINKS RestartKey;                                 //0x38
    ULONG DeleteCount;                                                      //0x40
    NOK_RTL_GENERIC_COMPARE_RESULTS (*CompareRoutine)(NOK_PRTL_AVL_TABLE arg1, VOID* arg2, VOID* arg3); //0x48
    VOID* (*AllocateRoutine)(NOK_PRTL_AVL_TABLE arg1, ULONG arg2);      //0x50
    VOID (*FreeRoutine)(NOK_PRTL_AVL_TABLE arg1, VOID* arg2);           //0x58
    VOID* TableContext;                                                     //0x60
}NOK_RTL_AVL_TABLE, * NOK_PRTL_AVL_TABLE;
//0xa8 bytes (sizeof)
typedef struct _NOK_KTMOBJECT_NAMESPACE
{
    NOK_RTL_AVL_TABLE Table;                                            //0x0
    NOK_KMUTANT Mutex;                                                  //0x68
    USHORT LinksOffset;                                                     //0xa0
    USHORT GuidOffset;                                                      //0xa2
    UCHAR Expired;                                                          //0xa4
}NOK_KTMOBJECT_NAMESPACE, * NOK_PKTMOBJECT_NAMESPACE;
//0x3c0 bytes (sizeof)
typedef struct _NOK_KTM
{
    ULONG cookie;                                                           //0x0
    NOK_KMUTANT Mutex;                                                  //0x8
    NOK_KTM_STATE State;                                                   //0x40
    NOK_KTMOBJECT_NAMESPACE_LINK NamespaceLink;                         //0x48
    NOK_GUID TmIdentity;                                                //0x70
    ULONG Flags;                                                            //0x80
    ULONG VolatileFlags;                                                    //0x84
    NOK_UNICODE_STRING LogFileName;                                     //0x88
    NOK_PFILE_OBJECT LogFileObject;                                     //0x98
    VOID* MarshallingContext;                                               //0xa0
    VOID* LogManagementContext;                                             //0xa8
    NOK_KTMOBJECT_NAMESPACE Transactions;                               //0xb0
    NOK_KTMOBJECT_NAMESPACE ResourceManagers;                           //0x158
    NOK_KMUTANT LsnOrderedMutex;                                        //0x200
    NOK_LIST_ENTRY LsnOrderedList;                                      //0x238
    NOK_LARGE_INTEGER CommitVirtualClock;                                //0x248
    NOK_FAST_MUTEX CommitVirtualClockMutex;                             //0x250
    NOK_CLS_LSN BaseLsn;                                                 //0x288
    NOK_CLS_LSN CurrentReadLsn;                                          //0x290
    NOK_CLS_LSN LastRecoveredLsn;                                        //0x298
    VOID* TmRmHandle;                                                       //0x2a0
    NOK_PKRESOURCEMANAGER TmRm;                                         //0x2a8
    NOK_KEVENT LogFullNotifyEvent;                                      //0x2b0
    NOK_WORK_QUEUE_ITEM CheckpointWorkItem;                             //0x2c8
    NOK_CLS_LSN CheckpointTargetLsn;                                     //0x2e8
    NOK_WORK_QUEUE_ITEM LogFullCompletedWorkItem;                       //0x2f0
    NOK_ERESOURCE LogWriteResource;                                     //0x310
    ULONG LogFlags;                                                         //0x378
    LONG LogFullStatus;                                                     //0x37c
    LONG RecoveryStatus;                                                    //0x380
    NOK_CLS_LSN LastCheckBaseLsn;                                        //0x388
    NOK_LIST_ENTRY RestartOrderedList;                                  //0x390
    NOK_WORK_QUEUE_ITEM OfflineWorkItem;                                //0x3a0
}NOK_KTM, * NOK_PKTM;
//0x1a8 bytes (sizeof)
typedef struct _NOK_KSCB
{
    ULONGLONG GenerationCycles;                                             //0x0
    ULONGLONG MinQuotaCycleTarget;                                          //0x8
    ULONGLONG MaxQuotaCycleTarget;                                          //0x10
    ULONGLONG RankCycleTarget;                                              //0x18
    ULONGLONG LongTermCycles;                                               //0x20
    ULONGLONG LastReportedCycles;                                           //0x28
    volatile ULONGLONG OverQuotaHistory;                                    //0x30
    ULONGLONG ReadyTime;                                                    //0x38
    ULONGLONG InsertTime;                                                   //0x40
    NOK_LIST_ENTRY PerProcessorList;                                    //0x48
    NOK_RTL_BALANCED_NODE QueueNode;                                    //0x58
    UCHAR Inserted:1;                                                       //0x70
    UCHAR MaxOverQuota:1;                                                   //0x70
    UCHAR MinOverQuota:1;                                                   //0x70
    UCHAR RankBias:1;                                                       //0x70
    UCHAR SoftCap:1;                                                        //0x70
    UCHAR ShareRankOwner:1;                                                 //0x70
    UCHAR Spare1:2;                                                         //0x70
    UCHAR Depth;                                                            //0x71
    USHORT ReadySummary;                                                    //0x72
    ULONG Rank;                                                             //0x74
    volatile ULONG* ShareRank;                                              //0x78
    volatile ULONG OwnerShareRank;                                          //0x80
    NOK_LIST_ENTRY ReadyListHead[16];                                   //0x88
    NOK_RTL_RB_TREE ChildScbQueue;                                      //0x188
    NOK_PKSCB Parent;                                                   //0x198
    NOK_PKSCB Root;                                                     //0x1a0
}NOK_KSCB, * NOK_PKSCB;
//0x28 bytes (sizeof)
typedef struct _NOK_HEAP_VS_SUBSEGMENT
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONGLONG CommitBitmap;                                                 //0x10
    ULONGLONG CommitLock;                                                   //0x18
    USHORT Size;                                                            //0x20
    USHORT Signature:15;                                                    //0x22
    USHORT FullCommit:1;                                                    //0x22
}NOK_HEAP_VS_SUBSEGMENT, * NOK_PHEAP_VS_SUBSEGMENT;
//0x30 bytes (sizeof)
typedef struct _NOK_KSECONDARY_IDT_ENTRY
{
    ULONGLONG SpinLock;                                                     //0x0
    NOK_KEVENT ConnectLock;                                             //0x8
    UCHAR LineMasked;                                                       //0x20
    NOK_PKINTERRUPT InterruptList;                                      //0x28
}NOK_KSECONDARY_IDT_ENTRY, * NOK_PKSECONDARY_IDT_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_KLOCK_QUEUE_HANDLE
{
    NOK_KSPIN_LOCK_QUEUE LockQueue;                                     //0x0
    UCHAR OldIrql;                                                          //0x10
}NOK_KLOCK_QUEUE_HANDLE, * NOK_PKLOCK_QUEUE_HANDLE;
//0x18 bytes (sizeof)
typedef struct _NOK_COUNTER_READING
{
    NOK_HARDWARE_COUNTER_TYPE Type;                                       //0x0
    ULONG Index;                                                            //0x4
    ULONGLONG Start;                                                        //0x8
    ULONGLONG Total;                                                        //0x10
}NOK_COUNTER_READING, * NOK_PCOUNTER_READING;
//0x2a0 bytes (sizeof)
typedef struct _NOK_KSTATIC_AFFINITY_BLOCK
{
    union
    {
        NOK_KAFFINITY_EX KeFlushTbAffinity;                             //0x0
        NOK_KAFFINITY_EX KeFlushWbAffinity;                             //0x0
        NOK_KAFFINITY_EX KeSyncContextAffinity;                         //0x0
    };
    NOK_KAFFINITY_EX KeFlushTbDeepIdleAffinity;                         //0xa8
    NOK_KAFFINITY_EX KeIpiSendAffinity;                                 //0x150
    NOK_KAFFINITY_EX KeIpiSendIpiSet;                                   //0x1f8
}NOK_KSTATIC_AFFINITY_BLOCK, * NOK_PKSTATIC_AFFINITY_BLOCK;
//0x4d0 bytes (sizeof)
typedef struct _NOK_CONTEXT
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    ULONGLONG P5Home;                                                       //0x20
    ULONGLONG P6Home;                                                       //0x28
    ULONG ContextFlags;                                                     //0x30
    ULONG MxCsr;                                                            //0x34
    USHORT SegCs;                                                           //0x38
    USHORT SegDs;                                                           //0x3a
    USHORT SegEs;                                                           //0x3c
    USHORT SegFs;                                                           //0x3e
    USHORT SegGs;                                                           //0x40
    USHORT SegSs;                                                           //0x42
    ULONG EFlags;                                                           //0x44
    ULONGLONG Dr0;                                                          //0x48
    ULONGLONG Dr1;                                                          //0x50
    ULONGLONG Dr2;                                                          //0x58
    ULONGLONG Dr3;                                                          //0x60
    ULONGLONG Dr6;                                                          //0x68
    ULONGLONG Dr7;                                                          //0x70
    ULONGLONG Rax;                                                          //0x78
    ULONGLONG Rcx;                                                          //0x80
    ULONGLONG Rdx;                                                          //0x88
    ULONGLONG Rbx;                                                          //0x90
    ULONGLONG Rsp;                                                          //0x98
    ULONGLONG Rbp;                                                          //0xa0
    ULONGLONG Rsi;                                                          //0xa8
    ULONGLONG Rdi;                                                          //0xb0
    ULONGLONG R8;                                                           //0xb8
    ULONGLONG R9;                                                           //0xc0
    ULONGLONG R10;                                                          //0xc8
    ULONGLONG R11;                                                          //0xd0
    ULONGLONG R12;                                                          //0xd8
    ULONGLONG R13;                                                          //0xe0
    ULONGLONG R14;                                                          //0xe8
    ULONGLONG R15;                                                          //0xf0
    ULONGLONG Rip;                                                          //0xf8
    union
    {
        NOK_XSAVE_FORMAT FltSave;                                       //0x100
        struct
        {
            NOK_M128A Header[2];                                        //0x100
            NOK_M128A Legacy[8];                                        //0x120
            NOK_M128A Xmm0;                                             //0x1a0
            NOK_M128A Xmm1;                                             //0x1b0
            NOK_M128A Xmm2;                                             //0x1c0
            NOK_M128A Xmm3;                                             //0x1d0
            NOK_M128A Xmm4;                                             //0x1e0
            NOK_M128A Xmm5;                                             //0x1f0
            NOK_M128A Xmm6;                                             //0x200
            NOK_M128A Xmm7;                                             //0x210
            NOK_M128A Xmm8;                                             //0x220
            NOK_M128A Xmm9;                                             //0x230
            NOK_M128A Xmm10;                                            //0x240
            NOK_M128A Xmm11;                                            //0x250
            NOK_M128A Xmm12;                                            //0x260
            NOK_M128A Xmm13;                                            //0x270
            NOK_M128A Xmm14;                                            //0x280
            NOK_M128A Xmm15;                                            //0x290
        };
    };
    NOK_M128A VectorRegister[26];                                       //0x300
    ULONGLONG VectorControl;                                                //0x4a0
    ULONGLONG DebugControl;                                                 //0x4a8
    ULONGLONG LastBranchToRip;                                              //0x4b0
    ULONGLONG LastBranchFromRip;                                            //0x4b8
    ULONGLONG LastExceptionToRip;                                           //0x4c0
    ULONGLONG LastExceptionFromRip;                                         //0x4c8
}NOK_CONTEXT, * NOK_PCONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_KSCHEDULING_GROUP_POLICY
{
    union
    {
        ULONG Value;                                                        //0x0
        USHORT Weight;                                                      //0x0
        struct
        {
            USHORT MinRate;                                                 //0x0
            USHORT MaxRate;                                                 //0x2
        };
    };
    union
    {
        ULONG AllFlags;                                                     //0x4
        struct
        {
            ULONG Type:1;                                                   //0x4
            ULONG Disabled:1;                                               //0x4
            ULONG RankBias:1;                                               //0x4
            ULONG Spare1:29;                                                //0x4
        };
    };
}NOK_KSCHEDULING_GROUP_POLICY, * NOK_PKSCHEDULING_GROUP_POLICY;
//0x30 bytes (sizeof)
typedef struct _NOK_KSTACK_CONTROL
{
    ULONGLONG StackBase;                                                    //0x0
    union
    {
        ULONGLONG ActualLimit;                                              //0x8
        ULONGLONG StackExpansion:1;                                         //0x8
    };
    NOK_KERNEL_STACK_SEGMENT Previous;                                  //0x10
}NOK_KSTACK_CONTROL, * NOK_PKSTACK_CONTROL;
//0x174 bytes (sizeof)
typedef struct _NOK_ETW_SYSTEM_LOGGER_SETTINGS
{
    NOK_ETW_SYSTEM_LOGGER EtwpSystemLogger[8];                          //0x0
    volatile ULONG EtwpActiveSystemLoggers;                                 //0x10
    NOK_PERFINFO_GROUPMASK SiloGlobalGroupMask;                         //0x14
    NOK_PERFINFO_GROUPMASK EtwpGroupMasks[10];                          //0x34
}NOK_ETW_SYSTEM_LOGGER_SETTINGS, * NOK_PETW_SYSTEM_LOGGER_SETTINGS;
//0xc bytes (sizeof)
typedef struct _NOK_KSYSTEM_TIME
{
    ULONG LowPart;                                                          //0x0
    LONG High1Time;                                                         //0x4
    LONG High2Time;                                                         //0x8
}NOK_KSYSTEM_TIME, * NOK_PKSYSTEM_TIME;
//0x8 bytes (sizeof)
typedef struct _NOK_KTB_FLUSH_VA
{
    union
    {
        ULONGLONG NumberOfEntries:10;                                       //0x0
        ULONGLONG PageSize:2;                                               //0x0
        VOID* Va;                                                           //0x0
        ULONGLONG VaLong;                                                   //0x0
    } u1;                                                                   //0x0
}NOK_KTB_FLUSH_VA, * NOK_PKTB_FLUSH_VA;
//0x88 bytes (sizeof)
typedef struct _NOK_KTIMER2
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    union
    {
        NOK_RTL_BALANCED_NODE RbNodes[2];                               //0x18
        NOK_LIST_ENTRY ListEntry;                                       //0x18
    };
    ULONGLONG DueTime[2];                                                   //0x48
    LONGLONG Period;                                                        //0x58
    VOID (*Callback)(NOK_KTIMER2* arg1, VOID* arg2);                    //0x60
    VOID* CallbackContext;                                                  //0x68
    VOID (*DisableCallback)(VOID* arg1);                                    //0x70
    VOID* DisableContext;                                                   //0x78
    UCHAR AbsoluteSystemTime;                                               //0x80
    union
    {
        UCHAR TypeFlags;                                                    //0x81
        struct
        {
            UCHAR Unused:1;                                                 //0x81
            UCHAR IdleResilient:1;                                          //0x81
            UCHAR HighResolution:1;                                         //0x81
            UCHAR NoWake:1;                                                 //0x81
            UCHAR PseudoHighRes:1;                                          //0x81
            UCHAR Unused1:3;                                                //0x81
        };
    };
    UCHAR CollectionIndex[2];                                               //0x82
}NOK_KTIMER2, * NOK_PKTIMER2;
//0x18 bytes (sizeof)
typedef struct _NOK_PS_PROPERTY_SET
{
    NOK_LIST_ENTRY ListHead;                                            //0x0
    ULONGLONG Lock;                                                         //0x10
}NOK_PS_PROPERTY_SET, * NOK_PPS_PROPERTY_SET;
//0x138 bytes (sizeof)
typedef struct _NOK_ETIMER
{
    NOK_KTIMER KeTimer;                                                 //0x0
    ULONGLONG Lock;                                                         //0x40
    NOK_KAPC TimerApc;                                                  //0x48
    NOK_KDPC TimerDpc;                                                  //0xa0
    NOK_LIST_ENTRY ActiveTimerListEntry;                                //0xe0
    ULONG Period;                                                           //0xf0
    union
    {
        CHAR TimerFlags;                                                    //0xf4
        struct
        {
            UCHAR ApcAssociated:1;                                          //0xf4
            UCHAR FlushDpcs:1;                                              //0xf4
            UCHAR Paused:1;                                                 //0xf4
            UCHAR Spare1:5;                                                 //0xf4
        };
    };
    UCHAR DueTimeType;                                                      //0xf5
    USHORT Spare2;                                                          //0xf6
    NOK_PDIAGNOSTIC_CONTEXT volatile WakeReason;                        //0xf8
    NOK_LIST_ENTRY WakeTimerListEntry;                                  //0x100
    VOID* VirtualizedTimerCookie;                                           //0x110
    NOK_LIST_ENTRY VirtualizedTimerLinks;                               //0x118
    ULONGLONG DueTime;                                                      //0x128
    ULONG CoalescingWindow;                                                 //0x130
}NOK_ETIMER, * NOK_PETIMER;
//0x118 bytes (sizeof)
typedef struct _NOK_EX_WORK_QUEUE_MANAGER
{
    NOK_PEX_PARTITION Partition;                                        //0x0
    NOK_PENODE Node;                                                    //0x8
    NOK_KEVENT Event;                                                   //0x10
    NOK_KTIMER DeadlockTimer;                                           //0x28
    NOK_KEVENT ReaperEvent;                                             //0x68
    NOK_KTIMER2 ReaperTimer;                                            //0x80
    VOID* ThreadHandle;                                                     //0x108
    volatile ULONG ExitThread;                                              //0x110
    USHORT ThreadSeed;                                                      //0x114
}NOK_EX_WORK_QUEUE_MANAGER, * NOK_PEX_WORK_QUEUE_MANAGER;
//0x28 bytes (sizeof)
typedef struct _NOK_KDPC_DATA
{
    NOK_KDPC_LIST DpcList;                                              //0x0
    ULONGLONG DpcLock;                                                      //0x10
    volatile LONG DpcQueueDepth;                                            //0x18
    ULONG DpcCount;                                                         //0x1c
    NOK_PKDPC volatile ActiveDpc;                                       //0x20
}NOK_KDPC_DATA, * NOK_PKDPC_DATA;
//0x30 bytes (sizeof)
typedef struct _NOK_KWAIT_BLOCK
{
    NOK_LIST_ENTRY WaitListEntry;                                       //0x0
    UCHAR WaitType;                                                         //0x10
    volatile UCHAR BlockState;                                              //0x11
    USHORT WaitKey;                                                         //0x12
    LONG SpareLong;                                                         //0x14
    union
    {
        NOK_PKTHREAD Thread;                                            //0x18
        NOK_PKQUEUE NotificationQueue;                                  //0x18
    };
    VOID* Object;                                                           //0x20
    VOID* SparePtr;                                                         //0x28
}NOK_KWAIT_BLOCK, * NOK_PKWAIT_BLOCK;
//0x28 bytes (sizeof)
typedef struct _NOK_MACHINE_FRAME
{
    ULONGLONG Rip;                                                          //0x0
    USHORT SegCs;                                                           //0x8
    USHORT Fill1[3];                                                        //0xa
    ULONG EFlags;                                                           //0x10
    ULONG Fill2;                                                            //0x14
    ULONGLONG Rsp;                                                          //0x18
    USHORT SegSs;                                                           //0x20
    USHORT Fill3[3];                                                        //0x22
}NOK_MACHINE_FRAME, * NOK_PMACHINE_FRAME;
//0x20 bytes (sizeof)
typedef struct _NOK_KTIMER_TABLE_ENTRY
{
    ULONGLONG Lock;                                                         //0x0
    NOK_LIST_ENTRY Entry;                                               //0x8
    NOK_ULARGE_INTEGER Time;                                             //0x18
}NOK_KTIMER_TABLE_ENTRY, * NOK_PKTIMER_TABLE_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_KTIMER_TABLE_STATE
{
    ULONGLONG LastTimerExpiration[2];                                       //0x0
    ULONG LastTimerHand[2];                                                 //0x10
}NOK_KTIMER_TABLE_STATE, * NOK_PKTIMER_TABLE_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTL_GENERIC_COMPARE_RESULTS
{
    NOK_GenericLessThan = 0,
    NOK_GenericGreaterThan = 1,
    NOK_GenericEqual = 2
}NOK_RTL_GENERIC_COMPARE_RESULTS, * NOK_PRTL_GENERIC_COMPARE_RESULTS;
//0x10 bytes (sizeof)
typedef struct _NOK_PP_LOOKASIDE_LIST
{
    NOK_PGENERAL_LOOKASIDE P;                                           //0x0
    NOK_PGENERAL_LOOKASIDE L;                                           //0x8
}NOK_PP_LOOKASIDE_LIST, * NOK_PPP_LOOKASIDE_LIST;
//0xa0 bytes (sizeof)
typedef struct _NOK_KLDR_DATA_TABLE_ENTRY
{
    NOK_LIST_ENTRY InLoadOrderLinks;                                    //0x0
    VOID* ExceptionTable;                                                   //0x10
    ULONG ExceptionTableSize;                                               //0x18
    VOID* GpValue;                                                          //0x20
    NOK_PNON_PAGED_DEBUG_INFO NonPagedDebugInfo;                        //0x28
    VOID* DllBase;                                                          //0x30
    VOID* EntryPoint;                                                       //0x38
    ULONG SizeOfImage;                                                      //0x40
    NOK_UNICODE_STRING FullDllName;                                     //0x48
    NOK_UNICODE_STRING BaseDllName;                                     //0x58
    ULONG Flags;                                                            //0x68
    USHORT LoadCount;                                                       //0x6c
    union
    {
        USHORT SignatureLevel:4;                                            //0x6e
        USHORT SignatureType:3;                                             //0x6e
        USHORT Unused:9;                                                    //0x6e
        USHORT EntireField;                                                 //0x6e
    } u1;                                                                   //0x6e
    VOID* SectionPointer;                                                   //0x70
    ULONG CheckSum;                                                         //0x78
    ULONG CoverageSectionSize;                                              //0x7c
    VOID* CoverageSection;                                                  //0x80
    VOID* LoadedImports;                                                    //0x88
    VOID* Spare;                                                            //0x90
    ULONG SizeOfImageNotRounded;                                            //0x98
    ULONG TimeDateStamp;                                                    //0x9c
}NOK_KLDR_DATA_TABLE_ENTRY, * NOK_PKLDR_DATA_TABLE_ENTRY;
//0x10 bytes (sizeof)
typedef union _NOK_KQOS_GROUPING_SETS
{
    struct
    {
        ULONGLONG SingleCoreSet;                                            //0x0
    };
    ULONGLONG SmtSet;                                                       //0x8
}NOK_KQOS_GROUPING_SETS, * NOK_PKQOS_GROUPING_SETS;
//0x4 bytes (sizeof)
typedef enum _NOK_KTM_STATE
{
    NOK_KKtmUninitialized = 0,
    NOK_KKtmInitialized = 1,
    NOK_KKtmRecovering = 2,
    NOK_KKtmOnline = 3,
    NOK_KKtmRecoveryFailed = 4,
    NOK_KKtmOffline = 5
}NOK_KTM_STATE, * NOK_PKTM_STATE;
//0x140 bytes (sizeof)
typedef struct _NOK_KEXCEPTION_FRAME
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    ULONGLONG P5;                                                           //0x20
    ULONGLONG Spare1;                                                       //0x28
    NOK_M128A Xmm6;                                                     //0x30
    NOK_M128A Xmm7;                                                     //0x40
    NOK_M128A Xmm8;                                                     //0x50
    NOK_M128A Xmm9;                                                     //0x60
    NOK_M128A Xmm10;                                                    //0x70
    NOK_M128A Xmm11;                                                    //0x80
    NOK_M128A Xmm12;                                                    //0x90
    NOK_M128A Xmm13;                                                    //0xa0
    NOK_M128A Xmm14;                                                    //0xb0
    NOK_M128A Xmm15;                                                    //0xc0
    ULONGLONG TrapFrame;                                                    //0xd0
    ULONGLONG OutputBuffer;                                                 //0xd8
    ULONGLONG OutputLength;                                                 //0xe0
    ULONGLONG Spare2;                                                       //0xe8
    ULONGLONG MxCsr;                                                        //0xf0
    ULONGLONG Rbp;                                                          //0xf8
    ULONGLONG Rbx;                                                          //0x100
    ULONGLONG Rdi;                                                          //0x108
    ULONGLONG Rsi;                                                          //0x110
    ULONGLONG R12;                                                          //0x118
    ULONGLONG R13;                                                          //0x120
    ULONGLONG R14;                                                          //0x128
    ULONGLONG R15;                                                          //0x130
    ULONGLONG Return;                                                       //0x138
}NOK_KEXCEPTION_FRAME, * NOK_PKEXCEPTION_FRAME;
//0x68 bytes (sizeof)
typedef struct _NOK_KTSS64
{
    ULONG Reserved0;                                                        //0x0
    ULONGLONG Rsp0;                                                         //0x4
    ULONGLONG Rsp1;                                                         //0xc
    ULONGLONG Rsp2;                                                         //0x14
    ULONGLONG Ist[8];                                                       //0x1c
    ULONGLONG Reserved1;                                                    //0x5c
    USHORT Reserved2;                                                       //0x64
    USHORT IoMapBase;                                                       //0x66
}NOK_KTSS64, * NOK_PKTSS64;
//0x70 bytes (sizeof)
typedef struct _NOK_KUMS_CONTEXT_HEADER
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    VOID* StackTop;                                                         //0x20
    ULONGLONG StackSize;                                                    //0x28
    ULONGLONG RspOffset;                                                    //0x30
    ULONGLONG Rip;                                                          //0x38
    NOK_PXSAVE_FORMAT FltSave;                                          //0x40
    union
    {
        struct
        {
            ULONGLONG Volatile:1;                                           //0x48
            ULONGLONG Reserved:63;                                          //0x48
        };
        ULONGLONG Flags;                                                    //0x48
    };
    NOK_PKTRAP_FRAME TrapFrame;                                         //0x50
    NOK_PKEXCEPTION_FRAME ExceptionFrame;                               //0x58
    NOK_PKTHREAD SourceThread;                                          //0x60
    ULONGLONG Return;                                                       //0x68
}NOK_KUMS_CONTEXT_HEADER, * NOK_PKUMS_CONTEXT_HEADER;
//0x8 bytes (sizeof)
typedef struct _NOK_XSTATE_FEATURE
{
    ULONG Offset;                                                           //0x0
    ULONG Size;                                                             //0x4
}NOK_XSTATE_FEATURE, * NOK_PXSTATE_FEATURE;
//0x68 bytes (sizeof)
typedef struct _NOK_FAST_ERESOURCE_INTERNAL
{
    NOK_LIST_ENTRY SystemResourcesList;                                 //0x0
    VOID* ReservedPointer;                                                  //0x10
    SHORT ActiveCount;                                                      //0x18
    USHORT Flag;                                                            //0x1a
    NOK_KWAIT_CHAIN SharedWaiters;                                      //0x20
    NOK_KWAIT_CHAIN ExclusiveWaiters;                                   //0x28
    NOK_LIST_ENTRY OwnerEntryListHead;                                  //0x30
    ULONG ActiveEntries;                                                    //0x40
    ULONG ContentionCount;                                                  //0x44
    ULONG NumberOfSharedWaiters;                                            //0x48
    ULONG NumberOfExclusiveWaiters;                                         //0x4c
    VOID* ReservedWin64OnlyPointer;                                         //0x50
    union
    {
        VOID* Address;                                                      //0x58
        ULONGLONG CreatorBackTraceIndex;                                    //0x58
    };
    ULONGLONG SpinLock;                                                     //0x60
}NOK_FAST_ERESOURCE_INTERNAL, * NOK_PFAST_ERESOURCE_INTERNAL;
//0x30 bytes (sizeof)
typedef struct _NOK_KWAIT_CHAIN_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PKTHREAD Thread;                                                //0x10
    NOK_KEVENT Event;                                                   //0x18
}NOK_KWAIT_CHAIN_ENTRY, * NOK_PKWAIT_CHAIN_ENTRY;
//0x8 bytes (sizeof)
typedef struct _NOK_LDRP_CSLIST
{
    NOK_PSINGLE_LIST_ENTRY Tail;                                        //0x0
}NOK_LDRP_CSLIST, * NOK_PLDRP_CSLIST;
//0x10 bytes (sizeof)
typedef struct _NOK_CM_KEY_SECURITY_CACHE_ENTRY
{
    ULONG Cell;                                                             //0x0
    NOK_CM_KEY_SECURITY_CACHE* CachedSecurity;                          //0x8
}NOK_CM_KEY_SECURITY_CACHE_ENTRY, * NOK_PCM_KEY_SECURITY_CACHE_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_KTIMER2_COLLECTION
{
    NOK_RTL_RB_TREE Tree;                                               //0x0
    ULONGLONG NextDueTime;                                                  //0x10
}NOK_KTIMER2_COLLECTION, * NOK_PKTIMER2_COLLECTION;
//0x10 bytes (sizeof)
typedef struct _NOK_LDR_SERVICE_TAG_RECORD
{
    NOK_PLDR_SERVICE_TAG_RECORD Next;                                   //0x0
    ULONG ServiceTag;                                                       //0x8
}NOK_LDR_SERVICE_TAG_RECORD, * NOK_PLDR_SERVICE_TAG_RECORD;
//0x10 bytes (sizeof)
typedef struct _NOK_KTIMER_EXPIRATION_TRACE
{
    ULONGLONG InterruptTime;                                                //0x0
    NOK_LARGE_INTEGER PerformanceCounter;                                //0x8
}NOK_KTIMER_EXPIRATION_TRACE, * NOK_PKTIMER_EXPIRATION_TRACE;
//0x8 bytes (sizeof)
typedef struct _NOK_LEARNING_MODE_DATA
{
    ULONG Settings;                                                         //0x0
    UCHAR Enabled;                                                          //0x4
    UCHAR PermissiveModeEnabled;                                            //0x5
}NOK_LEARNING_MODE_DATA, * NOK_PLEARNING_MODE_DATA;
//0x1 bytes (sizeof)
typedef union _NOK_KWAIT_STATUS_REGISTER
{
    UCHAR Flags;                                                            //0x0
    UCHAR State:3;                                                          //0x0
    UCHAR Affinity:1;                                                       //0x0
    UCHAR Priority:1;                                                       //0x0
    UCHAR Apc:1;                                                            //0x0
    UCHAR UserApc:1;                                                        //0x0
    UCHAR Alert:1;                                                          //0x0
}NOK_KWAIT_STATUS_REGISTER, * NOK_PKWAIT_STATUS_REGISTER;
//0x28 bytes (sizeof)
typedef struct _NOK_LOADER_BUGCHECK_PARAMETERS
{
    ULONG BugcheckCode;                                                     //0x0
    ULONGLONG BugcheckParameter1;                                           //0x8
    ULONGLONG BugcheckParameter2;                                           //0x10
    ULONGLONG BugcheckParameter3;                                           //0x18
    ULONGLONG BugcheckParameter4;                                           //0x20
}NOK_LOADER_BUGCHECK_PARAMETERS, * NOK_PLOADER_BUGCHECK_PARAMETERS;
//0x18 bytes (sizeof)
typedef struct _NOK_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION
{
    UCHAR OriginalBootStatus;                                               //0x0
    UCHAR NewBootStatus;                                                    //0x1
    UCHAR ConfigurationLoaded;                                              //0x2
    UCHAR Spare;                                                            //0x3
    union
    {
        ULONG AllFlags;                                                     //0x4
        ULONG LkgSupported:1;                                               //0x4
        ULONG FinalBootBeforeRecovery:1;                                    //0x4
        ULONG ConfigurationComparisonAttempted:1;                           //0x4
        ULONG CurrentConfigurationLoadAttempted:1;                          //0x4
        ULONG LkgConfigurationLoadAttempted:1;                              //0x4
        ULONG UsageSubscriptionLoadAttempted:1;                             //0x4
        ULONG Spare:26;                                                     //0x4
    } Flags;                                                                //0x4
    LONG ConfigurationComparisonStatus;                                     //0x8
    LONG CurrentConfigurationLoadStatus;                                    //0xc
    LONG LkgConfigurationLoadStatus;                                        //0x10
    LONG UsageSubscriptionLoadStatus;                                       //0x14
}NOK_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION, * NOK_PLOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION;
//0x48 bytes (sizeof)
typedef struct _NOK_LOADER_FEATURE_CONFIGURATION_INFORMATION
{
    VOID* FeatureConfigurationBuffer;                                       //0x0
    ULONGLONG FeatureConfigurationBufferSize;                               //0x8
    VOID* UsageSubscriptionBuffer;                                          //0x10
    ULONGLONG UsageSubscriptionBufferSize;                                  //0x18
    VOID* DelayedUsageReportBuffer;                                         //0x20
    ULONGLONG DelayedUsageReportBufferSize;                                 //0x28
    NOK_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION DiagnosticInformation; //0x30
}NOK_LOADER_FEATURE_CONFIGURATION_INFORMATION, * NOK_PLOADER_FEATURE_CONFIGURATION_INFORMATION;
//0x14 bytes (sizeof)
typedef struct _NOK_LOADER_HIVE_RECOVERY_INFO
{
    ULONG Recovered:1;                                                      //0x0
    ULONG LegacyRecovery:1;                                                 //0x0
    ULONG SoftRebootConflict:1;                                             //0x0
    ULONG MostRecentLog:3;                                                  //0x0
    ULONG Spare:27;                                                         //0x4
    ULONG LogNextSequence;                                                  //0x8
    ULONG LogMinimumSequence;                                               //0xc
    ULONG LogCurrentOffset;                                                 //0x10
}NOK_LOADER_HIVE_RECOVERY_INFO, * NOK_PLOADER_HIVE_RECOVERY_INFO;
//0x40 bytes (sizeof)
typedef struct _NOK_FIRMWARE_INFORMATION_LOADER_BLOCK
{
    ULONG FirmwareTypeUefi:1;                                               //0x0
    ULONG EfiRuntimeUseIum:1;                                               //0x0
    ULONG EfiRuntimePageProtectionSupported:1;                              //0x0
    ULONG Reserved:29;                                                      //0x0
    union
    {
        NOK_EFI_FIRMWARE_INFORMATION EfiInformation;                    //0x8
        NOK_PCAT_FIRMWARE_INFORMATION PcatInformation;                  //0x8
    } u;                                                                    //0x8
}NOK_FIRMWARE_INFORMATION_LOADER_BLOCK, * NOK_PFIRMWARE_INFORMATION_LOADER_BLOCK;
//0x8 bytes (sizeof)
typedef struct _NOK_LOGGED_STREAM_CALLBACK_V2
{
    NOK_PLOG_HANDLE_CONTEXT LogHandleContext;                           //0x0
}NOK_LOGGED_STREAM_CALLBACK_V2, * NOK_PLOGGED_STREAM_CALLBACK_V2;
//0x40 bytes (sizeof)
typedef struct _NOK_LOADER_PARAMETER_HYPERVISOR_EXTENSION
{
    ULONG InitialHypervisorCrashdumpAreaPageCount;                          //0x0
    ULONG HypervisorCrashdumpAreaPageCount;                                 //0x4
    ULONGLONG InitialHypervisorCrashdumpAreaSpa;                            //0x8
    ULONGLONG HypervisorCrashdumpAreaSpa;                                   //0x10
    ULONGLONG HypervisorLaunchStatus;                                       //0x18
    ULONGLONG HypervisorLaunchStatusArg1;                                   //0x20
    ULONGLONG HypervisorLaunchStatusArg2;                                   //0x28
    ULONGLONG HypervisorLaunchStatusArg3;                                   //0x30
    ULONGLONG HypervisorLaunchStatusArg4;                                   //0x38
}NOK_LOADER_PARAMETER_HYPERVISOR_EXTENSION, * NOK_PLOADER_PARAMETER_HYPERVISOR_EXTENSION;
//0x60 bytes (sizeof)
typedef struct _NOK_LOADER_PERFORMANCE_DATA
{
    ULONGLONG StartTime;                                                    //0x0
    ULONGLONG EndTime;                                                      //0x8
    ULONGLONG PreloadEndTime;                                               //0x10
    ULONGLONG TcbLoaderStartTime;                                           //0x18
    ULONGLONG LoadHypervisorTime;                                           //0x20
    ULONGLONG LaunchHypervisorTime;                                         //0x28
    ULONGLONG LoadVsmTime;                                                  //0x30
    ULONGLONG LaunchVsmTime;                                                //0x38
    ULONGLONG ExecuteTransitionStartTime;                                   //0x40
    ULONGLONG ExecuteTransitionEndTime;                                     //0x48
    ULONGLONG LoadDriversTime;                                              //0x50
    ULONGLONG CleanupVsmTime;                                               //0x58
}NOK_LOADER_PERFORMANCE_DATA, * NOK_PLOADER_PERFORMANCE_DATA;
//0x30 bytes (sizeof)
typedef struct _NOK_LOADER_RESET_REASON
{
    UCHAR Supplied;                                                         //0x0
    union
    {
        struct
        {
            UCHAR Pch;                                                      //0x8
            UCHAR EmbeddedController;                                       //0x9
            UCHAR Reserved[6];                                              //0xa
        } Component;                                                        //0x8
        ULONGLONG AsULONG64;                                                //0x8
        UCHAR AsBytes[8];                                                   //0x8
    } Basic;                                                                //0x8
    ULONG AdditionalInfo[8];                                                //0x10
}NOK_LOADER_RESET_REASON, * NOK_PLOADER_RESET_REASON;
//0x10 bytes (sizeof)
typedef struct _NOK_LEAP_SECOND_DATA
{
    UCHAR Enabled;                                                          //0x0
    ULONG Count;                                                            //0x4
    NOK_LARGE_INTEGER Data[1];                                           //0x8
}NOK_LEAP_SECOND_DATA, * NOK_PLEAP_SECOND_DATA;
//0x6 bytes (sizeof)
typedef struct _NOK_LOCAL_NMISOURCE
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR ProcessorID;                                                      //0x2
    USHORT Flags;                                                           //0x3
    UCHAR LINTIN;                                                           //0x5
}NOK_LOCAL_NMISOURCE, * NOK_PLOCAL_NMISOURCE;
//0x80 bytes (sizeof)
typedef struct _NOK_MMSUPPORT_SHARED
{
    volatile LONG WorkingSetLock;                                           //0x0
    LONG GoodCitizenWaiting;                                                //0x4
    ULONGLONG ReleasedCommitDebt;                                           //0x8
    ULONGLONG ResetPagesRepurposedCount;                                    //0x10
    VOID* WsSwapSupport;                                                    //0x18
    VOID* CommitReleaseContext;                                             //0x20
    VOID* AccessLog;                                                        //0x28
    volatile ULONGLONG ChargedWslePages;                                    //0x30
    ULONGLONG ActualWslePages;                                              //0x38
    ULONGLONG WorkingSetCoreLock;                                           //0x40
    VOID* ShadowMapping;                                                    //0x48
}NOK_MMSUPPORT_SHARED, * NOK_PMMSUPPORT_SHARED;
//0x50 bytes (sizeof)
typedef struct _NOK_LOADER_PARAMETER_CI_EXTENSION
{
    ULONG CodeIntegrityOptions;                                             //0x0
    ULONG UpgradeInProgress:1;                                              //0x4
    ULONG IsWinPE:1;                                                        //0x4
    ULONG CustomKernelSignersAllowed:1;                                     //0x4
    ULONG StateSeparationEnabled:1;                                         //0x4
    ULONG Reserved:28;                                                      //0x4
    NOK_LARGE_INTEGER WhqlEnforcementDate;                               //0x8
    ULONG RevocationListOffset;                                             //0x10
    ULONG RevocationListSize;                                               //0x14
    ULONG CodeIntegrityPolicyOffset;                                        //0x18
    ULONG CodeIntegrityPolicySize;                                          //0x1c
    ULONG CodeIntegrityPolicyHashOffset;                                    //0x20
    ULONG CodeIntegrityPolicyHashSize;                                      //0x24
    ULONG CodeIntegrityPolicyOriginalHashOffset;                            //0x28
    ULONG CodeIntegrityPolicyOriginalHashSize;                              //0x2c
    LONG WeakCryptoPolicyLoadStatus;                                        //0x30
    ULONG WeakCryptoPolicyOffset;                                           //0x34
    ULONG WeakCryptoPolicySize;                                             //0x38
    ULONG SecureBootPolicyOffset;                                           //0x3c
    ULONG SecureBootPolicySize;                                             //0x40
    ULONG Reserved2;                                                        //0x44
    UCHAR SerializedData[1];                                                //0x48
}NOK_LOADER_PARAMETER_CI_EXTENSION, * NOK_PLOADER_PARAMETER_CI_EXTENSION;
//0x10 bytes (sizeof)
typedef struct _NOK_LOGGED_STREAM_CALLBACK_V1
{
    VOID* LogHandle;                                                        //0x0
    VOID (*FlushToLsnRoutine)(VOID* arg1, NOK_LARGE_INTEGER arg2);       //0x8
}NOK_LOGGED_STREAM_CALLBACK_V1, * NOK_PLOGGED_STREAM_CALLBACK_V1;
//0x20 bytes (sizeof)
typedef struct _NOK_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
{
    ULONG Version;                                                          //0x0
    ULONG AbnormalResetOccurred;                                            //0x4
    ULONG OfflineMemoryDumpCapable;                                         //0x8
    NOK_LARGE_INTEGER ResetDataAddress;                                  //0x10
    ULONG ResetDataSize;                                                    //0x18
}NOK_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2, * NOK_POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
//0x60 bytes (sizeof)
typedef struct _NOK_GENERAL_LOOKASIDE_POOL
{
    union
    {
        NOK_SLIST_HEADER ListHead;                                       //0x0
        NOK_SINGLE_LIST_ENTRY SingleListHead;                           //0x0
    };
    USHORT Depth;                                                           //0x10
    USHORT MaximumDepth;                                                    //0x12
    ULONG TotalAllocates;                                                   //0x14
    union
    {
        ULONG AllocateMisses;                                               //0x18
        ULONG AllocateHits;                                                 //0x18
    };
    ULONG TotalFrees;                                                       //0x1c
    union
    {
        ULONG FreeMisses;                                                   //0x20
        ULONG FreeHits;                                                     //0x20
    };
    NOK_POOL_TYPE Type;                                                   //0x24
    ULONG Tag;                                                              //0x28
    ULONG Size;                                                             //0x2c
    union
    {
        VOID* (*AllocateEx)(NOK_POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3, NOK_PLOOKASIDE_LIST_EX arg4); //0x30
        VOID* (*Allocate)(NOK_POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3); //0x30
    };
    union
    {
        VOID (*FreeEx)(VOID* arg1, NOK_PLOOKASIDE_LIST_EX arg2);        //0x38
        VOID (*Free)(VOID* arg1);                                           //0x38
    };
    NOK_LIST_ENTRY ListEntry;                                           //0x40
    ULONG LastTotalAllocates;                                               //0x50
    union
    {
        ULONG LastAllocateMisses;                                           //0x54
        ULONG LastAllocateHits;                                             //0x54
    };
    ULONG Future[2];                                                        //0x58
}NOK_GENERAL_LOOKASIDE_POOL, * NOK_PGENERAL_LOOKASIDE_POOL;
//0x48 bytes (sizeof)
typedef struct _NOK_KALPC_MESSAGE_ATTRIBUTES
{
    VOID* ClientContext;                                                    //0x0
    VOID* ServerContext;                                                    //0x8
    VOID* PortContext;                                                      //0x10
    VOID* CancelPortContext;                                                //0x18
    NOK_PKALPC_SECURITY_DATA SecurityData;                              //0x20
    NOK_PKALPC_VIEW View;                                               //0x28
    NOK_PKALPC_HANDLE_DATA HandleData;                                  //0x30
    NOK_KALPC_DIRECT_EVENT DirectEvent;                                  //0x38
    NOK_KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData;                     //0x40
}NOK_KALPC_MESSAGE_ATTRIBUTES, * NOK_PKALPC_MESSAGE_ATTRIBUTES;
//0x28 bytes (sizeof)
typedef struct _NOK_LPCP_NONPAGED_PORT_QUEUE
{
    NOK_KSEMAPHORE Semaphore;                                           //0x0
    NOK_PLPCP_PORT_OBJECT BackPointer;                                  //0x20
}NOK_LPCP_NONPAGED_PORT_QUEUE, * NOK_PLPCP_NONPAGED_PORT_QUEUE;
//0x20 bytes (sizeof)
typedef struct _NOK_LPCP_PORT_QUEUE
{
    NOK_PLPCP_NONPAGED_PORT_QUEUE NonPagedPortQueue;                    //0x0
    NOK_PKSEMAPHORE Semaphore;                                          //0x8
    NOK_LIST_ENTRY ReceiveHead;                                         //0x10
}NOK_LPCP_PORT_QUEUE, * NOK_PLPCP_PORT_QUEUE;
//0x110 bytes (sizeof)
typedef struct _NOK_SID_AND_ATTRIBUTES_HASH
{
    ULONG SidCount;                                                         //0x0
    NOK_SID_AND_ATTRIBUTES* SidAttr;                                    //0x8
    ULONGLONG Hash[32];                                                     //0x10
}NOK_SID_AND_ATTRIBUTES_HASH, * NOK_PSID_AND_ATTRIBUTES_HASH;
//0x14 bytes (sizeof)
typedef struct _NOK_PRIVILEGE_SET
{
    ULONG PrivilegeCount;                                                   //0x0
    ULONG Control;                                                          //0x4
    NOK_LUID_AND_ATTRIBUTES Privilege[1];                               //0x8
}NOK_PRIVILEGE_SET, * NOK_PPRIVILEGE_SET;
//0x2c bytes (sizeof)
typedef struct _NOK_INITIAL_PRIVILEGE_SET
{
    ULONG PrivilegeCount;                                                   //0x0
    ULONG Control;                                                          //0x4
    NOK_LUID_AND_ATTRIBUTES Privilege[3];                               //0x8
}NOK_INITIAL_PRIVILEGE_SET, * NOK_PINITIAL_PRIVILEGE_SET;
//0x190 bytes (sizeof)
typedef struct _NOK_KTRAP_FRAME
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    ULONGLONG P5;                                                           //0x20
    union
    {
        CHAR PreviousMode;                                                  //0x28
        UCHAR InterruptRetpolineState;                                      //0x28
    };
    UCHAR PreviousIrql;                                                     //0x29
    union
    {
        UCHAR FaultIndicator;                                               //0x2a
        UCHAR NmiMsrIbrs;                                                   //0x2a
    };
    UCHAR ExceptionActive;                                                  //0x2b
    ULONG MxCsr;                                                            //0x2c
    ULONGLONG Rax;                                                          //0x30
    ULONGLONG Rcx;                                                          //0x38
    ULONGLONG Rdx;                                                          //0x40
    ULONGLONG R8;                                                           //0x48
    ULONGLONG R9;                                                           //0x50
    ULONGLONG R10;                                                          //0x58
    ULONGLONG R11;                                                          //0x60
    union
    {
        ULONGLONG GsBase;                                                   //0x68
        ULONGLONG GsSwap;                                                   //0x68
    };
    NOK_M128A Xmm0;                                                     //0x70
    NOK_M128A Xmm1;                                                     //0x80
    NOK_M128A Xmm2;                                                     //0x90
    NOK_M128A Xmm3;                                                     //0xa0
    NOK_M128A Xmm4;                                                     //0xb0
    NOK_M128A Xmm5;                                                     //0xc0
    union
    {
        ULONGLONG FaultAddress;                                             //0xd0
        ULONGLONG ContextRecord;                                            //0xd0
    };
    ULONGLONG Dr0;                                                          //0xd8
    ULONGLONG Dr1;                                                          //0xe0
    ULONGLONG Dr2;                                                          //0xe8
    ULONGLONG Dr3;                                                          //0xf0
    ULONGLONG Dr6;                                                          //0xf8
    ULONGLONG Dr7;                                                          //0x100
    ULONGLONG DebugControl;                                                 //0x108
    ULONGLONG LastBranchToRip;                                              //0x110
    ULONGLONG LastBranchFromRip;                                            //0x118
    ULONGLONG LastExceptionToRip;                                           //0x120
    ULONGLONG LastExceptionFromRip;                                         //0x128
    USHORT SegDs;                                                           //0x130
    USHORT SegEs;                                                           //0x132
    USHORT SegFs;                                                           //0x134
    USHORT SegGs;                                                           //0x136
    ULONGLONG TrapFrame;                                                    //0x138
    ULONGLONG Rbx;                                                          //0x140
    ULONGLONG Rdi;                                                          //0x148
    ULONGLONG Rsi;                                                          //0x150
    ULONGLONG Rbp;                                                          //0x158
    union
    {
        ULONGLONG ErrorCode;                                                //0x160
        ULONGLONG ExceptionFrame;                                           //0x160
    };
    ULONGLONG Rip;                                                          //0x168
    USHORT SegCs;                                                           //0x170
    UCHAR Fill0;                                                            //0x172
    UCHAR Logging;                                                          //0x173
    USHORT Fill1[2];                                                        //0x174
    ULONG EFlags;                                                           //0x178
    ULONG Fill2;                                                            //0x17c
    ULONGLONG Rsp;                                                          //0x180
    USHORT SegSs;                                                           //0x188
    USHORT Fill3;                                                           //0x18a
    ULONG Fill4;                                                            //0x18c
}NOK_KTRAP_FRAME, * NOK_PKTRAP_FRAME;
//0x90 bytes (sizeof)
typedef struct _NOK_PROC_FEEDBACK
{
    ULONGLONG Lock;                                                         //0x0
    ULONGLONG CyclesLast;                                                   //0x8
    ULONGLONG CyclesActive;                                                 //0x10
    NOK_PROC_FEEDBACK_COUNTER* Counters[2];                             //0x18
    ULONGLONG LastUpdateTime;                                               //0x28
    ULONGLONG UnscaledTime;                                                 //0x30
    volatile LONGLONG UnaccountedTime;                                      //0x38
    ULONGLONG ScaledTime[2];                                                //0x40
    ULONGLONG UnaccountedKernelTime;                                        //0x50
    ULONGLONG PerformanceScaledKernelTime;                                  //0x58
    ULONG UserTimeLast;                                                     //0x60
    ULONG KernelTimeLast;                                                   //0x64
    ULONGLONG IdleGenerationNumberLast;                                     //0x68
    ULONGLONG HvActiveTimeLast;                                             //0x70
    ULONGLONG StallCyclesLast;                                              //0x78
    ULONGLONG StallTime;                                                    //0x80
    UCHAR KernelTimesIndex;                                                 //0x88
    UCHAR CounterDiscardsIdleTime;                                          //0x89
}NOK_PROC_FEEDBACK, * NOK_PPROC_FEEDBACK;
//0x50 bytes (sizeof)
typedef struct _NOK_MACHINE_CHECK_CONTEXT
{
    NOK_MACHINE_FRAME MachineFrame;                                     //0x0
    ULONGLONG Rax;                                                          //0x28
    ULONGLONG Rcx;                                                          //0x30
    ULONGLONG Rdx;                                                          //0x38
    ULONGLONG GsBase;                                                       //0x40
    ULONGLONG Cr3;                                                          //0x48
}NOK_MACHINE_CHECK_CONTEXT, * NOK_PMACHINE_CHECK_CONTEXT;
//0x4 bytes (sizeof)
typedef struct _NOK_PRIVATE_CACHE_MAP_FLAGS
{
    ULONG DontUse:16;                                                       //0x0
    ULONG ReadAheadActive:1;                                                //0x0
    ULONG ReadAheadEnabled:1;                                               //0x0
    ULONG PagePriority:3;                                                   //0x0
    ULONG PipelineReadAheads:1;                                             //0x0
    ULONG Available:10;                                                     //0x0
}NOK_PRIVATE_CACHE_MAP_FLAGS, * NOK_PPRIVATE_CACHE_MAP_FLAGS;
//0x78 bytes (sizeof)
typedef struct _NOK_PRIVATE_CACHE_MAP
{
    union
    {
        SHORT NodeTypeCode;                                                 //0x0
        NOK_PRIVATE_CACHE_MAP_FLAGS Flags;                              //0x0
    };
    ULONG ReadAheadMask;                                                    //0x4
    NOK_PFILE_OBJECT FileObject;                                        //0x8
    NOK_LARGE_INTEGER FileOffset1;                                       //0x10
    NOK_LARGE_INTEGER BeyondLastByte1;                                   //0x18
    NOK_LARGE_INTEGER FileOffset2;                                       //0x20
    NOK_LARGE_INTEGER BeyondLastByte2;                                   //0x28
    ULONG SequentialReadCount;                                              //0x30
    ULONG ReadAheadLength;                                                  //0x34
    NOK_LARGE_INTEGER ReadAheadOffset;                                   //0x38
    NOK_LARGE_INTEGER ReadAheadBeyondLastByte;                           //0x40
    ULONGLONG PrevReadAheadBeyondLastByte;                                  //0x48
    ULONGLONG ReadAheadSpinLock;                                            //0x50
    ULONG PipelinedReadAheadRequestSize;                                    //0x58
    ULONG ReadAheadGrowth;                                                  //0x5c
    NOK_LIST_ENTRY PrivateLinks;                                        //0x60
    VOID* ReadAheadWorkItem;                                                //0x70
}NOK_PRIVATE_CACHE_MAP, * NOK_PPRIVATE_CACHE_MAP;
//0x30 bytes (sizeof)
typedef struct _NOK_MAPIC
{
    NOK_DESCRIPTION_HEADER Header;                                      //0x0
    ULONG LocalAPICAddress;                                                 //0x24
    ULONG Flags;                                                            //0x28
    ULONG APICTables[1];                                                    //0x2c
}NOK_MAPIC, * NOK_PMAPIC;
//0x10 bytes (sizeof)
typedef struct _NOK_MAP_REGISTER_ENTRY
{
    VOID* MapRegister;                                                      //0x0
    UCHAR WriteToDevice;                                                    //0x8
}NOK_MAP_REGISTER_ENTRY, * NOK_PMAP_REGISTER_ENTRY;
//0xc0 bytes (sizeof)
typedef struct _NOK_MBCB
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeIsInZone;                                                     //0x2
    ULONG PagesToWrite;                                                     //0x4
    ULONG DirtyPages;                                                       //0x8
    ULONG Reserved;                                                         //0xc
    NOK_LIST_ENTRY BitmapRanges;                                        //0x10
    LONGLONG ResumeWritePage;                                               //0x20
    LONGLONG MostRecentlyDirtiedPage;                                       //0x28
    NOK_BITMAP_RANGE BitmapRange1;                                      //0x30
    NOK_BITMAP_RANGE BitmapRange2;                                      //0x60
    NOK_BITMAP_RANGE BitmapRange3;                                      //0x90
}NOK_MBCB, * NOK_PMBCB;
//0x48 bytes (sizeof)
typedef struct _NOK_MCGEN_TRACE_CONTEXT
{
    ULONGLONG RegistrationHandle;                                           //0x0
    ULONGLONG Logger;                                                       //0x8
    ULONGLONG MatchAnyKeyword;                                              //0x10
    ULONGLONG MatchAllKeyword;                                              //0x18
    ULONG Flags;                                                            //0x20
    ULONG IsEnabled;                                                        //0x24
    UCHAR Level;                                                            //0x28
    UCHAR Reserve;                                                          //0x29
    USHORT EnableBitsCount;                                                 //0x2a
    ULONG* EnableBitMask;                                                   //0x30
    ULONGLONG* EnableKeyWords;                                              //0x38
    UCHAR* EnableLevel;                                                     //0x40
}NOK_MCGEN_TRACE_CONTEXT, * NOK_PMCGEN_TRACE_CONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_MCI_STATUS_AMD_BITS
{
    ULONGLONG McaErrorCode:16;                                              //0x0
    ULONGLONG ModelErrorCode:16;                                            //0x0
    ULONGLONG ImplementationSpecific2:11;                                   //0x0
    ULONGLONG Poison:1;                                                     //0x0
    ULONGLONG Deferred:1;                                                   //0x0
    ULONGLONG ImplementationSpecific1:12;                                   //0x0
    ULONGLONG ContextCorrupt:1;                                             //0x0
    ULONGLONG AddressValid:1;                                               //0x0
    ULONGLONG MiscValid:1;                                                  //0x0
    ULONGLONG ErrorEnabled:1;                                               //0x0
    ULONGLONG UncorrectedError:1;                                           //0x0
    ULONGLONG StatusOverFlow:1;                                             //0x0
    ULONGLONG Valid:1;                                                      //0x0
}NOK_MCI_STATUS_AMD_BITS, * NOK_PMCI_STATUS_AMD_BITS;
//0x8 bytes (sizeof)
typedef struct _NOK_MCI_STATUS_BITS_COMMON
{
    ULONGLONG McaErrorCode:16;                                              //0x0
    ULONGLONG ModelErrorCode:16;                                            //0x0
    ULONGLONG Reserved:25;                                                  //0x0
    ULONGLONG ContextCorrupt:1;                                             //0x0
    ULONGLONG AddressValid:1;                                               //0x0
    ULONGLONG MiscValid:1;                                                  //0x0
    ULONGLONG ErrorEnabled:1;                                               //0x0
    ULONGLONG UncorrectedError:1;                                           //0x0
    ULONGLONG StatusOverFlow:1;                                             //0x0
    ULONGLONG Valid:1;                                                      //0x0
}NOK_MCI_STATUS_BITS_COMMON, * NOK_PMCI_STATUS_BITS_COMMON;
//0x8 bytes (sizeof)
typedef struct _NOK_MCI_STATUS_INTEL_BITS
{
    ULONGLONG McaErrorCode:16;                                              //0x0
    ULONGLONG ModelErrorCode:16;                                            //0x0
    ULONGLONG OtherInfo:5;                                                  //0x0
    ULONGLONG FirmwareUpdateError:1;                                        //0x0
    ULONGLONG CorrectedErrorCount:15;                                       //0x0
    ULONGLONG ThresholdErrorStatus:2;                                       //0x0
    ULONGLONG ActionRequired:1;                                             //0x0
    ULONGLONG Signalling:1;                                                 //0x0
    ULONGLONG ContextCorrupt:1;                                             //0x0
    ULONGLONG AddressValid:1;                                               //0x0
    ULONGLONG MiscValid:1;                                                  //0x0
    ULONGLONG ErrorEnabled:1;                                               //0x0
    ULONGLONG UncorrectedError:1;                                           //0x0
    ULONGLONG StatusOverFlow:1;                                             //0x0
    ULONGLONG Valid:1;                                                      //0x0
}NOK_MCI_STATUS_INTEL_BITS, * NOK_PMCI_STATUS_INTEL_BITS;
//0x30 bytes (sizeof)
typedef struct _NOK_MCUPDATE_INFO
{
    NOK_LIST_ENTRY List;                                                //0x0
    ULONG Status;                                                           //0x10
    ULONGLONG Id;                                                           //0x18
    ULONGLONG VendorScratch[2];                                             //0x20
}NOK_MCUPDATE_INFO, * NOK_PMCUPDATE_INFO;
//0x30 bytes (sizeof)
typedef struct _NOK_MDL
{
    NOK_PMDL Next;                                                      //0x0
    SHORT Size;                                                             //0x8
    SHORT MdlFlags;                                                         //0xa
    NOK_PEPROCESS Process;                                              //0x10
    VOID* MappedSystemVa;                                                   //0x18
    VOID* StartVa;                                                          //0x20
    ULONG ByteCount;                                                        //0x28
    ULONG ByteOffset;                                                       //0x2c
}NOK_MDL, * NOK_PMDL;
//0x4 bytes (sizeof)
typedef enum _NOK_TYPE_OF_MEMORY
{
    NOK_LoaderExceptionBlock = 0,
    NOK_LoaderSystemBlock = 1,
    NOK_LoaderFree = 2,
    NOK_LoaderBad = 3,
    NOK_LoaderLoadedProgram = 4,
    NOK_LoaderFirmwareTemporary = 5,
    NOK_LoaderFirmwarePermanent = 6,
    NOK_LoaderOsloaderHeap = 7,
    NOK_LoaderOsloaderStack = 8,
    NOK_LoaderSystemCode = 9,
    NOK_LoaderHalCode = 10,
    NOK_LoaderBootDriver = 11,
    NOK_LoaderConsoleInDriver = 12,
    NOK_LoaderConsoleOutDriver = 13,
    NOK_LoaderStartupDpcStack = 14,
    NOK_LoaderStartupKernelStack = 15,
    NOK_LoaderStartupPanicStack = 16,
    NOK_LoaderStartupPcrPage = 17,
    NOK_LoaderStartupPdrPage = 18,
    NOK_LoaderRegistryData = 19,
    NOK_LoaderMemoryData = 20,
    NOK_LoaderNlsData = 21,
    NOK_LoaderSpecialMemory = 22,
    NOK_LoaderBBTMemory = 23,
    NOK_LoaderZero = 24,
    NOK_LoaderXIPRom = 25,
    NOK_LoaderHALCachedMemory = 26,
    NOK_LoaderLargePageFiller = 27,
    NOK_LoaderErrorLogMemory = 28,
    NOK_LoaderVsmMemory = 29,
    NOK_LoaderFirmwareCode = 30,
    NOK_LoaderFirmwareData = 31,
    NOK_LoaderFirmwareReserved = 32,
    NOK_LoaderEnclaveMemory = 33,
    NOK_LoaderFirmwareKsr = 34,
    NOK_LoaderEnclaveKsr = 35,
    NOK_LoaderSkMemory = 36,
    NOK_LoaderSkFirmwareReserved = 37,
    NOK_LoaderIoSpaceMemoryZeroed = 38,
    NOK_LoaderIoSpaceMemoryFree = 39,
    NOK_LoaderIoSpaceMemoryKsr = 40,
    NOK_LoaderMaximum = 41
}NOK_TYPE_OF_MEMORY, * NOK_PTYPE_OF_MEMORY;
//0x8 bytes (sizeof)
typedef struct _NOK_MIPFNBLINK
{
    union
    {
        struct
        {
            ULONGLONG Blink:36;                                             //0x0
            ULONGLONG NodeBlinkHigh:20;                                     //0x0
            ULONGLONG TbFlushStamp:4;                                       //0x0
            ULONGLONG Unused:2;                                             //0x0
            ULONGLONG PageBlinkDeleteBit:1;                                 //0x0
            ULONGLONG PageBlinkLockBit:1;                                   //0x0
            ULONGLONG ShareCount:62;                                        //0x0
            ULONGLONG PageShareCountDeleteBit:1;                            //0x0
            ULONGLONG PageShareCountLockBit:1;                              //0x0
        };
        ULONGLONG EntireField;                                              //0x0
        volatile LONGLONG Lock;                                             //0x0
        struct
        {
            ULONGLONG LockNotUsed:62;                                       //0x0
            ULONGLONG DeleteBit:1;                                          //0x0
            ULONGLONG LockBit:1;                                            //0x0
        };
    };
}NOK_MIPFNBLINK, * NOK_PMIPFNBLINK;
//0x4 bytes (sizeof)
typedef union _NOK_MM_PAGE_ACCESS_INFO_FLAGS
{
    struct
    {
        ULONG FilePointerIndex:9;                                           //0x0
        ULONG HardFault:1;                                                  //0x0
        ULONG Image:1;                                                      //0x0
        ULONG Spare0:1;                                                     //0x0
    } File;                                                                 //0x0
    struct
    {
        ULONG FilePointerIndex:9;                                           //0x0
        ULONG HardFault:1;                                                  //0x0
        ULONG Spare1:2;                                                     //0x0
    } Private;                                                              //0x0
}NOK_MM_PAGE_ACCESS_INFO_FLAGS, * NOK_PMM_PAGE_ACCESS_INFO_FLAGS;
//0x8 bytes (sizeof)
typedef struct _NOK_MM_PAGE_ACCESS_INFO
{
    union
    {
        NOK_MM_PAGE_ACCESS_INFO_FLAGS Flags;                             //0x0
        ULONGLONG FileOffset;                                               //0x0
        VOID* VirtualAddress;                                               //0x0
        VOID* PointerProtoPte;                                              //0x0
    };
}NOK_MM_PAGE_ACCESS_INFO, * NOK_PMM_PAGE_ACCESS_INFO;
//0x90 bytes (sizeof)
typedef struct _NOK_LOCK_TRACKER
{
    NOK_RTL_BALANCED_NODE LockTrackerNode;                              //0x0
    NOK_PMDL Mdl;                                                       //0x18
    VOID* StartVa;                                                          //0x20
    ULONGLONG Count;                                                        //0x28
    ULONG Offset;                                                           //0x30
    ULONG Length;                                                           //0x34
    ULONG Who;                                                              //0x38
    ULONG Hash;                                                             //0x3c
    ULONGLONG Page;                                                         //0x40
    VOID* StackTrace[8];                                                    //0x48
    NOK_PEPROCESS Process;                                              //0x88
}NOK_LOCK_TRACKER, * NOK_PLOCK_TRACKER;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_ACTIVE_PFN
{
    union
    {
        struct
        {
            ULONGLONG Tradable:1;                                           //0x0
            ULONGLONG NonPagedBuddy:43;                                     //0x0
        } Leaf;                                                             //0x0
        struct
        {
            ULONGLONG Tradable:1;                                           //0x0
            ULONGLONG WsleAge:3;                                            //0x0
            ULONGLONG OldestWsleLeafEntries:10;                             //0x0
            ULONGLONG OldestWsleLeafAge:3;                                  //0x0
            ULONGLONG NonPagedBuddy:43;                                     //0x0
        } PageTable;                                                        //0x0
        ULONGLONG EntireActiveField;                                        //0x0
    };
}NOK_MI_ACTIVE_PFN, * NOK_PMI_ACTIVE_PFN;
//0x20 bytes (sizeof)
typedef struct _NOK_HEAP_VAMGR_RANGE
{
    union
    {
        NOK_RTL_BALANCED_NODE RbNode;                                   //0x0
        NOK_SINGLE_LIST_ENTRY Next;                                     //0x0
        struct
        {
            UCHAR Allocated:1;                                              //0x0
            UCHAR Internal:1;                                               //0x0
            UCHAR Standalone:1;                                             //0x0
            UCHAR Spare0:5;                                                 //0x0
            UCHAR AllocatorIndex;                                           //0x1
            ULONGLONG OwnerCtx[2];                                          //0x8
        };
    };
    union
    {
        ULONGLONG SizeInChunks;                                             //0x18
        struct
        {
            USHORT ChunkCount;                                              //0x18
            USHORT PrevChunkCount;                                          //0x1a
        };
        ULONGLONG Signature;                                                //0x18
    };
}NOK_HEAP_VAMGR_RANGE, * NOK_PHEAP_VAMGR_RANGE;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_AVAILABLE_PAGE_WAIT_STATES
{
    NOK_KEVENT Event;                                                   //0x0
    ULONG EventSets;                                                        //0x18
}NOK_MI_AVAILABLE_PAGE_WAIT_STATES, * NOK_PMI_AVAILABLE_PAGE_WAIT_STATES;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_CACHED_PTE
{
    union
    {
        struct
        {
            ULONG GlobalTimeStamp;                                          //0x0
            ULONG PteIndex;                                                 //0x4
        };
        LONGLONG Long;                                                      //0x0
    };
}NOK_MI_CACHED_PTE, * NOK_PMI_CACHED_PTE;
//0x48 bytes (sizeof)
typedef struct _NOK_MI_CACHED_PTES
{
    NOK_MI_CACHED_PTE Bins[8];                                          //0x0
    LONG CachedPteCount;                                                    //0x40
}NOK_MI_CACHED_PTES, * NOK_PMI_CACHED_PTES;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_CLONE_BLOCK_FLAGS
{
    ULONGLONG ActualCloneCommit:59;                                         //0x0
    ULONGLONG CloneProtection:5;                                            //0x0
}NOK_MI_CLONE_BLOCK_FLAGS, * NOK_PMI_CLONE_BLOCK_FLAGS;
//0x28 bytes (sizeof)
typedef struct _NOK_LOCK_HEADER
{
    NOK_RTL_AVL_TREE LockTree;                                          //0x0
    NOK_RTL_AVL_TREE LockMdlSwitchedTree;                               //0x8
    ULONGLONG Count;                                                        //0x10
    ULONGLONG Lock;                                                         //0x18
    ULONG Valid;                                                            //0x20
}NOK_LOCK_HEADER, * NOK_PLOCK_HEADER;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_COMBINE_PAGE_LISTHEAD
{
    NOK_RTL_AVL_TREE Table;                                             //0x0
    volatile LONG Lock;                                                     //0x8
}NOK_MI_COMBINE_PAGE_LISTHEAD, * NOK_PMI_COMBINE_PAGE_LISTHEAD;
//0x98 bytes (sizeof)
typedef struct _NOK_LOG_HANDLE_CONTEXT
{
    VOID* LogHandle;                                                        //0x0
    VOID (*FlushToLsnRoutine)(VOID* arg1, NOK_LARGE_INTEGER arg2);       //0x8
    VOID (*QueryLogHandleInfoRoutine)(VOID* arg1, WCHAR* arg2);             //0x10
    NOK_DIRTY_PAGE_STATISTICS DirtyPageStatistics;                      //0x18
    NOK_DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;                      //0x30
    ULONG AdditionalPagesToWrite;                                           //0x68
    ULONG CcLWScanDPThreshold;                                              //0x6c
    NOK_LARGE_INTEGER LargestLsnForCurrentLWScan;                        //0x70
    NOK_PFILE_OBJECT RelatedFileObject;                                 //0x78
    ULONGLONG LargestLsnFileObjectKey;                                      //0x80
    NOK_LARGE_INTEGER LastLWTimeStamp;                                   //0x88
    ULONG Flags;                                                            //0x90
}NOK_LOG_HANDLE_CONTEXT, * NOK_PLOG_HANDLE_CONTEXT;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_HARDWARE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Dirty1:1;                                                     //0x0
    ULONGLONG Owner:1;                                                      //0x0
    ULONGLONG WriteThrough:1;                                               //0x0
    ULONGLONG CacheDisable:1;                                               //0x0
    ULONGLONG Accessed:1;                                                   //0x0
    ULONGLONG Dirty:1;                                                      //0x0
    ULONGLONG LargePage:1;                                                  //0x0
    ULONGLONG Global:1;                                                     //0x0
    ULONGLONG CopyOnWrite:1;                                                //0x0
    ULONGLONG Unused:1;                                                     //0x0
    ULONGLONG Write:1;                                                      //0x0
    ULONGLONG PageFrameNumber:36;                                           //0x0
    ULONGLONG ReservedForHardware:4;                                        //0x0
    ULONGLONG ReservedForSoftware:4;                                        //0x0
    ULONGLONG WsleAge:4;                                                    //0x0
    ULONGLONG WsleProtection:3;                                             //0x0
    ULONGLONG NoExecute:1;                                                  //0x0
}NOK_MMPTE_HARDWARE, * NOK_PMMPTE_HARDWARE;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_PROTOTYPE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG DemandFillProto:1;                                            //0x0
    ULONGLONG HiberVerifyConverted:1;                                       //0x0
    ULONGLONG ReadOnly:1;                                                   //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Combined:1;                                                   //0x0
    ULONGLONG Unused1:4;                                                    //0x0
    LONGLONG ProtoAddress:48;                                               //0x0
}NOK_MMPTE_PROTOTYPE, * NOK_PMMPTE_PROTOTYPE;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_SOFTWARE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG PageFileReserved:1;                                           //0x0
    ULONGLONG PageFileAllocated:1;                                          //0x0
    ULONGLONG ColdPage:1;                                                   //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG PageFileLow:4;                                                //0x0
    ULONGLONG UsedPageTableEntries:10;                                      //0x0
    ULONGLONG ShadowStack:1;                                                //0x0
    ULONGLONG Unused:5;                                                     //0x0
    ULONGLONG PageFileHigh:32;                                              //0x0
}NOK_MMPTE_SOFTWARE, * NOK_PMMPTE_SOFTWARE;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_TIMESTAMP
{
    ULONGLONG MustBeZero:1;                                                 //0x0
    ULONGLONG Unused:3;                                                     //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG PageFileLow:4;                                                //0x0
    ULONGLONG Reserved:16;                                                  //0x0
    ULONGLONG GlobalTimeStamp:32;                                           //0x0
}NOK_MMPTE_TIMESTAMP, * NOK_PMMPTE_TIMESTAMP;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_TRANSITION
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Write:1;                                                      //0x0
    ULONGLONG Spare:1;                                                      //0x0
    ULONGLONG IoTracker:1;                                                  //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG PageFrameNumber:36;                                           //0x0
    ULONGLONG Unused:16;                                                    //0x0
}NOK_MMPTE_TRANSITION, * NOK_PMMPTE_TRANSITION;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_SUBSECTION
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Unused0:3;                                                    //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG ColdPage:1;                                                   //0x0
    ULONGLONG Unused1:3;                                                    //0x0
    ULONGLONG ExecutePrivilege:1;                                           //0x0
    LONGLONG SubsectionAddress:48;                                          //0x0
}NOK_MMPTE_SUBSECTION, * NOK_PMMPTE_SUBSECTION;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE_LIST
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG OneEntry:1;                                                   //0x0
    ULONGLONG filler0:2;                                                    //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG filler1:16;                                                   //0x0
    ULONGLONG NextEntry:36;                                                 //0x0
}NOK_MMPTE_LIST, * NOK_PMMPTE_LIST;
//0x8 bytes (sizeof)
typedef struct _NOK_MMPTE
{
    union
    {
        ULONGLONG Long;                                                     //0x0
        volatile ULONGLONG VolatileLong;                                    //0x0
        NOK_MMPTE_HARDWARE Hard;                                        //0x0
        NOK_MMPTE_PROTOTYPE Proto;                                      //0x0
        NOK_MMPTE_SOFTWARE Soft;                                        //0x0
        NOK_MMPTE_TIMESTAMP TimeStamp;                                  //0x0
        NOK_MMPTE_TRANSITION Trans;                                     //0x0
        NOK_MMPTE_SUBSECTION Subsect;                                   //0x0
        NOK_MMPTE_LIST List;                                            //0x0
    } u;                                                                    //0x0
}NOK_MMPTE, * NOK_PMMPTE;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_CONTROL_AREA_WAIT_BLOCK
{
    NOK_PMI_CONTROL_AREA_WAIT_BLOCK Next;                               //0x0
    ULONG WaitReason;                                                       //0x8
    ULONG WaitResponse;                                                     //0xc
    NOK_KGATE Gate;                                                     //0x10
}NOK_MI_CONTROL_AREA_WAIT_BLOCK, * NOK_PMI_CONTROL_AREA_WAIT_BLOCK;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_CROSS_PARTITION_CHARGES
{
    ULONGLONG CurrentCharges;                                               //0x0
    ULONGLONG ChargeFailures;                                               //0x8
    ULONGLONG ChargePeak;                                                   //0x10
    ULONGLONG ChargeMinimum;                                                //0x18
}NOK_MI_CROSS_PARTITION_CHARGES, * NOK_PMI_CROSS_PARTITION_CHARGES;
//0x118 bytes (sizeof)
typedef struct _NOK_MI_DEBUGGER_STATE
{
    UCHAR TransientWrite;                                                   //0x0
    UCHAR CodePageEdited;                                                   //0x1
    NOK_PMMPTE DebugPte;                                                //0x8
    ULONG PoisonedTb;                                                       //0x10
    volatile LONG InDebugger;                                               //0x14
    VOID* volatile Pfns[32];                                                //0x18
}NOK_MI_DEBUGGER_STATE, * NOK_PMI_DEBUGGER_STATE;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_DECAY_TIMER_LINKAGE
{
    ULONGLONG Spare0:1;                                                     //0x0
    ULONGLONG PreviousDecayPfn:31;                                          //0x0
    ULONGLONG Spare1:1;                                                     //0x0
    ULONGLONG NextDecayPfn:31;                                              //0x0
}NOK_MI_DECAY_TIMER_LINKAGE, * NOK_PMI_DECAY_TIMER_LINKAGE;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_DECAY_TIMER_LINK
{
    union
    {
        ULONGLONG Long;                                                     //0x0
        NOK_MI_DECAY_TIMER_LINKAGE e1;                                  //0x0
    } u1;                                                                   //0x0
}NOK_MI_DECAY_TIMER_LINK, * NOK_PMI_DECAY_TIMER_LINK;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_DLL_OVERFLOW_AREA
{
    VOID* RangeStart;                                                       //0x0
    VOID* NextVa;                                                           //0x8
    VOID* RangeStartAbove2gb;                                               //0x10
    VOID* NextVaAbove2gb;                                                   //0x18
}NOK_MI_DLL_OVERFLOW_AREA, * NOK_PMI_DLL_OVERFLOW_AREA;
//0x28 bytes (sizeof)
typedef struct _NOK_JOB_RATE_CONTROL_HEADER
{
    VOID* RateControlQuotaReference;                                        //0x0
    NOK_RTL_BITMAP OverQuotaHistory;                                    //0x8
    UCHAR* BitMapBuffer;                                                    //0x18
    ULONGLONG BitMapBufferSize;                                             //0x20
}NOK_JOB_RATE_CONTROL_HEADER, * NOK_PJOB_RATE_CONTROL_HEADER;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_DRIVER_VA
{
    NOK_PMI_DRIVER_VA Next;                                             //0x0
    NOK_PMMPTE PointerPte;                                              //0x8
    NOK_RTL_BITMAP BitMap;                                              //0x10
    ULONG Hint;                                                             //0x20
    ULONG Flags;                                                            //0x24
}NOK_MI_DRIVER_VA, * NOK_PMI_DRIVER_VA;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_COMBINE_STATE
{
    volatile LONG ActiveSpinLock;                                           //0x0
    ULONG CombiningThreadCount;                                             //0x4
    NOK_RTL_AVL_TREE ActiveThreadTree;                                  //0x8
    ULONGLONG CommonPageCombineDomain;                                      //0x10
    ULONG CommonCombineDomainAssigned;                                      //0x18
}NOK_MI_COMBINE_STATE, * NOK_PMI_COMBINE_STATE;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_FORCED_COMMITS
{
    ULONG Regular;                                                          //0x0
    ULONG Wrap;                                                             //0x4
}NOK_MI_FORCED_COMMITS, * NOK_PMI_FORCED_COMMITS;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_EXTENT_DELETION_WAIT_BLOCK
{
    NOK_PMI_EXTENT_DELETION_WAIT_BLOCK Next;                            //0x0
    NOK_KGATE Gate;                                                     //0x8
}NOK_MI_EXTENT_DELETION_WAIT_BLOCK, * NOK_PMI_EXTENT_DELETION_WAIT_BLOCK;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_EXTRA_IMAGE_INFORMATION
{
    ULONG SizeOfHeaders;                                                    //0x0
    ULONG SizeOfImage;                                                      //0x4
    ULONG TimeDateStamp;                                                    //0x8
    ULONG ImageCetShadowStacksReady:1;                                      //0xc
    ULONG ImageCetShadowStacksStrictMode:1;                                 //0xc
    ULONG ImageCetSetContextIpValidationRelaxedMode:1;                      //0xc
    ULONG ImageCetDynamicApisAllowInProc:1;                                 //0xc
    ULONG ImageCetDowngradeReserved1:1;                                     //0xc
    ULONG ImageCetDowngradeReserved2:1;                                     //0xc
    ULONG Spare:26;                                                         //0xc
}NOK_MI_EXTRA_IMAGE_INFORMATION, * NOK_PMI_EXTRA_IMAGE_INFORMATION;
//0x44 bytes (sizeof)
typedef struct _NOK_MI_PROBE_RAISE_TRACKER
{
    ULONG UserRangeInKernel;                                                //0x0
    ULONG FaultFailed;                                                      //0x4
    ULONG WriteFaultFailed;                                                 //0x8
    ULONG LargePageFailed;                                                  //0xc
    ULONG UserAccessToKernelPte;                                            //0x10
    ULONG BadPageLocation;                                                  //0x14
    ULONG InsufficientCharge;                                               //0x18
    ULONG PageTableCharge;                                                  //0x1c
    ULONG NoPhysicalMapping;                                                //0x20
    ULONG NoIoReference;                                                    //0x24
    ULONG ProbeFailed;                                                      //0x28
    ULONG PteIsZero;                                                        //0x2c
    ULONG StrongCodeWrite;                                                  //0x30
    ULONG ReducedCloneCommitChargeFailed;                                   //0x34
    ULONG CopyOnWriteAtDispatchNoPages;                                     //0x38
    ULONG NoPageTablesAllowed;                                              //0x3c
    ULONG EnclavePageFailed;                                                //0x40
}NOK_MI_PROBE_RAISE_TRACKER, * NOK_PMI_PROBE_RAISE_TRACKER;
//0x430 bytes (sizeof)
typedef struct _NOK_MI_FREE_LARGE_PAGES
{
    ULONGLONG LargePageFreeCount[2];                                        //0x0
    ULONGLONG LargePageFreeCountHiLow[2][2];                                //0x10
    ULONGLONG LargePagesCount[2][2][4][4];                                  //0x30
    NOK_PMI_FREE_LARGE_PAGE_LIST LargePageEntries[2][2][4][4];          //0x230
}NOK_MI_FREE_LARGE_PAGES, * NOK_PMI_FREE_LARGE_PAGES;
//0x18 bytes (sizeof)
typedef struct _NOK_MI_FREE_LARGE_PAGE_LIST
{
    NOK_LIST_ENTRY ListHead;                                            //0x0
    ULONGLONG EntryCount;                                                   //0x10
}NOK_MI_FREE_LARGE_PAGE_LIST, * NOK_PMI_FREE_LARGE_PAGE_LIST;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_ZERO_COST_COUNTS
{
    ULONGLONG NativeSum;                                                    //0x0
    ULONGLONG CachedSum;                                                    //0x8
}NOK_MI_ZERO_COST_COUNTS, * NOK_PMI_ZERO_COST_COUNTS;
//0x4 bytes (sizeof)
typedef struct _NOK_MI_STORE_INPAGE_COMPLETE_FLAGS
{
    union
    {
        ULONG EntireFlags;                                                  //0x0
        struct
        {
            ULONG StoreFault:1;                                             //0x0
            ULONG LowResourceFailure:1;                                     //0x0
            ULONG Spare:14;                                                 //0x0
            ULONG RemainingPageCount:16;                                    //0x0
        };
    };
}NOK_MI_STORE_INPAGE_COMPLETE_FLAGS, * NOK_PMI_STORE_INPAGE_COMPLETE_FLAGS;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_HUGE_PFN
{
    union
    {
        struct
        {
            ULONGLONG EntireField;                                          //0x0
        } e1;                                                               //0x0
        struct
        {
            ULONGLONG Flink:18;                                             //0x0
            ULONGLONG PageState:3;                                          //0x0
            ULONGLONG Blink:18;                                             //0x0
            ULONGLONG WriteInProgress:1;                                    //0x0
            ULONGLONG HasError:1;                                           //0x0
            ULONGLONG Partition:11;                                         //0x0
            ULONGLONG Reserved:12;                                          //0x0
        } e2;                                                               //0x0
    } u1;                                                                   //0x0
}NOK_MI_HUGE_PFN, * NOK_PMI_HUGE_PFN;
//0x48 bytes (sizeof)
typedef struct _NOK_MI_ENCLAVE_STATE
{
    NOK_RTL_AVL_TREE EnclaveRegions;                                    //0x0
    VOID* EnclaveMetadataPage;                                              //0x8
    NOK_PRTL_BITMAP EnclaveMetadataBitMap;                              //0x10
    NOK_EX_PUSH_LOCK EnclaveMetadataEntryLock;                          //0x18
    volatile LONG EnclaveMetadataPageLock;                                  //0x20
    NOK_LIST_ENTRY EnclaveList;                                         //0x28
    NOK_EX_PUSH_LOCK EnclaveListLock;                                   //0x38
    NOK_EX_RUNDOWN_REF ShutdownRundown;                                 //0x40
}NOK_MI_ENCLAVE_STATE, * NOK_PMI_ENCLAVE_STATE;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_ACCESS_VIOLATION_RANGE
{
    NOK_RTL_BALANCED_NODE Node;                                         //0x0
    VOID* Va;                                                               //0x18
    VOID* EndVaInclusive;                                                   //0x20
}NOK_MI_ACCESS_VIOLATION_RANGE, * NOK_PMI_ACCESS_VIOLATION_RANGE;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_IO_CACHE_STATS
{
    ULONGLONG UnusedBlocks;                                                 //0x0
    ULONG ActiveCacheMatch;                                                 //0x8
    ULONG ActiveCacheOverride;                                              //0xc
    ULONG UnmappedCacheFlush;                                               //0x10
    ULONG UnmappedCacheMatch;                                               //0x14
    ULONG UnmappedCacheConflict;                                            //0x18
    ULONG PermanentIoAttributeConflict;                                     //0x1c
    ULONG PermanentIoNodeConflict;                                          //0x20
}NOK_MI_IO_CACHE_STATS, * NOK_PMI_IO_CACHE_STATS;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_HUGE_SYSTEM_VIEW_HEAD
{
    NOK_RTL_AVL_TREE ViewRoot;                                          //0x0
    ULONG ViewCount;                                                        //0x8
    volatile LONG Lock;                                                     //0xc
}NOK_MI_HUGE_SYSTEM_VIEW_HEAD, * NOK_PMI_HUGE_SYSTEM_VIEW_HEAD;
//0x18 bytes (sizeof)
typedef struct _NOK_MI_LARGEPAGE_VAD_INFO
{
    UCHAR LargeImageBias;                                                   //0x0
    UCHAR Spare[3];                                                         //0x1
    ULONGLONG ActualImageViewSize;                                          //0x8
    NOK_PEPARTITION ReferencedPartition;                                //0x10
}NOK_MI_LARGEPAGE_VAD_INFO, * NOK_PMI_LARGEPAGE_VAD_INFO;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_LARGE_PAGE_LISTS_CHANGING
{
    NOK_PMI_LARGE_PAGE_LISTS_CHANGING Next;                             //0x0
    NOK_KGATE Gate;                                                     //0x8
}NOK_MI_LARGE_PAGE_LISTS_CHANGING, * NOK_PMI_LARGE_PAGE_LISTS_CHANGING;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_COMBINE_WORKITEM
{
    VOID* NextEntry;                                                        //0x0
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x8
}NOK_MI_COMBINE_WORKITEM, * NOK_PMI_COMBINE_WORKITEM;
//0x4 bytes (sizeof)
typedef union _NOK_MI_RESERVATION_CLUSTER_INFO
{
    ULONG ClusterSize:10;                                                   //0x0
    ULONG SequenceNumber:22;                                                //0x0
    LONG EntireInfo;                                                        //0x0
}NOK_MI_RESERVATION_CLUSTER_INFO, * NOK_PMI_RESERVATION_CLUSTER_INFO;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_MODWRITE_DATA
{
    LONGLONG PagesLoad;                                                     //0x0
    ULONGLONG PagesAverage;                                                 //0x8
    ULONGLONG AverageAvailablePages;                                        //0x10
    ULONGLONG PagesWritten;                                                 //0x18
    ULONG WritesIssued;                                                     //0x20
    ULONG IgnoredReservationsCount;                                         //0x24
    ULONG FreedReservationsCount;                                           //0x28
    ULONG WriteBurstCount;                                                  //0x2c
    ULONGLONG IgnoreReservationsStartTime;                                  //0x30
    volatile NOK_MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;      //0x38
    USHORT IgnoreReservations:1;                                            //0x3c
    USHORT Spare:15;                                                        //0x3c
    USHORT Spare1;                                                          //0x3e
}NOK_MI_MODWRITE_DATA, * NOK_PMI_MODWRITE_DATA;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_PAGE_COLORS
{
    ULONG PageSize[4];                                                      //0x0
}NOK_MI_PAGE_COLORS, * NOK_PMI_PAGE_COLORS;
//0x4 bytes (sizeof)
typedef struct _NOK_MI_NODE_NUMBER_ZERO_BASED
{
    ULONG ZeroBased;                                                        //0x0
}NOK_MI_NODE_NUMBER_ZERO_BASED, * NOK_PMI_NODE_NUMBER_ZERO_BASED;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_PROTOTYPE_PTES_NODE
{
    NOK_RTL_BALANCED_NODE Node;                                         //0x0
    union
    {
        struct
        {
            ULONGLONG AllocationType:3;                                     //0x18
            ULONGLONG Inserted:1;                                           //0x18
        } e1;                                                               //0x18
        struct
        {
            ULONGLONG PrototypePtesFlags;                                   //0x18
        } e2;                                                               //0x18
    } u1;                                                                   //0x18
}NOK_MI_PROTOTYPE_PTES_NODE, * NOK_PMI_PROTOTYPE_PTES_NODE;
//0x18 bytes (sizeof)
typedef struct _NOK_MAILSLOT_CREATE_PARAMETERS
{
    ULONG MailslotQuota;                                                    //0x0
    ULONG MaximumMessageSize;                                               //0x4
    NOK_LARGE_INTEGER ReadTimeout;                                       //0x8
    UCHAR TimeoutSpecified;                                                 //0x10
}NOK_MAILSLOT_CREATE_PARAMETERS, * NOK_PMAILSLOT_CREATE_PARAMETERS;
//0x38 bytes (sizeof)
typedef struct _NOK_MI_LDW_WORK_CONTEXT
{
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x0
    NOK_PFILE_OBJECT FileObject;                                        //0x20
    LONG ErrorStatus;                                                       //0x28
    volatile LONG Active;                                                   //0x2c
    UCHAR FreeWhenDone;                                                     //0x30
}NOK_MI_LDW_WORK_CONTEXT, * NOK_PMI_LDW_WORK_CONTEXT;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_PAGE_COMBINE_STATISTICS
{
    ULONGLONG PagesScannedActive;                                           //0x0
    ULONGLONG PagesScannedStandby;                                          //0x8
    ULONGLONG PagesCombined;                                                //0x10
    ULONG CombineScanCount;                                                 //0x18
    LONG CombinedBlocksInUse;                                               //0x1c
    LONG SumCombinedBlocksReferenceCount;                                   //0x20
}NOK_MI_PAGE_COMBINE_STATISTICS, * NOK_PMI_PAGE_COMBINE_STATISTICS;
//0x190 bytes (sizeof)
typedef struct _NOK_MI_PAGE_COMBINING_SUPPORT
{
    NOK_PMI_PARTITION Partition;                                        //0x0
    NOK_LIST_ENTRY ArbitraryPfnMapList;                                 //0x8
    NOK_MI_COMBINE_WORKITEM FreeCombinePoolItem;                        //0x18
    ULONG CombiningThreadCount;                                             //0x40
    NOK_LIST_ENTRY CombinePageFreeList;                                 //0x48
    ULONGLONG CombineFreeListLock;                                          //0x58
    NOK_MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];              //0x60
    ULONGLONG CommonPageCombineDomain;                                      //0x160
    NOK_MI_PAGE_COMBINE_STATISTICS PageCombineStats;                    //0x168
}NOK_MI_PAGE_COMBINING_SUPPORT, * NOK_PMI_PAGE_COMBINING_SUPPORT;
//0x10 bytes (sizeof)
typedef struct _NOK_RTL_BITMAP_EX
{
    ULONGLONG SizeOfBitMap;                                                 //0x0
    ULONGLONG* Buffer;                                                      //0x8
}NOK_RTL_BITMAP_EX, * NOK_PRTL_BITMAP_EX;
//0x68 bytes (sizeof)
typedef struct _NOK_MI_IO_PAGE_STATE
{
    volatile LONG IoPfnLock;                                                //0x0
    NOK_RTL_AVL_TREE IoPfnRoot[3];                                      //0x8
    NOK_LIST_ENTRY UnusedCachedMaps;                                    //0x20
    ULONG OldestCacheFlushTimeStamp;                                        //0x30
    NOK_MI_IO_CACHE_STATS IoCacheStats;                                 //0x38
    NOK_RTL_AVL_TREE InvariantIoSpace;                                  //0x60
}NOK_MI_IO_PAGE_STATE, * NOK_PMI_IO_PAGE_STATE;
//0x78 bytes (sizeof)
typedef struct _NOK_MI_PAGEFILE_TRACES
{
    LONG Status;                                                            //0x0
    USHORT PartitionId;                                                     //0x4
    UCHAR Priority;                                                         //0x6
    UCHAR IrpPriority;                                                      //0x7
    UCHAR ReservationWrite;                                                 //0x8
    NOK_LARGE_INTEGER CurrentTime;                                       //0x10
    ULONGLONG AvailablePages;                                               //0x18
    ULONGLONG ModifiedPagesTotal;                                           //0x20
    ULONGLONG ModifiedPagefilePages;                                        //0x28
    ULONGLONG ModifiedNoWritePages;                                         //0x30
    ULONGLONG ModifiedPagefileNoReservationPages;                           //0x38
    struct
    {
        NOK_MDL Mdl;                                                    //0x40
        ULONGLONG Page[1];                                                  //0x70
    } MdlHack;                                                              //0x40
}NOK_MI_PAGEFILE_TRACES, * NOK_PMI_PAGEFILE_TRACES;
//0x28 bytes (sizeof)
typedef struct _NOK_MMWSL_INSTANCE
{
    NOK_PMMPTE NextPteToTrim;                                           //0x0
    NOK_PMMPTE NextPteToAge;                                            //0x8
    NOK_PMMPTE NextPteToAccessClear;                                    //0x10
    ULONG LastAccessClearingRemainder;                                      //0x18
    ULONG LastAgingRemainder;                                               //0x1c
    ULONGLONG LockedEntries;                                                //0x20
}NOK_MMWSL_INSTANCE, * NOK_PMMWSL_INSTANCE;
//0x3 bytes (sizeof)
typedef struct _NOK_MI_RESTRICTED_MODWRITES
{
    UCHAR MaximumClusterPages;                                              //0x0
    UCHAR ReducedClusterWrites;                                             //0x1
    UCHAR ImposeDelay;                                                      //0x2
}NOK_MI_RESTRICTED_MODWRITES, * NOK_PMI_RESTRICTED_MODWRITES;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_ALIGNED_SLIST
{
    NOK_SLIST_HEADER SList;                                              //0x0
}NOK_MI_ALIGNED_SLIST, * NOK_PMI_ALIGNED_SLIST;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_REBUILD_LARGE_PAGE_TIMER
{
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x0
    UCHAR SecondsLeft;                                                      //0x20
    UCHAR RebuildActive;                                                    //0x21
    UCHAR NextPassDelta;                                                    //0x22
    UCHAR LargeSubPagesActive;                                              //0x23
}NOK_MI_REBUILD_LARGE_PAGE_TIMER, * NOK_PMI_REBUILD_LARGE_PAGE_TIMER;
//0xb0 bytes (sizeof)
typedef struct _NOK_MI_PAGING_IO_STATE
{
    NOK_RTL_AVL_TREE PageFileHead;                                      //0x0
    volatile LONG PageFileHeadSpinLock;                                     //0x8
    LONG PrefetchSeekThreshold;                                             //0xc
    ULONG InPageSinglePages;                                                //0x10
    NOK_SLIST_HEADER InPageSupportSListHead[2];                          //0x20
    NOK_SLIST_HEADER ReservedInPageSupportSListHead[2];                  //0x40
    UCHAR InPageSupportSListMinimum[2];                                     //0x60
    NOK_PMMINPAGE_SUPPORT FirstReservedInPageBlock[2];                  //0x68
    NOK_PMMINPAGE_SUPPORT LastReservedInPageBlock[2];                   //0x78
    NOK_PMMPTE ReservedPtes;                                            //0x88
    ULONGLONG ReservedPtesLock;                                             //0x90
    ULONG ReservedPtesBitBuffer;                                            //0x98
    volatile LONG DelayPageFaults;                                          //0x9c
    ULONG FileCompressionBoundary;                                          //0xa0
    UCHAR MdlsAdjusted;                                                     //0xa4
}NOK_MI_PAGING_IO_STATE, * NOK_PMI_PAGING_IO_STATE;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_PAGING_FILE_SPACE_BITMAPS
{
    union
    {
        ULONG RefCount;                                                     //0x0
        NOK_PMI_PAGING_FILE_SPACE_BITMAPS Anchor;                       //0x0
    };
    NOK_RTL_BITMAP AllocationBitmap;                                    //0x8
    union
    {
        NOK_RTL_BITMAP ReservationBitmap;                               //0x18
        NOK_RTL_BITMAP EvictedBitmap;                                   //0x18
    };
}NOK_MI_PAGING_FILE_SPACE_BITMAPS, * NOK_PMI_PAGING_FILE_SPACE_BITMAPS;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_WRITE_TYPES
{
    NOK_WriteTypeCached = 0,
    NOK_WriteTypeNonTemporal = 1,
    NOK_WriteTypeMaximum = 2
}NOK_MI_WRITE_TYPES, * NOK_PMI_WRITE_TYPES;
//0x4 bytes (sizeof)
typedef enum _NOK_MMLISTS
{
    NOK_ZeroedPageList = 0,
    NOK_FreePageList = 1,
    NOK_StandbyPageList = 2,
    NOK_ModifiedPageList = 3,
    NOK_ModifiedNoWritePageList = 4,
    NOK_BadPageList = 5,
    NOK_ActiveAndValid = 6,
    NOK_TransitionPage = 7
}NOK_MMLISTS, * NOK_PMMLISTS;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_IMAGE_SECURITY_REFERENCE
{
    NOK_MI_PROTOTYPE_PTES_NODE ProtosNode;                              //0x0
    VOID* DynamicRelocations;                                               //0x20
    NOK_IMAGE_SECURITY_CONTEXT SecurityContext;                         //0x28
    union
    {
        VOID* ImageFileExtents;                                             //0x30
        ULONGLONG ImageFileExtentsUlongPtr;                                 //0x30
        ULONGLONG FilesystemWantsRva:1;                                     //0x30
        ULONGLONG Spare:3;                                                  //0x30
    } u1;                                                                   //0x30
    ULONGLONG StrongImageReference;                                         //0x38
}NOK_MI_IMAGE_SECURITY_REFERENCE, * NOK_PMI_IMAGE_SECURITY_REFERENCE;
//0x4 bytes (sizeof)
typedef struct _NOK_MM_GRAPHICS_VAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemoryAlwaysSet:1;                                         //0x0
    ULONG WriteWatch:1;                                                     //0x0
    ULONG FixedLargePageSize:1;                                             //0x0
    ULONG ZeroFillPagesOptional:1;                                          //0x0
    ULONG GraphicsAlwaysSet:1;                                              //0x0
    ULONG GraphicsUseCoherentBus:1;                                         //0x0
    ULONG GraphicsNoCache:1;                                                //0x0
    ULONG GraphicsPageProtection:3;                                         //0x0
}NOK_MM_GRAPHICS_VAD_FLAGS, * NOK_PMM_GRAPHICS_VAD_FLAGS;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_RESAVAIL_FAILURES
{
    ULONG Wrap;                                                             //0x0
    ULONG NoCharge;                                                         //0x4
}NOK_MI_RESAVAIL_FAILURES, * NOK_PMI_RESAVAIL_FAILURES;
//0x38 bytes (sizeof)
typedef struct _NOK_MI_BAD_MEMORY_EVENT_ENTRY
{
    ULONG BugCheckCode;                                                     //0x0
    LONG Active;                                                            //0x4
    ULONG Data;                                                             //0x8
    NOK_LARGE_INTEGER PhysicalAddress;                                   //0x10
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x18
}NOK_MI_BAD_MEMORY_EVENT_ENTRY, * NOK_PMI_BAD_MEMORY_EVENT_ENTRY;
//0x38 bytes (sizeof)
typedef struct _NOK_MI_PAGEFILE_BITMAPS_CACHE_ENTRY
{
    union
    {
        NOK_RTL_BALANCED_NODE LengthTreeNode;                           //0x0
        NOK_LIST_ENTRY FreeListEntry;                                   //0x0
    };
    NOK_RTL_BALANCED_NODE LocationTreeNode;                             //0x18
    ULONG StartingIndex;                                                    //0x30
    ULONG Length;                                                           //0x34
}NOK_MI_PAGEFILE_BITMAPS_CACHE_ENTRY, * NOK_PMI_PAGEFILE_BITMAPS_CACHE_ENTRY;
//0x50 bytes (sizeof)
typedef struct _NOK_MMDEREFERENCE_SEGMENT_HEADER
{
    NOK_KSEMAPHORE Semaphore;                                           //0x0
    NOK_LIST_ENTRY ControlAreaDeleteListHead;                           //0x20
    NOK_LIST_ENTRY UnusedSegmentDeleteListHead;                         //0x30
    NOK_LIST_ENTRY PagefileExtensionListHead;                           //0x40
}NOK_MMDEREFERENCE_SEGMENT_HEADER, * NOK_PMMDEREFERENCE_SEGMENT_HEADER;
//0x10 bytes (sizeof)
typedef struct _NOK_MMWORKING_SET_EXPANSION_HEAD
{
    NOK_LIST_ENTRY ListHead;                                            //0x0
}NOK_MMWORKING_SET_EXPANSION_HEAD, * NOK_PMMWORKING_SET_EXPANSION_HEAD;
//0xc8 bytes (sizeof)
typedef struct _NOK_MI_ERROR_STATE
{
    NOK_MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;                  //0x0
    ULONGLONG PageOfInterest;                                               //0x38
    NOK_MI_PROBE_RAISE_TRACKER ProbeRaises;                             //0x40
    NOK_MI_FORCED_COMMITS ForcedCommits;                                //0x84
    ULONG WsleFailures[1];                                                  //0x8c
    ULONG PageHashErrors;                                                   //0x90
    ULONG CheckZeroCount;                                                   //0x94
    volatile LONG ZeroedPageSingleBitErrorsDetected;                        //0x98
    volatile LONG BadPagesDetected;                                         //0x9c
    LONG ScrubPasses;                                                       //0xa0
    LONG ScrubBadPagesFound;                                                //0xa4
    ULONG UserViewFailures;                                                 //0xa8
    ULONG UserViewCollisionFailures;                                        //0xac
    ULONG UserAllocateFailures;                                             //0xb0
    ULONG UserAllocateCollisionFailures;                                    //0xb4
    NOK_MI_RESAVAIL_FAILURES ResavailFailures;                          //0xb8
    UCHAR PendingBadPages;                                                  //0xc0
    UCHAR FatalGraphicsFailures;                                            //0xc1
    UCHAR InitFailure;                                                      //0xc2
    UCHAR StopBadMaps;                                                      //0xc3
}NOK_MI_ERROR_STATE, * NOK_PMI_ERROR_STATE;
//0x28 bytes (sizeof)
typedef struct _NOK_MMMOD_WRITER_LISTHEAD
{
    NOK_LIST_ENTRY ListHead;                                            //0x0
    union
    {
        NOK_KGATE Gate;                                                 //0x10
        NOK_KEVENT Event;                                               //0x10
    };
}NOK_MMMOD_WRITER_LISTHEAD, * NOK_PMMMOD_WRITER_LISTHEAD;
//0xc0 bytes (sizeof)
typedef struct _NOK_MMSUPPORT_INSTANCE
{
    ULONG NextPageColor;                                                    //0x0
    ULONG PageFaultCount;                                                   //0x4
    ULONGLONG TrimmedPageCount;                                             //0x8
    NOK_PMMWSL_INSTANCE VmWorkingSetList;                               //0x10
    NOK_LIST_ENTRY WorkingSetExpansionLinks;                            //0x18
    ULONGLONG AgeDistribution[8];                                           //0x28
    NOK_PKGATE ExitOutswapGate;                                         //0x68
    ULONGLONG MinimumWorkingSetSize;                                        //0x70
    ULONGLONG WorkingSetLeafSize;                                           //0x78
    ULONGLONG WorkingSetLeafPrivateSize;                                    //0x80
    ULONGLONG WorkingSetSize;                                               //0x88
    ULONGLONG WorkingSetPrivateSize;                                        //0x90
    ULONGLONG MaximumWorkingSetSize;                                        //0x98
    ULONGLONG PeakWorkingSetSize;                                           //0xa0
    ULONG HardFaultCount;                                                   //0xa8
    USHORT LastTrimStamp;                                                   //0xac
    USHORT PartitionId;                                                     //0xae
    ULONGLONG SelfmapLock;                                                  //0xb0
    NOK_MMSUPPORT_FLAGS Flags;                                          //0xb8
}NOK_MMSUPPORT_INSTANCE, * NOK_PMMSUPPORT_INSTANCE;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
{
    ULONGLONG NumberOfPtes:6;                                               //0x0
    ULONGLONG PartitionId:10;                                               //0x0
    ULONGLONG SectionOffset:48;                                             //0x0
}NOK_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES, * NOK_PMI_SYSTEM_CACHE_VIEW_ATTRIBUTES;
//0x18 bytes (sizeof)
typedef struct _NOK_SECTION_OBJECT_POINTERS
{
    VOID* DataSectionObject;                                                //0x0
    VOID* SharedCacheMap;                                                   //0x8
    VOID* ImageSectionObject;                                               //0x10
}NOK_SECTION_OBJECT_POINTERS, * NOK_PSECTION_OBJECT_POINTERS;
//0x48 bytes (sizeof)
typedef struct _NOK_MI_DYNAMIC_BITMAP
{
    NOK_RTL_BITMAP_EX Bitmap;                                           //0x0
    ULONGLONG MaximumSize;                                                  //0x10
    ULONGLONG Hint;                                                         //0x18
    VOID* BaseVa;                                                           //0x20
    ULONGLONG SizeTopDown;                                                  //0x28
    ULONGLONG HintTopDown;                                                  //0x30
    VOID* BaseVaTopDown;                                                    //0x38
    ULONGLONG SpinLock;                                                     //0x40
}NOK_MI_DYNAMIC_BITMAP, * NOK_PMI_DYNAMIC_BITMAP;
//0x240 bytes (sizeof)
typedef struct _NOK_KSCHEDULING_GROUP
{
    NOK_KSCHEDULING_GROUP_POLICY Policy;                                //0x0
    ULONG RelativeWeight;                                                   //0x8
    ULONG ChildMinRate;                                                     //0xc
    ULONG ChildMinWeight;                                                   //0x10
    ULONG ChildTotalWeight;                                                 //0x14
    ULONGLONG QueryHistoryTimeStamp;                                        //0x18
    LONGLONG NotificationCycles;                                            //0x20
    LONGLONG MaxQuotaLimitCycles;                                           //0x28
    volatile LONGLONG MaxQuotaCyclesRemaining;                              //0x30
    union
    {
        NOK_LIST_ENTRY SchedulingGroupList;                             //0x38
        NOK_LIST_ENTRY Sibling;                                         //0x38
    };
    NOK_PKDPC NotificationDpc;                                          //0x48
    NOK_LIST_ENTRY ChildList;                                           //0x50
    NOK_PKSCHEDULING_GROUP Parent;                                      //0x60
    NOK_KSCB PerProcessor[1];                                           //0x80
}NOK_KSCHEDULING_GROUP, * NOK_PKSCHEDULING_GROUP;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_SESSION_DRIVER_UNLOAD
{
    union
    {
        VOID (*Function)(NOK_PDRIVER_OBJECT arg1);                      //0x0
        ULONGLONG FunctionValue;                                            //0x0
    };
}NOK_MI_SESSION_DRIVER_UNLOAD, * NOK_PMI_SESSION_DRIVER_UNLOAD;
//0x4 bytes (sizeof)
typedef enum _NOK_LDR_DDAG_STATE
{
    NOK_LdrModulesMerged = -5,
    NOK_LdrModulesInitError = -4,
    NOK_LdrModulesSnapError = -3,
    NOK_LdrModulesUnloaded = -2,
    NOK_LdrModulesUnloading = -1,
    NOK_LdrModulesPlaceHolder = 0,
    NOK_LdrModulesMapping = 1,
    NOK_LdrModulesMapped = 2,
    NOK_LdrModulesWaitingForDependencies = 3,
    NOK_LdrModulesSnapping = 4,
    NOK_LdrModulesSnapped = 5,
    NOK_LdrModulesCondensed = 6,
    NOK_LdrModulesReadyToInit = 7,
    NOK_LdrModulesInitializing = 8,
    NOK_LdrModulesReadyToRun = 9
}NOK_LDR_DDAG_STATE, * NOK_PLDR_DDAG_STATE;
//0x20 bytes (sizeof)
typedef struct _NOK_MI_WRITE_CALIBRATION
{
    ULONG MaximumNumberProcessors;                                          //0x0
    NOK_MI_WRITE_TYPES OptimalWriteType;                                  //0x4
    ULONGLONG PerProcessorNumberOfBytes;                                    //0x8
    ULONG OptimalWriteProcessors[2];                                        //0x10
    NOK_PMI_WRITE_MODES RawTimeStamps;                                  //0x18
}NOK_MI_WRITE_CALIBRATION, * NOK_PMI_WRITE_CALIBRATION;
//0xa8 bytes (sizeof)
typedef struct _NOK_MI_POOL_STATE
{
    ULONGLONG MaximumNonPagedPoolThreshold;                                 //0x0
    volatile ULONGLONG AllocatedNonPagedPool;                               //0x8
    volatile ULONGLONG AllocatedSecureNonPagedPool;                         //0x10
    NOK_SINGLE_LIST_ENTRY BadPoolHead;                                  //0x18
    ULONG HighEventSets;                                                    //0x20
    UCHAR HighEventSetsValid;                                               //0x24
    ULONGLONG LowPagedPoolThreshold;                                        //0x28
    ULONGLONG HighPagedPoolThreshold;                                       //0x30
    volatile LONG PermittedFaultsLock;                                      //0x38
    NOK_RTL_AVL_TREE PermittedFaultsTree;                               //0x40
    NOK_MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];        //0x48
    ULONGLONG TotalPagedPoolQuota;                                          //0x98
    ULONGLONG TotalNonPagedPoolQuota;                                       //0xa0
}NOK_MI_POOL_STATE, * NOK_PMI_POOL_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_HARD_FAULT_STATE
{
    NOK_PMMPFN SwapPfn;                                                 //0x0
    NOK_MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags;                      //0x8
}NOK_MI_HARD_FAULT_STATE, * NOK_PMI_HARD_FAULT_STATE;
//0x8 bytes (sizeof)
typedef struct _NOK_MI_VAD_SEQUENTIAL_INFO
{
    ULONGLONG Length:12;                                                    //0x0
    ULONGLONG Vpn:52;                                                       //0x0
}NOK_MI_VAD_SEQUENTIAL_INFO, * NOK_PMI_VAD_SEQUENTIAL_INFO;
//0x4 bytes (sizeof)
typedef struct _NOK_MI_SUBSECTION_ENTRY1
{
    ULONG CrossPartitionReferences:30;                                      //0x0
    ULONG SubsectionMappedLarge:2;                                          //0x0
}NOK_MI_SUBSECTION_ENTRY1, * NOK_PMI_SUBSECTION_ENTRY1;
//0x28 bytes (sizeof)
typedef struct _NOK_MI_REVERSE_VIEW_MAP
{
    NOK_LIST_ENTRY ViewLinks;                                           //0x0
    union
    {
        VOID* SystemCacheVa;                                                //0x10
        VOID* SessionViewVa;                                                //0x10
        NOK_PEPROCESS VadsProcess;                                      //0x10
        ULONGLONG Type:2;                                                   //0x10
    };
    union
    {
        NOK_PSUBSECTION Subsection;                                     //0x18
        ULONGLONG SubsectionType:1;                                         //0x18
    };
    union
    {
        NOK_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes;      //0x20
        ULONGLONG SectionOffset;                                            //0x20
    };
}NOK_MI_REVERSE_VIEW_MAP, * NOK_PMI_REVERSE_VIEW_MAP;
//0x10 bytes (sizeof)
typedef struct _NOK_MM_SYSTEM_PAGE_COUNTS
{
    ULONG SystemCodePage;                                                   //0x0
    ULONG SystemDriverPage;                                                 //0x4
    LONG TotalSystemCodePages;                                              //0x8
    LONG TotalSystemDriverPages;                                            //0xc
}NOK_MM_SYSTEM_PAGE_COUNTS, * NOK_PMM_SYSTEM_PAGE_COUNTS;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_SECTION_WOW_STATE
{
    NOK_RTL_BITMAP_EX ImageBitMap;                                      //0x0
    NOK_MI_DLL_OVERFLOW_AREA OverflowArea;                              //0x10
    NOK_PSECTION CfgBitMapSection;                                      //0x30
    NOK_PCONTROL_AREA CfgBitMapControlArea;                             //0x38
}NOK_MI_SECTION_WOW_STATE, * NOK_PMI_SECTION_WOW_STATE;
//0xb0 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_NODE_INFORMATION
{
    NOK_CACHED_KSTACK_LIST CachedKernelStacks[2];                       //0x0
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool;                    //0x40
    ULONGLONG CachedNonPagedPoolCount;                                      //0x88
    ULONGLONG NonPagedPoolSpinLock;                                         //0x90
    NOK_PMMPFN CachedNonPagedPool;                                      //0x98
    VOID* NonPagedPoolFirstVa;                                              //0xa0
    VOID* NonPagedPoolLastVa;                                               //0xa8
}NOK_MI_SYSTEM_NODE_INFORMATION, * NOK_PMI_SYSTEM_NODE_INFORMATION;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_TRIM_STATE
{
    ULONGLONG ExpansionLock;                                                //0x0
    volatile LONG TrimInProgressCount;                                      //0x8
    NOK_KEVENT PeriodicWorkingSetEvent;                                 //0x10
    ULONG TrimAllPageFaultCount[3];                                         //0x28
}NOK_MI_SYSTEM_TRIM_STATE, * NOK_PMI_SYSTEM_TRIM_STATE;
//0x38 bytes (sizeof)
typedef struct _NOK_MI_RESUME_WORKITEM
{
    NOK_KEVENT ResumeCompleteEvent;                                     //0x0
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x18
}NOK_MI_RESUME_WORKITEM, * NOK_PMI_RESUME_WORKITEM;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_VA_ASSIGNMENT
{
    VOID* BaseAddress;                                                      //0x0
    ULONGLONG NumberOfBytes;                                                //0x8
}NOK_MI_SYSTEM_VA_ASSIGNMENT, * NOK_PMI_SYSTEM_VA_ASSIGNMENT;
//0x20 bytes (sizeof)
typedef struct _NOK_MMSUPPORT_AGGREGATION
{
    ULONG PageFaultCount;                                                   //0x0
    ULONGLONG WorkingSetSize;                                               //0x8
    ULONGLONG WorkingSetLeafSize;                                           //0x10
    ULONGLONG PeakWorkingSetSize;                                           //0x18
}NOK_MMSUPPORT_AGGREGATION, * NOK_PMMSUPPORT_AGGREGATION;
//0x4 bytes (sizeof)
typedef union _NOK_MI_FLAGS
{
    LONG EntireFlags;                                                       //0x0
    ULONG VerifierEnabled:1;                                                //0x0
    ULONG KernelVerifierEnabled:1;                                          //0x0
    ULONG LargePageKernel:1;                                                //0x0
    ULONG StopOn4d:1;                                                       //0x0
    ULONG InitializationPhase:2;                                            //0x0
    ULONG PageKernelStacks:1;                                               //0x0
    ULONG CheckZeroPages:1;                                                 //0x0
    ULONG ProcessorPrewalks:1;                                              //0x0
    ULONG ProcessorPostwalks:1;                                             //0x0
    ULONG CoverageBuild:1;                                                  //0x0
    ULONG AccessBitReplacementDisabled:1;                                   //0x0
    ULONG CheckExecute:1;                                                   //0x0
    ULONG ProtectedPagesEnabled:1;                                          //0x0
    ULONG SecureRelocations:1;                                              //0x0
    ULONG StrongPageIdentity:1;                                             //0x0
    ULONG StrongCodeGuarantees:1;                                           //0x0
    ULONG HardCodeGuarantees:1;                                             //0x0
    ULONG ExecutePagePrivilegeRequired:1;                                   //0x0
    ULONG SecureKernelCfgEnabled:1;                                         //0x0
    ULONG FullHvci:1;                                                       //0x0
    ULONG BootDebuggerActive:1;                                             //0x0
    ULONG ExceptionHandlingReady:1;                                         //0x0
    ULONG ShadowStacksSupported:1;                                          //0x0
    ULONG AccessBitFenceRequired:1;                                         //0x0
    ULONG PfnDatabaseExists:1;                                              //0x0
    ULONG DeferredHotAddsCompleted:1;                                       //0x0
    ULONG SystemPtesReady:1;                                                //0x0
}NOK_MI_FLAGS, * NOK_PMI_FLAGS;
//0x200 bytes (sizeof)
typedef struct _NOK_MI_ULTRA_MDL_NODE
{
    NOK_MI_ALIGNED_SLIST UltraMdlMaps[8];                               //0x0
}NOK_MI_ULTRA_MDL_NODE, * NOK_PMI_ULTRA_MDL_NODE;
//0x80 bytes (sizeof)
typedef struct _NOK_NPAGED_LOOKASIDE_LIST
{
    NOK_GENERAL_LOOKASIDE L;                                            //0x0
}NOK_NPAGED_LOOKASIDE_LIST, * NOK_PNPAGED_LOOKASIDE_LIST;
//0x4 bytes (sizeof)
typedef struct _NOK_MMSECURE_FLAGS
{
    ULONG ReadOnly:1;                                                       //0x0
    ULONG ReadWrite:1;                                                      //0x0
    ULONG SecNoChange:1;                                                    //0x0
    ULONG NoDelete:1;                                                       //0x0
    ULONG RequiresPteReversal:1;                                            //0x0
    ULONG ExclusiveSecure:1;                                                //0x0
    ULONG UserModeOnly:1;                                                   //0x0
    ULONG NoInherit:1;                                                      //0x0
    ULONG CheckVad:1;                                                       //0x0
    ULONG Spare:3;                                                          //0x0
}NOK_MMSECURE_FLAGS, * NOK_PMMSECURE_FLAGS;
//0x4 bytes (sizeof)
typedef struct _NOK_MMVAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemory:1;                                                  //0x0
}NOK_MMVAD_FLAGS, * NOK_PMMVAD_FLAGS;
//0x20 bytes (sizeof)
typedef struct _NOK_MMSESSION
{
    NOK_EX_PUSH_LOCK SystemSpaceViewLock;                               //0x0
    NOK_PEX_PUSH_LOCK SystemSpaceViewLockPointer;                       //0x8
    NOK_RTL_AVL_TREE ViewRoot;                                          //0x10
    ULONG ViewCount;                                                        //0x18
    ULONG BitmapFailures;                                                   //0x1c
}NOK_MMSESSION, * NOK_PMMSESSION;
//0x4 bytes (sizeof)
typedef enum _NOK_MM_PAGE_ACCESS_TYPE
{
    NOK_MmPteAccessType = 0,
    NOK_MmCcReadAheadType = 1,
    NOK_MmPfnRepurposeType = 2,
    NOK_MmMaximumPageAccessType = 3
}NOK_MM_PAGE_ACCESS_TYPE, * NOK_PMM_PAGE_ACCESS_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_MI_WRITE_MODES
{
    ULONGLONG WriteType[2];                                                 //0x0
}NOK_MI_WRITE_MODES, * NOK_PMI_WRITE_MODES;
//0x1 bytes (sizeof)
typedef struct _NOK_MI_WSLE
{
    union
    {
        struct
        {
            UCHAR Age:4;                                                    //0x0
            UCHAR Protection:3;                                             //0x0
            UCHAR Reserved:1;                                               //0x0
        } e1;                                                               //0x0
        struct
        {
            UCHAR EntireWsle;                                               //0x0
        } e2;                                                               //0x0
    } u1;                                                                   //0x0
}NOK_MI_WSLE, * NOK_PMI_WSLE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_PFN_CACHE_ATTRIBUTE
{
    NOK_MiNonCached = 0,
    NOK_MiCached = 1,
    NOK_MiWriteCombined = 2,
    NOK_MiNotMapped = 3
}NOK_MI_PFN_CACHE_ATTRIBUTE, * NOK_PMI_PFN_CACHE_ATTRIBUTE;
//0x4 bytes (sizeof)
typedef struct _NOK_MMSUBSECTION_FLAGS
{
    USHORT SubsectionAccessed:1;                                            //0x0
    USHORT Protection:5;                                                    //0x0
    USHORT StartingSector4132:10;                                           //0x0
    USHORT SubsectionStatic:1;                                              //0x2
    USHORT GlobalMemory:1;                                                  //0x2
    USHORT Spare:1;                                                         //0x2
    USHORT OnDereferenceList:1;                                             //0x2
    USHORT SectorEndOffset:12;                                              //0x2
}NOK_MMSUBSECTION_FLAGS, * NOK_PMMSUBSECTION_FLAGS;
//0x4 bytes (sizeof)
typedef struct _NOK_MMVAD_FLAGS2
{
    ULONG FileOffset:24;                                                    //0x0
    ULONG Large:1;                                                          //0x0
    ULONG TrimBehind:1;                                                     //0x0
    ULONG Inherit:1;                                                        //0x0
    ULONG NoValidationNeeded:1;                                             //0x0
    ULONG PrivateDemandZero:1;                                              //0x0
    ULONG Spare:3;                                                          //0x0
}NOK_MMVAD_FLAGS2, * NOK_PMMVAD_FLAGS2;
//0x20 bytes (sizeof)
typedef struct _NOK_MMCLONE_HEADER
{
    ULONGLONG NumberOfPtes;                                                 //0x0
    volatile ULONGLONG NumberOfProcessReferences;                           //0x8
    NOK_PMMCLONE_BLOCK ClonePtes;                                       //0x10
    NOK_PMI_PARTITION Partition;                                        //0x18
}NOK_MMCLONE_HEADER, * NOK_PMMCLONE_HEADER;
//0x4 bytes (sizeof)
typedef struct _NOK_MMPAGE_FILE_EXPANSION_FLAGS
{
    UCHAR PageFileNumber:8;                                                 //0x0
    UCHAR Spare1:8;                                                         //0x1
    UCHAR Spare2:8;                                                         //0x2
    UCHAR IgnoreCurrentCommit:1;                                            //0x3
    UCHAR IncreaseMinimumSize:1;                                            //0x3
    UCHAR AttemptForCantExtend:1;                                           //0x3
    UCHAR UnusedSegmentDeletion:1;                                          //0x3
    UCHAR PageFileContract:1;                                               //0x3
    UCHAR NoWait:1;                                                         //0x3
    UCHAR Spare3:2;                                                         //0x3
}NOK_MMPAGE_FILE_EXPANSION_FLAGS, * NOK_PMMPAGE_FILE_EXPANSION_FLAGS;
//0x58 bytes (sizeof)
typedef struct _NOK_MMPAGE_FILE_EXPANSION
{
    NOK_PSEGMENT Segment;                                               //0x0
    NOK_LIST_ENTRY DereferenceList;                                     //0x8
    NOK_PMI_PARTITION Partition;                                        //0x18
    ULONGLONG RequestedExpansionSize;                                       //0x20
    ULONGLONG ActualExpansion;                                              //0x28
    NOK_KEVENT Event;                                                   //0x30
    volatile LONG InProgress;                                               //0x48
    union
    {
        ULONG LongFlags;                                                    //0x4c
        NOK_MMPAGE_FILE_EXPANSION_FLAGS Flags;                          //0x4c
    } u1;                                                                   //0x4c
    VOID** volatile ActiveEntry;                                            //0x50
}NOK_MMPAGE_FILE_EXPANSION, * NOK_PMMPAGE_FILE_EXPANSION;
//0x10 bytes (sizeof)
typedef struct _NOK_MMEXTEND_INFO
{
    ULONGLONG CommittedSize;                                                //0x0
    ULONG ReferenceCount;                                                   //0x8
}NOK_MMEXTEND_INFO, * NOK_PMMEXTEND_INFO;
//0x4 bytes (sizeof)
typedef struct _NOK_MMINPAGE_FLAGS
{
    ULONG GetExtents:1;                                                     //0x0
    ULONG PrefetchSystemVmType:2;                                           //0x0
    ULONG VaPrefetchReadBlock:1;                                            //0x0
    ULONG CollidedFlowThrough:1;                                            //0x0
    ULONG ForceCollisions:1;                                                //0x0
    ULONG InPageExpanded:1;                                                 //0x0
    ULONG IssuedAtLowPriority:1;                                            //0x0
    ULONG FaultFromStore:1;                                                 //0x0
    ULONG PagePriority:3;                                                   //0x0
    ULONG ClusteredPagePriority:3;                                          //0x0
    ULONG MakeClusterValid:1;                                               //0x0
    ULONG PerformRelocations:1;                                             //0x0
    ULONG ZeroLastPage:1;                                                   //0x0
    ULONG UserFault:1;                                                      //0x0
    ULONG StandbyProtectionNeeded:1;                                        //0x0
    ULONG PteChanged:1;                                                     //0x0
    ULONG PageFileFault:1;                                                  //0x0
    ULONG PageFilePageHashActive:1;                                         //0x0
    ULONG CoalescedIo:1;                                                    //0x0
    ULONG VmLockNotNeeded:1;                                                //0x0
    ULONG Spare0:1;                                                         //0x0
    ULONG Spare1:6;                                                         //0x0
}NOK_MMINPAGE_FLAGS, * NOK_PMMINPAGE_FLAGS;
//0x60 bytes (sizeof)
typedef struct _NOK_ETW_APC_ENTRY
{
    union
    {
        NOK_SLIST_ENTRY SListEntry;                                     //0x0
        NOK_KAPC Apc;                                                   //0x0
    };
}NOK_ETW_APC_ENTRY, * NOK_PETW_APC_ENTRY;
//0x1 bytes (sizeof)
typedef struct _NOK_MMPFNENTRY1
{
    UCHAR PageLocation:3;                                                   //0x0
    UCHAR WriteInProgress:1;                                                //0x0
    UCHAR Modified:1;                                                       //0x0
    UCHAR ReadInProgress:1;                                                 //0x0
    UCHAR CacheAttribute:2;                                                 //0x0
}NOK_MMPFNENTRY1, * NOK_PMMPFNENTRY1;
//0x58 bytes (sizeof)
typedef struct _NOK_MI_PER_SESSION_PROTOS
{
    union
    {
        NOK_RTL_BALANCED_NODE SessionProtoNode;                         //0x0
        NOK_SINGLE_LIST_ENTRY FreeList;                                 //0x0
        VOID* DriverAddress;                                                //0x0
    };
    NOK_MI_PROTOTYPE_PTES_NODE ProtosNode;                              //0x18
    ULONGLONG NumberOfPtes;                                                 //0x38
    union
    {
        ULONG SessionId;                                                    //0x40
        NOK_PSUBSECTION Subsection;                                     //0x40
    };
    NOK_PMMPTE SubsectionBase;                                          //0x48
    union
    {
        ULONG ReferenceCount;                                               //0x50
        ULONG NumberOfPtesToFree;                                           //0x50
    } u2;                                                                   //0x50
}NOK_MI_PER_SESSION_PROTOS, * NOK_PMI_PER_SESSION_PROTOS;
//0x4 bytes (sizeof)
typedef struct _NOK_MODWRITER_FLAGS
{
    ULONG KeepForever:1;                                                    //0x0
    ULONG Networked:1;                                                      //0x0
    ULONG IoPriority:3;                                                     //0x0
    ULONG ModifiedStoreWrite:1;                                             //0x0
}NOK_MODWRITER_FLAGS, * NOK_PMODWRITER_FLAGS;
//0x78 bytes (sizeof)
typedef struct _NOK_MI_SHUTDOWN_STATE
{
    UCHAR CrashDumpInitialized;                                             //0x0
    UCHAR ConnectedStandbyActive;                                           //0x1
    UCHAR ZeroPageFileAtShutdown;                                           //0x2
    ULONG SystemShutdown;                                                   //0x4
    LONG ShutdownFlushInProgress;                                           //0x8
    ULONG MirroringActive;                                                  //0xc
    NOK_MI_RESUME_WORKITEM ResumeItem;                                  //0x10
    NOK_PETHREAD MirrorHoldsPfn;                                        //0x48
    NOK_RTL_BITMAP_EX MirrorBitMaps[2];                                 //0x50
    NOK_PMMPTE CrashDumpPte;                                            //0x70
}NOK_MI_SHUTDOWN_STATE, * NOK_PMI_SHUTDOWN_STATE;
//0x10a8 bytes (sizeof)
typedef struct _NOK_MI_SESSION_STATE
{
    NOK_MMSESSION SystemSession;                                        //0x0
    UCHAR CodePageEdited;                                                   //0x20
    ULONGLONG* DynamicVaBitBuffer;                                          //0x28
    ULONGLONG DynamicVaBitBufferPages;                                      //0x30
    VOID* DynamicVaStart;                                                   //0x38
    VOID* ImageVaStart;                                                     //0x40
    NOK_MI_HUGE_SYSTEM_VIEW_HEAD SystemViewBuckets[256];                //0x48
    ULONG* DynamicPtesBitBuffer;                                            //0x1048
    NOK_EX_PUSH_LOCK IdLock;                                            //0x1050
    NOK_PEPROCESS LeaderProcess;                                        //0x1058
    NOK_EX_PUSH_LOCK InitializeLock;                                    //0x1060
    NOK_PMMWSL_INSTANCE WorkingSetList;                                 //0x1068
    VOID* SessionBase;                                                      //0x1070
    VOID* SessionCore;                                                      //0x1078
    NOK_RTL_AVL_TREE SessionIdNodes;                                    //0x1080
    NOK_KEVENT DeleteInProgressEvent;                                   //0x1088
    ULONG DeleteInProgressCount;                                            //0x10a0
}NOK_MI_SESSION_STATE, * NOK_PMI_SESSION_STATE;
//0x38 bytes (sizeof)
typedef struct _NOK_MMINPAGE_SUPPORT_FLOW_THROUGH
{
    ULONGLONG Page[1];                                                      //0x0
    NOK_PMMINPAGE_SUPPORT InitialInPageSupport;                         //0x8
    NOK_PMMPAGING_FILE PagingFile;                                      //0x10
    ULONGLONG PageFileOffset;                                               //0x18
    NOK_RTL_BALANCED_NODE Node;                                         //0x20
}NOK_MMINPAGE_SUPPORT_FLOW_THROUGH, * NOK_PMMINPAGE_SUPPORT_FLOW_THROUGH;
//0x1c0 bytes (sizeof)
typedef struct _NOK_MMINPAGE_SUPPORT
{
    union
    {
        NOK_LIST_ENTRY ListEntry;                                       //0x0
        NOK_SLIST_ENTRY SListEntry;                                     //0x0
    };
    NOK_LIST_ENTRY ListHead;                                            //0x10
    NOK_KEVENT Event;                                                   //0x20
    NOK_KEVENT CollidedEvent;                                           //0x38
    NOK_IO_STATUS_BLOCK IoStatus;                                       //0x50
    NOK_LARGE_INTEGER ReadOffset;                                        //0x60
    union
    {
        NOK_KAPC_STATE ApcState;                                        //0x68
        NOK_MI_HARD_FAULT_STATE HardFaultState;                         //0x68
    } u2;                                                                   //0x68
    NOK_PETHREAD Thread;                                                //0x98
    NOK_PMMPFN LockedProtoPfn;                                          //0xa0
    NOK_MMPTE PteContents;                                              //0xa8
    volatile LONG WaitCount;                                                //0xb0
    volatile LONG InjectRetry;                                              //0xb4
    ULONG ByteCount;                                                        //0xb8
    union
    {
        ULONG ImagePteOffset;                                               //0xbc
        ULONG TossPage;                                                     //0xbc
    } u3;                                                                   //0xbc
    union
    {
        NOK_MMINPAGE_FLAGS e1;                                          //0xc0
        ULONG LongFlags;                                                    //0xc0
    } u1;                                                                   //0xc0
    union
    {
        NOK_PFILE_OBJECT FilePointer;                                   //0xc8
        NOK_PMMPAGING_FILE PagingFile;                                  //0xc8
    };
    union
    {
        NOK_PCONTROL_AREA ControlArea;                                  //0xd0
        NOK_PSUBSECTION Subsection;                                     //0xd0
    };
    VOID* Autoboost;                                                        //0xd8
    VOID* FaultingAddress;                                                  //0xe0
    NOK_PMMPTE PointerPte;                                              //0xe8
    NOK_PMMPTE BasePte;                                                 //0xf0
    NOK_PMMPFN Pfn;                                                     //0xf8
    NOK_PMDL PrefetchMdl;                                               //0x100
    volatile LONGLONG ProbeCount;                                           //0x108
    NOK_MDL Mdl;                                                        //0x110
    union
    {
        ULONGLONG Page[16];                                                 //0x140
        NOK_MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;                  //0x140
    };
}NOK_MMINPAGE_SUPPORT, * NOK_PMMINPAGE_SUPPORT;
//0x1 bytes (sizeof)
typedef struct _NOK_MMPFNENTRY3
{
    UCHAR Priority:3;                                                       //0x0
    UCHAR OnProtectedStandby:1;                                             //0x0
    UCHAR InPageError:1;                                                    //0x0
    UCHAR SystemChargedPage:1;                                              //0x0
    UCHAR RemovalRequested:1;                                               //0x0
    UCHAR ParityError:1;                                                    //0x0
}NOK_MMPFNENTRY3, * NOK_PMMPFNENTRY3;
//0x70 bytes (sizeof)
typedef struct _NOK_MMCLONE_DESCRIPTOR
{
    union
    {
        NOK_RTL_BALANCED_NODE CloneNode;                                //0x0
        NOK_PMMCLONE_DESCRIPTOR Next;                                   //0x0
    };
    NOK_PMMCLONE_BLOCK StartingCloneBlock;                              //0x18
    NOK_PMMCLONE_BLOCK EndingCloneBlock;                                //0x20
    ULONGLONG NumberOfPtes;                                                 //0x28
    volatile ULONGLONG NumberOfReferences;                                  //0x30
    NOK_PMMCLONE_HEADER CloneHeader;                                    //0x38
    ULONGLONG NonPagedPoolQuotaCharge;                                      //0x40
    NOK_SLIST_ENTRY DeleteList;                                         //0x50
    ULONGLONG NestingLevel;                                                 //0x60
}NOK_MMCLONE_DESCRIPTOR, * NOK_PMMCLONE_DESCRIPTOR;
//0x30 bytes (sizeof)
typedef struct _NOK_MMPFN
{
    union
    {
        NOK_LIST_ENTRY ListEntry;                                       //0x0
        NOK_RTL_BALANCED_NODE TreeNode;                                 //0x0
        struct
        {
            union
            {
                NOK_SINGLE_LIST_ENTRY NextSlistPfn;                     //0x0
                VOID* Next;                                                 //0x0
                ULONGLONG Flink:36;                                         //0x0
                ULONGLONG NodeFlinkHigh:28;                                 //0x0
                NOK_MI_ACTIVE_PFN Active;                               //0x0
            } u1;                                                           //0x0
            union
            {
                NOK_PMMPTE PteAddress;                                  //0x8
                ULONGLONG PteLong;                                          //0x8
            };
            NOK_MMPTE OriginalPte;                                      //0x10
        };
    };
    NOK_MIPFNBLINK u2;                                                  //0x18
    union
    {
        struct
        {
            USHORT ReferenceCount;                                          //0x20
            NOK_MMPFNENTRY1 e1;                                         //0x22
        };
        struct
        {
            NOK_MMPFNENTRY3 e3;                                         //0x23
        struct
        {
            USHORT ReferenceCount;                                          //0x20
        } e2;                                                               //0x20
        };
        struct
        {
            ULONG EntireField;                                              //0x20
        } e4;                                                               //0x20
    } u3;                                                                   //0x20
    USHORT NodeBlinkLow;                                                    //0x24
    UCHAR Unused:4;                                                         //0x26
    UCHAR Unused2:4;                                                        //0x26
    union
    {
        UCHAR ViewCount;                                                    //0x27
        UCHAR NodeFlinkLow;                                                 //0x27
        struct
        {
            UCHAR ModifiedListBucketIndex:4;                                //0x27
            UCHAR AnchorLargePageSize:2;                                    //0x27
        };
    };
    union
    {
        ULONGLONG PteFrame:36;                                              //0x28
        ULONGLONG ResidentPage:1;                                           //0x28
        ULONGLONG Unused1:1;                                                //0x28
        ULONGLONG Unused2:1;                                                //0x28
        ULONGLONG Partition:10;                                             //0x28
        ULONGLONG FileOnly:1;                                               //0x28
        ULONGLONG PfnExists:1;                                              //0x28
        ULONGLONG Spare:9;                                                  //0x28
        ULONGLONG PageIdentity:3;                                           //0x28
        ULONGLONG PrototypePte:1;                                           //0x28
        ULONGLONG EntireField;                                              //0x28
    } u4;                                                                   //0x28
}NOK_MMPFN, * NOK_PMMPFN;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_SYSTEM_VA_TYPE
{
    NOK_MiVaUnused = 0,
    NOK_MiVaSessionSpace = 1,
    NOK_MiVaProcessSpace = 2,
    NOK_MiVaBootLoaded = 3,
    NOK_MiVaPfnDatabase = 4,
    NOK_MiVaNonPagedPool = 5,
    NOK_MiVaPagedPool = 6,
    NOK_MiVaSpecialPoolPaged = 7,
    NOK_MiVaSystemCache = 8,
    NOK_MiVaSystemPtes = 9,
    NOK_MiVaHal = 10,
    NOK_MiVaSessionGlobalSpace = 11,
    NOK_MiVaDriverImages = 12,
    NOK_MiVaSystemPtesLarge = 13,
    NOK_MiVaKernelStacks = 14,
    NOK_MiVaSecureNonPagedPool = 15,
    NOK_MiVaMaximumType = 16
}NOK_MI_SYSTEM_VA_TYPE, * NOK_PMI_SYSTEM_VA_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_SLAB_ALLOCATOR_PROTECTION
{
    NOK_MiSlabAllocatorProtectionReadExecute = 0,
    NOK_MiSlabAllocatorProtectionReadOnly = 1,
    NOK_MiSlabAllocatorProtectionNoAccess = 2,
    NOK_MiSlabAllocatorProtectionReadWrite = 3,
    NOK_MiSlabAllocatorProtectionMax = 4
}NOK_MI_SLAB_ALLOCATOR_PROTECTION, * NOK_PMI_SLAB_ALLOCATOR_PROTECTION;
//0x28 bytes (sizeof)
typedef struct _NOK_MMPFNLIST
{
    ULONGLONG Total;                                                        //0x0
    NOK_MMLISTS ListName;                                                 //0x8
    ULONGLONG Flink;                                                        //0x10
    ULONGLONG Blink;                                                        //0x18
    ULONGLONG Lock;                                                         //0x20
}NOK_MMPFNLIST, * NOK_PMMPFNLIST;
//0x1200 bytes (sizeof)
typedef struct _NOK_MI_VISIBLE_PARTITION
{
    ULONGLONG LowestPhysicalPage;                                           //0x0
    ULONGLONG HighestPhysicalPage;                                          //0x8
    ULONGLONG NumberOfPhysicalPages;                                        //0x10
    volatile ULONG NumberOfPagingFiles;                                     //0x18
    UCHAR SystemCacheInitialized;                                           //0x1c
    NOK_PMMPAGING_FILE PagingFile[16];                                  //0x20
    volatile ULONGLONG AvailablePages;                                      //0xc0
    volatile ULONGLONG ResidentAvailablePages;                              //0x100
    NOK_MMSUPPORT_INSTANCE PartitionWs[1];                              //0x140
    NOK_MMWSL_INSTANCE PartitionWorkingSetLists[1];                     //0x200
    volatile ULONGLONG TotalCommittedPages;                                 //0x228
    NOK_MMPFNLIST ModifiedPageListHead;                                 //0x240
    NOK_MMPFNLIST ModifiedNoWritePageListHead;                          //0x280
    ULONGLONG TotalCommitLimit;                                             //0x2a8
    ULONGLONG TotalPagesForPagingFile;                                      //0x2b0
    ULONGLONG VadPhysicalPages;                                             //0x2b8
    ULONGLONG ProcessLockedFilePages;                                       //0x2c0
    volatile ULONGLONG SharedCommit;                                        //0x2c8
    ULONGLONG SlabAllocatorPages;                                           //0x2d0
    ULONG ChargeCommitmentFailures[4];                                      //0x2d8
    volatile LONG PageFileTraceIndex;                                       //0x2e8
    NOK_MI_PAGEFILE_TRACES PageFileTraces[32];                          //0x2f0
}NOK_MI_VISIBLE_PARTITION, * NOK_PMI_VISIBLE_PARTITION;
//0x4 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_FLAGS
{
    ULONG BeingDeleted:1;                                                   //0x0
    ULONG PageListsInitialized:1;                                           //0x0
    ULONG StoreReservedPagesCharged:1;                                      //0x0
    ULONG UseProtectedSlabAllocators:1;                                     //0x0
    ULONG UseUnprotectedSlabAllocators:1;                                   //0x0
    ULONG PureHoldingPartition:1;                                           //0x0
    ULONG ZeroPagesOptional:1;                                              //0x0
    ULONG BackgroundZeroingDisabled:1;                                      //0x0
}NOK_MI_PARTITION_FLAGS, * NOK_PMI_PARTITION_FLAGS;
//0x1b8 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_CORE
{
    USHORT PartitionId;                                                     //0x0
    union
    {
        ULONG LongFlags;                                                    //0x4
        NOK_MI_PARTITION_FLAGS Flags;                                   //0x4
    } u;                                                                    //0x4
    ULONG Signature;                                                        //0x8
    UCHAR MemoryConfigurationChanged;                                       //0xc
    NOK_PMI_NODE_INFORMATION NodeInformation;                           //0x10
    NOK_RTL_AVL_TREE PageRoot;                                          //0x18
    NOK_PPHYSICAL_MEMORY_DESCRIPTOR MemoryNodeRuns;                     //0x20
    ULONGLONG MemoryBlockReferences;                                        //0x28
    NOK_WORK_QUEUE_ITEM PfnUnmapWorkItem;                               //0x30
    ULONGLONG PfnUnmapCount;                                                //0x50
    VOID* PfnUnmapWaitList;                                                 //0x58
    NOK_PPHYSICAL_MEMORY_DESCRIPTOR MemoryRuns;                         //0x60
    NOK_KEVENT ExitEvent;                                               //0x68
    VOID* SystemThreadHandles[6];                                           //0x80
    NOK_PEPARTITION PartitionObject;                                    //0xb0
    NOK_EX_PUSH_LOCK PartitionSystemThreadsLock;                        //0xb8
    NOK_EX_PUSH_LOCK DynamicMemoryPushLock;                             //0xc0
    volatile LONG DynamicMemoryLock;                                        //0xc8
    UCHAR PfnUnmapActive;                                                   //0xcc
    NOK_KEVENT TemporaryMemoryEvent;                                    //0xd0
    VOID* RootDirectory;                                                    //0xe8
    VOID* KernelObjectsDirectory;                                           //0xf0
    NOK_PKEVENT MemoryEvents[11];                                       //0xf8
    VOID* MemoryEventHandles[11];                                           //0x150
    ULONGLONG TotalHugeIoRanges;                                            //0x1a8
    ULONGLONG NonChargedSecurePages;                                        //0x1b0
}NOK_MI_PARTITION_CORE, * NOK_PMI_PARTITION_CORE;
//0x2c0 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_MODWRITES
{
    NOK_MMPAGE_FILE_EXPANSION AttemptForCantExtend;                     //0x0
    NOK_MMPAGE_FILE_EXPANSION PageFileContract;                         //0x58
    ULONGLONG NumberOfMappedMdls;                                           //0xb0
    volatile LONG NumberOfMappedMdlsInUse;                                  //0xb8
    ULONG NumberOfMappedMdlsInUsePeak;                                      //0xbc
    NOK_MMMOD_WRITER_LISTHEAD MappedFileHeader;                         //0xc0
    UCHAR NeedMappedMdl;                                                    //0xe8
    UCHAR NeedPageFileMdl;                                                  //0xe9
    UCHAR ModwriterActive;                                                  //0xea
    UCHAR TransitionInserted;                                               //0xeb
    LONG LastModifiedWriteError;                                            //0xec
    LONG LastMappedWriteError;                                              //0xf0
    volatile ULONG MappedFileWriteSucceeded;                                //0xf4
    ULONG MappedWriteBurstCount;                                            //0xf8
    ULONG LowPriorityModWritesOutstanding;                                  //0xfc
    NOK_KEVENT BoostModWriteIoPriorityEvent;                            //0x100
    LONG ModifiedWriterThreadPriority;                                      //0x118
    ULONGLONG ModifiedPagesLowPriorityGoal;                                 //0x120
    NOK_KEVENT ModifiedPageWriterEvent;                                 //0x128
    NOK_KEVENT ModifiedWriterExitedEvent;                               //0x140
    volatile LONG WriteAllPagefilePages;                                    //0x158
    volatile LONG WriteAllMappedPages;                                      //0x15c
    NOK_KEVENT MappedPageWriterEvent;                                   //0x160
    NOK_MI_MODWRITE_DATA ModWriteData;                                  //0x178
    NOK_KEVENT RescanPageFilesEvent;                                    //0x1b8
    NOK_MMMOD_WRITER_LISTHEAD PagingFileHeader;                         //0x1d0
    NOK_PETHREAD ModifiedPageWriterThread;                              //0x1f8
    NOK_EX_RUNDOWN_REF ModifiedPageWriterRundown;                       //0x200
    NOK_WORK_QUEUE_ITEM PagefileScanWorkItem;                           //0x208
    ULONG PagefileScanCount;                                                //0x228
    volatile LONG ClusterRestrictionLock;                                   //0x22c
    NOK_MI_RESTRICTED_MODWRITES ClusterRestrictions[2];                 //0x230
    NOK_KEVENT NotifyStoreMemoryConditions;                             //0x238
    volatile UCHAR DelayMappedWrite;                                        //0x250
    volatile ULONG PagefileReservationsEnabled;                             //0x254
    NOK_EX_PUSH_LOCK PageFileCreationLock;                              //0x258
    NOK_WORK_QUEUE_ITEM TrimPagefileWorkItem;                           //0x260
    ULONGLONG LastTrimPagefileTime;                                         //0x280
    NOK_WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;                 //0x288
    volatile LONG WsSwapPageFileContractionInProgress;                      //0x2a8
    NOK_EX_PUSH_LOCK WorkingSetSwapLock;                                //0x2b0
    volatile LONG WorkingSetInswapLock;                                     //0x2b8
}NOK_MI_PARTITION_MODWRITES, * NOK_PMI_PARTITION_MODWRITES;
//0x90 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_STORES
{
    union
    {
        LONG FlushCompleting:1;                                             //0x0
        LONG FlushInProgress:31;                                            //0x0
        volatile LONG Long;                                                 //0x0
    } WriteAllStoreHintedPages;                                             //0x0
    ULONG VirtualPageFileNumber;                                            //0x4
    ULONG Registered;                                                       //0x8
    ULONG ReadClusterSizeMax;                                               //0xc
    ULONG EvictFlushRequestCount;                                           //0x10
    ULONG ModifiedWriteDisableCount;                                        //0x14
    ULONG WriteIssueFailures;                                               //0x18
    ULONG WritesOutstanding;                                                //0x1c
    volatile LONG EvictFlushLock;                                           //0x20
    NOK_PETHREAD EvictionThread;                                        //0x28
    NOK_KEVENT EvictEvent;                                              //0x30
    NOK_SLIST_HEADER WriteSupportSListHead;                              //0x50
    NOK_KEVENT EvictFlushCompleteEvent;                                 //0x60
    NOK_PRTL_BITMAP ModifiedWriteFailedBitmap;                          //0x78
    NOK_PEPROCESS StoreProcess;                                         //0x80
    ULONG DeleteStoredPages;                                                //0x88
}NOK_MI_PARTITION_STORES, * NOK_PMI_PARTITION_STORES;
//0x18 bytes (sizeof)
typedef struct _NOK_MI_PTE_CHAIN_HEAD
{
    NOK_MMPTE Flink;                                                    //0x0
    NOK_MMPTE Blink;                                                    //0x8
    NOK_PMMPTE PteBase;                                                 //0x10
}NOK_MI_PTE_CHAIN_HEAD, * NOK_PMI_PTE_CHAIN_HEAD;
//0x340 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_SEGMENTS
{
    volatile LONG SegmentListLock;                                          //0x0
    ULONG DeleteOnCloseCount;                                               //0x4
    volatile LONGLONG FsControlAreaCount;                                   //0x8
    volatile LONGLONG PfControlAreaCount;                                   //0x10
    volatile LONGLONG CloneHeaderCount;                                     //0x18
    NOK_KEVENT DeleteSubsectionCleanup;                                 //0x20
    NOK_KEVENT UnusedSegmentCleanup;                                    //0x38
    ULONGLONG SubsectionDeletePtes;                                         //0x50
    NOK_MMPAGE_FILE_EXPANSION AttemptForCantExtend;                     //0x58
    NOK_MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;          //0xb0
    NOK_LIST_ENTRY DeleteOnCloseList;                                   //0x100
    NOK_KTIMER DeleteOnCloseTimer;                                      //0x110
    UCHAR DeleteOnCloseTimerActive;                                         //0x150
    UCHAR SegmentDereferenceThreadExists;                                   //0x151
    VOID* SegmentDereferenceActiveControlArea;                              //0x158
    ULONGLONG UnusedSegmentPagedPool;                                       //0x160
    NOK_LIST_ENTRY UnusedSegmentList;                                   //0x168
    NOK_LIST_ENTRY UnusedSubsectionList;                                //0x178
    NOK_LIST_ENTRY DeleteSubsectionList;                                //0x188
    NOK_KEVENT ControlAreaDeleteEvent;                                  //0x198
    NOK_SINGLE_LIST_ENTRY ControlAreaDeleteList;                        //0x1b0
    NOK_MI_PTE_CHAIN_HEAD FreeSystemCache;                              //0x1b8
    NOK_KEVENT CloneDereferenceEvent;                                   //0x1d0
    NOK_SLIST_HEADER CloneProtosSListHead;                               //0x1f0
    NOK_EX_PUSH_LOCK SystemCacheInitLock;                               //0x200
    ULONG PagefileExtensionWaiters;                                         //0x208
    ULONG PagefileExtensionRequests;                                        //0x20c
    NOK_KEVENT PagefileExtensionWaitEvent;                              //0x210
    NOK_MI_CROSS_PARTITION_CHARGES SharedCharges[7];                    //0x228
    NOK_PKEVENT SharedChargesDrainEvent;                                //0x308
    NOK_PKEVENT ControlAreasDrainEvent;                                 //0x310
    NOK_PKEVENT CloneHeaderDrainEvent;                                  //0x318
    NOK_EX_RUNDOWN_REF_CACHE_AWARE* ProbeRundownReference;              //0x320
}NOK_MI_PARTITION_SEGMENTS, * NOK_PMI_PARTITION_SEGMENTS;
//0x78 bytes (sizeof)
typedef struct _NOK_MI_SLAB_ALLOCATOR_CONTEXT
{
    NOK_RTL_RB_TREE AllocationsTree;                                    //0x0
    volatile LONG Lock;                                                     //0x10
    NOK_PMI_SLAB_ALLOCATOR_ENTRY SlabEntryHint;                         //0x18
    ULONGLONG FreePageCount;                                                //0x20
    ULONGLONG SlabEntryCount;                                               //0x28
    NOK_MI_SLAB_ALLOCATOR_TYPE Type;                                      //0x30
    NOK_MI_SLAB_ALLOCATOR_PROTECTION Protection;                          //0x34
    union
    {
        ULONG EntryBecameEmpty:1;                                           //0x38
        ULONG Spare:31;                                                     //0x38
        ULONG AllFlags;                                                     //0x38
    } Flags;                                                                //0x38
    NOK_MMPFNLIST StandbyList;                                          //0x40
    ULONGLONG LastReplenishTime;                                            //0x68
    ULONGLONG LastFailureTime;                                              //0x70
}NOK_MI_SLAB_ALLOCATOR_CONTEXT, * NOK_PMI_SLAB_ALLOCATOR_CONTEXT;
//0xfc0 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_PAGE_LISTS
{
    NOK_MMPFNLIST* FreePagesByColor[2];                                 //0x0
    NOK_MMPFNLIST ZeroedPageListHead;                                   //0x40
    NOK_MMPFNLIST FreePageListHead;                                     //0x80
    NOK_MMPFNLIST StandbyPageListHead;                                  //0xc0
    NOK_MMPFNLIST StandbyPageListByPriority[8];                         //0x100
    NOK_MMPFNLIST ModifiedPageListNoReservation;                        //0x240
    NOK_MMPFNLIST ModifiedPageListByReservation[16];                    //0x280
    NOK_MMPFNLIST MappedPageListHead[16];                               //0x500
    NOK_MMPFNLIST BadPageListHead;                                      //0x780
    NOK_MMPFNLIST EnclavePageListHead;                                  //0x7c0
    NOK_PSLIST_HEADER FreePageSlist[2];                                  //0x7e8
    NOK_MMPFNLIST* PageLocationList[8];                                 //0x7f8
    volatile ULONG StandbyRepurposedByPriority[8];                          //0x838
    volatile ULONGLONG TransitionSharedPages;                               //0x880
    ULONGLONG TransitionSharedPagesPeak[6];                                 //0x888
    NOK_KEVENT MappedPageListHeadEvent[16];                             //0x8b8
    NOK_MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];                  //0xa38
    ULONG DecayHand;                                                        //0xa58
    UCHAR StandbyListDiscard;                                               //0xa5c
    UCHAR FreeListDiscard;                                                  //0xa5d
    UCHAR PfnBitMapsReady;                                                  //0xa5e
    ULONGLONG LastDecayHandUpdateTime;                                      //0xa60
    NOK_MI_LDW_WORK_CONTEXT LastChanceLdwContext;                       //0xa68
    NOK_RTL_AVL_TREE HugePfnBadPages;                                   //0xaa0
    ULONGLONG AvailableEventsLock;                                          //0xac0
    NOK_MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];       //0xac8
    VOID* MirrorListLocks;                                                  //0xb28
    volatile ULONGLONG TransitionPrivatePages;                              //0xb40
    NOK_RTL_BITMAP_EX LargePfnBitMap[2];                                //0xb48
    NOK_PMI_FREE_LARGE_PAGE_LIST LargePageListHeads;                    //0xb68
    UCHAR* MediumPagesOnFreeZeroList;                                       //0xb70
    NOK_RTL_BITMAP_EX LargePageRebuildCandidates;                       //0xb78
    WCHAR* LargePagesOnFreeZeroList;                                        //0xb88
    volatile LONG HugePageRebuildCandidatesExist;                           //0xb90
    NOK_KEVENT LargePageCandidatesExistEvent;                           //0xb98
    ULONGLONG LowMemoryThreshold;                                           //0xbb0
    ULONGLONG HighMemoryThreshold;                                          //0xbb8
    NOK_MI_SLAB_ALLOCATOR_CONTEXT SlabContexts[2][4];                   //0xbc0
    NOK_RTL_BITMAP_EX SlabPfnBitMap;                                    //0xf80
    VOID* HugePfnLists;                                                     //0xf90
    ULONGLONG AvailableHugeIoRanges;                                        //0xf98
}NOK_MI_PARTITION_PAGE_LISTS, * NOK_PMI_PARTITION_PAGE_LISTS;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_COMMIT
{
    ULONGLONG PeakCommitment;                                               //0x0
    ULONGLONG TotalCommitLimitMaximum;                                      //0x8
    volatile LONG Popups[2];                                                //0x10
    ULONGLONG LowCommitThreshold;                                           //0x18
    ULONGLONG HighCommitThreshold;                                          //0x20
    ULONGLONG EventLock;                                                    //0x28
    ULONGLONG SystemCommitReserve;                                          //0x30
    ULONGLONG OverCommit;                                                   //0x38
}NOK_MI_PARTITION_COMMIT, * NOK_PMI_PARTITION_COMMIT;
//0xb0 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_ZEROING
{
    NOK_KEVENT PageEvent;                                               //0x0
    UCHAR ThreadPriorityStatic;                                             //0x18
    UCHAR AdaptiveZeroingEnabled;                                           //0x19
    LONG ZeroFreePageSlistMinimum;                                          //0x1c
    NOK_WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;                      //0x20
    volatile LONG NodeCount;                                                //0x40
    volatile LONG BackgroundZeroingDisabled;                                //0x44
    NOK_KGATE LargeBootZeroingComplete;                                 //0x48
    NOK_MI_WRITE_CALIBRATION WriteCalibration;                          //0x60
    UCHAR IpiCalibrationFailed;                                             //0x80
    volatile LONG ActiveProcessorsForIpiCalibration;                        //0x84
    volatile LONG NodesReadyForIpiCalibration;                              //0x88
    NOK_KEVENT ReleaseNodeZeroingThreads;                               //0x90
    NOK_PMI_ZERO_THREAD_CONTEXT ThreadContext;                          //0xa8
}NOK_MI_PARTITION_ZEROING, * NOK_PMI_PARTITION_ZEROING;
//0x2d00 bytes (sizeof)
typedef struct _NOK_MI_PARTITION
{
    NOK_MI_PARTITION_CORE Core;                                         //0x0
    NOK_MI_PARTITION_MODWRITES Modwriter;                               //0x1b8
    NOK_MI_PARTITION_STORES Store;                                      //0x480
    NOK_MI_PARTITION_SEGMENTS Segments;                                 //0x540
    NOK_MI_PARTITION_PAGE_LISTS PageLists;                              //0x880
    NOK_MI_PARTITION_COMMIT Commit;                                     //0x1840
    NOK_MI_PARTITION_ZEROING Zeroing;                                   //0x1880
    NOK_MI_PAGE_COMBINING_SUPPORT PageCombine;                          //0x1930
    VOID* WorkingSetControl;                                                //0x1ac0
    NOK_MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;           //0x1ac8
    ULONG SessionDetachTimeStamp;                                           //0x1ad8
    NOK_MI_VISIBLE_PARTITION Vp;                                        //0x1b00
}NOK_MI_PARTITION, * NOK_PMI_PARTITION;
//0x88 bytes (sizeof)
typedef struct _NOK_MI_PAGELIST_STATE
{
    volatile LONG ActiveSpinLock;                                           //0x0
    NOK_RTL_AVL_TREE ActiveThreadTree;                                  //0x8
    volatile LONG ActiveZeroSpinLock;                                       //0x10
    NOK_RTL_AVL_TREE ActiveZeroThreadTree;                              //0x18
    NOK_MMPFN LargePfnTemplate;                                         //0x20
    NOK_MMPFN LargePfnBasePageTemplate;                                 //0x50
    ULONG NumberOfLargePageListHeads;                                       //0x80
}NOK_MI_PAGELIST_STATE, * NOK_PMI_PAGELIST_STATE;
//0xa8 bytes (sizeof)
typedef struct _NOK_MI_COMMON_PAGE_STATE
{
    NOK_PMMPFN PageOfOnesPfn;                                           //0x0
    ULONGLONG PageOfOnes;                                                   //0x8
    NOK_PMMPFN DummyPagePfn;                                            //0x10
    ULONGLONG DummyPage;                                                    //0x18
    ULONGLONG PageOfZeroes;                                                 //0x20
    VOID* ZeroMapping;                                                      //0x28
    VOID* OnesMapping;                                                      //0x30
    ULONGLONG ZeroCrc;                                                      //0x38
    ULONGLONG OnesCrc;                                                      //0x40
    ULONGLONG BitmapGapFrames[4];                                           //0x48
    ULONGLONG PfnGapFrames[4];                                              //0x68
    ULONGLONG PageTableOfZeroes;                                            //0x88
    NOK_MMPTE PdeOfZeroes;                                              //0x90
    ULONGLONG PageTableOfOnes;                                              //0x98
    NOK_MMPTE PdeOfOnes;                                                //0xa0
}NOK_MI_COMMON_PAGE_STATE, * NOK_PMI_COMMON_PAGE_STATE;
//0x20 bytes (sizeof)
typedef struct _NOK_MMCLONE_BLOCK
{
    NOK_MMPTE ProtoPte;                                                 //0x0
    ULONGLONG CrossPartitionReferences;                                     //0x8
    union
    {
        volatile ULONGLONG CloneCommitCount;                                //0x10
        NOK_MI_CLONE_BLOCK_FLAGS u1;                                    //0x10
    };
    volatile ULONGLONG CloneRefCount;                                       //0x18
}NOK_MMCLONE_BLOCK, * NOK_PMMCLONE_BLOCK;
//0x4 bytes (sizeof)
typedef struct _NOK_MMSECTION_FLAGS2
{
    USHORT PartitionId:10;                                                  //0x0
    UCHAR NoCrossPartitionAccess:1;                                         //0x2
    UCHAR SubsectionCrossPartitionReferenceOverflow:1;                      //0x2
}NOK_MMSECTION_FLAGS2, * NOK_PMMSECTION_FLAGS2;
//0x80 bytes (sizeof)
typedef struct _NOK_CONTROL_AREA
{
    NOK_PSEGMENT Segment;                                               //0x0
    union
    {
        NOK_LIST_ENTRY ListHead;                                        //0x8
        VOID* AweContext;                                                   //0x8
    };
    ULONGLONG NumberOfSectionReferences;                                    //0x18
    ULONGLONG NumberOfPfnReferences;                                        //0x20
    ULONGLONG NumberOfMappedViews;                                          //0x28
    ULONGLONG NumberOfUserReferences;                                       //0x30
    union
    {
        ULONG LongFlags;                                                    //0x38
        NOK_MMSECTION_FLAGS Flags;                                      //0x38
    } u;                                                                    //0x38
    union
    {
        ULONG LongFlags;                                                    //0x3c
        NOK_MMSECTION_FLAGS2 Flags;                                     //0x3c
    } u1;                                                                   //0x3c
    NOK_EX_FAST_REF FilePointer;                                        //0x40
    volatile LONG ControlAreaLock;                                          //0x48
    ULONG ModifiedWriteCount;                                               //0x4c
    NOK_PMI_CONTROL_AREA_WAIT_BLOCK WaitList;                           //0x50
    union
    {
        struct
        {
            union
            {
                ULONG NumberOfSystemCacheViews;                             //0x58
                ULONG ImageRelocationStartBit;                              //0x58
            };
            union
            {
                volatile LONG WritableUserReferences;                       //0x5c
                struct
                {
                    ULONG ImageRelocationSizeIn64k:16;                      //0x5c
                    ULONG SystemImage:1;                                    //0x5c
                    ULONG CantMove:1;                                       //0x5c
                    ULONG StrongCode:2;                                     //0x5c
                    ULONG BitMap:2;                                         //0x5c
                    ULONG ImageActive:1;                                    //0x5c
                    ULONG ImageBaseOkToReuse:1;                             //0x5c
                };
            };
            union
            {
                ULONG FlushInProgressCount;                                 //0x60
                ULONG NumberOfSubsections;                                  //0x60
                NOK_PMI_IMAGE_SECURITY_REFERENCE SeImageStub;           //0x60
            };
        } e2;                                                               //0x58
    } u2;                                                                   //0x58
    NOK_EX_PUSH_LOCK FileObjectLock;                                    //0x68
    volatile ULONGLONG LockedPages;                                         //0x70
    union
    {
        ULONGLONG IoAttributionContext:61;                                  //0x78
        ULONGLONG Spare:3;                                                  //0x78
        ULONGLONG ImageCrossPartitionCharge;                                //0x78
        ULONGLONG CommittedPageCount:36;                                    //0x78
    } u3;                                                                   //0x78
}NOK_CONTROL_AREA, * NOK_PCONTROL_AREA;
//0x10 bytes (sizeof)
typedef struct _NOK_MMADDRESS_LIST
{
    union
    {
        NOK_MMSECURE_FLAGS Flags;                                       //0x0
        ULONG FlagsLong;                                                    //0x0
        VOID* StartVa;                                                      //0x0
    } u1;                                                                   //0x0
    VOID* EndVa;                                                            //0x8
}NOK_MMADDRESS_LIST, * NOK_PMMADDRESS_LIST;
//0x140 bytes (sizeof)
typedef struct _NOK_MMSUPPORT_FULL
{
    NOK_MMSUPPORT_INSTANCE Instance;                                    //0x0
    NOK_MMSUPPORT_SHARED Shared;                                        //0xc0
}NOK_MMSUPPORT_FULL, * NOK_PMMSUPPORT_FULL;
//0x38 bytes (sizeof)
typedef struct _NOK_SUBSECTION
{
    NOK_PCONTROL_AREA ControlArea;                                      //0x0
    NOK_PMMPTE SubsectionBase;                                          //0x8
    NOK_PSUBSECTION NextSubsection;                                     //0x10
    union
    {
        NOK_RTL_AVL_TREE GlobalPerSessionHead;                          //0x18
        NOK_PMI_CONTROL_AREA_WAIT_BLOCK CreationWaitList;               //0x18
        NOK_PMI_PER_SESSION_PROTOS SessionDriverProtos;                 //0x18
    };
    union
    {
        ULONG LongFlags;                                                    //0x20
        NOK_MMSUBSECTION_FLAGS SubsectionFlags;                         //0x20
    } u;                                                                    //0x20
    ULONG StartingSector;                                                   //0x24
    ULONG NumberOfFullSectors;                                              //0x28
    ULONG PtesInSubsection;                                                 //0x2c
    union
    {
        NOK_MI_SUBSECTION_ENTRY1 e1;                                    //0x30
        ULONG EntireField;                                                  //0x30
    } u1;                                                                   //0x30
    ULONG UnusedPtes:30;                                                    //0x34
    ULONG ExtentQueryNeeded:1;                                              //0x34
    ULONG DirtyPages:1;                                                     //0x34
}NOK_SUBSECTION, * NOK_PSUBSECTION;
//0x4c0 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_VA_STATE
{
    ULONGLONG SystemTablesLock;                                             //0x0
    ULONGLONG AvailableSystemCacheVa;                                       //0x8
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks;                    //0x10
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes;                      //0x58
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapDriverImages[2];                 //0xa0
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapPagedPool;                       //0x130
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapSystemCache;                     //0x178
    NOK_MI_DYNAMIC_BITMAP DynamicBitMapSecureNonPagedPool;              //0x1c0
    VOID* HalPrivateVaStart;                                                //0x208
    ULONGLONG HalPrivateVaSize;                                             //0x210
    ULONG SystemVaAssignment[8];                                            //0x218
    ULONG SystemVaAssignmentHint;                                           //0x238
    ULONG TopLevelPteLockBits[32];                                          //0x23c
    volatile LONG DeleteKvaLock;                                            //0x2bc
    NOK_PMI_WSLE WsleArrays[8];                                         //0x2c0
    VOID* PagableHyperSpace;                                                //0x300
    VOID* HyperSpaceEnd;                                                    //0x308
    ULONGLONG PagableHyperSpaceBytes;                                       //0x310
    ULONGLONG PageTableCommitmentOffset[2];                                 //0x318
    NOK_KEVENT FreeSystemCacheVa;                                       //0x328
    ULONGLONG SystemVaLock;                                                 //0x340
    ULONGLONG SystemCacheViewLock;                                          //0x348
    NOK_MMWSL_INSTANCE SystemWorkingSetList[8];                         //0x350
    ULONGLONG SelfmapLock[4];                                               //0x490
}NOK_MI_SYSTEM_VA_STATE, * NOK_PMI_SYSTEM_VA_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES
{
    NOK_RTL_AVL_TREE Tree;                                              //0x0
    NOK_EX_PUSH_LOCK Lock;                                              //0x8
}NOK_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES, * NOK_PPS_DYNAMIC_ENFORCED_ADDRESS_RANGES;
//0x18 bytes (sizeof)
typedef struct _NOK_MM_PAGED_POOL_INFO
{
    NOK_EX_PUSH_LOCK Lock;                                              //0x0
    ULONGLONG MaximumSize;                                                  //0x8
    ULONGLONG AllocatedPagedPool;                                           //0x10
}NOK_MM_PAGED_POOL_INFO, * NOK_PMM_PAGED_POOL_INFO;
//0x40 bytes (sizeof)
typedef struct _NOK_MI_ULTRA_VA_CONTEXT
{
    ULONGLONG Lock;                                                         //0x0
    VOID* ZeroMapping;                                                      //0x8
    ULONGLONG AllocationHintBit;                                            //0x10
    NOK_RTL_BITMAP_EX Bitmap[2];                                        //0x18
    volatile LONG ConcurrencyMaximum;                                       //0x38
    volatile LONG ConcurrencyCount;                                         //0x3c
}NOK_MI_ULTRA_VA_CONTEXT, * NOK_PMI_ULTRA_VA_CONTEXT;
//0x4 bytes (sizeof)
typedef struct _NOK_MM_PRIVATE_VAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemoryAlwaysSet:1;                                         //0x0
    ULONG WriteWatch:1;                                                     //0x0
    ULONG FixedLargePageSize:1;                                             //0x0
    ULONG ZeroFillPagesOptional:1;                                          //0x0
    ULONG Graphics:1;                                                       //0x0
    ULONG Enclave:1;                                                        //0x0
    ULONG ShadowStack:1;                                                    //0x0
    ULONG PhysicalMemoryPfnsReferenced:1;                                   //0x0
}NOK_MM_PRIVATE_VAD_FLAGS, * NOK_PMM_PRIVATE_VAD_FLAGS;
//0x4 bytes (sizeof)
typedef struct _NOK_MM_SHARED_VAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemoryAlwaysClear:1;                                       //0x0
    ULONG PrivateFixup:1;                                                   //0x0
    ULONG HotPatchAllowed:1;                                                //0x0
}NOK_MM_SHARED_VAD_FLAGS, * NOK_PMM_SHARED_VAD_FLAGS;
//0x4 bytes (sizeof)
typedef struct _NOK_MMVAD_FLAGS1
{
    ULONG CommitCharge:31;                                                  //0x0
    ULONG MemCommit:1;                                                      //0x0
}NOK_MMVAD_FLAGS1, * NOK_PMMVAD_FLAGS1;
//0x40 bytes (sizeof)
typedef struct _NOK_MMVAD_SHORT
{
    union
    {
        struct
        {
            NOK_MMVAD_SHORT* NextVad;                                   //0x0
            VOID* ExtraCreateInfo;                                          //0x8
        };
        NOK_RTL_BALANCED_NODE VadNode;                                  //0x0
    };
    ULONG StartingVpn;                                                      //0x18
    ULONG EndingVpn;                                                        //0x1c
    UCHAR StartingVpnHigh;                                                  //0x20
    UCHAR EndingVpnHigh;                                                    //0x21
    UCHAR CommitChargeHigh;                                                 //0x22
    UCHAR SpareNT64VadUChar;                                                //0x23
    LONG ReferenceCount;                                                    //0x24
    NOK_EX_PUSH_LOCK PushLock;                                          //0x28
    union
    {
        ULONG LongFlags;                                                    //0x30
        NOK_MMVAD_FLAGS VadFlags;                                       //0x30
        NOK_MM_PRIVATE_VAD_FLAGS PrivateVadFlags;                       //0x30
        NOK_MM_GRAPHICS_VAD_FLAGS GraphicsVadFlags;                     //0x30
        NOK_MM_SHARED_VAD_FLAGS SharedVadFlags;                         //0x30
        volatile ULONG VolatileVadLong;                                     //0x30
    } u;                                                                    //0x30
    union
    {
        ULONG LongFlags1;                                                   //0x34
        NOK_MMVAD_FLAGS1 VadFlags1;                                     //0x34
    } u1;                                                                   //0x34
    NOK_PMI_VAD_EVENT_BLOCK EventList;                                  //0x38
}NOK_MMVAD_SHORT, * NOK_PMMVAD_SHORT;
//0x4 bytes (sizeof)
typedef enum _NOK_LDR_DLL_LOAD_REASON
{
    NOK_LoadReasonStaticDependency = 0,
    NOK_LoadReasonStaticForwarderDependency = 1,
    NOK_LoadReasonDynamicForwarderDependency = 2,
    NOK_LoadReasonDelayloadDependency = 3,
    NOK_LoadReasonDynamicLoad = 4,
    NOK_LoadReasonAsImageLoad = 5,
    NOK_LoadReasonAsDataLoad = 6,
    NOK_LoadReasonEnclavePrimary = 7,
    NOK_LoadReasonEnclaveDependency = 8,
    NOK_LoadReasonUnknown = -1
}NOK_LDR_DLL_LOAD_REASON, * NOK_PLDR_DLL_LOAD_REASON;
//0x118 bytes (sizeof)
typedef struct _NOK_SYSPTES_HEADER
{
    NOK_LIST_ENTRY ListHead[16];                                        //0x0
    ULONGLONG Count;                                                        //0x100
    ULONGLONG NumberOfEntries;                                              //0x108
    ULONGLONG NumberOfEntriesPeak;                                          //0x110
}NOK_SYSPTES_HEADER, * NOK_PSYSPTES_HEADER;
//0x88 bytes (sizeof)
typedef struct _NOK_MMVAD
{
    NOK_MMVAD_SHORT Core;                                               //0x0
    union
    {
        ULONG LongFlags2;                                                   //0x40
        volatile NOK_MMVAD_FLAGS2 VadFlags2;                            //0x40
    } u2;                                                                   //0x40
    NOK_PSUBSECTION Subsection;                                         //0x48
    NOK_PMMPTE FirstPrototypePte;                                       //0x50
    NOK_PMMPTE LastContiguousPte;                                       //0x58
    NOK_LIST_ENTRY ViewLinks;                                           //0x60
    NOK_PEPROCESS VadsProcess;                                          //0x70
    union
    {
        NOK_MI_VAD_SEQUENTIAL_INFO SequentialVa;                        //0x78
        NOK_PMMEXTEND_INFO ExtendedInfo;                                //0x78
    } u4;                                                                   //0x78
    NOK_PFILE_OBJECT FileObject;                                        //0x80
}NOK_MMVAD, * NOK_PMMVAD;
//0x60 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_PTE_TYPE
{
    NOK_RTL_BITMAP_EX Bitmap;                                           //0x0
    NOK_PMMPTE BasePte;                                                 //0x10
    ULONG Flags;                                                            //0x18
    NOK_MI_SYSTEM_VA_TYPE VaType;                                         //0x1c
    ULONG* FailureCount;                                                    //0x20
    ULONG PteFailures;                                                      //0x28
    union
    {
        ULONGLONG SpinLock;                                                 //0x30
        NOK_PEX_PUSH_LOCK GlobalPushLock;                               //0x30
    };
    volatile ULONGLONG TotalSystemPtes;                                     //0x38
    ULONGLONG Hint;                                                         //0x40
    ULONGLONG LowestBitEverAllocated;                                       //0x48
    NOK_MI_CACHED_PTES* CachedPtes;                                     //0x50
    volatile ULONGLONG TotalFreeSystemPtes;                                 //0x58
}NOK_MI_SYSTEM_PTE_TYPE, * NOK_PMI_SYSTEM_PTE_TYPE;
//0x30 bytes (sizeof)
typedef struct _NOK_PS_PROCESS_WAKE_INFORMATION
{
    ULONGLONG NotificationChannel;                                          //0x0
    ULONG WakeCounters[7];                                                  //0x8
    NOK_JOBOBJECT_WAKE_FILTER WakeFilter;                               //0x24
    ULONG NoWakeCounter;                                                    //0x2c
}NOK_PS_PROCESS_WAKE_INFORMATION, * NOK_PPS_PROCESS_WAKE_INFORMATION;
//0xa8 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_IMAGE_STATE
{
    NOK_LIST_ENTRY FixupList;                                           //0x0
    NOK_EX_PUSH_LOCK LoadLock;                                          //0x10
    NOK_PETHREAD LoadLockOwner;                                         //0x18
    ULONG LoadLockCount;                                                    //0x20
    volatile LONG FixupLock;                                                //0x24
    UCHAR FirstLoadEver;                                                    //0x28
    UCHAR LargePageAll;                                                     //0x29
    ULONGLONG LastPage;                                                     //0x30
    NOK_LIST_ENTRY LargePageList;                                       //0x38
    NOK_LIST_ENTRY StrongCodeLoadFailureList;                           //0x48
    NOK_PKLDR_DATA_TABLE_ENTRY SystemBase[1];                           //0x58
    NOK_PKLDR_DATA_TABLE_ENTRY BeingDeleted;                            //0x60
    NOK_EX_PUSH_LOCK MappingRangesPushLock;                             //0x68
    NOK_PMI_DRIVER_VA MappingRanges[2];                                 //0x70
    ULONGLONG PageCount;                                                    //0x80
    NOK_MM_SYSTEM_PAGE_COUNTS PageCounts;                               //0x88
    NOK_EX_PUSH_LOCK CollidedLock;                                      //0x98
    NOK_RTL_AVL_TREE ImageTree;                                         //0xa0
}NOK_MI_SYSTEM_IMAGE_STATE, * NOK_PMI_SYSTEM_IMAGE_STATE;
//0x30 bytes (sizeof)
typedef struct _NOK_MI_PHYSICAL_VIEW
{
    NOK_RTL_BALANCED_NODE PhysicalNode;                                 //0x0
    NOK_MMVAD_SHORT* Vad;                                               //0x18
    NOK_PAWEINFO AweInfo;                                               //0x20
    union
    {
        ULONG ViewPageSize:2;                                               //0x28
        NOK_PCONTROL_AREA ControlArea;                                  //0x28
    } u1;                                                                   //0x28
}NOK_MI_PHYSICAL_VIEW, * NOK_PMI_PHYSICAL_VIEW;
//0x18 bytes (sizeof)
typedef struct _NOK_MMPFNLIST_SHORT
{
    ULONGLONG Total;                                                        //0x0
    ULONGLONG Flink;                                                        //0x8
    ULONGLONG Blink;                                                        //0x10
}NOK_MMPFNLIST_SHORT, * NOK_PMMPFNLIST_SHORT;
//0x48 bytes (sizeof)
typedef struct _NOK_MI_PROCESS_STATE
{
    VOID* SystemDllBase;                                                    //0x0
    ULONG ColorSeed;                                                        //0x8
    LONG RotatingUniprocessorNumber;                                        //0xc
    NOK_LARGE_INTEGER CriticalSectionTimeout;                            //0x10
    NOK_LIST_ENTRY ProcessList;                                         //0x18
    NOK_PMMPTE SharedUserDataPte[2];                                    //0x28
    VOID* HypervisorSharedVa;                                               //0x38
    ULONGLONG VadSecureCookie;                                              //0x40
}NOK_MI_PROCESS_STATE, * NOK_PMI_PROCESS_STATE;
//0x48 bytes (sizeof)
typedef struct _NOK_MM_PAGE_ACCESS_INFO_HEADER
{
    NOK_SINGLE_LIST_ENTRY Link;                                         //0x0
    NOK_MM_PAGE_ACCESS_TYPE Type;                                         //0x8
    union
    {
        ULONG EmptySequenceNumber;                                          //0xc
        ULONG CurrentFileIndex;                                             //0xc
    };
    ULONGLONG CreateTime;                                                   //0x10
    union
    {
        ULONGLONG EmptyTime;                                                //0x18
        NOK_PMM_PAGE_ACCESS_INFO TempEntry;                             //0x18
    };
    union
    {
        struct
        {
            NOK_PMM_PAGE_ACCESS_INFO PageEntry;                         //0x20
            ULONGLONG* FileEntry;                                           //0x28
            ULONGLONG* FirstFileEntry;                                      //0x30
            NOK_PEPROCESS Process;                                      //0x38
            ULONG SessionId;                                                //0x40
        };
        struct
        {
            ULONGLONG* PageFrameEntry;                                      //0x20
            ULONGLONG* LastPageFrameEntry;                                  //0x28
        };
    };
}NOK_MM_PAGE_ACCESS_INFO_HEADER, * NOK_PMM_PAGE_ACCESS_INFO_HEADER;
//0x1c bytes (sizeof)
typedef struct _NOK_RSDS
{
    ULONG Signature;                                                        //0x0
    NOK_GUID Guid;                                                      //0x4
    ULONG Age;                                                              //0x14
    CHAR PdbName[1];                                                        //0x18
}NOK_RSDS, * NOK_PRSDS;
//0x20 bytes (sizeof)
typedef struct _NOK_NETWORK_LOADER_BLOCK
{
    UCHAR* DHCPServerACK;                                                   //0x0
    ULONG DHCPServerACKLength;                                              //0x8
    UCHAR* BootServerReplyPacket;                                           //0x10
    ULONG BootServerReplyPacketLength;                                      //0x18
}NOK_NETWORK_LOADER_BLOCK, * NOK_PNETWORK_LOADER_BLOCK;
//0x18 bytes (sizeof)
typedef struct _NOK_NLS_DATA_BLOCK
{
    VOID* AnsiCodePageData;                                                 //0x0
    VOID* OemCodePageData;                                                  //0x8
    VOID* UnicodeCaseTableData;                                             //0x10
}NOK_NLS_DATA_BLOCK, * NOK_PNLS_DATA_BLOCK;
//0xa0 bytes (sizeof)
typedef struct _NOK_NONOPAQUE_OPLOCK
{
    NOK_PIRP IrpExclusiveOplock;                                        //0x0
    NOK_PFILE_OBJECT FileObject;                                        //0x8
    NOK_PEPROCESS ExclusiveOplockOwner;                                 //0x10
    NOK_PETHREAD ExclusiveOplockOwnerThread;                            //0x18
    UCHAR WaiterPriority;                                                   //0x20
    NOK_LIST_ENTRY IrpOplocksR;                                         //0x28
    NOK_LIST_ENTRY IrpOplocksRH;                                        //0x38
    NOK_LIST_ENTRY RHBreakQueue;                                        //0x48
    NOK_LIST_ENTRY WaitingIrps;                                         //0x58
    NOK_LIST_ENTRY DelayAckFileObjectQueue;                             //0x68
    NOK_LIST_ENTRY AtomicQueue;                                         //0x78
    NOK_PGUID DeleterParentKey;                                         //0x88
    ULONG OplockState;                                                      //0x90
    NOK_PFAST_MUTEX FastMutex;                                          //0x98
}NOK_NONOPAQUE_OPLOCK, * NOK_PNONOPAQUE_OPLOCK;
//0x20 bytes (sizeof)
typedef struct _NOK_NON_PAGED_DEBUG_INFO
{
    USHORT Signature;                                                       //0x0
    USHORT Flags;                                                           //0x2
    ULONG Size;                                                             //0x4
    USHORT Machine;                                                         //0x8
    USHORT Characteristics;                                                 //0xa
    ULONG TimeDateStamp;                                                    //0xc
    ULONG CheckSum;                                                         //0x10
    ULONG SizeOfImage;                                                      //0x14
    ULONGLONG ImageBase;                                                    //0x18
}NOK_NON_PAGED_DEBUG_INFO, * NOK_PNON_PAGED_DEBUG_INFO;
//0x38 bytes (sizeof)
typedef struct _NOK_MI_SUB64K_FREE_RANGES
{
    NOK_RTL_BITMAP_EX BitMap;                                           //0x0
    NOK_LIST_ENTRY ListEntry;                                           //0x10
    NOK_MMVAD_SHORT* Vad;                                               //0x20
    ULONG SetBits;                                                          //0x28
    ULONG FullSetBits;                                                      //0x2c
    ULONG SubListIndex:2;                                                   //0x30
    ULONG Hint:30;                                                          //0x30
}NOK_MI_SUB64K_FREE_RANGES, * NOK_PMI_SUB64K_FREE_RANGES;
//0x1c bytes (sizeof)
typedef struct _NOK_NT_TIB32
{
    ULONG ExceptionList;                                                    //0x0
    ULONG StackBase;                                                        //0x4
    ULONG StackLimit;                                                       //0x8
    ULONG SubSystemTib;                                                     //0xc
    union
    {
        ULONG FiberData;                                                    //0x10
        ULONG Version;                                                      //0x10
    };
    ULONG ArbitraryUserPointer;                                             //0x14
    ULONG Self;                                                             //0x18
}NOK_NT_TIB32, * NOK_PNT_TIB32;
//0x38 bytes (sizeof)
typedef struct _NOK_NT_TIB64
{
    ULONGLONG ExceptionList;                                                //0x0
    ULONGLONG StackBase;                                                    //0x8
    ULONGLONG StackLimit;                                                   //0x10
    ULONGLONG SubSystemTib;                                                 //0x18
    union
    {
        ULONGLONG FiberData;                                                //0x20
        ULONG Version;                                                      //0x20
    };
    ULONGLONG ArbitraryUserPointer;                                         //0x28
    ULONGLONG Self;                                                         //0x30
}NOK_NT_TIB64, * NOK_PNT_TIB64;
//0x18 bytes (sizeof)
typedef struct _NOK_NUMA_MEMORY_RANGE
{
    ULONG ProximityId;                                                      //0x0
    ULONGLONG BasePage;                                                     //0x8
    ULONGLONG EndPage;                                                      //0x10
}NOK_NUMA_MEMORY_RANGE, * NOK_PNUMA_MEMORY_RANGE;
//0x30 bytes (sizeof)
typedef struct _NOK_OBJECT_ATTRIBUTES
{
    ULONG Length;                                                           //0x0
    VOID* RootDirectory;                                                    //0x8
    NOK_PUNICODE_STRING ObjectName;                                     //0x10
    ULONG Attributes;                                                       //0x18
    VOID* SecurityDescriptor;                                               //0x20
    VOID* SecurityQualityOfService;                                         //0x28
}NOK_OBJECT_ATTRIBUTES, * NOK_POBJECT_ATTRIBUTES;
//0x10 bytes (sizeof)
typedef struct _NOK_TOKEN_SOURCE
{
    CHAR SourceName[8];                                                     //0x0
    NOK_LUID SourceIdentifier;                                          //0x8
}NOK_TOKEN_SOURCE, * NOK_PTOKEN_SOURCE;
//0x1e bytes (sizeof)
typedef struct _NOK_TOKEN_AUDIT_POLICY
{
    UCHAR PerUserPolicy[30];                                                //0x0
}NOK_TOKEN_AUDIT_POLICY, * NOK_PTOKEN_AUDIT_POLICY;
//0x1f bytes (sizeof)
typedef struct _NOK_SEP_AUDIT_POLICY
{
    NOK_TOKEN_AUDIT_POLICY AdtTokenPolicy;                              //0x0
    UCHAR PolicySetStatus;                                                  //0x1e
}NOK_SEP_AUDIT_POLICY, * NOK_PSEP_AUDIT_POLICY;
//0x498 bytes (sizeof)
typedef struct _NOK_TOKEN
{
    NOK_TOKEN_SOURCE TokenSource;                                       //0x0
    NOK_LUID TokenId;                                                   //0x10
    NOK_LUID AuthenticationId;                                          //0x18
    NOK_LUID ParentTokenId;                                             //0x20
    NOK_LARGE_INTEGER ExpirationTime;                                    //0x28
    NOK_PERESOURCE TokenLock;                                           //0x30
    NOK_LUID ModifiedId;                                                //0x38
    NOK_SEP_TOKEN_PRIVILEGES Privileges;                                //0x40
    NOK_SEP_AUDIT_POLICY AuditPolicy;                                   //0x58
    ULONG SessionId;                                                        //0x78
    ULONG UserAndGroupCount;                                                //0x7c
    ULONG RestrictedSidCount;                                               //0x80
    ULONG VariableLength;                                                   //0x84
    ULONG DynamicCharged;                                                   //0x88
    ULONG DynamicAvailable;                                                 //0x8c
    ULONG DefaultOwnerIndex;                                                //0x90
    NOK_SID_AND_ATTRIBUTES* UserAndGroups;                              //0x98
    NOK_SID_AND_ATTRIBUTES* RestrictedSids;                             //0xa0
    VOID* PrimaryGroup;                                                     //0xa8
    ULONG* DynamicPart;                                                     //0xb0
    NOK_PACL DefaultDacl;                                               //0xb8
    NOK_TOKEN_TYPE TokenType;                                             //0xc0
    NOK_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0xc4
    ULONG TokenFlags;                                                       //0xc8
    UCHAR TokenInUse;                                                       //0xcc
    ULONG IntegrityLevelIndex;                                              //0xd0
    ULONG MandatoryPolicy;                                                  //0xd4
    NOK_PSEP_LOGON_SESSION_REFERENCES LogonSession;                     //0xd8
    NOK_LUID OriginatingLogonSession;                                   //0xe0
    NOK_SID_AND_ATTRIBUTES_HASH SidHash;                                //0xe8
    NOK_SID_AND_ATTRIBUTES_HASH RestrictedSidHash;                      //0x1f8
    NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION pSecurityAttributes; //0x308
    VOID* Package;                                                          //0x310
    NOK_SID_AND_ATTRIBUTES* Capabilities;                               //0x318
    ULONG CapabilityCount;                                                  //0x320
    NOK_SID_AND_ATTRIBUTES_HASH CapabilitiesHash;                       //0x328
    NOK_PSEP_LOWBOX_NUMBER_ENTRY LowboxNumberEntry;                     //0x438
    NOK_PSEP_CACHED_HANDLES_ENTRY LowboxHandlesEntry;                   //0x440
    NOK_PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION pClaimAttributes;       //0x448
    VOID* TrustLevelSid;                                                    //0x450
    NOK_PTOKEN TrustLinkedToken;                                        //0x458
    VOID* IntegrityLevelSidValue;                                           //0x460
    NOK_PSEP_SID_VALUES_BLOCK TokenSidValues;                           //0x468
    NOK_PSEP_LUID_TO_INDEX_MAP_ENTRY IndexEntry;                        //0x470
    NOK_PSEP_TOKEN_DIAG_TRACK_ENTRY DiagnosticInfo;                     //0x478
    NOK_PSEP_CACHED_HANDLES_ENTRY BnoIsolationHandlesEntry;             //0x480
    VOID* SessionObject;                                                    //0x488
    ULONGLONG VariablePart;                                                 //0x490
}NOK_TOKEN, * NOK_PTOKEN;
//0x158 bytes (sizeof)
typedef struct _NOK_OBJECT_DIRECTORY
{
    NOK_OBJECT_DIRECTORY_ENTRY* HashBuckets[37];                        //0x0
    NOK_EX_PUSH_LOCK Lock;                                              //0x128
    NOK_PDEVICE_MAP DeviceMap;                                          //0x130
    NOK_POBJECT_DIRECTORY ShadowDirectory;                              //0x138
    VOID* NamespaceEntry;                                                   //0x140
    VOID* SessionObject;                                                    //0x148
    ULONG Flags;                                                            //0x150
    ULONG SessionId;                                                        //0x154
}NOK_OBJECT_DIRECTORY, * NOK_POBJECT_DIRECTORY;
//0x18 bytes (sizeof)
typedef struct _NOK_OBJECT_DIRECTORY_ENTRY
{
    NOK_OBJECT_DIRECTORY_ENTRY* ChainLink;                              //0x0
    VOID* Object;                                                           //0x8
    ULONG HashValue;                                                        //0x10
}NOK_OBJECT_DIRECTORY_ENTRY, * NOK_POBJECT_DIRECTORY_ENTRY;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_DUMP_CONTROL
{
    VOID* Stream;                                                           //0x0
    ULONG Detail;                                                           //0x8
}NOK_OBJECT_DUMP_CONTROL, * NOK_POBJECT_DUMP_CONTROL;
//0x10 bytes (sizeof)
typedef struct _NOK_OB_EXTENDED_USER_INFO
{
    VOID* Context1;                                                         //0x0
    VOID* Context2;                                                         //0x8
}NOK_OB_EXTENDED_USER_INFO, * NOK_POB_EXTENDED_USER_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_HANDLE_COUNT_ENTRY
{
    NOK_PEPROCESS Process;                                              //0x0
    ULONG HandleCount:24;                                                   //0x8
    ULONG LockCount:8;                                                      //0x8
}NOK_OBJECT_HANDLE_COUNT_ENTRY, * NOK_POBJECT_HANDLE_COUNT_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_OBJECT_HANDLE_COUNT_DATABASE
{
    ULONG CountEntries;                                                     //0x0
    NOK_OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];                //0x8
}NOK_OBJECT_HANDLE_COUNT_DATABASE, * NOK_POBJECT_HANDLE_COUNT_DATABASE;
//0x8 bytes (sizeof)
typedef struct _NOK_OBJECT_HANDLE_INFORMATION
{
    ULONG HandleAttributes;                                                 //0x0
    ULONG GrantedAccess;                                                    //0x4
}NOK_OBJECT_HANDLE_INFORMATION, * NOK_POBJECT_HANDLE_INFORMATION;
//0x38 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER
{
    LONGLONG PointerCount;                                                  //0x0
    union
    {
        LONGLONG HandleCount;                                               //0x8
        VOID* NextToFree;                                                   //0x8
    };
    NOK_EX_PUSH_LOCK Lock;                                              //0x10
    UCHAR TypeIndex;                                                        //0x18
    union
    {
        UCHAR TraceFlags;                                                   //0x19
        struct
        {
            UCHAR DbgRefTrace:1;                                            //0x19
            UCHAR DbgTracePermanent:1;                                      //0x19
        };
    };
    UCHAR InfoMask;                                                         //0x1a
    union
    {
        UCHAR Flags;                                                        //0x1b
        struct
        {
            UCHAR NewObject:1;                                              //0x1b
            UCHAR KernelObject:1;                                           //0x1b
            UCHAR KernelOnlyAccess:1;                                       //0x1b
            UCHAR ExclusiveObject:1;                                        //0x1b
            UCHAR PermanentObject:1;                                        //0x1b
            UCHAR DefaultSecurityQuota:1;                                   //0x1b
            UCHAR SingleHandleEntry:1;                                      //0x1b
            UCHAR DeletedInline:1;                                          //0x1b
        };
    };
    ULONG Reserved;                                                         //0x1c
    union
    {
        NOK_POBJECT_CREATE_INFORMATION ObjectCreateInfo;                //0x20
        VOID* QuotaBlockCharged;                                            //0x20
    };
    VOID* SecurityDescriptor;                                               //0x28
    NOK_QUAD Body;                                                      //0x30
}NOK_OBJECT_HEADER, * NOK_POBJECT_HEADER;
//0x110 bytes (sizeof)
typedef struct _NOK_DUMMY_FILE_OBJECT
{
    NOK_OBJECT_HEADER ObjectHeader;                                     //0x0
    CHAR FileObjectBody[216];                                               //0x38
}NOK_DUMMY_FILE_OBJECT, * NOK_PDUMMY_FILE_OBJECT;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_AUDIT_INFO
{
    VOID* SecurityDescriptor;                                               //0x0
    ULONGLONG Reserved;                                                     //0x8
}NOK_OBJECT_HEADER_AUDIT_INFO, * NOK_POBJECT_HEADER_AUDIT_INFO;
//0x20 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_CREATOR_INFO
{
    NOK_LIST_ENTRY TypeList;                                            //0x0
    VOID* CreatorUniqueProcess;                                             //0x10
    USHORT CreatorBackTraceIndex;                                           //0x18
    USHORT Reserved1;                                                       //0x1a
    ULONG Reserved2;                                                        //0x1c
}NOK_OBJECT_HEADER_CREATOR_INFO, * NOK_POBJECT_HEADER_CREATOR_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_EXTENDED_INFO
{
    NOK_POBJECT_FOOTER Footer;                                          //0x0
    ULONGLONG Reserved;                                                     //0x8
}NOK_OBJECT_HEADER_EXTENDED_INFO, * NOK_POBJECT_HEADER_EXTENDED_INFO;
//0xa8 bytes (sizeof)
typedef struct _NOK_MM_DRIVER_VERIFIER_DATA
{
    ULONG Level;                                                            //0x0
    volatile ULONG RaiseIrqls;                                              //0x4
    volatile ULONG AcquireSpinLocks;                                        //0x8
    volatile ULONG SynchronizeExecutions;                                   //0xc
    volatile ULONG AllocationsAttempted;                                    //0x10
    volatile ULONG AllocationsSucceeded;                                    //0x14
    volatile ULONG AllocationsSucceededSpecialPool;                         //0x18
    ULONG AllocationsWithNoTag;                                             //0x1c
    ULONG TrimRequests;                                                     //0x20
    ULONG Trims;                                                            //0x24
    ULONG AllocationsFailed;                                                //0x28
    volatile ULONG AllocationsFailedDeliberately;                           //0x2c
    volatile ULONG Loads;                                                   //0x30
    volatile ULONG Unloads;                                                 //0x34
    ULONG UnTrackedPool;                                                    //0x38
    ULONG UserTrims;                                                        //0x3c
    volatile ULONG CurrentPagedPoolAllocations;                             //0x40
    volatile ULONG CurrentNonPagedPoolAllocations;                          //0x44
    ULONG PeakPagedPoolAllocations;                                         //0x48
    ULONG PeakNonPagedPoolAllocations;                                      //0x4c
    volatile ULONGLONG PagedBytes;                                          //0x50
    volatile ULONGLONG NonPagedBytes;                                       //0x58
    ULONGLONG PeakPagedBytes;                                               //0x60
    ULONGLONG PeakNonPagedBytes;                                            //0x68
    volatile ULONG BurstAllocationsFailedDeliberately;                      //0x70
    ULONG SessionTrims;                                                     //0x74
    volatile ULONG OptionChanges;                                           //0x78
    volatile ULONG VerifyMode;                                              //0x7c
    NOK_UNICODE_STRING PreviousBucketName;                              //0x80
    volatile ULONG ExecutePoolTypes;                                        //0x90
    volatile ULONG ExecutePageProtections;                                  //0x94
    volatile ULONG ExecutePageMappings;                                     //0x98
    volatile ULONG ExecuteWriteSections;                                    //0x9c
    volatile ULONG SectionAlignmentFailures;                                //0xa0
    volatile ULONG IATInExecutableSection;                                  //0xa4
}NOK_MM_DRIVER_VERIFIER_DATA, * NOK_PMM_DRIVER_VERIFIER_DATA;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_HANDLE_INFO
{
    union
    {
        NOK_POBJECT_HANDLE_COUNT_DATABASE HandleCountDataBase;          //0x0
        NOK_OBJECT_HANDLE_COUNT_ENTRY SingleEntry;                      //0x0
    };
}NOK_OBJECT_HEADER_HANDLE_INFO, * NOK_POBJECT_HEADER_HANDLE_INFO;
//0x4 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_PADDING_INFO
{
    ULONG PaddingAmount;                                                    //0x0
}NOK_OBJECT_HEADER_PADDING_INFO, * NOK_POBJECT_HEADER_PADDING_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_PROCESS_INFO
{
    NOK_PEPROCESS ExclusiveProcess;                                     //0x0
    ULONGLONG Reserved;                                                     //0x8
}NOK_OBJECT_HEADER_PROCESS_INFO, * NOK_POBJECT_HEADER_PROCESS_INFO;
//0x260 bytes (sizeof)
typedef struct _NOK_OBJECT_NAMESPACE_LOOKUPTABLE
{
    NOK_LIST_ENTRY HashBuckets[37];                                     //0x0
    NOK_EX_PUSH_LOCK Lock;                                              //0x250
    ULONG NumberOfPrivateSpaces;                                            //0x258
}NOK_OBJECT_NAMESPACE_LOOKUPTABLE, * NOK_POBJECT_NAMESPACE_LOOKUPTABLE;
//0x20 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_QUOTA_INFO
{
    ULONG PagedPoolCharge;                                                  //0x0
    ULONG NonPagedPoolCharge;                                               //0x4
    ULONG SecurityDescriptorCharge;                                         //0x8
    ULONG Reserved1;                                                        //0xc
    VOID* SecurityDescriptorQuotaBlock;                                     //0x10
    ULONGLONG Reserved2;                                                    //0x18
}NOK_OBJECT_HEADER_QUOTA_INFO, * NOK_POBJECT_HEADER_QUOTA_INFO;
//0xc bytes (sizeof)
typedef struct _NOK_OBJECT_REF_STACK_INFO
{
    ULONG Sequence;                                                         //0x0
    USHORT Index;                                                           //0x4
    USHORT NumTraces;                                                       //0x6
    ULONG Tag;                                                              //0x8
}NOK_OBJECT_REF_STACK_INFO, * NOK_POBJECT_REF_STACK_INFO;
//0x28 bytes (sizeof)
typedef struct _NOK_OBJECT_REF_INFO
{
    NOK_POBJECT_HEADER ObjectHeader;                                    //0x0
    VOID* NextRef;                                                          //0x8
    UCHAR ImageFileName[16];                                                //0x10
    USHORT NextPos;                                                         //0x20
    USHORT MaxStacks;                                                       //0x22
    NOK_OBJECT_REF_STACK_INFO StackInfo[0];                             //0x24
}NOK_OBJECT_REF_INFO, * NOK_POBJECT_REF_INFO;
//0x80 bytes (sizeof)
typedef struct _NOK_OBJECT_REF_TRACE
{
    VOID* StackTrace[16];                                                   //0x0
}NOK_OBJECT_REF_TRACE, * NOK_POBJECT_REF_TRACE;
//0x10 bytes (sizeof)
typedef struct _NOK_OBJECT_NAME_INFORMATION
{
    NOK_UNICODE_STRING Name;                                            //0x0
}NOK_OBJECT_NAME_INFORMATION, * NOK_POBJECT_NAME_INFORMATION;
//0x4 bytes (sizeof)
typedef enum _NOK_OB_OPEN_REASON
{
    NOK_ObCreateHandle = 0,
    NOK_ObOpenHandle = 1,
    NOK_ObDuplicateHandle = 2,
    NOK_ObInheritHandle = 3,
    NOK_ObMaxOpenReason = 4
}NOK_OB_OPEN_REASON, * NOK_POB_OPEN_REASON;
//0x108 bytes (sizeof)
typedef struct _NOK_MMMOD_WRITER_MDL_ENTRY
{
    NOK_LIST_ENTRY Links;                                               //0x0
    union
    {
        NOK_IO_STATUS_BLOCK IoStatus;                                   //0x10
    } u;                                                                    //0x10
    NOK_PIRP Irp;                                                       //0x20
    NOK_MODWRITER_FLAGS u1;                                             //0x28
    ULONG StoreWriteRefCount;                                               //0x2c
    NOK_KAPC StoreWriteCompletionApc;                                   //0x30
    ULONG ByteCount;                                                        //0x88
    ULONG ChargedPages;                                                     //0x8c
    NOK_PMMPAGING_FILE PagingFile;                                      //0x90
    NOK_PFILE_OBJECT File;                                              //0x98
    NOK_PCONTROL_AREA ControlArea;                                      //0xa0
    NOK_PERESOURCE FileResource;                                        //0xa8
    NOK_LARGE_INTEGER WriteOffset;                                       //0xb0
    NOK_LARGE_INTEGER IssueTime;                                         //0xb8
    NOK_PMI_PARTITION Partition;                                        //0xc0
    NOK_PMDL PointerMdl;                                                //0xc8
    NOK_MDL Mdl;                                                        //0xd0
    ULONGLONG Page[1];                                                      //0x100
}NOK_MMMOD_WRITER_MDL_ENTRY, * NOK_PMMMOD_WRITER_MDL_ENTRY;
//0x28 bytes (sizeof)
typedef struct _NOK_OBP_LOOKUP_CONTEXT
{
    NOK_POBJECT_DIRECTORY Directory;                                    //0x0
    VOID* Object;                                                           //0x8
    NOK_OBJECT_DIRECTORY_ENTRY** EntryLink;                             //0x10
    ULONG HashValue;                                                        //0x18
    USHORT HashIndex;                                                       //0x1c
    UCHAR DirectoryLocked;                                                  //0x1e
    UCHAR LockedExclusive;                                                  //0x1f
    ULONG LockStateSignature;                                               //0x20
}NOK_OBP_LOOKUP_CONTEXT, * NOK_POBP_LOOKUP_CONTEXT;
//0x28 bytes (sizeof)
typedef struct _NOK_NAMED_PIPE_CREATE_PARAMETERS
{
    ULONG NamedPipeType;                                                    //0x0
    ULONG ReadMode;                                                         //0x4
    ULONG CompletionMode;                                                   //0x8
    ULONG MaximumInstances;                                                 //0xc
    ULONG InboundQuota;                                                     //0x10
    ULONG OutboundQuota;                                                    //0x14
    NOK_LARGE_INTEGER DefaultTimeout;                                    //0x18
    UCHAR TimeoutSpecified;                                                 //0x20
}NOK_NAMED_PIPE_CREATE_PARAMETERS, * NOK_PNAMED_PIPE_CREATE_PARAMETERS;
//0x2e0 bytes (sizeof)
typedef struct _NOK_OBP_SILODRIVERSTATE
{
    NOK_PDEVICE_MAP SystemDeviceMap;                                    //0x0
    NOK_OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;               //0x8
    NOK_EX_PUSH_LOCK DeviceMapLock;                                     //0x78
    NOK_OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;       //0x80
}NOK_OBP_SILODRIVERSTATE, * NOK_POBP_SILODRIVERSTATE;
//0x28 bytes (sizeof)
typedef struct _NOK_OB_DUPLICATE_OBJECT_STATE
{
    NOK_PEPROCESS SourceProcess;                                        //0x0
    VOID* SourceHandle;                                                     //0x8
    VOID* Object;                                                           //0x10
    ULONG TargetAccess;                                                     //0x18
    NOK_HANDLE_TABLE_ENTRY_INFO ObjectInfo;                             //0x1c
    ULONG HandleAttributes;                                                 //0x24
}NOK_OB_DUPLICATE_OBJECT_STATE, * NOK_POB_DUPLICATE_OBJECT_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_OB_EXTENDED_PARSE_PARAMETERS
{
    USHORT Length;                                                          //0x0
    ULONG RestrictedAccessMask;                                             //0x4
    NOK_PEJOB Silo;                                                     //0x8
}NOK_OB_EXTENDED_PARSE_PARAMETERS, * NOK_POB_EXTENDED_PARSE_PARAMETERS;
//0x30 bytes (sizeof)
typedef struct _NOK_OBJECT_FOOTER
{
    NOK_HANDLE_REVOCATION_INFO HandleRevocationInfo;                    //0x0
    NOK_OB_EXTENDED_USER_INFO ExtendedUserInfo;                         //0x20
}NOK_OBJECT_FOOTER, * NOK_POBJECT_FOOTER;
//0x20 bytes (sizeof)
typedef struct _NOK_OB_HANDLE_REVOCATION_BLOCK
{
    NOK_LIST_ENTRY RevocationInfos;                                     //0x0
    NOK_EX_PUSH_LOCK Lock;                                              //0x10
    NOK_EX_RUNDOWN_REF Rundown;                                         //0x18
}NOK_OB_HANDLE_REVOCATION_BLOCK, * NOK_POB_HANDLE_REVOCATION_BLOCK;
//0x10 bytes (sizeof)
typedef struct _NOK_PROFILE_PARAMETER_BLOCK
{
    USHORT Status;                                                          //0x0
    USHORT Reserved;                                                        //0x2
    USHORT DockingState;                                                    //0x4
    USHORT Capabilities;                                                    //0x6
    ULONG DockID;                                                           //0x8
    ULONG SerialNumber;                                                     //0xc
}NOK_PROFILE_PARAMETER_BLOCK, * NOK_PPROFILE_PARAMETER_BLOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_CREATE_FILE_TYPE
{
    NOK_CreateFileTypeNone = 0,
    NOK_CreateFileTypeNamedPipe = 1,
    NOK_CreateFileTypeMailslot = 2
}NOK_CREATE_FILE_TYPE, * NOK_PCREATE_FILE_TYPE;
//0x28 bytes (sizeof)
typedef struct _NOK_KRESOURCEMANAGER_COMPLETION_BINDING
{
    NOK_LIST_ENTRY NotificationListHead;                                //0x0
    VOID* Port;                                                             //0x10
    ULONGLONG Key;                                                          //0x18
    NOK_PEPROCESS BindingProcess;                                       //0x20
}NOK_KRESOURCEMANAGER_COMPLETION_BINDING, * NOK_PKRESOURCEMANAGER_COMPLETION_BINDING;
//0x250 bytes (sizeof)
typedef struct _NOK_KRESOURCEMANAGER
{
    NOK_KEVENT NotificationAvailable;                                   //0x0
    ULONG cookie;                                                           //0x18
    NOK_KRESOURCEMANAGER_STATE State;                                     //0x1c
    ULONG Flags;                                                            //0x20
    NOK_KMUTANT Mutex;                                                  //0x28
    NOK_KTMOBJECT_NAMESPACE_LINK NamespaceLink;                         //0x60
    NOK_GUID RmId;                                                      //0x88
    NOK_KQUEUE NotificationQueue;                                       //0x98
    NOK_KMUTANT NotificationMutex;                                      //0xd8
    NOK_LIST_ENTRY EnlistmentHead;                                      //0x110
    ULONG EnlistmentCount;                                                  //0x120
    LONG (*NotificationRoutine)(NOK_PKENLISTMENT arg1, VOID* arg2, VOID* arg3, ULONG arg4, NOK_PLARGE_INTEGER arg5, ULONG arg6, VOID* arg7); //0x128
    VOID* Key;                                                              //0x130
    NOK_LIST_ENTRY ProtocolListHead;                                    //0x138
    NOK_LIST_ENTRY PendingPropReqListHead;                              //0x148
    NOK_LIST_ENTRY CRMListEntry;                                        //0x158
    NOK_PKTM Tm;                                                        //0x168
    NOK_UNICODE_STRING Description;                                     //0x170
    NOK_KTMOBJECT_NAMESPACE Enlistments;                                //0x180
    NOK_KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;          //0x228
}NOK_KRESOURCEMANAGER, * NOK_PKRESOURCEMANAGER;
//0x80 bytes (sizeof)
typedef struct _NOK_PAGED_LOOKASIDE_LIST
{
    NOK_GENERAL_LOOKASIDE L;                                            //0x0
}NOK_PAGED_LOOKASIDE_LIST, * NOK_PPAGED_LOOKASIDE_LIST;
//0x20 bytes (sizeof)
typedef struct _NOK_PALPC_PORT_REFERENCE_WAIT_BLOCK
{
    NOK_KEVENT DesiredReferenceNoEvent;                                 //0x0
    LONG DesiredReferenceNo;                                                //0x18
}NOK_PALPC_PORT_REFERENCE_WAIT_BLOCK, * NOK_PPALPC_PORT_REFERENCE_WAIT_BLOCK;
//0x28 bytes (sizeof)
typedef struct _NOK_CONFIGURATION_COMPONENT
{
    NOK_CONFIGURATION_CLASS Class;                                        //0x0
    NOK_CONFIGURATION_TYPE Type;                                          //0x4
    NOK_DEVICE_FLAGS Flags;                                             //0x8
    USHORT Version;                                                         //0xc
    USHORT Revision;                                                        //0xe
    ULONG Key;                                                              //0x10
    union
    {
        ULONG AffinityMask;                                                 //0x14
        struct
        {
            USHORT Group;                                                   //0x14
            USHORT GroupIndex;                                              //0x16
        };
    };
    ULONG ConfigurationDataLength;                                          //0x18
    ULONG IdentifierLength;                                                 //0x1c
    CHAR* Identifier;                                                       //0x20
}NOK_CONFIGURATION_COMPONENT, * NOK_PCONFIGURATION_COMPONENT;
//0x4 bytes (sizeof)
typedef enum _NOK_PCI_BUSMASTER_RID_TYPE
{
    NOK_BusmasterRidInvalid = 0,
    NOK_BusmasterRidFromDeviceRid = 1,
    NOK_BusmasterRidFromBridgeRid = 2,
    NOK_BusmasterRidFromMultipleBridges = 3
}NOK_PCI_BUSMASTER_RID_TYPE, * NOK_PPCI_BUSMASTER_RID_TYPE;
//0x8 bytes (sizeof)
typedef struct _NOK_PCW_COUNTER_DESCRIPTOR
{
    USHORT Id;                                                              //0x0
    USHORT StructIndex;                                                     //0x2
    USHORT Offset;                                                          //0x4
    USHORT Size;                                                            //0x6
}NOK_PCW_COUNTER_DESCRIPTOR, * NOK_PPCW_COUNTER_DESCRIPTOR;
//0x10 bytes (sizeof)
typedef struct _NOK_PCW_COUNTER_INFORMATION
{
    ULONGLONG CounterMask;                                                  //0x0
    NOK_PUNICODE_STRING InstanceMask;                                   //0x8
}NOK_PCW_COUNTER_INFORMATION, * NOK_PPCW_COUNTER_INFORMATION;
//0x10 bytes (sizeof)
typedef struct _NOK_PCW_DATA
{
    VOID* Data;                                                             //0x0
    ULONG Size;                                                             //0x8
}NOK_PCW_DATA, * NOK_PPCW_DATA;
//0x28 bytes (sizeof)
typedef struct _NOK_PCW_MASK_INFORMATION
{
    ULONGLONG CounterMask;                                                  //0x0
    NOK_PUNICODE_STRING InstanceMask;                                   //0x8
    ULONG InstanceId;                                                       //0x10
    UCHAR CollectMultiple;                                                  //0x14
    NOK_PPCW_BUFFER Buffer;                                             //0x18
    NOK_PKEVENT CancelEvent;                                            //0x20
}NOK_PCW_MASK_INFORMATION, * NOK_PPCW_MASK_INFORMATION;
//0xc8 bytes (sizeof)
typedef struct _NOK_PCW_PROCESSOR_INFO
{
    ULONGLONG IdleTime;                                                     //0x0
    ULONGLONG AvailableTime;                                                //0x8
    ULONGLONG UserTime;                                                     //0x10
    ULONGLONG KernelTime;                                                   //0x18
    ULONG Interrupts;                                                       //0x20
    ULONGLONG DpcTime;                                                      //0x28
    ULONGLONG InterruptTime;                                                //0x30
    ULONG ClockInterrupts;                                                  //0x38
    ULONG DpcCount;                                                         //0x3c
    ULONG DpcRate;                                                          //0x40
    ULONGLONG C1Time;                                                       //0x48
    ULONGLONG C2Time;                                                       //0x50
    ULONGLONG C3Time;                                                       //0x58
    ULONGLONG C1Transitions;                                                //0x60
    ULONGLONG C2Transitions;                                                //0x68
    ULONGLONG C3Transitions;                                                //0x70
    ULONGLONG StallTime;                                                    //0x78
    ULONG ParkingStatus;                                                    //0x80
    ULONG CurrentFrequency;                                                 //0x84
    ULONG PercentMaxFrequency;                                              //0x88
    ULONG StateFlags;                                                       //0x8c
    ULONG NominalThroughput;                                                //0x90
    ULONG ActiveThroughput;                                                 //0x94
    ULONGLONG ScaledThroughput;                                             //0x98
    ULONGLONG ScaledKernelThroughput;                                       //0xa0
    ULONGLONG AverageIdleTime;                                              //0xa8
    ULONGLONG IdleBreakEvents;                                              //0xb0
    ULONG PerformanceLimit;                                                 //0xb8
    ULONG PerformanceLimitFlags;                                            //0xbc
    ULONGLONG ScaledFrequency;                                              //0xc0
}NOK_PCW_PROCESSOR_INFO, * NOK_PPCW_PROCESSOR_INFO;
//0x4 bytes (sizeof)
typedef enum _NOK_PCW_CALLBACK_TYPE
{
    NOK_PcwCallbackAddCounter = 0,
    NOK_PcwCallbackRemoveCounter = 1,
    NOK_PcwCallbackEnumerateInstances = 2,
    NOK_PcwCallbackCollectData = 3
}NOK_PCW_CALLBACK_TYPE, * NOK_PPCW_CALLBACK_TYPE;
//0x7c8 bytes (sizeof)
typedef struct _NOK_PEB
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages:1;                                    //0x3
            UCHAR IsProtectedProcess:1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated:1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
            UCHAR IsPackagedProcess:1;                                      //0x3
            UCHAR IsAppContainer:1;                                         //0x3
            UCHAR IsProtectedProcessLight:1;                                //0x3
            UCHAR IsLongPathAwareProcess:1;                                 //0x3
        };
    };
    UCHAR Padding0[4];                                                      //0x4
    VOID* Mutant;                                                           //0x8
    VOID* ImageBaseAddress;                                                 //0x10
    NOK_PEB_LDR_DATA* Ldr;                                              //0x18
    NOK_PRTL_USER_PROCESS_PARAMETERS ProcessParameters;                 //0x20
    VOID* SubSystemData;                                                    //0x28
    VOID* ProcessHeap;                                                      //0x30
    NOK_PRTL_CRITICAL_SECTION FastPebLock;                              //0x38
    NOK_PSLIST_HEADER volatile AtlThunkSListPtr;                         //0x40
    VOID* IFEOKey;                                                          //0x48
    union
    {
        ULONG CrossProcessFlags;                                            //0x50
        struct
        {
            ULONG ProcessInJob:1;                                           //0x50
            ULONG ProcessInitializing:1;                                    //0x50
            ULONG ProcessUsingVEH:1;                                        //0x50
            ULONG ProcessUsingVCH:1;                                        //0x50
            ULONG ProcessUsingFTH:1;                                        //0x50
            ULONG ProcessPreviouslyThrottled:1;                             //0x50
            ULONG ProcessCurrentlyThrottled:1;                              //0x50
            ULONG ProcessImagesHotPatched:1;                                //0x50
            ULONG ReservedBits0:24;                                         //0x50
        };
    };
    UCHAR Padding1[4];                                                      //0x54
    union
    {
        VOID* KernelCallbackTable;                                          //0x58
        VOID* UserSharedInfoPtr;                                            //0x58
    };
    ULONG SystemReserved;                                                   //0x60
    ULONG AtlThunkSListPtr32;                                               //0x64
    VOID* ApiSetMap;                                                        //0x68
    ULONG TlsExpansionCounter;                                              //0x70
    UCHAR Padding2[4];                                                      //0x74
    VOID* TlsBitmap;                                                        //0x78
    ULONG TlsBitmapBits[2];                                                 //0x80
    VOID* ReadOnlySharedMemoryBase;                                         //0x88
    VOID* SharedData;                                                       //0x90
    VOID** ReadOnlyStaticServerData;                                        //0x98
    VOID* AnsiCodePageData;                                                 //0xa0
    VOID* OemCodePageData;                                                  //0xa8
    VOID* UnicodeCaseTableData;                                             //0xb0
    ULONG NumberOfProcessors;                                               //0xb8
    ULONG NtGlobalFlag;                                                     //0xbc
    NOK_LARGE_INTEGER CriticalSectionTimeout;                            //0xc0
    ULONGLONG HeapSegmentReserve;                                           //0xc8
    ULONGLONG HeapSegmentCommit;                                            //0xd0
    ULONGLONG HeapDeCommitTotalFreeThreshold;                               //0xd8
    ULONGLONG HeapDeCommitFreeBlockThreshold;                               //0xe0
    ULONG NumberOfHeaps;                                                    //0xe8
    ULONG MaximumNumberOfHeaps;                                             //0xec
    VOID** ProcessHeaps;                                                    //0xf0
    VOID* GdiSharedHandleTable;                                             //0xf8
    VOID* ProcessStarterHelper;                                             //0x100
    ULONG GdiDCAttributeList;                                               //0x108
    UCHAR Padding3[4];                                                      //0x10c
    NOK_PRTL_CRITICAL_SECTION LoaderLock;                               //0x110
    ULONG OSMajorVersion;                                                   //0x118
    ULONG OSMinorVersion;                                                   //0x11c
    USHORT OSBuildNumber;                                                   //0x120
    USHORT OSCSDVersion;                                                    //0x122
    ULONG OSPlatformId;                                                     //0x124
    ULONG ImageSubsystem;                                                   //0x128
    ULONG ImageSubsystemMajorVersion;                                       //0x12c
    ULONG ImageSubsystemMinorVersion;                                       //0x130
    UCHAR Padding4[4];                                                      //0x134
    ULONGLONG ActiveProcessAffinityMask;                                    //0x138
    ULONG GdiHandleBuffer[60];                                              //0x140
    VOID (*PostProcessInitRoutine)();                                       //0x230
    VOID* TlsExpansionBitmap;                                               //0x238
    ULONG TlsExpansionBitmapBits[32];                                       //0x240
    ULONG SessionId;                                                        //0x2c0
    UCHAR Padding5[4];                                                      //0x2c4
    NOK_ULARGE_INTEGER AppCompatFlags;                                   //0x2c8
    NOK_ULARGE_INTEGER AppCompatFlagsUser;                               //0x2d0
    VOID* pShimData;                                                        //0x2d8
    VOID* AppCompatInfo;                                                    //0x2e0
    NOK_UNICODE_STRING CSDVersion;                                      //0x2e8
    NOK_ACTIVATION_CONTEXT_DATA* ActivationContextData;                 //0x2f8
    NOK_PASSEMBLY_STORAGE_MAP ProcessAssemblyStorageMap;                //0x300
    NOK_ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;    //0x308
    NOK_PASSEMBLY_STORAGE_MAP SystemAssemblyStorageMap;                 //0x310
    ULONGLONG MinimumStackCommit;                                           //0x318
    VOID* SparePointers[4];                                                 //0x320
    ULONG SpareUlongs[5];                                                   //0x340
    VOID* WerRegistrationData;                                              //0x358
    VOID* WerShipAssertPtr;                                                 //0x360
    VOID* pUnused;                                                          //0x368
    VOID* pImageHeaderHash;                                                 //0x370
    union
    {
        ULONG TracingFlags;                                                 //0x378
        struct
        {
            ULONG HeapTracingEnabled:1;                                     //0x378
            ULONG CritSecTracingEnabled:1;                                  //0x378
            ULONG LibLoaderTracingEnabled:1;                                //0x378
            ULONG SpareTracingBits:29;                                      //0x378
        };
    };
    UCHAR Padding6[4];                                                      //0x37c
    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x380
    ULONGLONG TppWorkerpListLock;                                           //0x388
    NOK_LIST_ENTRY TppWorkerpList;                                      //0x390
    VOID* WaitOnAddressHashTable[128];                                      //0x3a0
    VOID* TelemetryCoverageHeader;                                          //0x7a0
    ULONG CloudFileFlags;                                                   //0x7a8
    ULONG CloudFileDiagFlags;                                               //0x7ac
    CHAR PlaceholderCompatibilityMode;                                      //0x7b0
    CHAR PlaceholderCompatibilityModeReserved[7];                           //0x7b1
    NOK_PLEAP_SECOND_DATA LeapSecondData;                               //0x7b8
    union
    {
        ULONG LeapSecondFlags;                                              //0x7c0
        struct
        {
            ULONG SixtySecondEnabled:1;                                     //0x7c0
            ULONG Reserved:31;                                              //0x7c0
        };
    };
    ULONG NtGlobalFlag2;                                                    //0x7c4
}NOK_PEB, * NOK_PPEB;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVICE_USAGE_NOTIFICATION_TYPE
{
    NOK_DeviceUsageTypeUndefined = 0,
    NOK_DeviceUsageTypePaging = 1,
    NOK_DeviceUsageTypeHibernation = 2,
    NOK_DeviceUsageTypeDumpFile = 3,
    NOK_DeviceUsageTypeBoot = 4,
    NOK_DeviceUsageTypePostDisplay = 5,
    NOK_DeviceUsageTypeGuestAssigned = 6
}NOK_DEVICE_USAGE_NOTIFICATION_TYPE, * NOK_PDEVICE_USAGE_NOTIFICATION_TYPE;
//0x8 bytes (sizeof)
typedef struct _NOK_STRING32
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    ULONG Buffer;                                                           //0x4
}NOK_STRING32, * NOK_PSTRING32;
//0x58 bytes (sizeof)
typedef struct _NOK_PEB_LDR_DATA
{
    ULONG Length;                                                           //0x0
    UCHAR Initialized;                                                      //0x4
    VOID* SsHandle;                                                         //0x8
    NOK_LIST_ENTRY InLoadOrderModuleList;                               //0x10
    NOK_LIST_ENTRY InMemoryOrderModuleList;                             //0x20
    NOK_LIST_ENTRY InInitializationOrderModuleList;                     //0x30
    VOID* EntryInProgress;                                                  //0x40
    UCHAR ShutdownInProgress;                                               //0x48
    VOID* ShutdownThreadId;                                                 //0x50
}NOK_PEB_LDR_DATA, * NOK_PPEB_LDR_DATA;
//0x80 bytes (sizeof)
typedef struct _NOK_PEBS_DS_SAVE_AREA32
{
    ULONG BtsBufferBase;                                                    //0x0
    ULONG BtsIndex;                                                         //0x4
    ULONG BtsAbsoluteMaximum;                                               //0x8
    ULONG BtsInterruptThreshold;                                            //0xc
    ULONG PebsBufferBase;                                                   //0x10
    ULONG PebsIndex;                                                        //0x14
    ULONG PebsAbsoluteMaximum;                                              //0x18
    ULONG PebsInterruptThreshold;                                           //0x1c
    ULONGLONG PebsGpCounterReset[8];                                        //0x20
    ULONGLONG PebsFixedCounterReset[4];                                     //0x60
}NOK_PEBS_DS_SAVE_AREA32, * NOK_PPEBS_DS_SAVE_AREA32;
//0xa0 bytes (sizeof)
typedef struct _NOK_PEBS_DS_SAVE_AREA64
{
    ULONGLONG BtsBufferBase;                                                //0x0
    ULONGLONG BtsIndex;                                                     //0x8
    ULONGLONG BtsAbsoluteMaximum;                                           //0x10
    ULONGLONG BtsInterruptThreshold;                                        //0x18
    ULONGLONG PebsBufferBase;                                               //0x20
    ULONGLONG PebsIndex;                                                    //0x28
    ULONGLONG PebsAbsoluteMaximum;                                          //0x30
    ULONGLONG PebsInterruptThreshold;                                       //0x38
    ULONGLONG PebsGpCounterReset[8];                                        //0x40
    ULONGLONG PebsFixedCounterReset[4];                                     //0x80
}NOK_PEBS_DS_SAVE_AREA64, * NOK_PPEBS_DS_SAVE_AREA64;
//0xa0 bytes (sizeof)
typedef struct _NOK_PEBS_DS_SAVE_AREA
{
    union
    {
        NOK_PEBS_DS_SAVE_AREA32 As32Bit;                                //0x0
        NOK_PEBS_DS_SAVE_AREA64 As64Bit;                                //0x0
    };
}NOK_PEBS_DS_SAVE_AREA, * NOK_PPEBS_DS_SAVE_AREA;
//0x4 bytes (sizeof)
typedef enum _NOK_SECURITY_OPERATION_CODE
{
    NOK_SetSecurityDescriptor = 0,
    NOK_QuerySecurityDescriptor = 1,
    NOK_DeleteSecurityDescriptor = 2,
    NOK_AssignSecurityDescriptor = 3
}NOK_SECURITY_OPERATION_CODE, * NOK_PSECURITY_OPERATION_CODE;
//0x90 bytes (sizeof)
typedef struct _NOK_MSUBSECTION
{
    NOK_SUBSECTION Core;                                                //0x0
    NOK_RTL_BALANCED_NODE SubsectionNode;                               //0x38
    NOK_LIST_ENTRY DereferenceList;                                     //0x50
    ULONGLONG NumberOfMappedViews;                                          //0x60
    ULONG NumberOfPfnReferences;                                            //0x68
    ULONG LargeViews;                                                       //0x6c
    NOK_MI_PROTOTYPE_PTES_NODE ProtosNode;                              //0x70
}NOK_MSUBSECTION, * NOK_PMSUBSECTION;
//0x4 bytes (sizeof)
typedef enum _NOK_PEP_ACPI_RESOURCE_TYPE
{
    NOK_PepAcpiMemory = 0,
    NOK_PepAcpiIoPort = 1,
    NOK_PepAcpiInterrupt = 2,
    NOK_PepAcpiGpioIo = 3,
    NOK_PepAcpiGpioInt = 4,
    NOK_PepAcpiSpbI2c = 5,
    NOK_PepAcpiSpbSpi = 6,
    NOK_PepAcpiSpbUart = 7,
    NOK_PepAcpiExtendedMemory = 8,
    NOK_PepAcpiExtendedIo = 9
}NOK_PEP_ACPI_RESOURCE_TYPE, * NOK_PPEP_ACPI_RESOURCE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_GPIO_PIN_CONFIG_TYPE
{
    NOK_PullDefault = 0,
    NOK_PullUp = 1,
    NOK_PullDown = 2,
    NOK_PullNone = 3
}NOK_GPIO_PIN_CONFIG_TYPE, * NOK_PGPIO_PIN_CONFIG_TYPE;
//0x2 bytes (sizeof)
typedef union _NOK_HAL_UNMASKED_INTERRUPT_FLAGS
{
    USHORT SecondaryInterrupt:1;                                            //0x0
    USHORT Reserved:15;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}NOK_HAL_UNMASKED_INTERRUPT_FLAGS, * NOK_PHAL_UNMASKED_INTERRUPT_FLAGS;
//0x20 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_IO_MEMORY_RESOURCE
{
    NOK_PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    UCHAR Information;                                                      //0x4
    NOK_LARGE_INTEGER MinimumAddress;                                    //0x8
    NOK_LARGE_INTEGER MaximumAddress;                                    //0x10
    ULONG Alignment;                                                        //0x18
    ULONG Length;                                                           //0x1c
}NOK_PEP_ACPI_IO_MEMORY_RESOURCE, * NOK_PPEP_ACPI_IO_MEMORY_RESOURCE;
//0x28 bytes (sizeof)
typedef struct _NOK_OBJECT_SYMBOLIC_LINK
{
    NOK_LARGE_INTEGER CreationTime;                                      //0x0
    union
    {
        NOK_UNICODE_STRING LinkTarget;                                  //0x8
        struct
        {
            LONG (*Callback)(NOK_POBJECT_SYMBOLIC_LINK arg1, VOID* arg2, NOK_PUNICODE_STRING arg3, VOID** arg4); //0x8
            VOID* CallbackContext;                                          //0x10
        };
    };
    ULONG DosDeviceDriveIndex;                                              //0x18
    ULONG Flags;                                                            //0x1c
    ULONG AccessMask;                                                       //0x20
}NOK_OBJECT_SYMBOLIC_LINK, * NOK_POBJECT_SYMBOLIC_LINK;
//0x4 bytes (sizeof)
typedef union _NOK_PEP_ACPI_RESOURCE_FLAGS
{
    ULONG AsULong;                                                          //0x0
    ULONG Shared:1;                                                         //0x0
    ULONG Wake:1;                                                           //0x0
    ULONG ResourceUsage:1;                                                  //0x0
    ULONG SlaveMode:1;                                                      //0x0
    ULONG AddressingMode:1;                                                 //0x0
    ULONG SharedMode:1;                                                     //0x0
    ULONG Reserved:26;                                                      //0x0
}NOK_PEP_ACPI_RESOURCE_FLAGS, * NOK_PPEP_ACPI_RESOURCE_FLAGS;
//0x28 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_SPB_RESOURCE
{
    NOK_PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    NOK_PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0x4
    USHORT TypeSpecificFlags;                                               //0x8
    UCHAR ResourceSourceIndex;                                              //0xa
    NOK_PUNICODE_STRING ResourceSourceName;                             //0x10
    CHAR* VendorData;                                                       //0x18
    USHORT VendorDataLength;                                                //0x20
}NOK_PEP_ACPI_SPB_RESOURCE, * NOK_PPEP_ACPI_SPB_RESOURCE;
//0x38 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_SPB_SPI_RESOURCE
{
    NOK_PEP_ACPI_SPB_RESOURCE SpbCommon;                                //0x0
    ULONG ConnectionSpeed;                                                  //0x28
    UCHAR DataBitLength;                                                    //0x2c
    UCHAR Phase;                                                            //0x2d
    UCHAR Polarity;                                                         //0x2e
    USHORT DeviceSelection;                                                 //0x30
}NOK_PEP_ACPI_SPB_SPI_RESOURCE, * NOK_PPEP_ACPI_SPB_SPI_RESOURCE;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_CRASHDUMP_INFORMATION
{
    NOK_PPEPHANDLE__ DeviceHandle;                                       //0x0
    VOID* DeviceContext;                                                    //0x8
}NOK_PEP_CRASHDUMP_INFORMATION, * NOK_PPEP_CRASHDUMP_INFORMATION;
//0x28 bytes (sizeof)
typedef struct _NOK_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    ULONG CompletionFlags;                                                  //0x8
    LONG MethodStatus;                                                      //0xc
    VOID* CompletionContext;                                                //0x10
    ULONGLONG OutputArgumentSize;                                           //0x18
    NOK_PACPI_METHOD_ARGUMENT_V1 OutputArguments;                       //0x20
}NOK_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE, * NOK_PPEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_ACPI_NOTIFY
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    ULONG NotifyCode;                                                       //0x8
}NOK_PEP_WORK_ACPI_NOTIFY, * NOK_PPEP_WORK_ACPI_NOTIFY;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_ACTIVE_COMPLETE
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
}NOK_PEP_WORK_ACTIVE_COMPLETE, * NOK_PPEP_WORK_ACTIVE_COMPLETE;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_COMPLETE_IDLE_STATE
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
}NOK_PEP_WORK_COMPLETE_IDLE_STATE, * NOK_PPEP_WORK_COMPLETE_IDLE_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_COMPLETE_PERF_STATE
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
    UCHAR Succeeded;                                                        //0xc
}NOK_PEP_WORK_COMPLETE_PERF_STATE, * NOK_PPEP_WORK_COMPLETE_PERF_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_DEVICE_IDLE
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    UCHAR IgnoreIdleTimeout;                                                //0x8
}NOK_PEP_WORK_DEVICE_IDLE, * NOK_PPEP_WORK_DEVICE_IDLE;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_DEVICE_POWER
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    UCHAR PowerRequired;                                                    //0x8
}NOK_PEP_WORK_DEVICE_POWER, * NOK_PPEP_WORK_DEVICE_POWER;
//0x10 bytes (sizeof)
typedef struct _NOK_PEP_WORK_IDLE_STATE
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
    ULONG State;                                                            //0xc
}NOK_PEP_WORK_IDLE_STATE, * NOK_PPEP_WORK_IDLE_STATE;
//0x38 bytes (sizeof)
typedef struct _NOK_PEP_WORK_POWER_CONTROL
{
    NOK_PPOHANDLE__ DeviceHandle;                                        //0x0
    NOK_PGUID PowerControlCode;                                         //0x8
    VOID* RequestContext;                                                   //0x10
    VOID* InBuffer;                                                         //0x18
    ULONGLONG InBufferSize;                                                 //0x20
    VOID* OutBuffer;                                                        //0x28
    ULONGLONG OutBufferSize;                                                //0x30
}NOK_PEP_WORK_POWER_CONTROL, * NOK_PPEP_WORK_POWER_CONTROL;
//0x4 bytes (sizeof)
typedef enum _NOK_PEP_WORK_TYPE
{
    NOK_PepWorkActiveComplete = 0,
    NOK_PepWorkRequestIdleState = 1,
    NOK_PepWorkDevicePower = 2,
    NOK_PepWorkRequestPowerControl = 3,
    NOK_PepWorkDeviceIdle = 4,
    NOK_PepWorkCompleteIdleState = 5,
    NOK_PepWorkCompletePerfState = 6,
    NOK_PepWorkAcpiNotify = 7,
    NOK_PepWorkAcpiEvaluateControlMethodComplete = 8,
    NOK_PepWorkMax = 9
}NOK_PEP_WORK_TYPE, * NOK_PPEP_WORK_TYPE;
//0x1a8 bytes (sizeof)
typedef struct _NOK_ETW_GUID_ENTRY
{
    NOK_LIST_ENTRY GuidList;                                            //0x0
    NOK_LIST_ENTRY SiloGuidList;                                        //0x10
    volatile LONGLONG RefCount;                                             //0x20
    NOK_GUID Guid;                                                      //0x28
    NOK_LIST_ENTRY RegListHead;                                         //0x38
    VOID* SecurityDescriptor;                                               //0x48
    union
    {
        NOK_ETW_LAST_ENABLE_INFO LastEnable;                            //0x50
        ULONGLONG MatchId;                                                  //0x50
    };
    NOK_TRACE_ENABLE_INFO ProviderEnableInfo;                           //0x60
    NOK_TRACE_ENABLE_INFO EnableInfo[8];                                //0x80
    NOK_PETW_FILTER_HEADER FilterData;                                  //0x180
    NOK_PETW_SILODRIVERSTATE SiloState;                                 //0x188
    NOK_PETW_GUID_ENTRY HostEntry;                                      //0x190
    NOK_EX_PUSH_LOCK Lock;                                              //0x198
    NOK_PETHREAD LockOwner;                                             //0x1a0
}NOK_ETW_GUID_ENTRY, * NOK_PETW_GUID_ENTRY;
//0xc bytes (sizeof)
typedef struct _NOK_PERFINFO_PPM_STATE_SELECTION
{
    ULONG SelectedState;                                                    //0x0
    ULONG VetoedStates;                                                     //0x4
    ULONG VetoReason[1];                                                    //0x8
}NOK_PERFINFO_PPM_STATE_SELECTION, * NOK_PPERFINFO_PPM_STATE_SELECTION;
//0x28 bytes (sizeof)
typedef struct _NOK_PERF_CONTROL_STATE_SELECTION
{
    ULONGLONG SelectedState;                                                //0x0
    ULONG SelectedPercent;                                                  //0x8
    ULONG SelectedFrequency;                                                //0xc
    ULONG MinPercent;                                                       //0x10
    ULONG MaxPercent;                                                       //0x14
    ULONG TolerancePercent;                                                 //0x18
    ULONG EppPercent;                                                       //0x1c
    ULONG AutonomousActivityWindow;                                         //0x20
    UCHAR Autonomous;                                                       //0x24
    UCHAR InheritFromDomain;                                                //0x25
}NOK_PERF_CONTROL_STATE_SELECTION, * NOK_PPERF_CONTROL_STATE_SELECTION;
//0x10 bytes (sizeof)
typedef struct _NOK_PERIODIC_CAPTURE_STATE_GUIDS
{
    USHORT ProviderCount;                                                   //0x0
    NOK_PGUID Providers;                                                //0x8
}NOK_PERIODIC_CAPTURE_STATE_GUIDS, * NOK_PPERIODIC_CAPTURE_STATE_GUIDS;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_SLAB_ALLOCATOR_TYPE
{
    NOK_MiSlabAllocatorTypeSlatProtected = 0,
    NOK_MiSlabAllocatorTypeUnprotected = 1,
    NOK_MiSlabAllocatorTypeMax = 2
}NOK_MI_SLAB_ALLOCATOR_TYPE, * NOK_PMI_SLAB_ALLOCATOR_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_PHYSICAL_MEMORY_RUN
{
    ULONGLONG BasePage;                                                     //0x0
    ULONGLONG PageCount;                                                    //0x8
}NOK_PHYSICAL_MEMORY_RUN, * NOK_PPHYSICAL_MEMORY_RUN;
//0x20 bytes (sizeof)
typedef struct _NOK_PHYSICAL_MEMORY_DESCRIPTOR
{
    ULONG NumberOfRuns;                                                     //0x0
    ULONGLONG NumberOfPages;                                                //0x8
    NOK_PHYSICAL_MEMORY_RUN Run[1];                                     //0x10
}NOK_PHYSICAL_MEMORY_DESCRIPTOR, * NOK_PPHYSICAL_MEMORY_DESCRIPTOR;
//0x70 bytes (sizeof)
typedef struct _NOK_PI_RESOURCE_ARBITER_ENTRY
{
    NOK_LIST_ENTRY DeviceArbiterList;                                   //0x0
    UCHAR ResourceType;                                                     //0x10
    NOK_PARBITER_INTERFACE ArbiterInterface;                            //0x18
    NOK_PDEVICE_NODE DeviceNode;                                        //0x20
    NOK_LIST_ENTRY ResourceList;                                        //0x28
    NOK_LIST_ENTRY BestResourceList;                                    //0x38
    NOK_LIST_ENTRY BestConfig;                                          //0x48
    NOK_LIST_ENTRY ActiveArbiterList;                                   //0x58
    UCHAR State;                                                            //0x68
    UCHAR ResourcesChanged;                                                 //0x69
}NOK_PI_RESOURCE_ARBITER_ENTRY, * NOK_PPI_RESOURCE_ARBITER_ENTRY;
//0x80 bytes (sizeof)
typedef struct _NOK_PPM_SELECTION_STATISTICS
{
    ULONGLONG SelectedCount;                                                //0x0
    ULONGLONG VetoCount;                                                    //0x8
    ULONGLONG PreVetoCount;                                                 //0x10
    ULONGLONG WrongProcessorCount;                                          //0x18
    ULONGLONG LatencyCount;                                                 //0x20
    ULONGLONG IdleDurationCount;                                            //0x28
    ULONGLONG DeviceDependencyCount;                                        //0x30
    ULONGLONG ProcessorDependencyCount;                                     //0x38
    ULONGLONG PlatformOnlyCount;                                            //0x40
    ULONGLONG InterruptibleCount;                                           //0x48
    ULONGLONG LegacyOverrideCount;                                          //0x50
    ULONGLONG CstateCheckCount;                                             //0x58
    ULONGLONG NoCStateCount;                                                //0x60
    ULONGLONG CoordinatedDependencyCount;                                   //0x68
    ULONGLONG NotClockOwnerCount;                                           //0x70
    NOK_PPPM_VETO_ACCOUNTING PreVetoAccounting;                         //0x78
}NOK_PPM_SELECTION_STATISTICS, * NOK_PPPM_SELECTION_STATISTICS;
//0x4 bytes (sizeof)
typedef enum _NOK_PPM_IDLE_BUCKET_TIME_TYPE
{
    NOK_PpmIdleBucketTimeInQpc = 0,
    NOK_PpmIdleBucketTimeIn100ns = 1,
    NOK_PpmIdleBucketTimeMaximum = 2
}NOK_PPM_IDLE_BUCKET_TIME_TYPE, * NOK_PPPM_IDLE_BUCKET_TIME_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_PLATFORM_INTERRUPT
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    USHORT Flags;                                                           //0x2
    UCHAR InterruptType;                                                    //0x4
    UCHAR APICID;                                                           //0x5
    UCHAR ACPIEID;                                                          //0x6
    UCHAR IOSAPICVector;                                                    //0x7
    ULONG GlobalVector;                                                     //0x8
    ULONG Reserved;                                                         //0xc
}NOK_PLATFORM_INTERRUPT, * NOK_PPLATFORM_INTERRUPT;
//0x4 bytes (sizeof)
typedef enum _NOK_PLUGPLAY_EVENT_CATEGORY
{
    NOK_HardwareProfileChangeEvent = 0,
    NOK_TargetDeviceChangeEvent = 1,
    NOK_DeviceClassChangeEvent = 2,
    NOK_CustomDeviceEvent = 3,
    NOK_DeviceInstallEvent = 4,
    NOK_DeviceArrivalEvent = 5,
    NOK_VetoEvent = 6,
    NOK_BlockedDriverEvent = 7,
    NOK_InvalidIDEvent = 8,
    NOK_DevicePropertyChangeEvent = 9,
    NOK_DeviceInstanceRemovalEvent = 10,
    NOK_DeviceInstanceStartedEvent = 11,
    NOK_MaxPlugEventCategory = 12
}NOK_PLUGPLAY_EVENT_CATEGORY, * NOK_PPLUGPLAY_EVENT_CATEGORY;
//0x10 bytes (sizeof)
typedef struct _NOK_PNP_ASSIGN_RESOURCES_CONTEXT
{
    ULONG IncludeFailedDevices;                                             //0x0
    ULONG DeviceCount;                                                      //0x4
    NOK_PDEVICE_OBJECT DeviceList[1];                                   //0x8
}NOK_PNP_ASSIGN_RESOURCES_CONTEXT, * NOK_PPNP_ASSIGN_RESOURCES_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_DEVICE_ACTION_REQUEST
{
    NOK_AssignResources = 0,
    NOK_ClearDeviceProblem = 1,
    NOK_ClearProblem = 2,
    NOK_ClearEjectProblem = 3,
    NOK_HaltDevice = 4,
    NOK_QueryPowerRelations = 5,
    NOK_Rebalance = 6,
    NOK_ReenumerateBootDevices = 7,
    NOK_ReenumerateDeviceOnly = 8,
    NOK_ReenumerateDeviceTree = 9,
    NOK_ReenumerateRootDevices = 10,
    NOK_RequeryDeviceState = 11,
    NOK_ResetDevice = 12,
    NOK_ResourceRequirementsChanged = 13,
    NOK_RestartEnumeration = 14,
    NOK_SetDeviceProblem = 15,
    NOK_StartDevice = 16,
    NOK_StartSystemDevicesPass0 = 17,
    NOK_StartSystemDevicesPass1 = 18,
    NOK_NotifyTransportRelationsChange = 19,
    NOK_NotifyEjectionRelationsChange = 20,
    NOK_ConfigureDevice = 21,
    NOK_ConfigureDeviceClass = 22,
    NOK_ConfigureDeviceExtensions = 23,
    NOK_ConfigureDeviceReset = 24,
    NOK_ClearDmaGuardProblem = 25,
    NOK_PnpDeviceActionRequestMax = 26
}NOK_PNP_DEVICE_ACTION_REQUEST, * NOK_PPNP_DEVICE_ACTION_REQUEST;
//0x50 bytes (sizeof)
typedef struct _NOK_PNP_DEVICE_COMPLETION_QUEUE
{
    NOK_LIST_ENTRY DispatchedList;                                      //0x0
    ULONG DispatchedCount;                                                  //0x10
    NOK_LIST_ENTRY CompletedList;                                       //0x18
    NOK_KSEMAPHORE CompletedSemaphore;                                  //0x28
    ULONGLONG SpinLock;                                                     //0x48
}NOK_PNP_DEVICE_COMPLETION_QUEUE, * NOK_PPNP_DEVICE_COMPLETION_QUEUE;
//0x38 bytes (sizeof)
typedef struct _NOK_PO_DIRECTED_DRIPS_STATE
{
    NOK_LIST_ENTRY QueueLink;                                           //0x0
    NOK_LIST_ENTRY VisitedQueueLink;                                    //0x10
    volatile ULONG Flags;                                                   //0x20
    ULONG CachedFlags;                                                      //0x24
    ULONG DeviceUsageCount;                                                 //0x28
    VOID* Diagnostic;                                                       //0x30
}NOK_PO_DIRECTED_DRIPS_STATE, * NOK_PPO_DIRECTED_DRIPS_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_VETO_TYPE
{
    NOK_PNP_VetoTypeUnknown = 0,
    NOK_PNP_VetoLegacyDevice = 1,
    NOK_PNP_VetoPendingClose = 2,
    NOK_PNP_VetoWindowsApp = 3,
    NOK_PNP_VetoWindowsService = 4,
    NOK_PNP_VetoOutstandingOpen = 5,
    NOK_PNP_VetoDevice = 6,
    NOK_PNP_VetoDriver = 7,
    NOK_PNP_VetoIllegalDeviceRequest = 8,
    NOK_PNP_VetoInsufficientPower = 9,
    NOK_PNP_VetoNonDisableable = 10,
    NOK_PNP_VetoLegacyDriver = 11,
    NOK_PNP_VetoInsufficientRights = 12,
    NOK_PNP_VetoAlreadyRemoved = 13
}NOK_PNP_VETO_TYPE, * NOK_PPNP_VETO_TYPE;
//0x88 bytes (sizeof)
typedef struct _NOK_PNP_DEVICE_EVENT_LIST
{
    LONG Status;                                                            //0x0
    NOK_KMUTANT EventQueueMutex;                                        //0x8
    NOK_FAST_MUTEX Lock;                                                //0x40
    NOK_LIST_ENTRY List;                                                //0x78
}NOK_PNP_DEVICE_EVENT_LIST, * NOK_PPNP_DEVICE_EVENT_LIST;
//0x18 bytes (sizeof)
typedef struct _NOK_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
{
    UCHAR ResourceType;                                                     //0x0
    ULONG AlternativeCount;                                                 //0x4
    NOK_PIO_RESOURCE_DESCRIPTOR ResourceRequests;                       //0x8
    VOID* ArbiterInstance;                                                  //0x10
}NOK_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT, * NOK_PPNP_RESOURCE_CONFLICT_TRACE_CONTEXT;
//0x18 bytes (sizeof)
typedef struct _NOK_PNP_REPLACE_PROCESSOR_LIST
{
    ULONGLONG* Affinity;                                                    //0x0
    ULONG GroupCount;                                                       //0x8
    ULONG AllocatedCount;                                                   //0xc
    ULONG Count;                                                            //0x10
    ULONG ApicIds[1];                                                       //0x14
}NOK_PNP_REPLACE_PROCESSOR_LIST, * NOK_PPNP_REPLACE_PROCESSOR_LIST;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON
{
    NOK_DeviceQueryRebalanceSucceeded = 0,
    NOK_DeviceQueryStopFailed = 1,
    NOK_DeviceFailedGetNewResourceRequirement = 2,
    NOK_DeviceInUnexpectedState = 3,
    NOK_DeviceNotSupportQueryRebalance = 4
}NOK_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON, * NOK_PPNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_ARBITER_RESULT
{
    NOK_ArbiterResultUndefined = -1,
    NOK_ArbiterResultSuccess = 0,
    NOK_ArbiterResultExternalConflict = 1,
    NOK_ArbiterResultNullRequest = 2
}NOK_ARBITER_RESULT, * NOK_PARBITER_RESULT;
//0x28 bytes (sizeof)
typedef struct _NOK_PNP_WATCHDOG
{
    ULONGLONG WatchdogStart;                                                //0x0
    NOK_PWDT_HANDLE WatchdogTimer;                                      //0x8
    NOK_PNP_WATCHDOG_TYPE WatchdogContextType;                            //0x10
    VOID* WatchdogContext;                                                  //0x18
    UCHAR TriggerEventLogged;                                               //0x20
}NOK_PNP_WATCHDOG, * NOK_PPNP_WATCHDOG;
//0x10 bytes (sizeof)
typedef struct _NOK_POOL_HEADER
{
    union
    {
        struct
        {
            USHORT PreviousSize:8;                                          //0x0
            USHORT PoolIndex:8;                                             //0x0
            USHORT BlockSize:8;                                             //0x2
            USHORT PoolType:8;                                              //0x2
        };
        ULONG Ulong1;                                                       //0x0
    };
    ULONG PoolTag;                                                          //0x4
    union
    {
        NOK_PEPROCESS ProcessBilled;                                    //0x8
        struct
        {
            USHORT AllocatorBackTraceIndex;                                 //0x8
            USHORT PoolTagHash;                                             //0xa
        };
    };
}NOK_POOL_HEADER, * NOK_PPOOL_HEADER;
//0x18 bytes (sizeof)
typedef struct _NOK_POOL_TRACKER_BIG_PAGES
{
    volatile ULONGLONG Va;                                                  //0x0
    ULONG Key;                                                              //0x8
    ULONG Pattern:8;                                                        //0xc
    ULONG PoolType:12;                                                      //0xc
    ULONG SlushSize:12;                                                     //0xc
    ULONGLONG NumberOfBytes;                                                //0x10
}NOK_POOL_TRACKER_BIG_PAGES, * NOK_PPOOL_TRACKER_BIG_PAGES;
//0x38 bytes (sizeof)
typedef struct _NOK_POOL_TRACKER_TABLE
{
    volatile LONG Key;                                                      //0x0
    ULONGLONG NonPagedBytes;                                                //0x8
    ULONGLONG NonPagedAllocs;                                               //0x10
    ULONGLONG NonPagedFrees;                                                //0x18
    ULONGLONG PagedBytes;                                                   //0x20
    ULONGLONG PagedAllocs;                                                  //0x28
    ULONGLONG PagedFrees;                                                   //0x30
}NOK_POOL_TRACKER_TABLE, * NOK_PPOOL_TRACKER_TABLE;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_POLICY_DEVICE_TYPE
{
    NOK_PolicyDeviceSystemButton = 0,
    NOK_PolicyDeviceThermalZone = 1,
    NOK_PolicyDeviceBattery = 2,
    NOK_PolicyDeviceMemory = 3,
    NOK_PolicyInitiatePowerActionAPI = 4,
    NOK_PolicySetPowerStateAPI = 5,
    NOK_PolicyImmediateDozeS4 = 6,
    NOK_PolicySystemIdle = 7,
    NOK_PolicyDeviceWakeAlarm = 8,
    NOK_PolicyDeviceFan = 9,
    NOK_PolicyCsBatterySaver = 10,
    NOK_PolicyImmediateDozeS4Predicted = 11,
    NOK_PolicyImmediateDozeS4PredictedNoWake = 12,
    NOK_PolicyImmediateDozeS4AdaptiveBudget = 13,
    NOK_PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
    NOK_PolicySystemInitiatedShutdown = 15,
    NOK_PolicyDeviceMax = 16
}NOK_POWER_POLICY_DEVICE_TYPE, * NOK_PPOWER_POLICY_DEVICE_TYPE;
//0x8 bytes (sizeof)
typedef struct _NOK_PO_POWER_PLANE_PROFILE
{
    ULONG ExclusivePowerMw;                                                 //0x0
    ULONG PeakPowerMw;                                                      //0x4
}NOK_PO_POWER_PLANE_PROFILE, * NOK_PPO_POWER_PLANE_PROFILE;
//0x10 bytes (sizeof)
typedef struct _NOK_POP_RW_LOCK
{
    NOK_EX_PUSH_LOCK Lock;                                              //0x0
    NOK_PKTHREAD Thread;                                                //0x8
}NOK_POP_RW_LOCK, * NOK_PPOP_RW_LOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_BUS_QUERY_ID_TYPE
{
    NOK_BusQueryDeviceID = 0,
    NOK_BusQueryHardwareIDs = 1,
    NOK_BusQueryCompatibleIDs = 2,
    NOK_BusQueryInstanceID = 3,
    NOK_BusQueryDeviceSerialNumber = 4,
    NOK_BusQueryContainerID = 5
}NOK_BUS_QUERY_ID_TYPE, * NOK_PBUS_QUERY_ID_TYPE;
//0x28 bytes (sizeof)
typedef struct _NOK_POP_COMPONENT_POWER_PROFILE
{
    NOK_GUID ComponentGuid;                                             //0x0
    NOK_PPOP_DEVICE_POWER_PROFILE Device;                               //0x10
    ULONGLONG FxCount;                                                      //0x18
    NOK_PO_POWER_PLANE_PROFILE FxPower[1];                              //0x20
}NOK_POP_COMPONENT_POWER_PROFILE, * NOK_PPOP_COMPONENT_POWER_PROFILE;
//0x4 bytes (sizeof)
typedef union _NOK_POWER_STATE
{
    NOK_SYSTEM_POWER_STATE SystemState;                                   //0x0
    NOK_DEVICE_POWER_STATE DeviceState;                                   //0x0
}NOK_POWER_STATE, * NOK_PPOWER_STATE;
//0x60 bytes (sizeof)
typedef struct _NOK_POP_FX_ACTIVE_TIME_ACCOUNTING
{
    ULONGLONG Total;                                                        //0x0
    ULONGLONG Unattributed;                                                 //0x8
    ULONGLONG Buckets[5];                                                   //0x10
    ULONGLONG PerBucket[5];                                                 //0x38
}NOK_POP_FX_ACTIVE_TIME_ACCOUNTING, * NOK_PPOP_FX_ACTIVE_TIME_ACCOUNTING;
//0xe0 bytes (sizeof)
typedef struct _NOK_POP_FX_ACCOUNTING
{
    ULONGLONG Lock;                                                         //0x0
    UCHAR Active;                                                           //0x8
    ULONG DripsRequiredState;                                               //0xc
    LONG Level;                                                             //0x10
    LONGLONG ActiveStamp;                                                   //0x18
    NOK_POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting;           //0x20
    NOK_POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting;   //0x80
}NOK_POP_FX_ACCOUNTING, * NOK_PPOP_FX_ACCOUNTING;
//0x38 bytes (sizeof)
typedef struct _NOK_POP_FX_WORK_ORDER
{
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x0
    LONG WorkCount;                                                         //0x20
    VOID* Context;                                                          //0x28
    NOK_POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;             //0x30
}NOK_POP_FX_WORK_ORDER, * NOK_PPOP_FX_WORK_ORDER;
//0x8 bytes (sizeof)
typedef struct _NOK_POP_FX_DEPENDENT
{
    ULONG Index;                                                            //0x0
    ULONG ProviderIndex;                                                    //0x4
}NOK_POP_FX_DEPENDENT, * NOK_PPOP_FX_DEPENDENT;
//0x28 bytes (sizeof)
typedef struct _NOK_POP_FX_DRIPS_WATCHDOG_CONTEXT
{
    NOK_LIST_ENTRY Link;                                                //0x0
    ULONG ComponentIndex;                                                   //0x10
    NOK_PDEVICE_NODE* ChildDevices;                                     //0x18
    ULONG ChildDeviceCount;                                                 //0x20
}NOK_POP_FX_DRIPS_WATCHDOG_CONTEXT, * NOK_PPOP_FX_DRIPS_WATCHDOG_CONTEXT;
//0x50 bytes (sizeof)
typedef struct _NOK_POP_FX_DRIVER_CALLBACKS
{
    VOID (*ComponentActive)(VOID* arg1, ULONG arg2);                        //0x0
    VOID (*ComponentIdle)(VOID* arg1, ULONG arg2);                          //0x8
    VOID (*ComponentIdleState)(VOID* arg1, ULONG arg2, ULONG arg3);         //0x10
    VOID (*DevicePowerRequired)(VOID* arg1);                                //0x18
    VOID (*DevicePowerNotRequired)(VOID* arg1);                             //0x20
    LONG (*PowerControl)(VOID* arg1, NOK_PGUID arg2, VOID* arg3, ULONGLONG arg4, VOID* arg5, ULONGLONG arg6, ULONGLONG* arg7); //0x28
    VOID (*ComponentCriticalTransition)(VOID* arg1, ULONG arg2, UCHAR arg3); //0x30
    VOID (*DripsWatchdogCallback)(VOID* arg1, NOK_PDEVICE_OBJECT arg2, ULONG arg3); //0x38
    VOID (*DirectedPowerUpCallback)(VOID* arg1, ULONG arg2);                //0x40
    VOID (*DirectedPowerDownCallback)(VOID* arg1, ULONG arg2);              //0x48
}NOK_POP_FX_DRIVER_CALLBACKS, * NOK_PPOP_FX_DRIVER_CALLBACKS;
//0xb0 bytes (sizeof)
typedef struct _NOK_POP_FX_WORK_ORDER_WATCHDOG_INFO
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_KTIMER Timer;                                                   //0x10
    NOK_KDPC Dpc;                                                       //0x50
    NOK_PPOP_FX_WORK_ORDER WorkOrder;                                   //0x90
    NOK_PPEP_WORK_INFORMATION CurrentWorkInfo;                          //0x98
    ULONGLONG WatchdogStart;                                                //0xa0
    NOK_PKTHREAD WorkerThread;                                          //0xa8
}NOK_POP_FX_WORK_ORDER_WATCHDOG_INFO, * NOK_PPOP_FX_WORK_ORDER_WATCHDOG_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_PO_IRP_QUEUE
{
    NOK_PIRP CurrentIrp;                                                //0x0
    NOK_PIRP PendingIrpList;                                            //0x8
}NOK_PO_IRP_QUEUE, * NOK_PPO_IRP_QUEUE;
//0x18 bytes (sizeof)
typedef struct _NOK_POP_FX_IDLE_STATE
{
    ULONGLONG TransitionLatency;                                            //0x0
    ULONGLONG ResidencyRequirement;                                         //0x8
    ULONG NominalPower;                                                     //0x10
}NOK_POP_FX_IDLE_STATE, * NOK_PPOP_FX_IDLE_STATE;
//0x18 bytes (sizeof)
typedef struct _NOK_POP_FX_LOG_ENTRY
{
    ULONGLONG Timestamp;                                                    //0x0
    UCHAR Operation;                                                        //0x8
    UCHAR Component;                                                        //0x9
    USHORT Processor;                                                       //0xa
    USHORT Process;                                                         //0xc
    USHORT Thread;                                                          //0xe
    ULONGLONG Information;                                                  //0x10
}NOK_POP_FX_LOG_ENTRY, * NOK_PPOP_FX_LOG_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_IRPLOCK
{
    NOK_IRPLOCK_CANCELABLE = 0,
    NOK_IRPLOCK_CANCEL_STARTED = 1,
    NOK_IRPLOCK_CANCEL_COMPLETE = 2,
    NOK_IRPLOCK_COMPLETED = 3
}NOK_IRPLOCK, * NOK_PIRPLOCK;
//0x20 bytes (sizeof)
typedef struct _NOK_POP_FX_PERF_SET
{
    NOK_PPO_FX_COMPONENT_PERF_SET PerfSet;                              //0x0
    ULONGLONG CurrentPerf;                                                  //0x8
    ULONGLONG CurrentPerfStamp;                                             //0x10
    UCHAR CurrentPerfNominal;                                               //0x18
}NOK_POP_FX_PERF_SET, * NOK_PPOP_FX_PERF_SET;
//0x8 bytes (sizeof)
typedef union _NOK_POP_FX_COMPONENT_FLAGS
{
    struct
    {
        LONG Value;                                                         //0x0
        LONG Value2;                                                        //0x4
    };
    ULONG RefCount:30;                                                      //0x0
    ULONG Idling:1;                                                         //0x0
    struct
    {
        ULONG Active:1;                                                     //0x0
        ULONG CriticalIdleOverride:1;                                           //0x4
        ULONG ResidentOverride:1;                                               //0x4
    };
    ULONG Reserved:30;                                                      //0x4
}NOK_POP_FX_COMPONENT_FLAGS, * NOK_PPOP_FX_COMPONENT_FLAGS;
//0x1b8 bytes (sizeof)
typedef struct _NOK_POP_FX_COMPONENT
{
    NOK_GUID Id;                                                        //0x0
    ULONG Index;                                                            //0x10
    NOK_POP_FX_WORK_ORDER WorkOrder;                                    //0x18
    NOK_PPOP_FX_DEVICE Device;                                          //0x50
    volatile NOK_POP_FX_COMPONENT_FLAGS Flags;                            //0x58
    volatile LONG Resident;                                                 //0x60
    NOK_KEVENT ActiveEvent;                                             //0x68
    ULONGLONG IdleLock;                                                     //0x80
    volatile LONG IdleConditionComplete;                                    //0x88
    volatile LONG IdleStateComplete;                                        //0x8c
    ULONGLONG IdleStamp;                                                    //0x90
    volatile ULONG CurrentIdleState;                                        //0x98
    ULONG IdleStateCount;                                                   //0x9c
    NOK_PPOP_FX_IDLE_STATE IdleStates;                                  //0xa0
    ULONG DeepestWakeableIdleState;                                         //0xa8
    ULONG ProviderCount;                                                    //0xac
    NOK_PPOP_FX_PROVIDER Providers;                                     //0xb0
    ULONG IdleProviderCount;                                                //0xb8
    ULONG DependentCount;                                                   //0xbc
    NOK_PPOP_FX_DEPENDENT Dependents;                                   //0xc0
    NOK_POP_FX_ACCOUNTING Accounting;                                   //0xc8
    NOK_PPOP_FX_PERF_INFO Performance;                                  //0x1a8
    NOK_PPOP_COMPONENT_POWER_PROFILE PowerProfile;                      //0x1b0
}NOK_POP_FX_COMPONENT, * NOK_PPOP_FX_COMPONENT;
//0x8 bytes (sizeof)
typedef struct _NOK_POP_FX_PROVIDER
{
    ULONG Index;                                                            //0x0
    UCHAR Activating;                                                       //0x4
}NOK_POP_FX_PROVIDER, * NOK_PPOP_FX_PROVIDER;
//0x10 bytes (sizeof)
typedef struct _NOK_PO_FX_PERF_STATE
{
    ULONGLONG Value;                                                        //0x0
    VOID* Context;                                                          //0x8
}NOK_PO_FX_PERF_STATE, * NOK_PPO_FX_PERF_STATE;
//0x50 bytes (sizeof)
typedef struct _NOK_SEP_RM_LSA_CONNECTION_STATE
{
    VOID* LsaProcessHandle;                                                 //0x0
    VOID* LsaCommandPortHandle;                                             //0x8
    VOID* SepRmThreadHandle;                                                //0x10
    VOID* RmCommandPortHandle;                                              //0x18
    VOID* RmCommandServerPortHandle;                                        //0x20
    VOID* LsaCommandPortSectionHandle;                                      //0x28
    NOK_LARGE_INTEGER LsaCommandPortSectionSize;                         //0x30
    VOID* LsaViewPortMemory;                                                //0x38
    VOID* RmViewPortMemory;                                                 //0x40
    LONG LsaCommandPortMemoryDelta;                                         //0x48
    UCHAR LsaCommandPortActive;                                             //0x4c
}NOK_SEP_RM_LSA_CONNECTION_STATE, * NOK_PSEP_RM_LSA_CONNECTION_STATE;
//0x28 bytes (sizeof)
typedef struct _NOK_POP_FX_WORK_POOL_ITEM
{
    NOK_PPOP_FX_WORK_POOL WorkPool;                                     //0x0
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x8
}NOK_POP_FX_WORK_POOL_ITEM, * NOK_PPOP_FX_WORK_POOL_ITEM;
//0x130 bytes (sizeof)
typedef struct _NOK_POP_FX_WORK_POOL
{
    NOK_PPOP_FX_PLUGIN Plugin;                                          //0x0
    ULONGLONG EmergencyWorkQueueLock;                                       //0x8
    NOK_LIST_ENTRY EmergencyWorkQueue;                                  //0x10
    NOK_KSEMAPHORE WorkPoolQueues[2];                                   //0x20
    volatile LONG WorkItemStatus;                                           //0x60
    NOK_POP_FX_WORK_POOL_ITEM WorkItems[4];                             //0x68
    NOK_PKTHREAD EmergencyWorkerThread;                                 //0x108
    NOK_PKTHREAD DynamicWorkerThreads[4];                               //0x110
}NOK_POP_FX_WORK_POOL, * NOK_PPOP_FX_WORK_POOL;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_IO_STATUS
{
    NOK_IoReady = 0,
    NOK_IoPending = 1,
    NOK_IoDone = 2
}NOK_POP_IO_STATUS, * NOK_PPOP_IO_STATUS;
//0x48 bytes (sizeof)
typedef struct _NOK_MI_VAD_EVENT_BLOCK
{
    NOK_PMI_VAD_EVENT_BLOCK Next;                                       //0x0
    union
    {
        NOK_KGATE Gate;                                                 //0x8
        NOK_MMADDRESS_LIST SecureInfo;                                  //0x8
        NOK_RTL_BITMAP_EX BitMap;                                       //0x8
        NOK_PMMINPAGE_SUPPORT InPageSupport;                            //0x8
        NOK_MI_LARGEPAGE_VAD_INFO LargePage;                            //0x8
        NOK_MI_PHYSICAL_VIEW AweView;                                   //0x8
        NOK_PETHREAD CreatingThread;                                    //0x8
        NOK_MI_SUB64K_FREE_RANGES PebTeb;                               //0x8
        NOK_MMVAD_SHORT* PlaceholderVad;                                //0x8
    };
    ULONG WaitReason;                                                       //0x40
}NOK_MI_VAD_EVENT_BLOCK, * NOK_PMI_VAD_EVENT_BLOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON
{
    NOK_PepNotifyDeviceDStateReasonNone = 0,
    NOK_PepNotifyDeviceDStateReasonSystemTransition = 1,
    NOK_PepNotifyDeviceDStateReasonDfx = 2,
    NOK_PepNotifyDeviceDStateReasonMax = 3
}NOK_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON, * NOK_PPOP_PEP_NOTIFY_DEVICE_DSTATE_REASON;
//0x30 bytes (sizeof)
typedef struct _NOK_POP_IRP_WORKER_ENTRY
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_PETHREAD Thread;                                                //0x10
    NOK_PIRP Irp;                                                       //0x18
    NOK_PDEVICE_OBJECT Device;                                          //0x20
    UCHAR Static;                                                           //0x28
}NOK_POP_IRP_WORKER_ENTRY, * NOK_PPOP_IRP_WORKER_ENTRY;
//0x80 bytes (sizeof)
typedef struct _NOK_POP_PER_PROCESSOR_CONTEXT
{
    UCHAR* UncompressedData;                                                //0x0
    VOID* MappingVa;                                                        //0x8
    VOID* XpressEncodeWorkspace;                                            //0x10
    UCHAR* CompressedDataBuffer;                                            //0x18
    ULONGLONG CopyTicks;                                                    //0x20
    ULONGLONG CompressTicks;                                                //0x28
    ULONGLONG BytesCopied;                                                  //0x30
    ULONGLONG PagesProcessed;                                               //0x38
    ULONGLONG DecompressTicks;                                              //0x40
    ULONGLONG ResumeCopyTicks;                                              //0x48
    ULONGLONG SharedBufferTicks;                                            //0x50
    ULONGLONG DecompressTicksByMethod[2];                                   //0x58
    ULONGLONG DecompressSizeByMethod[2];                                    //0x68
    ULONG CompressCount;                                                    //0x78
    ULONG HuffCompressCount;                                                //0x7c
}NOK_POP_PER_PROCESSOR_CONTEXT, * NOK_PPOP_PER_PROCESSOR_CONTEXT;
//0x4 bytes (sizeof)
typedef union _NOK_POP_FX_DEVICE_STATUS
{
    LONG Value;                                                             //0x0
    ULONG SystemTransition:1;                                               //0x0
    ULONG PepD0Notify:1;                                                    //0x0
    ULONG IdleTimerOn:1;                                                    //0x0
    ULONG IgnoreIdleTimeout:1;                                              //0x0
    ULONG IrpInUse:1;                                                       //0x0
    ULONG IrpPending:1;                                                     //0x0
    ULONG DPNRDeviceNotified:1;                                             //0x0
    ULONG DPNRReceivedFromPep:1;                                            //0x0
    ULONG IrpFirstPendingIndex:1;                                           //0x0
    ULONG IrpLastPendingIndex:1;                                            //0x0
    ULONG SIrpBlocked:1;                                                    //0x0
    ULONG BlockFastResume:1;                                                //0x0
    ULONG DirectedPoweredDown:1;                                            //0x0
    ULONG DirectedTransitionInProgress:1;                                   //0x0
    ULONG Reserved:18;                                                      //0x0
}NOK_POP_FX_DEVICE_STATUS, * NOK_PPOP_FX_DEVICE_STATUS;
//0x10 bytes (sizeof)
typedef struct _NOK_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
{
    VOID* CompletionContext;                                                //0x0
    LONG CompletionStatus;                                                  //0x8
    ULONG DIrpPending:1;                                                    //0xc
    ULONG DIrpCompleted:1;                                                  //0xc
}NOK_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE, * NOK_PPOP_FX_DEVICE_DIRECTED_TRANSITION_STATE;
//0x4b8 bytes (sizeof)
typedef struct _NOK_POP_FX_DEVICE
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_PIRP Irp;                                                       //0x10
    NOK_PPOP_IRP_DATA IrpData;                                          //0x18
    volatile NOK_POP_FX_DEVICE_STATUS Status;                             //0x20
    volatile LONG PowerReqCall;                                             //0x24
    volatile LONG PowerNotReqCall;                                          //0x28
    NOK_PDEVICE_NODE DevNode;                                           //0x30
    NOK_PPEPHANDLE__ DpmContext;                                         //0x38
    NOK_PPOP_FX_PLUGIN Plugin;                                          //0x40
    NOK_PPEPHANDLE__ PluginHandle;                                       //0x48
    NOK_PPOP_FX_PLUGIN AcpiPlugin;                                      //0x50
    NOK_PPEPHANDLE__ AcpiPluginHandle;                                   //0x58
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x60
    NOK_PDEVICE_OBJECT TargetDevice;                                    //0x68
    NOK_POP_FX_DRIVER_CALLBACKS Callbacks;                              //0x70
    VOID* DriverContext;                                                    //0xc0
    NOK_LIST_ENTRY AcpiLink;                                            //0xc8
    NOK_UNICODE_STRING DeviceId;                                        //0xd8
    volatile LONG CommonReferenceFlags;                                     //0xe8
    NOK_IO_REMOVE_LOCK RemoveLock;                                      //0xf0
    NOK_IO_REMOVE_LOCK AcpiRemoveLock;                                  //0x110
    NOK_POP_FX_WORK_ORDER WorkOrder;                                    //0x130
    ULONGLONG IdleLock;                                                     //0x168
    NOK_KTIMER IdleTimer;                                               //0x170
    NOK_KDPC IdleDpc;                                                   //0x1b0
    ULONGLONG IdleTimeout;                                                  //0x1f0
    ULONGLONG IdleStamp;                                                    //0x1f8
    NOK_PDEVICE_OBJECT NextIrpDeviceObject[2];                          //0x200
    NOK_POWER_STATE NextIrpPowerState[2];                                //0x210
    VOID (*NextIrpCallerCompletion[2])(NOK_PDEVICE_OBJECT arg1, UCHAR arg2, NOK_POWER_STATE arg3, VOID* arg4, NOK_PIO_STATUS_BLOCK arg5); //0x218
    VOID* NextIrpCallerContext[2];                                          //0x228
    NOK_KEVENT IrpCompleteEvent;                                        //0x238
    UCHAR (*PowerOnDumpDeviceCallback)(NOK_PPEP_CRASHDUMP_INFORMATION arg1); //0x250
    NOK_POP_FX_ACCOUNTING Accounting;                                   //0x258
    volatile ULONG Flags;                                                   //0x338
    ULONG ComponentCount;                                                   //0x33c
    NOK_PPOP_FX_COMPONENT* Components;                                  //0x340
    ULONG LogEntries;                                                       //0x348
    NOK_PPOP_FX_LOG_ENTRY Log;                                          //0x350
    volatile LONG LogIndex;                                                 //0x358
    NOK_PDRIVER_OBJECT DripsWatchdogDriverObject;                       //0x360
    NOK_POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;             //0x368
    ULONG DirectedTimeout;                                                  //0x390
    NOK_POP_FX_WORK_ORDER DirectedWorkOrder;                            //0x398
    NOK_POP_FX_WORK_ORDER_WATCHDOG_INFO DirectedWorkWatchdogInfo;       //0x3d0
    ULONGLONG DirectedLock;                                                 //0x480
    volatile LONG DirectedTransitionCallCount;                              //0x488
    NOK_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE DirectedTransitionState; //0x490
    NOK_PPOP_DEVICE_POWER_PROFILE PowerProfile;                         //0x4a0
    NOK_UNICODE_STRING FriendlyName;                                    //0x4a8
}NOK_POP_FX_DEVICE, * NOK_PPOP_FX_DEVICE;
//0x4 bytes (sizeof)
typedef struct _NOK_SYSTEM_POWER_STATE_CONTEXT
{
    union
    {
        struct
        {
            ULONG Reserved1:8;                                              //0x0
            ULONG TargetSystemState:4;                                      //0x0
            ULONG EffectiveSystemState:4;                                   //0x0
            ULONG CurrentSystemState:4;                                     //0x0
            ULONG IgnoreHibernationPath:1;                                  //0x0
            ULONG PseudoTransition:1;                                       //0x0
            ULONG KernelSoftReboot:1;                                       //0x0
            ULONG DirectedDripsTransition:1;                                //0x0
            ULONG Reserved2:8;                                              //0x0
        };
        ULONG ContextAsUlong;                                               //0x0
    };
}NOK_SYSTEM_POWER_STATE_CONTEXT, * NOK_PSYSTEM_POWER_STATE_CONTEXT;
//0x18 bytes (sizeof)
typedef struct _NOK_POP_ACTION_TRIGGER
{
    NOK_POWER_POLICY_DEVICE_TYPE Type;                                     //0x0
    ULONG Flags;                                                            //0x4
    NOK_PPOP_TRIGGER_WAIT Wait;                                         //0x8
    union
    {
        struct
        {
            ULONG PercentLevel;                                             //0x10
        } Battery;                                                          //0x10
        struct
        {
            ULONG Type;                                                     //0x10
        } Button;                                                           //0x10
    };
}NOK_POP_ACTION_TRIGGER, * NOK_PPOP_ACTION_TRIGGER;
//0x40 bytes (sizeof)
typedef struct _NOK_POP_POLICY_DEVICE
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_POWER_POLICY_DEVICE_TYPE DeviceType;                               //0x10
    VOID* Notification;                                                     //0x18
    NOK_UNICODE_STRING Name;                                            //0x20
    NOK_PDEVICE_OBJECT Device;                                          //0x30
    NOK_PIRP Irp;                                                       //0x38
}NOK_POP_POLICY_DEVICE, * NOK_PPOP_POLICY_DEVICE;
//0x4 bytes (sizeof)
typedef enum _NOK_KHETERO_CPU_POLICY
{
    NOK_KHeteroCpuPolicyAll = 0,
    NOK_KHeteroCpuPolicyLarge = 1,
    NOK_KHeteroCpuPolicyLargeOrIdle = 2,
    NOK_KHeteroCpuPolicySmall = 3,
    NOK_KHeteroCpuPolicySmallOrIdle = 4,
    NOK_KHeteroCpuPolicyDynamic = 5,
    NOK_KHeteroCpuPolicyStaticMax = 5,
    NOK_KHeteroCpuPolicyBiasedSmall = 6,
    NOK_KHeteroCpuPolicyBiasedLarge = 7,
    NOK_KHeteroCpuPolicyDefault = 8,
    NOK_KHeteroCpuPolicyMax = 9
}NOK_KHETERO_CPU_POLICY, * NOK_PKHETERO_CPU_POLICY;
//0x38 bytes (sizeof)
typedef struct _NOK_THERMAL_COOLING_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
    ULONG Flags;                                                            //0x20
    VOID (*ActiveCooling)(VOID* arg1, UCHAR arg2);                          //0x28
    VOID (*PassiveCooling)(VOID* arg1, ULONG arg2);                         //0x30
}NOK_THERMAL_COOLING_INTERFACE, * NOK_PTHERMAL_COOLING_INTERFACE;
//0x48 bytes (sizeof)
typedef struct _NOK_POP_SHUTDOWN_BUG_CHECK
{
    NOK_PETHREAD InitiatingThread;                                      //0x0
    NOK_PEPROCESS InitiatingProcess;                                    //0x8
    VOID* ThreadId;                                                         //0x10
    VOID* ProcessId;                                                        //0x18
    ULONG Code;                                                             //0x20
    ULONGLONG Parameter1;                                                   //0x28
    ULONGLONG Parameter2;                                                   //0x30
    ULONGLONG Parameter3;                                                   //0x38
    ULONGLONG Parameter4;                                                   //0x40
}NOK_POP_SHUTDOWN_BUG_CHECK, * NOK_PPOP_SHUTDOWN_BUG_CHECK;
//0x218 bytes (sizeof)
typedef struct _NOK_POP_THERMAL_TELEMETRY_TRACKER
{
    UCHAR AccountingDisabled;                                               //0x0
    UCHAR ActiveLevels;                                                     //0x1
    ULONGLONG LastPassiveUpdateTime;                                        //0x8
    ULONGLONG LastActiveUpdateTime;                                         //0x10
    ULONGLONG TotalPassiveTime[21];                                         //0x18
    ULONGLONG PassiveTimeSnap[21];                                          //0xc0
    ULONGLONG TotalActiveTime[10];                                          //0x168
    ULONGLONG ActiveTimeSnap[10];                                           //0x1b8
    ULONGLONG TotalTime;                                                    //0x208
    ULONGLONG TotalTimeSnap;                                                //0x210
}NOK_POP_THERMAL_TELEMETRY_TRACKER, * NOK_PPOP_THERMAL_TELEMETRY_TRACKER;
//0x58 bytes (sizeof)
typedef struct _NOK_THERMAL_INFORMATION
{
    ULONG ThermalStamp;                                                     //0x0
    ULONG ThermalConstant1;                                                 //0x4
    ULONG ThermalConstant2;                                                 //0x8
    ULONGLONG Processors;                                                   //0x10
    ULONG SamplingPeriod;                                                   //0x18
    ULONG CurrentTemperature;                                               //0x1c
    ULONG PassiveTripPoint;                                                 //0x20
    ULONG CriticalTripPoint;                                                //0x24
    UCHAR ActiveTripPointCount;                                             //0x28
    ULONG ActiveTripPoint[10];                                              //0x2c
}NOK_THERMAL_INFORMATION, * NOK_PTHERMAL_INFORMATION;
//0x38 bytes (sizeof)
typedef struct _NOK_POP_TRIGGER_WAIT
{
    NOK_KEVENT Event;                                                   //0x0
    LONG Status;                                                            //0x18
    NOK_LIST_ENTRY Link;                                                //0x20
    NOK_PPOP_ACTION_TRIGGER Trigger;                                    //0x30
}NOK_POP_TRIGGER_WAIT, * NOK_PPOP_TRIGGER_WAIT;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_DEVICE_IDLE_TYPE
{
    NOK_DeviceIdleNormal = 0,
    NOK_DeviceIdleDisk = 1
}NOK_POP_DEVICE_IDLE_TYPE, * NOK_PPOP_DEVICE_IDLE_TYPE;
//0x18 bytes (sizeof)
typedef struct _NOK_PORT_MESSAGE32
{
    union
    {
        struct
        {
            SHORT DataLength;                                               //0x0
            SHORT TotalLength;                                              //0x2
        } s1;                                                               //0x0
        ULONG Length;                                                       //0x0
    } u1;                                                                   //0x0
    union
    {
        struct
        {
            SHORT Type;                                                     //0x4
            SHORT DataInfoOffset;                                           //0x6
        } s2;                                                               //0x4
        ULONG ZeroInit;                                                     //0x4
    } u2;                                                                   //0x4
    union
    {
        NOK_CLIENT_ID32 ClientId;                                       //0x8
        double DoNotUseThisField;                                           //0x8
    };
    ULONG MessageId;                                                        //0x10
    union
    {
        ULONG ClientViewSize;                                               //0x14
        ULONG CallbackId;                                                   //0x14
    };
}NOK_PORT_MESSAGE32, * NOK_PPORT_MESSAGE32;
//0xc bytes (sizeof)
typedef struct _NOK_POWER_SEQUENCE
{
    ULONG SequenceD1;                                                       //0x0
    ULONG SequenceD2;                                                       //0x4
    ULONG SequenceD3;                                                       //0x8
}NOK_POWER_SEQUENCE, * NOK_PPOWER_SEQUENCE;
//0x48 bytes (sizeof)
typedef struct _NOK_PO_NOTIFY_ORDER_LEVEL
{
    ULONG DeviceCount;                                                      //0x0
    ULONG ActiveCount;                                                      //0x4
    NOK_LIST_ENTRY WaitSleep;                                           //0x8
    NOK_LIST_ENTRY ReadySleep;                                          //0x18
    NOK_LIST_ENTRY ReadyS0;                                             //0x28
    NOK_LIST_ENTRY WaitS0;                                              //0x38
}NOK_PO_NOTIFY_ORDER_LEVEL, * NOK_PPO_NOTIFY_ORDER_LEVEL;
//0x18 bytes (sizeof)
typedef struct _NOK_SYSTEM_POWER_LEVEL
{
    UCHAR Enable;                                                           //0x0
    UCHAR Spare[3];                                                         //0x1
    ULONG BatteryLevel;                                                     //0x4
    NOK_POWER_ACTION_POLICY PowerPolicy;                                 //0x8
    NOK_SYSTEM_POWER_STATE MinSystemState;                                //0x14
}NOK_SYSTEM_POWER_LEVEL, * NOK_PSYSTEM_POWER_LEVEL;
//0x10 bytes (sizeof)
typedef struct _NOK_PO_DIAG_STACK_RECORD
{
    ULONG StackDepth;                                                       //0x0
    VOID* Stack[1];                                                         //0x8
}NOK_PO_DIAG_STACK_RECORD, * NOK_PPO_DIAG_STACK_RECORD;
//0x20 bytes (sizeof)
typedef struct _NOK_PO_IRP_MANAGER
{
    NOK_PO_IRP_QUEUE DeviceIrpQueue;                                    //0x0
    NOK_PO_IRP_QUEUE SystemIrpQueue;                                    //0x10
}NOK_PO_IRP_MANAGER, * NOK_PPO_IRP_MANAGER;
//0x10 bytes (sizeof)
typedef struct _NOK_PO_FX_PERF_STATE_CHANGE
{
    ULONG Set;                                                              //0x0
    union
    {
        ULONG StateIndex;                                                   //0x8
        ULONGLONG StateValue;                                               //0x8
    };
}NOK_PO_FX_PERF_STATE_CHANGE, * NOK_PPO_FX_PERF_STATE_CHANGE;
//0x40 bytes (sizeof)
typedef struct _NOK_POP_POWER_PLANE
{
    NOK_UNICODE_STRING PowerPlaneId;                                    //0x0
    ULONGLONG Lock;                                                         //0x10
    UCHAR OldIrql;                                                          //0x18
    volatile LONG DevicePowerMw;                                            //0x1c
    VOID* PmaxHandle;                                                       //0x20
    VOID (*NotifyDevicePowerDraw)(VOID* arg1, ULONG arg2);                  //0x28
    ULONGLONG DeviceCount;                                                  //0x30
    NOK_PPOP_DEVICE_POWER_PROFILE* Devices;                             //0x38
}NOK_POP_POWER_PLANE, * NOK_PPOP_POWER_PLANE;
//0x4 bytes (sizeof)
typedef union _NOK_POP_FX_PERF_FLAGS
{
    LONG Value;                                                             //0x0
    ULONG Progress:3;                                                       //0x0
    ULONG Reserved:24;                                                      //0x0
    ULONG Synchronicity:2;                                                  //0x0
    ULONG RequestPepCompleted:1;                                            //0x0
    ULONG RequestSucceeded:1;                                               //0x0
    ULONG NestedCallback:1;                                                 //0x0
}NOK_POP_FX_PERF_FLAGS, * NOK_PPOP_FX_PERF_FLAGS;
//0xa0 bytes (sizeof)
typedef struct _NOK_POP_FX_PERF_INFO
{
    NOK_PPOP_FX_COMPONENT Component;                                    //0x0
    NOK_KEVENT CompletedEvent;                                          //0x8
    VOID (*ComponentPerfState)(VOID* arg1, ULONG arg2, UCHAR arg3, VOID* arg4); //0x20
    volatile NOK_POP_FX_PERF_FLAGS Flags;                                 //0x28
    NOK_PO_FX_PERF_STATE_CHANGE* LastChange;                            //0x30
    ULONG LastChangeCount;                                                  //0x38
    ULONGLONG LastChangeStamp;                                              //0x40
    UCHAR LastChangeNominal;                                                //0x48
    UCHAR PepRegistered;                                                    //0x49
    UCHAR QueryOnIdleStates;                                                //0x4a
    VOID* volatile RequestDriverContext;                                    //0x50
    NOK_POP_FX_WORK_ORDER WorkOrder;                                    //0x58
    ULONG SetsCount;                                                        //0x90
    NOK_PPOP_FX_PERF_SET Sets;                                          //0x98
}NOK_POP_FX_PERF_INFO, * NOK_PPOP_FX_PERF_INFO;
//0x38 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_SPB_UART_RESOURCE
{
    NOK_PEP_ACPI_SPB_RESOURCE SpbCommon;                                //0x0
    ULONG BaudRate;                                                         //0x28
    USHORT RxBufferSize;                                                    //0x2c
    USHORT TxBufferSize;                                                    //0x2e
    UCHAR Parity;                                                           //0x30
    UCHAR LinesInUse;                                                       //0x31
}NOK_PEP_ACPI_SPB_UART_RESOURCE, * NOK_PPEP_ACPI_SPB_UART_RESOURCE;
//0x4 bytes (sizeof)
typedef enum _NOK_PO_FX_PERF_STATE_TYPE
{
    NOK_PoFxPerfStateTypeDiscrete = 0,
    NOK_PoFxPerfStateTypeRange = 1,
    NOK_PoFxPerfStateTypeMaximum = 2
}NOK_PO_FX_PERF_STATE_TYPE, * NOK_PPO_FX_PERF_STATE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PROFILE_STATUS
{
    NOK_DOCK_NOTDOCKDEVICE = 0,
    NOK_DOCK_QUIESCENT = 1,
    NOK_DOCK_ARRIVING = 2,
    NOK_DOCK_DEPARTING = 3,
    NOK_DOCK_EJECTIRP_COMPLETED = 4
}NOK_PROFILE_STATUS, * NOK_PPROFILE_STATUS;
//0x180 bytes (sizeof)
typedef struct _NOK_PO_DEVICE_NOTIFY_ORDER
{
    UCHAR Locked;                                                           //0x0
    NOK_PDEVICE_OBJECT* WarmEjectPdoPointer;                            //0x8
    NOK_PO_NOTIFY_ORDER_LEVEL OrderLevel[5];                            //0x10
    ULONG Flags;                                                            //0x178
}NOK_PO_DEVICE_NOTIFY_ORDER, * NOK_PPO_DEVICE_NOTIFY_ORDER;
//0x310 bytes (sizeof)
typedef struct _NOK_DEVICE_NODE
{
    NOK_PDEVICE_NODE Sibling;                                           //0x0
    NOK_PDEVICE_NODE Child;                                             //0x8
    NOK_PDEVICE_NODE Parent;                                            //0x10
    NOK_PDEVICE_NODE LastChild;                                         //0x18
    NOK_PDEVICE_OBJECT PhysicalDeviceObject;                            //0x20
    NOK_UNICODE_STRING InstancePath;                                    //0x28
    NOK_UNICODE_STRING ServiceName;                                     //0x38
    NOK_PIRP PendingIrp;                                                //0x48
    NOK_PPOP_FX_DEVICE FxDevice;                                        //0x50
    volatile LONG FxDeviceLock;                                             //0x58
    NOK_KEVENT FxRemoveEvent;                                           //0x60
    volatile LONG FxActivationCount;                                        //0x78
    volatile LONG FxSleepCount;                                             //0x7c
    NOK_UNICODE_STRING UniqueId;                                        //0x80
    NOK_PPOP_FX_PLUGIN Plugin;                                          //0x90
    ULONG Level;                                                            //0x98
    NOK_POWER_STATE CurrentPowerState;                                   //0x9c
    NOK_PO_DEVICE_NOTIFY Notify;                                        //0xa0
    NOK_PO_IRP_MANAGER PoIrpManager;                                    //0x108
    volatile LONG PowerFlags;                                               //0x128
    NOK_PNP_DEVNODE_STATE State;                                          //0x12c
    NOK_PNP_DEVNODE_STATE PreviousState;                                  //0x130
    NOK_PNP_DEVNODE_STATE StateHistory[20];                               //0x134
    ULONG StateHistoryEntry;                                                //0x184
    LONG CompletionStatus;                                                  //0x188
    ULONG Flags;                                                            //0x18c
    ULONG UserFlags;                                                        //0x190
    ULONG Problem;                                                          //0x194
    LONG ProblemStatus;                                                     //0x198
    NOK_PCM_RESOURCE_LIST ResourceList;                                 //0x1a0
    NOK_PCM_RESOURCE_LIST ResourceListTranslated;                       //0x1a8
    NOK_PDEVICE_OBJECT DuplicatePDO;                                    //0x1b0
    NOK_PIO_RESOURCE_REQUIREMENTS_LIST ResourceRequirements;            //0x1b8
    NOK_INTERFACE_TYPE InterfaceType;                                     //0x1c0
    ULONG BusNumber;                                                        //0x1c4
    NOK_INTERFACE_TYPE ChildInterfaceType;                                //0x1c8
    ULONG ChildBusNumber;                                                   //0x1cc
    USHORT ChildBusTypeIndex;                                               //0x1d0
    UCHAR RemovalPolicy;                                                    //0x1d2
    UCHAR HardwareRemovalPolicy;                                            //0x1d3
    NOK_LIST_ENTRY TargetDeviceNotify;                                  //0x1d8
    NOK_LIST_ENTRY DeviceArbiterList;                                   //0x1e8
    NOK_LIST_ENTRY DeviceTranslatorList;                                //0x1f8
    USHORT NoTranslatorMask;                                                //0x208
    USHORT QueryTranslatorMask;                                             //0x20a
    USHORT NoArbiterMask;                                                   //0x20c
    USHORT QueryArbiterMask;                                                //0x20e
    union
    {
        NOK_PDEVICE_NODE LegacyDeviceNode;                              //0x210
        NOK_PDEVICE_RELATIONS PendingDeviceRelations;                   //0x210
        VOID* Information;                                                  //0x210
    } OverUsed1;                                                            //0x210
    union
    {
        NOK_PDEVICE_NODE NextResourceDeviceNode;                        //0x218
    } OverUsed2;                                                            //0x218
    NOK_PCM_RESOURCE_LIST BootResources;                                //0x220
    NOK_PCM_RESOURCE_LIST BootResourcesTranslated;                      //0x228
    ULONG CapabilityFlags;                                                  //0x230
    struct
    {
        NOK_PROFILE_STATUS DockStatus;                                     //0x238
        NOK_LIST_ENTRY ListEntry;                                       //0x240
        WCHAR* SerialNumber;                                                //0x250
    } DockInfo;                                                             //0x238
    ULONG DisableableDepends;                                               //0x258
    NOK_LIST_ENTRY PendedSetInterfaceState;                             //0x260
    NOK_LIST_ENTRY LegacyBusListEntry;                                  //0x270
    ULONG DriverUnloadRetryCount;                                           //0x280
    NOK_PDEVICE_NODE PreviousParent;                                    //0x288
    LONG DeletedChildren;                                                   //0x290
    ULONG NumaNodeIndex;                                                    //0x294
    NOK_GUID ContainerID;                                               //0x298
    UCHAR OverrideFlags;                                                    //0x2a8
    ULONG DeviceIdsHash;                                                    //0x2ac
    UCHAR RequiresUnloadedDriver;                                           //0x2b0
    NOK_PPENDING_RELATIONS_LIST_ENTRY PendingEjectRelations;            //0x2b8
    ULONG StateFlags;                                                       //0x2c0
    NOK_PPNP_REBALANCE_TRACE_CONTEXT RebalanceContext;                  //0x2c8
    NOK_DEVICE_NODE_IOMMU_EXTENSION* IommuExtension;                    //0x2d0
    NOK_PO_DIRECTED_DRIPS_STATE DirectedDripsState;                     //0x2d8
}NOK_DEVICE_NODE, * NOK_PDEVICE_NODE;
//0x38 bytes (sizeof)
typedef struct _NOK_DBGKD_MANIPULATE_STATE64
{
    ULONG ApiNumber;                                                        //0x0
    USHORT ProcessorLevel;                                                  //0x4
    USHORT Processor;                                                       //0x6
    LONG ReturnStatus;                                                      //0x8
    union
    {
        NOK_DBGKD_READ_MEMORY64 ReadMemory;                             //0x10
        NOK_DBGKD_WRITE_MEMORY64 WriteMemory;                           //0x10
        NOK_DBGKD_GET_CONTEXT GetContext;                               //0x10
        NOK_DBGKD_SET_CONTEXT SetContext;                               //0x10
        NOK_DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;                   //0x10
        NOK_DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;                 //0x10
        NOK_DBGKD_CONTINUE Continue;                                    //0x10
        NOK_DBGKD_CONTINUE2 Continue2;                                  //0x10
        NOK_DBGKD_READ_WRITE_IO64 ReadWriteIo;                          //0x10
        NOK_DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;         //0x10
        NOK_DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;                //0x10
        NOK_DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;                    //0x10
        NOK_DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;      //0x10
        NOK_DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;      //0x10
        NOK_DBGKD_GET_VERSION64 GetVersion64;                           //0x10
        NOK_DBGKD_BREAKPOINTEX BreakPointEx;                            //0x10
        NOK_DBGKD_READ_WRITE_MSR ReadWriteMsr;                          //0x10
        NOK_DBGKD_SEARCH_MEMORY SearchMemory;                           //0x10
        NOK_DBGKD_GET_SET_BUS_DATA GetSetBusData;                       //0x10
        NOK_DBGKD_FILL_MEMORY FillMemory;                               //0x10
        NOK_DBGKD_QUERY_MEMORY QueryMemory;                             //0x10
        NOK_DBGKD_SWITCH_PARTITION SwitchPartition;                     //0x10
        NOK_DBGKD_CONTEXT_EX GetContextEx;                              //0x10
        NOK_DBGKD_CONTEXT_EX SetContextEx;                              //0x10
        NOK_DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;        //0x10
    } u;                                                                    //0x10
}NOK_DBGKD_MANIPULATE_STATE64, * NOK_PDBGKD_MANIPULATE_STATE64;
//0x28 bytes (sizeof)
typedef struct _NOK_PPM_CONCURRENCY_ACCOUNTING
{
    ULONGLONG Lock;                                                         //0x0
    ULONG Processors;                                                       //0x8
    ULONG ActiveProcessors;                                                 //0xc
    ULONGLONG LastUpdateTime;                                               //0x10
    ULONGLONG TotalTime;                                                    //0x18
    ULONGLONG AccumulatedTime[1];                                           //0x20
}NOK_PPM_CONCURRENCY_ACCOUNTING, * NOK_PPPM_CONCURRENCY_ACCOUNTING;
//0x18 bytes (sizeof)
typedef struct _NOK_PPM_COORDINATED_SELECTION
{
    ULONG MaximumStates;                                                    //0x0
    ULONG SelectedStates;                                                   //0x4
    ULONG DefaultSelection;                                                 //0x8
    ULONG* Selection;                                                       //0x10
}NOK_PPM_COORDINATED_SELECTION, * NOK_PPPM_COORDINATED_SELECTION;
//0x8 bytes (sizeof)
typedef union _NOK_PPM_POLICY_SETTINGS_MASK
{
    ULONGLONG Value;                                                        //0x0
    ULONG PerfDecreaseTime:1;                                               //0x0
    ULONG PerfIncreaseTime:1;                                               //0x0
    ULONG PerfDecreasePolicy:1;                                             //0x0
    ULONG PerfIncreasePolicy:1;                                             //0x0
    ULONG PerfDecreaseThreshold:1;                                          //0x0
    ULONG PerfIncreaseThreshold:1;                                          //0x0
    ULONG PerfMinPolicy:1;                                                  //0x0
    ULONG PerfMaxPolicy:1;                                                  //0x0
    ULONG PerfTimeCheck:1;                                                  //0x0
    ULONG PerfBoostPolicy:1;                                                //0x0
    ULONG PerfBoostMode:1;                                                  //0x0
    ULONG AllowThrottling:1;                                                //0x0
    ULONG PerfHistoryCount:1;                                               //0x0
    ULONG ParkingPerfState:1;                                               //0x0
    ULONG LatencyHintPerf:1;                                                //0x0
    ULONG LatencyHintUnpark:1;                                              //0x0
    ULONG CoreParkingMinCores:1;                                            //0x0
    ULONG CoreParkingMaxCores:1;                                            //0x0
    ULONG CoreParkingDecreasePolicy:1;                                      //0x0
    ULONG CoreParkingIncreasePolicy:1;                                      //0x0
    ULONG CoreParkingDecreaseTime:1;                                        //0x0
    ULONG CoreParkingIncreaseTime:1;                                        //0x0
    ULONG CoreParkingOverUtilizationThreshold:1;                            //0x0
    ULONG CoreParkingDistributeUtility:1;                                   //0x0
    ULONG CoreParkingConcurrencyThreshold:1;                                //0x0
    ULONG CoreParkingHeadroomThreshold:1;                                   //0x0
    ULONG CoreParkingDistributionThreshold:1;                               //0x0
    ULONG IdleAllowScaling:1;                                               //0x0
    ULONG IdleDisable:1;                                                    //0x0
    ULONG IdleTimeCheck:1;                                                  //0x0
    ULONG IdleDemoteThreshold:1;                                            //0x0
    struct
    {
        ULONG IdlePromoteThreshold:1;                                       //0x0
    ULONG HeteroDecreaseTime:1;                                             //0x4
    ULONG HeteroIncreaseTime:1;                                             //0x4
    ULONG HeteroDecreaseThreshold:1;                                        //0x4
    ULONG HeteroIncreaseThreshold:1;                                        //0x4
    ULONG Class0FloorPerformance:1;                                         //0x4
    ULONG Class1InitialPerformance:1;                                       //0x4
    ULONG EnergyPerfPreference:1;                                           //0x4
    ULONG AutonomousActivityWindow:1;                                       //0x4
    ULONG AutonomousMode:1;                                                 //0x4
    ULONG DutyCycling:1;                                                    //0x4
    ULONG FrequencyCap:1;                                                   //0x4
    ULONG ThreadPolicy:1;                                                   //0x4
    ULONG ShortThreadPolicy:1;                                              //0x4
    ULONG IdleStateMax:1;                                                   //0x4
    ULONG ResponsivenessDisableThreshold:1;                                 //0x4
    ULONG ResponsivenessEnableThreshold:1;                                  //0x4
    ULONG ResponsivenessDisableTime:1;                                      //0x4
    ULONG ResponsivenessEnableTime:1;                                       //0x4
    ULONG ResponsivenessEppCeiling:1;                                       //0x4
    ULONG ResponsivenessPerfFloor:1;                                        //0x4
    ULONG SoftParkLatency:1;                                                //0x4
    };
    ULONG Spare:11;                                                         //0x4
}NOK_PPM_POLICY_SETTINGS_MASK, * NOK_PPPM_POLICY_SETTINGS_MASK;
//0x4218 bytes (sizeof)
typedef struct _NOK_KTIMER_TABLE
{
    NOK_PKTIMER TimerExpiry[64];                                        //0x0
    NOK_KTIMER_TABLE_ENTRY TimerEntries[2][256];                        //0x200
    NOK_KTIMER_TABLE_STATE TableState;                                  //0x4200
}NOK_KTIMER_TABLE, * NOK_PKTIMER_TABLE;
//0x28 bytes (sizeof)
typedef struct _NOK_PPM_VETO_ACCOUNTING
{
    volatile LONG VetoPresent;                                              //0x0
    NOK_LIST_ENTRY VetoListHead;                                        //0x8
    UCHAR CsAccountingBlocks;                                               //0x18
    UCHAR BlocksDrips;                                                      //0x19
    ULONG PreallocatedVetoCount;                                            //0x1c
    NOK_PPPM_VETO_ENTRY PreallocatedVetoList;                           //0x20
}NOK_PPM_VETO_ACCOUNTING, * NOK_PPPM_VETO_ACCOUNTING;
//0x10 bytes (sizeof)
typedef struct _NOK_PPM_SELECTION_MENU
{
    ULONG Count;                                                            //0x0
    NOK_PPM_SELECTION_MENU_ENTRY* Entries;                              //0x8
}NOK_PPM_SELECTION_MENU, * NOK_PPPM_SELECTION_MENU;
//0x58 bytes (sizeof)
typedef struct _NOK_POP_DEVICE_POWER_PROFILE
{
    NOK_UNICODE_STRING DeviceId;                                        //0x0
    NOK_PPOP_POWER_PLANE PowerPlane;                                    //0x10
    NOK_PPOP_FX_DEVICE FxDevice;                                        //0x18
    LONG PowerDrawMw;                                                       //0x20
    NOK_PO_POWER_PLANE_PROFILE DxPower[4];                              //0x24
    ULONGLONG ComponentCount;                                               //0x48
    NOK_PPOP_COMPONENT_POWER_PROFILE* Components;                       //0x50
}NOK_POP_DEVICE_POWER_PROFILE, * NOK_PPOP_DEVICE_POWER_PROFILE;
//0x4 bytes (sizeof)
typedef union _NOK_PPM_COORDINATED_SYNCHRONIZATION
{
    LONG AsLong;                                                            //0x0
    ULONG EnterProcessor:12;                                                //0x0
    ULONG ExitProcessor:12;                                                 //0x0
    ULONG Transition:2;                                                     //0x0
    ULONG Entered:1;                                                        //0x0
    ULONG EntryPriority:5;                                                  //0x0
}NOK_PPM_COORDINATED_SYNCHRONIZATION, * NOK_PPPM_COORDINATED_SYNCHRONIZATION;
//0x180 bytes (sizeof)
typedef struct _NOK_PPM_PLATFORM_STATE
{
    ULONGLONG LevelId;                                                      //0x0
    ULONG Latency;                                                          //0x8
    ULONG BreakEvenDuration;                                                //0xc
    NOK_PPM_VETO_ACCOUNTING VetoAccounting;                             //0x10
    UCHAR TransitionDebugger;                                               //0x38
    UCHAR Platform;                                                         //0x39
    ULONG DependencyListCount;                                              //0x3c
    NOK_KAFFINITY_EX Processors;                                        //0x40
    NOK_UNICODE_STRING Name;                                            //0xe8
    NOK_PPPM_SELECTION_DEPENDENCY DependencyLists;                      //0xf8
    volatile NOK_PPM_COORDINATED_SYNCHRONIZATION Synchronization;         //0x100
    volatile ULONGLONG EnterTime;                                           //0x108
    union
    {
        volatile LONG RefCount;                                             //0x140
        UCHAR CacheAlign0[64];                                              //0x140
    };
}NOK_PPM_PLATFORM_STATE, * NOK_PPPM_PLATFORM_STATE;
//0x30 bytes (sizeof)
typedef struct _NOK_PROCESSOR_IDLE_CONSTRAINTS
{
    ULONGLONG TotalTime;                                                    //0x0
    ULONGLONG IdleTime;                                                     //0x8
    ULONGLONG ExpectedIdleDuration;                                         //0x10
    ULONGLONG MaxIdleDuration;                                              //0x18
    ULONG OverrideState;                                                    //0x20
    ULONG TimeCheck;                                                        //0x24
    UCHAR PromotePercent;                                                   //0x28
    UCHAR DemotePercent;                                                    //0x29
    UCHAR Parked;                                                           //0x2a
    UCHAR Interruptible;                                                    //0x2b
    UCHAR PlatformIdle;                                                     //0x2c
    UCHAR ExpectedWakeReason;                                               //0x2d
    UCHAR IdleStateMax;                                                     //0x2e
}NOK_PROCESSOR_IDLE_CONSTRAINTS, * NOK_PPROCESSOR_IDLE_CONSTRAINTS;
//0x18 bytes (sizeof)
typedef struct _NOK_PPM_SELECTION_MENU_ENTRY
{
    UCHAR StrictDependency;                                                 //0x0
    UCHAR InitiatingState;                                                  //0x1
    UCHAR DependentState;                                                   //0x2
    ULONG StateIndex;                                                       //0x4
    ULONG Dependencies;                                                     //0x8
    NOK_PPPM_SELECTION_DEPENDENCY DependencyList;                       //0x10
}NOK_PPM_SELECTION_MENU_ENTRY, * NOK_PPPM_SELECTION_MENU_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_PPM_SELECTION_DEPENDENCY
{
    ULONG Processor;                                                        //0x0
    NOK_PPM_SELECTION_MENU Menu;                                        //0x8
}NOK_PPM_SELECTION_DEPENDENCY, * NOK_PPPM_SELECTION_DEPENDENCY;
//0x20 bytes (sizeof)
typedef struct _NOK_PROC_IDLE_STATE_BUCKET
{
    ULONGLONG TotalTime;                                                    //0x0
    ULONGLONG MinTime;                                                      //0x8
    ULONGLONG MaxTime;                                                      //0x10
    ULONG Count;                                                            //0x18
}NOK_PROC_IDLE_STATE_BUCKET, * NOK_PPROC_IDLE_STATE_BUCKET;
//0xf8 bytes (sizeof)
typedef struct _NOK_PPM_IDLE_STATE
{
    NOK_KAFFINITY_EX DomainMembers;                                     //0x0
    NOK_UNICODE_STRING Name;                                            //0xa8
    ULONG Latency;                                                          //0xb8
    ULONG BreakEvenDuration;                                                //0xbc
    ULONG Power;                                                            //0xc0
    ULONG StateFlags;                                                       //0xc4
    NOK_PPM_VETO_ACCOUNTING VetoAccounting;                             //0xc8
    UCHAR StateType;                                                        //0xf0
    UCHAR InterruptsEnabled;                                                //0xf1
    UCHAR Interruptible;                                                    //0xf2
    UCHAR ContextRetained;                                                  //0xf3
    UCHAR CacheCoherent;                                                    //0xf4
    UCHAR WakesSpuriously;                                                  //0xf5
    UCHAR PlatformOnly;                                                     //0xf6
    UCHAR NoCState;                                                         //0xf7
}NOK_PPM_IDLE_STATE, * NOK_PPPM_IDLE_STATE;
//0x40 bytes (sizeof)
typedef struct _NOK_PPM_VETO_ENTRY
{
    NOK_LIST_ENTRY Link;                                                //0x0
    ULONG VetoReason;                                                       //0x10
    ULONG ReferenceCount;                                                   //0x14
    ULONGLONG HitCount;                                                     //0x18
    ULONGLONG LastActivationTime;                                           //0x20
    ULONGLONG TotalActiveTime;                                              //0x28
    ULONGLONG CsActivationTime;                                             //0x30
    ULONGLONG CsActiveTime;                                                 //0x38
}NOK_PPM_VETO_ENTRY, * NOK_PPPM_VETO_ENTRY;
//0x40 bytes (sizeof)
typedef struct _NOK_REQUEST_MAILBOX
{
    NOK_PREQUEST_MAILBOX Next;                                          //0x0
    ULONGLONG RequestSummary;                                               //0x8
    NOK_KREQUEST_PACKET RequestPacket;                                  //0x10
    volatile LONG* NodeTargetCountAddr;                                     //0x30
    volatile LONG NodeTargetCount;                                          //0x38
}NOK_REQUEST_MAILBOX, * NOK_PREQUEST_MAILBOX;
//0x3e0 bytes (sizeof)
typedef struct _NOK_PO_MEMORY_IMAGE
{
    ULONG Signature;                                                        //0x0
    ULONG ImageType;                                                        //0x4
    ULONG CheckSum;                                                         //0x8
    ULONG LengthSelf;                                                       //0xc
    ULONGLONG PageSelf;                                                     //0x10
    ULONG PageSize;                                                         //0x18
    NOK_LARGE_INTEGER SystemTime;                                        //0x20
    ULONGLONG InterruptTime;                                                //0x28
    ULONGLONG FeatureFlags;                                                 //0x30
    UCHAR HiberFlags;                                                       //0x38
    UCHAR HiberSimulateFlags;                                               //0x39
    UCHAR spare[2];                                                         //0x3a
    ULONG NoHiberPtes;                                                      //0x3c
    ULONGLONG HiberVa;                                                      //0x40
    ULONG NoFreePages;                                                      //0x48
    ULONG FreeMapCheck;                                                     //0x4c
    ULONG WakeCheck;                                                        //0x50
    ULONGLONG NumPagesForLoader;                                            //0x58
    ULONGLONG FirstSecureRestorePage;                                       //0x60
    ULONGLONG FirstBootRestorePage;                                         //0x68
    ULONGLONG FirstKernelRestorePage;                                       //0x70
    ULONGLONG FirstChecksumRestorePage;                                     //0x78
    ULONGLONG NoChecksumEntries;                                            //0x80
    NOK_PO_HIBER_PERF PerfInfo;                                         //0x88
    ULONG FirmwareRuntimeInformationPages;                                  //0x280
    ULONGLONG FirmwareRuntimeInformation[1];                                //0x288
    ULONG SpareUlong;                                                       //0x290
    ULONG NoBootLoaderLogPages;                                             //0x294
    ULONGLONG BootLoaderLogPages[24];                                       //0x298
    ULONG NotUsed;                                                          //0x358
    ULONG ResumeContextCheck;                                               //0x35c
    ULONG ResumeContextPages;                                               //0x360
    UCHAR Hiberboot;                                                        //0x364
    UCHAR SecureLaunched;                                                   //0x365
    UCHAR SecureBoot;                                                       //0x366
    ULONGLONG HvPageTableRoot;                                              //0x368
    ULONGLONG HvEntryPoint;                                                 //0x370
    ULONGLONG HvReservedTransitionAddress;                                  //0x378
    ULONGLONG HvReservedTransitionAddressSize;                              //0x380
    ULONGLONG BootFlags;                                                    //0x388
    ULONGLONG RestoreProcessorStateRoutine;                                 //0x390
    ULONGLONG HighestPhysicalPage;                                          //0x398
    ULONGLONG BitlockerKeyPfns[4];                                          //0x3a0
    ULONG HardwareSignature;                                                //0x3c0
    NOK_LARGE_INTEGER SMBiosTablePhysicalAddress;                        //0x3c8
    ULONG SMBiosTableLength;                                                //0x3d0
    UCHAR SMBiosMajorVersion;                                               //0x3d4
    UCHAR SMBiosMinorVersion;                                               //0x3d5
    UCHAR HiberResumeXhciHandoffSkip;                                       //0x3d6
    UCHAR InitializeUSBCore;                                                //0x3d7
    UCHAR ValidUSBCoreId;                                                   //0x3d8
    UCHAR USBCoreId;                                                        //0x3d9
    UCHAR SkipMemoryMapValidation;                                          //0x3da
}NOK_PO_MEMORY_IMAGE, * NOK_PPO_MEMORY_IMAGE;
//0x20 bytes (sizeof)
typedef struct _NOK_SECURITY_SUBJECT_CONTEXT
{
    VOID* ClientToken;                                                      //0x0
    NOK_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0x8
    VOID* PrimaryToken;                                                     //0x10
    VOID* ProcessAuditId;                                                   //0x18
}NOK_SECURITY_SUBJECT_CONTEXT, * NOK_PSECURITY_SUBJECT_CONTEXT;
//0x58 bytes (sizeof)
typedef struct _NOK_PROCESSOR_IDLE_PREPARE_INFO
{
    VOID* Context;                                                          //0x0
    NOK_PROCESSOR_IDLE_CONSTRAINTS Constraints;                         //0x8
    ULONG DependencyCount;                                                  //0x38
    ULONG DependencyUsed;                                                   //0x3c
    NOK_PPROCESSOR_IDLE_DEPENDENCY DependencyArray;                     //0x40
    ULONG PlatformIdleStateIndex;                                           //0x48
    ULONG ProcessorIdleStateIndex;                                          //0x4c
    ULONG IdleSelectFailureMask;                                            //0x50
}NOK_PROCESSOR_IDLE_PREPARE_INFO, * NOK_PPROCESSOR_IDLE_PREPARE_INFO;
//0x8 bytes (sizeof)
typedef struct _NOK_PROCESSOR_IDLE_DEPENDENCY
{
    ULONG ProcessorIndex;                                                   //0x0
    UCHAR ExpectedState;                                                    //0x4
    UCHAR AllowDeeperStates;                                                //0x5
    UCHAR LooseDependency;                                                  //0x6
}NOK_PROCESSOR_IDLE_DEPENDENCY, * NOK_PPROCESSOR_IDLE_DEPENDENCY;
//0x428 bytes (sizeof)
typedef struct _NOK_PPM_IDLE_STATES
{
    UCHAR InterfaceVersion;                                                 //0x0
    UCHAR IdleOverride;                                                     //0x1
    UCHAR EstimateIdleDuration;                                             //0x2
    UCHAR ExitLatencyTraceEnabled;                                          //0x3
    UCHAR NonInterruptibleTransition;                                       //0x4
    UCHAR UnaccountedTransition;                                            //0x5
    UCHAR IdleDurationLimited;                                              //0x6
    UCHAR IdleCheckLimited;                                                 //0x7
    UCHAR StrictVetoBias;                                                   //0x8
    ULONG ExitLatencyCountdown;                                             //0xc
    ULONG TargetState;                                                      //0x10
    ULONG ActualState;                                                      //0x14
    ULONG OldState;                                                         //0x18
    ULONG OverrideIndex;                                                    //0x1c
    ULONG ProcessorIdleCount;                                               //0x20
    ULONG Type;                                                             //0x24
    ULONGLONG LevelId;                                                      //0x28
    USHORT ReasonFlags;                                                     //0x30
    volatile ULONGLONG InitiateWakeStamp;                                   //0x38
    LONG PreviousStatus;                                                    //0x40
    ULONG PreviousCancelReason;                                             //0x44
    NOK_KAFFINITY_EX PrimaryProcessorMask;                              //0x48
    NOK_KAFFINITY_EX SecondaryProcessorMask;                            //0xf0
    VOID (*IdlePrepare)(NOK_PPROCESSOR_IDLE_PREPARE_INFO arg1);         //0x198
    LONG (*IdlePreExecute)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x1a0
    LONG (*IdleExecute)(VOID* arg1, ULONGLONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG arg6, ULONG* arg7); //0x1a8
    ULONG (*IdlePreselect)(VOID* arg1, NOK_PPROCESSOR_IDLE_CONSTRAINTS arg2); //0x1b0
    ULONG (*IdleTest)(VOID* arg1, ULONG arg2, ULONG arg3);                  //0x1b8
    ULONG (*IdleAvailabilityCheck)(VOID* arg1, ULONG arg2);                 //0x1c0
    VOID (*IdleComplete)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x1c8
    VOID (*IdleCancel)(VOID* arg1, ULONG arg2);                             //0x1d0
    UCHAR (*IdleIsHalted)(VOID* arg1);                                      //0x1d8
    UCHAR (*IdleInitiateWake)(VOID* arg1);                                  //0x1e0
    NOK_PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;                        //0x1e8
    NOK_KAFFINITY_EX DeepIdleSnapshot;                                  //0x240
    NOK_PPERFINFO_PPM_STATE_SELECTION Tracing;                          //0x2e8
    NOK_PPERFINFO_PPM_STATE_SELECTION CoordinatedTracing;               //0x2f0
    NOK_PPM_SELECTION_MENU ProcessorMenu;                               //0x2f8
    NOK_PPM_SELECTION_MENU CoordinatedMenu;                             //0x308
    NOK_PPM_COORDINATED_SELECTION CoordinatedSelection;                 //0x318
    NOK_PPM_IDLE_STATE State[1];                                        //0x330
}NOK_PPM_IDLE_STATES, * NOK_PPPM_IDLE_STATES;
//0x4 bytes (sizeof)
typedef struct _NOK_PROCESSOR_NUMBER
{
    USHORT Group;                                                           //0x0
    UCHAR Number;                                                           //0x2
    UCHAR Reserved;                                                         //0x3
}NOK_PROCESSOR_NUMBER, * NOK_PPROCESSOR_NUMBER;
//0x10 bytes (sizeof)
typedef struct _NOK_PROCESSOR_PLATFORM_STATE_RESIDENCY
{
    ULONGLONG Residency;                                                    //0x0
    ULONGLONG TransitionCount;                                              //0x8
}NOK_PROCESSOR_PLATFORM_STATE_RESIDENCY, * NOK_PPROCESSOR_PLATFORM_STATE_RESIDENCY;
//0x18 bytes (sizeof)
typedef struct _NOK_PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
    ULONG Count;                                                            //0x0
    NOK_PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];                   //0x8
}NOK_PROCESSOR_PLATFORM_STATE_RESIDENCIES, * NOK_PPROCESSOR_PLATFORM_STATE_RESIDENCIES;
//0x1c0 bytes (sizeof)
typedef struct _NOK_PPM_PLATFORM_STATES
{
    ULONG StateCount;                                                       //0x0
    ULONG InterfaceVersion;                                                 //0x4
    ULONG ProcessorCount;                                                   //0x8
    UCHAR CoordinatedInterface;                                             //0xc
    ULONG (*IdleTest)(VOID* arg1, ULONG arg2, ULONG arg3);                  //0x10
    LONG (*IdlePreExecute)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x18
    VOID (*IdleComplete)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x20
    LONG (*QueryPlatformStateResidency)(VOID* arg1, NOK_PPROCESSOR_PLATFORM_STATE_RESIDENCIES arg2); //0x28
    NOK_PPLATFORM_IDLE_ACCOUNTING Accounting;                           //0x30
    UCHAR DeepSleepEnabled;                                                 //0x38
    NOK_PPM_PLATFORM_STATE State[1];                                    //0x40
}NOK_PPM_PLATFORM_STATES, * NOK_PPPM_PLATFORM_STATES;
//0x70 bytes (sizeof)
typedef struct _NOK_POP_IO_INFO
{
    NOK_PMDL DumpMdl;                                                   //0x0
    NOK_POP_IO_STATUS IoStatus;                                           //0x8
    ULONGLONG IoStartCount;                                                 //0x10
    ULONGLONG IoBytesCompleted;                                             //0x18
    ULONGLONG IoBytesInProgress;                                            //0x20
    ULONGLONG RequestSize;                                                  //0x28
    NOK_LARGE_INTEGER IoLocation;                                        //0x30
    ULONGLONG FileOffset;                                                   //0x38
    VOID* Buffer;                                                           //0x40
    UCHAR AsyncCapable;                                                     //0x48
    ULONGLONG BytesToRead;                                                  //0x50
    ULONG Pages;                                                            //0x58
    ULONGLONG HighestChecksumIndex;                                         //0x60
    USHORT PreviousChecksum;                                                //0x68
}NOK_POP_IO_INFO, * NOK_PPOP_IO_INFO;
//0x8 bytes (sizeof)
typedef union _NOK_ENERGY_STATE_DURATION
{
    ULONGLONG Value;                                                        //0x0
    struct
    {
        ULONG LastChangeTime;                                               //0x0
    ULONG Duration:31;                                                      //0x4
    };
    ULONG IsInState:1;                                                      //0x4
}NOK_ENERGY_STATE_DURATION, * NOK_PENERGY_STATE_DURATION;
//0x110 bytes (sizeof)
typedef struct _NOK_PROCESS_ENERGY_VALUES
{
    ULONGLONG Cycles[4][2];                                                 //0x0
    ULONGLONG DiskEnergy;                                                   //0x40
    ULONGLONG NetworkTailEnergy;                                            //0x48
    ULONGLONG MBBTailEnergy;                                                //0x50
    ULONGLONG NetworkTxRxBytes;                                             //0x58
    ULONGLONG MBBTxRxBytes;                                                 //0x60
    union
    {
        NOK_ENERGY_STATE_DURATION Durations[3];                          //0x68
        struct
        {
            NOK_ENERGY_STATE_DURATION ForegroundDuration;                //0x68
            NOK_ENERGY_STATE_DURATION DesktopVisibleDuration;            //0x70
            NOK_ENERGY_STATE_DURATION PSMForegroundDuration;             //0x78
        };
    };
    ULONG CompositionRendered;                                              //0x80
    ULONG CompositionDirtyGenerated;                                        //0x84
    ULONG CompositionDirtyPropagated;                                       //0x88
    ULONG Reserved1;                                                        //0x8c
    ULONGLONG AttributedCycles[4][2];                                       //0x90
    ULONGLONG WorkOnBehalfCycles[4][2];                                     //0xd0
}NOK_PROCESS_ENERGY_VALUES, * NOK_PPROCESS_ENERGY_VALUES;
//0x8 bytes (sizeof)
typedef union _NOK_TIMELINE_BITMAP
{
    ULONGLONG Value;                                                        //0x0
    struct
    {
        ULONG EndTime;                                                      //0x0
    };
    ULONG Bitmap;                                                           //0x4
}NOK_TIMELINE_BITMAP, * NOK_PTIMELINE_BITMAP;
//0x8 bytes (sizeof)
typedef struct _NOK_PROCLOCALAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR ACPIProcessorID;                                                  //0x2
    UCHAR APICID;                                                           //0x3
    ULONG Flags;                                                            //0x4
}NOK_PROCLOCALAPIC, * NOK_PPROCLOCALAPIC;
//0x11 bytes (sizeof)
typedef struct _NOK_PROCLOCALSAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR ACPIProcessorID;                                                  //0x2
    UCHAR APICID;                                                           //0x3
    UCHAR APICEID;                                                          //0x4
    UCHAR Reserved[3];                                                      //0x5
    ULONG Flags;                                                            //0x8
    ULONG ACPIProcessorUIDInteger;                                          //0xc
    CHAR ACPIProcessorUIDString[1];                                         //0x10
}NOK_PROCLOCALSAPIC, * NOK_PPROCLOCALSAPIC;
//0x6 bytes (sizeof)
typedef struct _NOK_PROC_IDLE_POLICY
{
    UCHAR PromotePercent;                                                   //0x0
    UCHAR DemotePercent;                                                    //0x1
    UCHAR PromotePercentBase;                                               //0x2
    UCHAR DemotePercentBase;                                                //0x3
    UCHAR AllowScaling;                                                     //0x4
    UCHAR ForceLightIdle;                                                   //0x5
}NOK_PROC_IDLE_POLICY, * NOK_PPROC_IDLE_POLICY;
//0x30 bytes (sizeof)
typedef struct _NOK_PROC_FEEDBACK_COUNTER
{
    union
    {
        VOID (*InstantaneousRead)(ULONGLONG arg1, ULONG* arg2);             //0x0
        VOID (*DifferentialRead)(ULONGLONG arg1, UCHAR arg2, ULONGLONG* arg3, ULONGLONG* arg4); //0x0
    };
    ULONGLONG LastActualCount;                                              //0x8
    ULONGLONG LastReferenceCount;                                           //0x10
    ULONG CachedValue;                                                      //0x18
    UCHAR Affinitized;                                                      //0x20
    UCHAR Differential;                                                     //0x21
    UCHAR DiscardIdleTime;                                                  //0x22
    UCHAR Scaling;                                                          //0x23
    ULONGLONG Context;                                                      //0x28
}NOK_PROC_FEEDBACK_COUNTER, * NOK_PPROC_FEEDBACK_COUNTER;
//0x3f0 bytes (sizeof)
typedef struct _NOK_PLATFORM_IDLE_STATE_ACCOUNTING
{
    ULONG CancelCount;                                                      //0x0
    ULONG FailureCount;                                                     //0x4
    ULONG SuccessCount;                                                     //0x8
    ULONGLONG MaxTime;                                                      //0x10
    ULONGLONG MinTime;                                                      //0x18
    ULONGLONG TotalTime;                                                    //0x20
    ULONG InvalidBucketIndex;                                               //0x28
    NOK_PPM_SELECTION_STATISTICS SelectionStatistics;                   //0x30
    NOK_PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                     //0xb0
}NOK_PLATFORM_IDLE_STATE_ACCOUNTING, * NOK_PPLATFORM_IDLE_STATE_ACCOUNTING;
//0x10 bytes (sizeof)
typedef struct _NOK_PROC_IDLE_SNAP
{
    ULONGLONG Time;                                                         //0x0
    ULONGLONG Idle;                                                         //0x8
}NOK_PROC_IDLE_SNAP, * NOK_PPROC_IDLE_SNAP;
//0x60 bytes (sizeof)
typedef struct _NOK_PROC_PERF_CHECK_SNAP
{
    ULONGLONG Time;                                                         //0x0
    ULONGLONG Active;                                                       //0x8
    ULONGLONG Stall;                                                        //0x10
    ULONGLONG FrequencyScaledActive;                                        //0x18
    ULONGLONG PerformanceScaledActive;                                      //0x20
    ULONGLONG PerformanceScaledKernelActive;                                //0x28
    ULONGLONG CyclesActive;                                                 //0x30
    ULONGLONG CyclesAffinitized;                                            //0x38
    ULONGLONG TaggedThreadCycles[3];                                        //0x40
    ULONG ResponsivenessEvents;                                             //0x58
}NOK_PROC_PERF_CHECK_SNAP, * NOK_PPROC_PERF_CHECK_SNAP;
//0x158 bytes (sizeof)
typedef struct _NOK_PROC_PERF_CHECK
{
    ULONGLONG LastActive;                                                   //0x0
    ULONGLONG LastTime;                                                     //0x8
    ULONGLONG LastStall;                                                    //0x10
    ULONG LastResponsivenessEvents;                                         //0x18
    NOK_PROC_PERF_CHECK_SNAP LastPerfCheckSnap;                         //0x20
    NOK_PROC_PERF_CHECK_SNAP CurrentSnap;                               //0x80
    NOK_PROC_PERF_CHECK_SNAP LastDeliveredSnap;                         //0xe0
    ULONG LastDeliveredPerformance;                                         //0x140
    ULONG LastDeliveredFrequency;                                           //0x144
    UCHAR TaggedThreadPercent[3];                                           //0x148
    UCHAR Class0FloorPerfSelection;                                         //0x14b
    UCHAR Class1MinimumPerfSelection;                                       //0x14c
    ULONG CurrentResponsivenessEvents;                                      //0x150
}NOK_PROC_PERF_CHECK, * NOK_PPROC_PERF_CHECK;
//0x408 bytes (sizeof)
typedef struct _NOK_PLATFORM_IDLE_ACCOUNTING
{
    ULONG ResetCount;                                                       //0x0
    ULONG StateCount;                                                       //0x4
    ULONG DeepSleepCount;                                                   //0x8
    NOK_PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                //0xc
    ULONGLONG StartTime;                                                    //0x10
    NOK_PLATFORM_IDLE_STATE_ACCOUNTING State[1];                        //0x18
}NOK_PLATFORM_IDLE_ACCOUNTING, * NOK_PPLATFORM_IDLE_ACCOUNTING;
//0x3e8 bytes (sizeof)
typedef struct _NOK_PROC_IDLE_STATE_ACCOUNTING
{
    ULONGLONG TotalTime;                                                    //0x0
    ULONG CancelCount;                                                      //0x8
    ULONG FailureCount;                                                     //0xc
    ULONG SuccessCount;                                                     //0x10
    ULONG InvalidBucketIndex;                                               //0x14
    ULONGLONG MinTime;                                                      //0x18
    ULONGLONG MaxTime;                                                      //0x20
    NOK_PPM_SELECTION_STATISTICS SelectionStatistics;                   //0x28
    NOK_PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                     //0xa8
}NOK_PROC_IDLE_STATE_ACCOUNTING, * NOK_PPROC_IDLE_STATE_ACCOUNTING;
//0x4 bytes (sizeof)
typedef enum _NOK_KHETERO_CPU_QOS
{
    NOK_KHeteroCpuQosDefault = 0,
    NOK_KHeteroCpuQosHigh = 0,
    NOK_KHeteroCpuQosMedium = 1,
    NOK_KHeteroCpuQosLow = 2,
    NOK_KHeteroCpuQosMultimedia = 3,
    NOK_KHeteroCpuQosDeadline = 4,
    NOK_KHeteroCpuQosDynamic = 5,
    NOK_KHeteroCpuQosMax = 5
}NOK_KHETERO_CPU_QOS, * NOK_PKHETERO_CPU_QOS;
//0x40 bytes (sizeof)
typedef struct _NOK_PROC_PERF_CHECK_CONTEXT
{
    NOK_PPROC_PERF_DOMAIN Domain;                                       //0x0
    NOK_PPROC_PERF_CONSTRAINT Constraint;                               //0x8
    NOK_PPROC_PERF_CHECK PerfCheck;                                     //0x10
    NOK_PPROC_PERF_LOAD Load;                                           //0x18
    NOK_PPROC_PERF_HISTORY PerfHistory;                                 //0x20
    ULONG Utility;                                                          //0x28
    ULONG AffinitizedUtility;                                               //0x2c
    ULONG MediaUtility;                                                     //0x30
    USHORT LatestAffinitizedPercent;                                        //0x34
    USHORT AveragePerformancePercent;                                       //0x36
    ULONG RelativePerformance;                                              //0x38
    UCHAR NtProcessor;                                                      //0x3c
}NOK_PROC_PERF_CHECK_CONTEXT, * NOK_PPROC_PERF_CHECK_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_PROCESSOR_PRESENCE
{
    NOK_ProcessorPresenceNt = 0,
    NOK_ProcessorPresenceHv = 1,
    NOK_ProcessorPresenceHidden = 2
}NOK_PROCESSOR_PRESENCE, * NOK_PPROCESSOR_PRESENCE;
//0x1c bytes (sizeof)
typedef struct _NOK_PROC_PERF_QOS_CLASS_POLICY
{
    ULONG MaxPolicyPercent;                                                 //0x0
    ULONG MaxEquivalentFrequencyPercent;                                    //0x4
    ULONG MinPolicyPercent;                                                 //0x8
    ULONG AutonomousActivityWindow;                                         //0xc
    ULONG EnergyPerfPreference;                                             //0x10
    UCHAR ProvideGuidance;                                                  //0x14
    UCHAR AllowThrottling;                                                  //0x15
    UCHAR PerfBoostMode;                                                    //0x16
    UCHAR LatencyHintPerf;                                                  //0x17
    UCHAR TrackDesiredCrossClass;                                           //0x18
}NOK_PROC_PERF_QOS_CLASS_POLICY, * NOK_PPROC_PERF_QOS_CLASS_POLICY;
//0xa bytes (sizeof)
typedef struct _NOK_PROC_PERF_HISTORY_ENTRY
{
    USHORT Utility;                                                         //0x0
    USHORT AffinitizedUtility;                                              //0x2
    USHORT Frequency;                                                       //0x4
    UCHAR TaggedPercent[3];                                                 //0x6
}NOK_PROC_PERF_HISTORY_ENTRY, * NOK_PPROC_PERF_HISTORY_ENTRY;
//0x2c bytes (sizeof)
typedef struct _NOK_PROC_PERF_HISTORY
{
    ULONG Count;                                                            //0x0
    ULONG Slot;                                                             //0x4
    ULONG UtilityTotal;                                                     //0x8
    ULONG AffinitizedUtilityTotal;                                          //0xc
    ULONG FrequencyTotal;                                                   //0x10
    ULONG TaggedPercentTotal[3];                                            //0x14
    NOK_PROC_PERF_HISTORY_ENTRY HistoryList[1];                         //0x20
}NOK_PROC_PERF_HISTORY, * NOK_PPROC_PERF_HISTORY;
//0x2 bytes (sizeof)
typedef struct _NOK_PROC_PERF_LOAD
{
    UCHAR BusyPercentage;                                                   //0x0
    UCHAR FrequencyPercentage;                                              //0x1
}NOK_PROC_PERF_LOAD, * NOK_PPROC_PERF_LOAD;
//0x88 bytes (sizeof)
typedef struct _NOK_PROC_PERF_CONSTRAINT
{
    NOK_PROC_PERF_CHECK_CONTEXT* CheckContext;                          //0x0
    ULONGLONG PerfContext;                                                  //0x8
    NOK_PROCESSOR_PRESENCE Presence;                                      //0x10
    ULONG ProcessorId;                                                      //0x14
    ULONG PlatformCap;                                                      //0x18
    ULONG ThermalCap;                                                       //0x1c
    ULONG LimitReasons;                                                     //0x20
    ULONGLONG PlatformCapStartTime;                                         //0x28
    ULONG ProcCap;                                                          //0x30
    ULONG ProcFloor;                                                        //0x34
    ULONG TargetPercent;                                                    //0x38
    UCHAR EngageResponsivenessOverrides;                                    //0x3c
    UCHAR ResponsivenessChangeCount;                                        //0x3d
    NOK_PERF_CONTROL_STATE_SELECTION Selection;                         //0x40
    ULONG DomainSelectionGeneration;                                        //0x68
    ULONG PreviousFrequency;                                                //0x6c
    ULONG PreviousPercent;                                                  //0x70
    ULONG LatestFrequencyPercent;                                           //0x74
    ULONG LatestPerformancePercent;                                         //0x78
    UCHAR Force;                                                            //0x7c
    UCHAR UseQosUpdateLock;                                                 //0x7d
    ULONGLONG QosUpdateLock;                                                //0x80
}NOK_PROC_PERF_CONSTRAINT, * NOK_PPROC_PERF_CONSTRAINT;
//0x60 bytes (sizeof)
typedef struct _NOK_PF_KERNEL_GLOBALS
{
    ULONGLONG AccessBufferAgeThreshold;                                     //0x0
    NOK_EX_RUNDOWN_REF AccessBufferRef;                                 //0x8
    NOK_KEVENT AccessBufferExistsEvent;                                 //0x10
    ULONG AccessBufferMax;                                                  //0x28
    NOK_SLIST_HEADER AccessBufferList;                                   //0x40
    LONG StreamSequenceNumber;                                              //0x50
    ULONG Flags;                                                            //0x54
    LONG ScenarioPrefetchCount;                                             //0x58
}NOK_PF_KERNEL_GLOBALS, * NOK_PPF_KERNEL_GLOBALS;
//0x1 bytes (sizeof)
typedef struct _NOK_PS_PROTECTION
{
    union
    {
        UCHAR Level;                                                        //0x0
        struct
        {
            UCHAR Type:3;                                                   //0x0
            UCHAR Audit:1;                                                  //0x0
            UCHAR Signer:4;                                                 //0x0
        };
    };
}NOK_PS_PROTECTION, * NOK_PPS_PROTECTION;
//0x48 bytes (sizeof)
typedef struct _NOK_PS_JOB_WAKE_INFORMATION
{
    ULONGLONG NotificationChannel;                                          //0x0
    ULONGLONG WakeCounters[7];                                              //0x8
    ULONGLONG NoWakeCounter;                                                //0x40
}NOK_PS_JOB_WAKE_INFORMATION, * NOK_PPS_JOB_WAKE_INFORMATION;
//0x50 bytes (sizeof)
typedef struct _NOK_LPCP_MESSAGE
{
    union
    {
        NOK_LIST_ENTRY Entry;                                           //0x0
        struct
        {
            NOK_SINGLE_LIST_ENTRY FreeEntry;                            //0x0
            ULONG Reserved0;                                                //0x8
        };
    };
    VOID* SenderPort;                                                       //0x10
    NOK_PETHREAD RepliedToThread;                                       //0x18
    VOID* PortContext;                                                      //0x20
    NOK_PORT_MESSAGE Request;                                           //0x28
}NOK_LPCP_MESSAGE, * NOK_PLPCP_MESSAGE;
//0x18 bytes (sizeof)
typedef struct _NOK_PS_MITIGATION_AUDIT_OPTIONS_MAP
{
    ULONGLONG Map[3];                                                       //0x0
}NOK_PS_MITIGATION_AUDIT_OPTIONS_MAP, * NOK_PPS_MITIGATION_AUDIT_OPTIONS_MAP;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_MITIGATION_OPTION
{
    NOK_PS_MITIGATION_OPTION_NX = 0,
    NOK_PS_MITIGATION_OPTION_SEHOP = 1,
    NOK_PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    NOK_PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    NOK_PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    NOK_PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    NOK_PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    NOK_PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    NOK_PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    NOK_PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    NOK_PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    NOK_PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    NOK_PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    NOK_PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    NOK_PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    NOK_PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    NOK_PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    NOK_PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    NOK_PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    NOK_PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    NOK_PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    NOK_PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    NOK_PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    NOK_PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    NOK_PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    NOK_PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    NOK_PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    NOK_PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    NOK_PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    NOK_PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    NOK_PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    NOK_PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31,
    NOK_PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 32,
    NOK_PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES = 33,
    NOK_PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY = 36
}NOK_PS_MITIGATION_OPTION, * NOK_PPS_MITIGATION_OPTION;
//0x8 bytes (sizeof)
typedef struct _NOK_WNF_STATE_NAME
{
    ULONG Data[2];                                                          //0x0
}NOK_WNF_STATE_NAME, * NOK_PWNF_STATE_NAME;
//0x20 bytes (sizeof)
typedef struct _NOK_PPM_FFH_THROTTLE_STATE_INFO
{
    UCHAR EnableLogging;                                                    //0x0
    ULONG MismatchCount;                                                    //0x4
    UCHAR Initialized;                                                      //0x8
    ULONGLONG LastValue;                                                    //0x10
    NOK_LARGE_INTEGER LastLogTickCount;                                  //0x18
}NOK_PPM_FFH_THROTTLE_STATE_INFO, * NOK_PPPM_FFH_THROTTLE_STATE_INFO;
//0x1a8 bytes (sizeof)
typedef struct _NOK_POP_FX_PLUGIN
{
    NOK_LIST_ENTRY Link;                                                //0x0
    ULONG Version;                                                          //0x10
    ULONGLONG Flags;                                                        //0x18
    NOK_KQUEUE WorkQueue;                                               //0x20
    UCHAR (*AcceptDeviceNotification)(ULONG arg1, VOID* arg2);              //0x60
    UCHAR (*AcceptProcessorNotification)(NOK_PPEPHANDLE__ arg1, ULONG arg2, VOID* arg3); //0x68
    UCHAR (*AcceptAcpiNotification)(ULONG arg1, VOID* arg2);                //0x70
    NOK_POP_FX_WORK_POOL PluginWorkPool;                                //0x78
}NOK_POP_FX_PLUGIN, * NOK_PPOP_FX_PLUGIN;
//0x1 bytes (sizeof)
typedef union _NOK_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
    UCHAR Trustlet:1;                                                       //0x0
    UCHAR Ntos:1;                                                           //0x0
    UCHAR WriteHandle:1;                                                    //0x0
    UCHAR ReadHandle:1;                                                     //0x0
    UCHAR Reserved:4;                                                       //0x0
    UCHAR AccessRights;                                                     //0x0
}NOK_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, * NOK_PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
//0x4 bytes (sizeof)
typedef struct _NOK_PS_TRUSTLET_ATTRIBUTE_TYPE
{
    union
    {
        struct
        {
            UCHAR Version;                                                  //0x0
            UCHAR DataCount;                                                //0x1
            UCHAR SemanticType;                                             //0x2
            NOK_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;         //0x3
        };
        ULONG AttributeType;                                                //0x0
    };
}NOK_PS_TRUSTLET_ATTRIBUTE_TYPE, * NOK_PPS_TRUSTLET_ATTRIBUTE_TYPE;
//0x8 bytes (sizeof)
typedef struct _NOK_PS_TRUSTLET_ATTRIBUTE_HEADER
{
    NOK_PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;                       //0x0
    ULONG InstanceNumber:8;                                                 //0x4
    ULONG Reserved:24;                                                      //0x4
}NOK_PS_TRUSTLET_ATTRIBUTE_HEADER, * NOK_PPS_TRUSTLET_ATTRIBUTE_HEADER;
//0x10 bytes (sizeof)
typedef struct _NOK_PS_TRUSTLET_ATTRIBUTE_DATA
{
    NOK_PS_TRUSTLET_ATTRIBUTE_HEADER Header;                            //0x0
    ULONGLONG Data[1];                                                      //0x8
}NOK_PS_TRUSTLET_ATTRIBUTE_DATA, * NOK_PPS_TRUSTLET_ATTRIBUTE_DATA;
//0x20 bytes (sizeof)
typedef struct _NOK_PS_TRUSTLET_TKSESSION_ID
{
    ULONGLONG SessionId[4];                                                 //0x0
}NOK_PS_TRUSTLET_TKSESSION_ID, * NOK_PPS_TRUSTLET_TKSESSION_ID;
//0x80 bytes (sizeof)
typedef struct _NOK_PTE_TRACKER
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PMDL Mdl;                                                       //0x10
    ULONGLONG Count;                                                        //0x18
    VOID* SystemVa;                                                         //0x20
    VOID* StartVa;                                                          //0x28
    ULONG Offset;                                                           //0x30
    ULONG Length;                                                           //0x34
    ULONGLONG Page;                                                         //0x38
    ULONG IoMapping:1;                                                      //0x40
    ULONG Matched:1;                                                        //0x40
    ULONG CacheAttribute:2;                                                 //0x40
    ULONG GuardPte:1;                                                       //0x40
    ULONG Spare:27;                                                         //0x40
    VOID* StackTrace[7];                                                    //0x48
}NOK_PTE_TRACKER, * NOK_PPTE_TRACKER;
//0x20 bytes (sizeof)
typedef struct _NOK_OBJECT_HEADER_NAME_INFO
{
    NOK_POBJECT_DIRECTORY Directory;                                    //0x0
    NOK_UNICODE_STRING Name;                                            //0x8
    LONG ReferenceCount;                                                    //0x18
    ULONG Reserved;                                                         //0x1c
}NOK_OBJECT_HEADER_NAME_INFO, * NOK_POBJECT_HEADER_NAME_INFO;
//0x40 bytes (sizeof)
typedef struct _NOK_VSM_PERFORMANCE_DATA
{
    ULONGLONG LaunchVsmMark[8];                                             //0x0
}NOK_VSM_PERFORMANCE_DATA, * NOK_PVSM_PERFORMANCE_DATA;
//0x60 bytes (sizeof)
typedef struct _NOK_DEVICE_OBJECT_POWER_EXTENSION
{
    volatile ULONG IdleCount;                                               //0x0
    volatile ULONG BusyCount;                                               //0x4
    volatile ULONG BusyReference;                                           //0x8
    ULONG TotalBusyCount;                                                   //0xc
    ULONG ConservationIdleTime;                                             //0x10
    ULONG PerformanceIdleTime;                                              //0x14
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x18
    NOK_LIST_ENTRY IdleList;                                            //0x20
    NOK_POP_DEVICE_IDLE_TYPE IdleType;                                    //0x30
    NOK_DEVICE_POWER_STATE IdleState;                                     //0x34
    NOK_DEVICE_POWER_STATE CurrentState;                                  //0x38
    NOK_PPOP_COOLING_EXTENSION CoolingExtension;                        //0x40
    NOK_LIST_ENTRY Volume;                                              //0x48
    union
    {
        struct
        {
            ULONG IdleTime;                                                 //0x58
            ULONG NonIdleTime;                                              //0x5c
        } Disk;                                                             //0x58
    } Specific;                                                             //0x58
}NOK_DEVICE_OBJECT_POWER_EXTENSION, * NOK_PDEVICE_OBJECT_POWER_EXTENSION;
//0x4 bytes (sizeof)
typedef enum _NOK_INTERRUPT_PROBLEM
{
    NOK_InterruptProblemNone = 0,
    NOK_InterruptProblemMadtParsingFailure = 1,
    NOK_InterruptProblemNoControllersFound = 2,
    NOK_InterruptProblemFailedDiscovery = 3,
    NOK_InterruptProblemInitializeLocalUnitFailed = 4,
    NOK_InterruptProblemInitializeIoUnitFailed = 5,
    NOK_InterruptProblemSetLogicalIdFailed = 6,
    NOK_InterruptProblemSetLineStateFailed = 7,
    NOK_InterruptProblemGenerateMessageFailed = 8,
    NOK_InterruptProblemConvertIdFailed = 9,
    NOK_InterruptProblemCmciSetupFailed = 10,
    NOK_InterruptProblemQueryMaxProcessorsCalledTooEarly = 11,
    NOK_InterruptProblemProcessorReset = 12,
    NOK_InterruptProblemStartProcessorFailed = 13,
    NOK_InterruptProblemProcessorNotAlive = 14,
    NOK_InterruptProblemLowerIrqlViolation = 15,
    NOK_InterruptProblemInvalidIrql = 16,
    NOK_InterruptProblemNoSuchController = 17,
    NOK_InterruptProblemNoSuchLines = 18,
    NOK_InterruptProblemBadConnectionData = 19,
    NOK_InterruptProblemBadRoutingData = 20,
    NOK_InterruptProblemInvalidProcessor = 21,
    NOK_InterruptProblemFailedToAttainTarget = 22,
    NOK_InterruptProblemUnsupportedWiringConfiguration = 23,
    NOK_InterruptProblemSpareAlreadyStarted = 24,
    NOK_InterruptProblemClusterNotFullyReplaced = 25,
    NOK_InterruptProblemNewClusterAlreadyActive = 26,
    NOK_InterruptProblemNewClusterTooLarge = 27,
    NOK_InterruptProblemCannotHardwareQuiesce = 28,
    NOK_InterruptProblemIpiDestinationUpdateFailed = 29,
    NOK_InterruptProblemNoMemory = 30,
    NOK_InterruptProblemNoIrtEntries = 31,
    NOK_InterruptProblemConnectionDataBaitAndSwitch = 32,
    NOK_InterruptProblemInvalidLogicalFlatId = 33,
    NOK_InterruptProblemDeinitializeLocalUnitFailed = 34,
    NOK_InterruptProblemDeinitializeIoUnitFailed = 35,
    NOK_InterruptProblemMismatchedThermalLvtIsr = 36,
    NOK_InterruptProblemHvRetargetFailed = 37,
    NOK_InterruptProblemDeferredErrorSetupFailed = 38
}NOK_INTERRUPT_PROBLEM, * NOK_PINTERRUPT_PROBLEM;
//0x18 bytes (sizeof)
typedef struct _NOK_REMOTE_PORT_VIEW
{
    ULONG Length;                                                           //0x0
    ULONGLONG ViewSize;                                                     //0x8
    VOID* ViewBase;                                                         //0x10
}NOK_REMOTE_PORT_VIEW, * NOK_PREMOTE_PORT_VIEW;
//0x8 bytes (sizeof)
typedef struct _NOK_SE_AUDIT_PROCESS_CREATION_INFO
{
    NOK_POBJECT_NAME_INFORMATION ImageFileName;                         //0x0
}NOK_SE_AUDIT_PROCESS_CREATION_INFO, * NOK_PSE_AUDIT_PROCESS_CREATION_INFO;
//0x48 bytes (sizeof)
typedef struct _NOK_RH_OP_CONTEXT
{
    NOK_LIST_ENTRY Links;                                               //0x0
    NOK_PIRP OplockRequestIrp;                                          //0x10
    NOK_PFILE_OBJECT OplockRequestFileObject;                           //0x18
    NOK_PEPROCESS OplockRequestProcess;                                 //0x20
    NOK_PETHREAD OplockOwnerThread;                                     //0x28
    ULONG Flags;                                                            //0x30
    NOK_LIST_ENTRY AtomicLinks;                                         //0x38
}NOK_RH_OP_CONTEXT, * NOK_PRH_OP_CONTEXT;
//0x228 bytes (sizeof)
typedef struct _NOK_SHARED_CACHE_MAP
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    ULONG OpenCount;                                                        //0x4
    NOK_LARGE_INTEGER FileSize;                                          //0x8
    NOK_LIST_ENTRY BcbList;                                             //0x10
    NOK_LARGE_INTEGER SectionSize;                                       //0x20
    NOK_LARGE_INTEGER ValidDataLength;                                   //0x28
    NOK_LARGE_INTEGER ValidDataGoal;                                     //0x30
    NOK_PVACB InitialVacbs[4];                                          //0x38
    NOK_PVACB* Vacbs;                                                   //0x58
    NOK_EX_FAST_REF FileObjectFastRef;                                  //0x60
    NOK_EX_PUSH_LOCK VacbLock;                                          //0x68
    ULONG DirtyPages;                                                       //0x70
    NOK_LIST_ENTRY LoggedStreamLinks;                                   //0x78
    NOK_LIST_ENTRY SharedCacheMapLinks;                                 //0x88
    ULONG Flags;                                                            //0x98
    LONG Status;                                                            //0x9c
    NOK_PMBCB Mbcb;                                                     //0xa0
    VOID* Section;                                                          //0xa8
    NOK_PKEVENT CreateEvent;                                            //0xb0
    NOK_PKEVENT WaitOnActiveCount;                                      //0xb8
    ULONG PagesToWrite;                                                     //0xc0
    LONGLONG BeyondLastFlush;                                               //0xc8
    NOK_PCACHE_MANAGER_CALLBACKS Callbacks;                             //0xd0
    VOID* LazyWriteContext;                                                 //0xd8
    NOK_LIST_ENTRY PrivateList;                                         //0xe0
    union
    {
        NOK_LOGGED_STREAM_CALLBACK_V1 V1;                               //0xf0
        NOK_LOGGED_STREAM_CALLBACK_V2 V2;                               //0xf0
    };
    NOK_LARGE_INTEGER LargestLSN;                                        //0x100
    ULONG DirtyPageThreshold;                                               //0x108
    ULONG LazyWritePassCount;                                               //0x10c
    NOK_PCACHE_UNINITIALIZE_EVENT UninitializeEvent;                    //0x110
    NOK_FAST_MUTEX BcbLock;                                             //0x118
    NOK_LARGE_INTEGER LastUnmapBehindOffset;                             //0x150
    NOK_KEVENT Event;                                                   //0x158
    NOK_LARGE_INTEGER HighWaterMappingOffset;                            //0x170
    NOK_PRIVATE_CACHE_MAP PrivateCacheMap;                              //0x178
    VOID* WriteBehindWorkQueueEntry;                                        //0x1f0
    NOK_PVOLUME_CACHE_MAP VolumeCacheMap;                               //0x1f8
    ULONG ProcImagePathHash;                                                //0x200
    ULONG WritesInProgress;                                                 //0x204
    ULONG AsyncReadRequestCount;                                            //0x208
    NOK_PCC_PARTITION Partition;                                        //0x210
    ULONG InternalRefCount;                                                 //0x218
    ULONG NumMappedVacb;                                                    //0x21c
    ULONG NumActiveVacb;                                                    //0x220
}NOK_SHARED_CACHE_MAP, * NOK_PSHARED_CACHE_MAP;
//0x1c bytes (sizeof)
typedef union _NOK_CVDD
{
    ULONG Signature;                                                        //0x0
    NOK_NB10 NB10;                                                      //0x0
    NOK_RSDS RsDs;                                                      //0x0
}NOK_CVDD, * NOK_PCVDD;
//0x28 bytes (sizeof)
typedef struct _NOK_RSDT_32
{
    NOK_DESCRIPTION_HEADER Header;                                      //0x0
    ULONG Tables[1];                                                        //0x24
}NOK_RSDT_32, * NOK_PRSDT_32;
//0x4 bytes (sizeof)
typedef enum _NOK_RTLP_HP_ADDRESS_SPACE_TYPE
{
    NOK_HeapAddressUser = 0,
    NOK_HeapAddressKernel = 1,
    NOK_HeapAddressSession = 2,
    NOK_HeapAddressSecureKernel = 3,
    NOK_HeapAddressTypeMax = 4
}NOK_RTLP_HP_ADDRESS_SPACE_TYPE, * NOK_PRTLP_HP_ADDRESS_SPACE_TYPE;
//0x860 bytes (sizeof)
typedef struct _NOK_HEAP_VAMGR_VASPACE
{
    NOK_RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;                      //0x0
    ULONGLONG BaseAddress;                                                  //0x8
    union
    {
        NOK_RTL_SPARSE_ARRAY VaRangeArray;                              //0x10
        UCHAR VaRangeArrayBuffer[2128];                                     //0x10
    };
}NOK_HEAP_VAMGR_VASPACE, * NOK_PHEAP_VAMGR_VASPACE;
//0xb8 bytes (sizeof)
typedef struct _NOK_SYNCH_COUNTERS
{
    ULONG SpinLockAcquireCount;                                             //0x0
    ULONG SpinLockContentionCount;                                          //0x4
    ULONG SpinLockSpinCount;                                                //0x8
    ULONG IpiSendRequestBroadcastCount;                                     //0xc
    ULONG IpiSendRequestRoutineCount;                                       //0x10
    ULONG IpiSendSoftwareInterruptCount;                                    //0x14
    ULONG ExInitializeResourceCount;                                        //0x18
    ULONG ExReInitializeResourceCount;                                      //0x1c
    ULONG ExDeleteResourceCount;                                            //0x20
    ULONG ExecutiveResourceAcquiresCount;                                   //0x24
    ULONG ExecutiveResourceContentionsCount;                                //0x28
    ULONG ExecutiveResourceReleaseExclusiveCount;                           //0x2c
    ULONG ExecutiveResourceReleaseSharedCount;                              //0x30
    ULONG ExecutiveResourceConvertsCount;                                   //0x34
    ULONG ExAcqResExclusiveAttempts;                                        //0x38
    ULONG ExAcqResExclusiveAcquiresExclusive;                               //0x3c
    ULONG ExAcqResExclusiveAcquiresExclusiveRecursive;                      //0x40
    ULONG ExAcqResExclusiveWaits;                                           //0x44
    ULONG ExAcqResExclusiveNotAcquires;                                     //0x48
    ULONG ExAcqResSharedAttempts;                                           //0x4c
    ULONG ExAcqResSharedAcquiresExclusive;                                  //0x50
    ULONG ExAcqResSharedAcquiresShared;                                     //0x54
    ULONG ExAcqResSharedAcquiresSharedRecursive;                            //0x58
    ULONG ExAcqResSharedWaits;                                              //0x5c
    ULONG ExAcqResSharedNotAcquires;                                        //0x60
    ULONG ExAcqResSharedStarveExclusiveAttempts;                            //0x64
    ULONG ExAcqResSharedStarveExclusiveAcquiresExclusive;                   //0x68
    ULONG ExAcqResSharedStarveExclusiveAcquiresShared;                      //0x6c
    ULONG ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;             //0x70
    ULONG ExAcqResSharedStarveExclusiveWaits;                               //0x74
    ULONG ExAcqResSharedStarveExclusiveNotAcquires;                         //0x78
    ULONG ExAcqResSharedWaitForExclusiveAttempts;                           //0x7c
    ULONG ExAcqResSharedWaitForExclusiveAcquiresExclusive;                  //0x80
    ULONG ExAcqResSharedWaitForExclusiveAcquiresShared;                     //0x84
    ULONG ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;            //0x88
    ULONG ExAcqResSharedWaitForExclusiveWaits;                              //0x8c
    ULONG ExAcqResSharedWaitForExclusiveNotAcquires;                        //0x90
    ULONG ExSetResOwnerPointerExclusive;                                    //0x94
    ULONG ExSetResOwnerPointerSharedNew;                                    //0x98
    ULONG ExSetResOwnerPointerSharedOld;                                    //0x9c
    ULONG ExTryToAcqExclusiveAttempts;                                      //0xa0
    ULONG ExTryToAcqExclusiveAcquires;                                      //0xa4
    ULONG ExBoostExclusiveOwner;                                            //0xa8
    ULONG ExBoostSharedOwners;                                              //0xac
    ULONG ExEtwSynchTrackingNotificationsCount;                             //0xb0
    ULONG ExEtwSynchTrackingNotificationsAccountedCount;                    //0xb4
}NOK_SYNCH_COUNTERS, * NOK_PSYNCH_COUNTERS;
//0x10 bytes (sizeof)
typedef struct _NOK_RTLP_HP_PADDING_HEADER
{
    ULONGLONG PaddingSize;                                                  //0x0
    ULONGLONG Spare;                                                        //0x8
}NOK_RTLP_HP_PADDING_HEADER, * NOK_PRTLP_HP_PADDING_HEADER;
//0x18 bytes (sizeof)
typedef struct _NOK_RTLP_HP_QUEUE_LOCK_HANDLE
{
    ULONGLONG Reserved1;                                                    //0x0
    ULONGLONG LockPtr;                                                      //0x8
    ULONGLONG HandleData;                                                   //0x10
}NOK_RTLP_HP_QUEUE_LOCK_HANDLE, * NOK_PRTLP_HP_QUEUE_LOCK_HANDLE;
//0x38 bytes (sizeof)
typedef struct _NOK_RTLP_RANGE_LIST_ENTRY
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
    union
    {
        struct
        {
            VOID* UserData;                                                 //0x10
            VOID* Owner;                                                    //0x18
        } Allocated;                                                        //0x10
        struct
        {
            NOK_LIST_ENTRY ListHead;                                    //0x10
        } Merged;                                                           //0x10
    };
    UCHAR Attributes;                                                       //0x20
    UCHAR PublicFlags;                                                      //0x21
    USHORT PrivateFlags;                                                    //0x22
    NOK_LIST_ENTRY ListEntry;                                           //0x28
}NOK_RTLP_RANGE_LIST_ENTRY, * NOK_PRTLP_RANGE_LIST_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
    NOK_PRTL_ACTIVATION_CONTEXT_STACK_FRAME Previous;                   //0x0
    NOK_PACTIVATION_CONTEXT ActivationContext;                          //0x8
    ULONG Flags;                                                            //0x10
}NOK_RTL_ACTIVATION_CONTEXT_STACK_FRAME, * NOK_PRTL_ACTIVATION_CONTEXT_STACK_FRAME;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_ATOM_TABLE_REFERENCE
{
    NOK_LIST_ENTRY LowBoxList;                                          //0x0
    ULONG LowBoxID;                                                         //0x10
    USHORT ReferenceCount;                                                  //0x14
    USHORT Flags;                                                           //0x16
}NOK_RTL_ATOM_TABLE_REFERENCE, * NOK_PRTL_ATOM_TABLE_REFERENCE;
//0x30 bytes (sizeof)
typedef struct _NOK_RTL_ATOM_TABLE_ENTRY
{
    NOK_RTL_ATOM_TABLE_ENTRY* HashLink;                                 //0x0
    USHORT HandleIndex;                                                     //0x8
    USHORT Atom;                                                            //0xa
    NOK_RTL_ATOM_TABLE_REFERENCE Reference;                             //0x10
    UCHAR NameLength;                                                       //0x28
    WCHAR Name[1];                                                          //0x2a
}NOK_RTL_ATOM_TABLE_ENTRY, * NOK_PRTL_ATOM_TABLE_ENTRY;
//0x28 bytes (sizeof)
typedef struct _NOK_RTL_ATOM_TABLE
{
    ULONG Signature;                                                        //0x0
    volatile LONG ReferenceCount;                                           //0x4
    NOK_EX_PUSH_LOCK PushLock;                                          //0x8
    NOK_PHANDLE_TABLE ExHandleTable;                                    //0x10
    ULONG Flags;                                                            //0x18
    ULONG NumberOfBuckets;                                                  //0x1c
    NOK_RTL_ATOM_TABLE_ENTRY* Buckets[1];                               //0x20
}NOK_RTL_ATOM_TABLE, * NOK_PRTL_ATOM_TABLE;
//0x8 bytes (sizeof)
typedef struct _NOK_KENLISTMENT_HISTORY
{
    ULONG Notification;                                                     //0x0
    NOK_KENLISTMENT_STATE NewState;                                       //0x4
}NOK_KENLISTMENT_HISTORY, * NOK_PKENLISTMENT_HISTORY;
//0x1e0 bytes (sizeof)
typedef struct _NOK_KENLISTMENT
{
    ULONG cookie;                                                           //0x0
    NOK_KTMOBJECT_NAMESPACE_LINK NamespaceLink;                         //0x8
    NOK_GUID EnlistmentId;                                              //0x30
    NOK_KMUTANT Mutex;                                                  //0x40
    NOK_LIST_ENTRY NextSameTx;                                          //0x78
    NOK_LIST_ENTRY NextSameRm;                                          //0x88
    NOK_PKRESOURCEMANAGER ResourceManager;                              //0x98
    NOK_PKTRANSACTION Transaction;                                      //0xa0
    NOK_KENLISTMENT_STATE State;                                          //0xa8
    ULONG Flags;                                                            //0xac
    ULONG NotificationMask;                                                 //0xb0
    VOID* Key;                                                              //0xb8
    ULONG KeyRefCount;                                                      //0xc0
    VOID* RecoveryInformation;                                              //0xc8
    ULONG RecoveryInformationLength;                                        //0xd0
    VOID* DynamicNameInformation;                                           //0xd8
    ULONG DynamicNameInformationLength;                                     //0xe0
    NOK_KTMNOTIFICATION_PACKET* FinalNotification;                      //0xe8
    NOK_PKENLISTMENT SupSubEnlistment;                                  //0xf0
    VOID* SupSubEnlHandle;                                                  //0xf8
    VOID* SubordinateTxHandle;                                              //0x100
    NOK_GUID CrmEnlistmentEnId;                                         //0x108
    NOK_GUID CrmEnlistmentTmId;                                         //0x118
    NOK_GUID CrmEnlistmentRmId;                                         //0x128
    ULONG NextHistory;                                                      //0x138
    NOK_KENLISTMENT_HISTORY History[20];                                //0x13c
}NOK_KENLISTMENT, * NOK_PKENLISTMENT;
//0x4 bytes (sizeof)
typedef enum _NOK_UNNAMED_KTMOH_CommitTransaction_Result
{
    KTMOH_CommitTransaction_Result = 1,
    KTMOH_RollbackTransaction_Result = 2
}NOK_UNNAMED_KTMOH_CommitTransaction_Result, * NOK_PUNNAMED_KTMOH_CommitTransaction_Result;
//0x8 bytes (sizeof)
typedef struct _NOK_KTRANSACTION_HISTORY
{
    NOK_UNNAMED_KTMOH_CommitTransaction_Result  RecordType;                 //0x0
    ULONG Payload;                                                          //0x4
}NOK_KTRANSACTION_HISTORY, * NOK_PKTRANSACTION_HISTORY;
//0x2d8 bytes (sizeof)
typedef struct _NOK_KTRANSACTION
{
    NOK_KEVENT OutcomeEvent;                                            //0x0
    ULONG cookie;                                                           //0x18
    NOK_KMUTANT Mutex;                                                  //0x20
    NOK_PKTRANSACTION TreeTx;                                           //0x58
    NOK_KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;                   //0x60
    NOK_KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;                       //0x88
    NOK_GUID UOW;                                                       //0xb0
    NOK_KTRANSACTION_STATE State;                                         //0xc0
    ULONG Flags;                                                            //0xc4
    NOK_LIST_ENTRY EnlistmentHead;                                      //0xc8
    ULONG EnlistmentCount;                                                  //0xd8
    ULONG RecoverableEnlistmentCount;                                       //0xdc
    ULONG PrePrepareRequiredEnlistmentCount;                                //0xe0
    ULONG PrepareRequiredEnlistmentCount;                                   //0xe4
    ULONG OutcomeRequiredEnlistmentCount;                                   //0xe8
    ULONG PendingResponses;                                                 //0xec
    NOK_PKENLISTMENT SuperiorEnlistment;                                //0xf0
    NOK_CLS_LSN LastLsn;                                                 //0xf8
    NOK_LIST_ENTRY PromotedEntry;                                       //0x100
    NOK_PKTRANSACTION PromoterTransaction;                              //0x110
    VOID* PromotePropagation;                                               //0x118
    ULONG IsolationLevel;                                                   //0x120
    ULONG IsolationFlags;                                                   //0x124
    NOK_LARGE_INTEGER Timeout;                                           //0x128
    NOK_UNICODE_STRING Description;                                     //0x130
    NOK_PKTHREAD RollbackThread;                                        //0x140
    NOK_WORK_QUEUE_ITEM RollbackWorkItem;                               //0x148
    NOK_KDPC RollbackDpc;                                               //0x168
    NOK_KTIMER RollbackTimer;                                           //0x1a8
    NOK_LIST_ENTRY LsnOrderedEntry;                                     //0x1e8
    NOK_KTRANSACTION_OUTCOME Outcome;                                     //0x1f8
    NOK_PKTM Tm;                                                        //0x200
    LONGLONG CommitReservation;                                             //0x208
    NOK_KTRANSACTION_HISTORY TransactionHistory[10];                    //0x210
    ULONG TransactionHistoryCount;                                          //0x260
    VOID* DTCPrivateInformation;                                            //0x268
    ULONG DTCPrivateInformationLength;                                      //0x270
    NOK_KMUTANT DTCPrivateInformationMutex;                             //0x278
    VOID* PromotedTxSelfHandle;                                             //0x2b0
    ULONG PendingPromotionCount;                                            //0x2b8
    NOK_KEVENT PromotionCompletedEvent;                                 //0x2c0
}NOK_KTRANSACTION, * NOK_PKTRANSACTION;
//0x38 bytes (sizeof)
typedef struct _NOK_PS_IO_CONTROL_ENTRY
{
    union
    {
        NOK_RTL_BALANCED_NODE VolumeTreeNode;                           //0x0
        struct
        {
            NOK_LIST_ENTRY FreeListEntry;                               //0x0
            ULONGLONG ReservedForParentValue;                               //0x10
        };
    };
    ULONGLONG VolumeKey;                                                    //0x18
    NOK_EX_RUNDOWN_REF Rundown;                                         //0x20
    VOID* IoControl;                                                        //0x28
    VOID* VolumeIoAttribution;                                              //0x30
}NOK_PS_IO_CONTROL_ENTRY, * NOK_PPS_IO_CONTROL_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_IO_SESSION_STATE
{
    NOK_IoSessionStateCreated = 1,
    NOK_IoSessionStateInitialized = 2,
    NOK_IoSessionStateConnected = 3,
    NOK_IoSessionStateDisconnected = 4,
    NOK_IoSessionStateDisconnectedLoggedOn = 5,
    NOK_IoSessionStateLoggedOn = 6,
    NOK_IoSessionStateLoggedOff = 7,
    NOK_IoSessionStateTerminated = 8,
    NOK_IoSessionStateMax = 9
}NOK_IO_SESSION_STATE, * NOK_PIO_SESSION_STATE;
//0x120 bytes (sizeof)
typedef struct _NOK_MMPAGING_FILE
{
    ULONGLONG Size;                                                         //0x0
    ULONGLONG MaximumSize;                                                  //0x8
    ULONGLONG MinimumSize;                                                  //0x10
    ULONGLONG FreeSpace;                                                    //0x18
    ULONGLONG PeakUsage;                                                    //0x20
    ULONGLONG HighestPage;                                                  //0x28
    ULONGLONG FreeReservationSpace;                                         //0x30
    NOK_PFILE_OBJECT File;                                              //0x38
    NOK_PMMMOD_WRITER_MDL_ENTRY* Entry;                                 //0x40
    ULONG NumberOfModWriterEntries;                                         //0x48
    NOK_SLIST_HEADER PfnsToFree;                                         //0x50
    NOK_UNICODE_STRING PageFileName;                                    //0x60
    NOK_PMI_PAGING_FILE_SPACE_BITMAPS Bitmaps;                          //0x70
    ULONG AllocationBitmapHint;                                             //0x78
    ULONG LargestAllocationCluster;                                         //0x7c
    ULONG RefreshAllocationCluster;                                         //0x80
    ULONG LastRefreshAllocationCluster;                                     //0x84
    ULONG ReservedClusterSizeAggregate;                                     //0x88
    ULONG MaximumRunLengthInBitmaps;                                        //0x8c
    NOK_RTL_RB_TREE BitmapsCacheLengthTree;                             //0x90
    NOK_RTL_RB_TREE BitmapsCacheLocationTree;                           //0xa0
    NOK_LIST_ENTRY BitmapsCacheFreeList;                                //0xb0
    NOK_PMI_PAGEFILE_BITMAPS_CACHE_ENTRY BitmapsCacheEntries;           //0xc0
    union
    {
        ULONG ToBeEvictedCount;                                             //0xc8
        ULONG HybridPriority;                                               //0xc8
    };
    USHORT PageFileNumber:4;                                                //0xcc
    USHORT WsSwapPagefile:1;                                                //0xcc
    USHORT NoReservations:1;                                                //0xcc
    USHORT VirtualStorePagefile:1;                                          //0xcc
    USHORT SwapSupported:1;                                                 //0xcc
    USHORT NodeInserted:1;                                                  //0xcc
    USHORT StackNotified:1;                                                 //0xcc
    USHORT BackedBySCM:1;                                                   //0xcc
    USHORT SpecialPurposeMemory:1;                                          //0xcc
    USHORT Spare0:3;                                                        //0xcc
    UCHAR AdriftMdls:1;                                                     //0xce
    UCHAR Spare1:7;                                                         //0xce
    UCHAR IgnoreReservations:1;                                             //0xcf
    UCHAR Spare2:7;                                                         //0xcf
    ULONG PageHashPages;                                                    //0xd0
    ULONG PageHashPagesPeak;                                                //0xd4
    ULONG* PageHash;                                                        //0xd8
    VOID* FileHandle;                                                       //0xe0
    volatile LONG SpinLock;                                                 //0xe8
    NOK_RTL_AVL_TREE FlowThroughReadRoot;                               //0xf0
    NOK_PMI_PARTITION Partition;                                        //0xf8
    NOK_RTL_BALANCED_NODE FileObjectNode;                               //0x100
}NOK_MMPAGING_FILE, * NOK_PMMPAGING_FILE;
//0x8 bytes (sizeof)
typedef struct _NOK_RTL_CHASH_ENTRY
{
    ULONGLONG Key;                                                          //0x0
}NOK_RTL_CHASH_ENTRY, * NOK_PRTL_CHASH_ENTRY;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_CHASH_TABLE
{
    NOK_PRTL_CHASH_ENTRY Table;                                         //0x0
    ULONG EntrySizeShift;                                                   //0x8
    ULONG EntryMax;                                                         //0xc
    ULONG EntryCount;                                                       //0x10
}NOK_RTL_CHASH_TABLE, * NOK_PRTL_CHASH_TABLE;
//0x10 bytes (sizeof)
typedef struct _NOK_HEAP_VS_DELAY_FREE_CONTEXT
{
    NOK_SLIST_HEADER ListHead;                                           //0x0
}NOK_HEAP_VS_DELAY_FREE_CONTEXT, * NOK_PHEAP_VS_DELAY_FREE_CONTEXT;
//0x58 bytes (sizeof)
typedef struct _NOK_HEAP_RUNTIME_MEMORY_STATS
{
    volatile ULONGLONG TotalReservedPages;                                  //0x0
    volatile ULONGLONG TotalCommittedPages;                                 //0x8
    ULONGLONG FreeCommittedPages;                                           //0x10
    ULONGLONG LfhFreeCommittedPages;                                        //0x18
    NOK_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS LargePageStats[2];          //0x20
    NOK_RTL_HP_SEG_ALLOC_POLICY LargePageUtilizationPolicy;             //0x40
}NOK_HEAP_RUNTIME_MEMORY_STATS, * NOK_PHEAP_RUNTIME_MEMORY_STATS;
//0x50 bytes (sizeof)
typedef struct _NOK_RTLP_HP_ALLOC_TRACKER
{
    ULONGLONG BaseAddress;                                                  //0x0
    union
    {
        NOK_RTL_CSPARSE_BITMAP AllocTrackerBitmap;                      //0x8
        UCHAR AllocTrackerBitmapBuffer[72];                                 //0x8
    };
}NOK_RTLP_HP_ALLOC_TRACKER, * NOK_PRTLP_HP_ALLOC_TRACKER;
//0x10 bytes (sizeof)
typedef struct _NOK_STRING64
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    ULONGLONG Buffer;                                                       //0x8
}NOK_STRING64, * NOK_PSTRING64;
//0x28 bytes (sizeof)
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE
{
    ULONG Flags;                                                            //0x0
    ULONG Shift;                                                            //0x4
    ULONG TableSize;                                                        //0x8
    ULONG Pivot;                                                            //0xc
    ULONG DivisorMask;                                                      //0x10
    ULONG NumEntries;                                                       //0x14
    ULONG NonEmptyBuckets;                                                  //0x18
    ULONG NumEnumerators;                                                   //0x1c
    VOID* Directory;                                                        //0x20
}NOK_RTL_DYNAMIC_HASH_TABLE, * NOK_PRTL_DYNAMIC_HASH_TABLE;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
    NOK_PLIST_ENTRY ChainHead;                                          //0x0
    NOK_PLIST_ENTRY PrevLinkage;                                        //0x8
    ULONGLONG Signature;                                                    //0x10
}NOK_RTL_DYNAMIC_HASH_TABLE_CONTEXT, * NOK_PRTL_DYNAMIC_HASH_TABLE_CONTEXT;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY
{
    NOK_LIST_ENTRY Linkage;                                             //0x0
    ULONGLONG Signature;                                                    //0x10
}NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY, * NOK_PRTL_DYNAMIC_HASH_TABLE_ENTRY;
//0x28 bytes (sizeof)
typedef struct _NOK_RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
    union
    {
        NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                     //0x0
        NOK_PLIST_ENTRY CurEntry;                                       //0x0
    };
    NOK_PLIST_ENTRY ChainHead;                                          //0x18
    ULONG BucketIndex;                                                      //0x20
}NOK_RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, * NOK_PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
//0x8 bytes (sizeof)
typedef struct _NOK_RTL_HP_SUB_ALLOCATOR_CONFIGS
{
    NOK_RTL_HP_LFH_CONFIG LfhConfigs;                                   //0x0
    NOK_RTL_HP_VS_CONFIG VsConfigs;                                     //0x4
}NOK_RTL_HP_SUB_ALLOCATOR_CONFIGS, * NOK_PRTL_HP_SUB_ALLOCATOR_CONFIGS;
//0x4 bytes (sizeof)
typedef struct _NOK_MM_SESSION_SPACE_FLAGS
{
    ULONG Initialized:1;                                                    //0x0
    ULONG DeletePending:1;                                                  //0x0
    ULONG PoolInitialized:1;                                                //0x0
    ULONG DynamicVaInitialized:1;                                           //0x0
    ULONG WsInitialized:1;                                                  //0x0
    ULONG PoolDestroyed:1;                                                  //0x0
    ULONG ObjectInitialized:1;                                              //0x0
    ULONG SessionHeapInitialized:1;                                         //0x0
    ULONG SessionHeapDestroyed:1;                                           //0x0
    ULONG LeakedPoolDeliberately:1;                                         //0x0
    ULONG Filler:22;                                                        //0x0
}NOK_MM_SESSION_SPACE_FLAGS, * NOK_PMM_SESSION_SPACE_FLAGS;
//0x5000 bytes (sizeof)
typedef struct _NOK_MM_SESSION_SPACE
{
    volatile LONG ReferenceCount;                                           //0x0
    union
    {
        ULONG LongFlags;                                                    //0x4
        NOK_MM_SESSION_SPACE_FLAGS Flags;                               //0x4
    } u;                                                                    //0x4
    ULONG SessionId;                                                        //0x8
    volatile LONG ProcessReferenceToSession;                                //0xc
    NOK_LIST_ENTRY ProcessList;                                         //0x10
    ULONGLONG SessionPageDirectoryIndex;                                    //0x20
    volatile ULONGLONG NonPagablePages;                                     //0x28
    volatile ULONGLONG CommittedPages;                                      //0x30
    VOID* PagedPoolStart;                                                   //0x38
    VOID* PagedPoolEnd;                                                     //0x40
    VOID* SessionObject;                                                    //0x48
    VOID* SessionObjectHandle;                                              //0x50
    NOK_RTL_AVL_TREE ImageTree;                                         //0x58
    ULONG LocaleId;                                                         //0x60
    ULONG AttachCount;                                                      //0x64
    NOK_KGATE AttachGate;                                               //0x68
    NOK_LIST_ENTRY WsListEntry;                                         //0x80
    NOK_RTL_BALANCED_NODE WsTreeEntry;                                  //0x90
    NOK_MM_PAGED_POOL_INFO PagedPoolInfo;                               //0xa8
    NOK_MMSESSION Session;                                              //0xc0
    ULONGLONG CombineDomain;                                                //0xe0
    NOK_MMSUPPORT_FULL Vm;                                              //0x100
    NOK_MMWSL_INSTANCE WorkingSetList;                                  //0x240
    NOK_MMSUPPORT_AGGREGATION AggregateSessionWs;                       //0x280
    VOID* HeapState;                                                        //0x2a0
    NOK_MI_SESSION_DRIVER_UNLOAD DriverUnload;                          //0x2a8
    ULONG TopLevelPteLockBits[32];                                          //0x2b0
    NOK_MMPTE PageDirectory;                                            //0x330
    NOK_EX_PUSH_LOCK SessionVaLock;                                     //0x338
    NOK_RTL_BITMAP_EX DynamicVaBitMap;                                  //0x340
    ULONGLONG DynamicVaHint;                                                //0x350
    NOK_EX_PUSH_LOCK SessionPteLock;                                    //0x358
    LONG PoolBigEntriesInUse;                                               //0x360
    volatile LONG PagedPoolPdeCount;                                        //0x364
    ULONG DynamicSessionPdeCount;                                           //0x368
    NOK_MI_SYSTEM_PTE_TYPE SystemPteInfo;                               //0x370
    VOID* PoolTrackTableExpansion;                                          //0x3d0
    ULONGLONG PoolTrackTableExpansionSize;                                  //0x3d8
    VOID* PoolTrackBigPages;                                                //0x3e0
    ULONGLONG PoolTrackBigPagesSize;                                        //0x3e8
    NOK_RTL_AVL_TREE PermittedFaultsTree;                               //0x3f0
    NOK_IO_SESSION_STATE IoState;                                         //0x3f8
    ULONG IoStateSequence;                                                  //0x3fc
    NOK_KEVENT IoNotificationEvent;                                     //0x400
    NOK_PEJOB ServerSilo;                                               //0x418
    ULONGLONG CreateTime;                                                   //0x420
    UCHAR PoolTags[16384];                                                  //0x1000
}NOK_MM_SESSION_SPACE, * NOK_PMM_SESSION_SPACE;
//0xc bytes (sizeof)
typedef struct _NOK_RTL_FEATURE_CONFIGURATION
{
    ULONG FeatureId;                                                        //0x0
    ULONG Priority:4;                                                       //0x4
    ULONG EnabledState:2;                                                   //0x4
    ULONG IsWexpConfiguration:1;                                            //0x4
    ULONG HasSubscriptions:1;                                               //0x4
    ULONG Variant:6;                                                        //0x4
    ULONG VariantPayloadKind:2;                                             //0x4
    ULONG VariantPayload;                                                   //0x8
}NOK_RTL_FEATURE_CONFIGURATION, * NOK_PRTL_FEATURE_CONFIGURATION;
//0x8 bytes (sizeof)
typedef struct _NOK_RTL_FEATURE_USAGE_REPORT
{
    ULONG FeatureId;                                                        //0x0
    USHORT ReportingKind;                                                   //0x4
    USHORT ReportingOptions;                                                //0x6
}NOK_RTL_FEATURE_USAGE_REPORT, * NOK_PRTL_FEATURE_USAGE_REPORT;
//0x40 bytes (sizeof)
typedef struct _NOK_XSAVE_AREA_HEADER
{
    ULONGLONG Mask;                                                         //0x0
    ULONGLONG CompactionMask;                                               //0x8
    ULONGLONG Reserved2[6];                                                 //0x10
}NOK_XSAVE_AREA_HEADER, * NOK_PXSAVE_AREA_HEADER;
//0x240 bytes (sizeof)
typedef struct _NOK_XSAVE_AREA
{
    NOK_XSAVE_FORMAT LegacyState;                                       //0x0
    NOK_XSAVE_AREA_HEADER Header;                                       //0x200
}NOK_XSAVE_AREA, * NOK_PXSAVE_AREA;
//0x28 bytes (sizeof)
typedef struct _NOK_ETW_FILTER_EVENT_NAME_DATA
{
    UCHAR FilterIn;                                                         //0x0
    UCHAR Level;                                                            //0x1
    ULONGLONG MatchAnyKeyword;                                              //0x8
    ULONGLONG MatchAllKeyword;                                              //0x10
    NOK_RTL_HASH_TABLE NameTable;                                       //0x18
}NOK_ETW_FILTER_EVENT_NAME_DATA, * NOK_PETW_FILTER_EVENT_NAME_DATA;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_HASH_TABLE_ITERATOR
{
    NOK_PRTL_HASH_TABLE Hash;                                           //0x0
    NOK_PRTL_HASH_ENTRY HashEntry;                                      //0x8
    NOK_PSINGLE_LIST_ENTRY Bucket;                                      //0x10
}NOK_RTL_HASH_TABLE_ITERATOR, * NOK_PRTL_HASH_TABLE_ITERATOR;
//0x4 bytes (sizeof)
typedef enum _NOK_RTLP_HP_LOCK_TYPE
{
    NOK_HeapLockPaged = 0,
    NOK_HeapLockNonPaged = 1,
    NOK_HeapLockTypeMax = 2
}NOK_RTLP_HP_LOCK_TYPE, * NOK_PRTLP_HP_LOCK_TYPE;
//0x6d0 bytes (sizeof)
typedef struct _NOK_HEAP_FAILURE_INFORMATION
{
    ULONG Version;                                                          //0x0
    ULONG StructureSize;                                                    //0x4
    NOK_HEAP_FAILURE_TYPE FailureType;                                    //0x8
    VOID* HeapAddress;                                                      //0x10
    VOID* Address;                                                          //0x18
    VOID* Param1;                                                           //0x20
    VOID* Param2;                                                           //0x28
    VOID* Param3;                                                           //0x30
    VOID* PreviousBlock;                                                    //0x38
    VOID* NextBlock;                                                        //0x40
    NOK_FAKE_HEAP_ENTRY ExpectedDecodedEntry;                           //0x48
    VOID* StackTrace[32];                                                   //0x58
    UCHAR HeapMajorVersion;                                                 //0x158
    UCHAR HeapMinorVersion;                                                 //0x159
    NOK_EXCEPTION_RECORD ExceptionRecord;                               //0x160
    NOK_CONTEXT ContextRecord;                                          //0x200
}NOK_HEAP_FAILURE_INFORMATION, * NOK_PHEAP_FAILURE_INFORMATION;
//0x68 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_BUCKET
{
    NOK_HEAP_LFH_SUBSEGMENT_OWNER State;                                //0x0
    ULONGLONG TotalBlockCount;                                              //0x38
    ULONGLONG TotalSubsegmentCount;                                         //0x40
    ULONG ReciprocalBlockSize;                                              //0x48
    UCHAR Shift;                                                            //0x4c
    UCHAR ContentionCount;                                                  //0x4d
    ULONGLONG AffinityMappingLock;                                          //0x50
    UCHAR* ProcAffinityMapping;                                             //0x58
    NOK_HEAP_LFH_AFFINITY_SLOT** AffinitySlots;                         //0x60
}NOK_HEAP_LFH_BUCKET, * NOK_PHEAP_LFH_BUCKET;
//0x30 bytes (sizeof)
typedef struct _NOK_HEAP_VAMGR_ALLOCATOR
{
    ULONGLONG TreeLock;                                                     //0x0
    NOK_RTL_RB_TREE FreeRanges;                                         //0x8
    NOK_HEAP_VAMGR_VASPACE* VaSpace;                                    //0x18
    VOID* PartitionHandle;                                                  //0x20
    USHORT ChunksPerRegion;                                                 //0x28
    USHORT RefCount;                                                        //0x2a
    UCHAR AllocatorIndex;                                                   //0x2c
    UCHAR NumaNode;                                                         //0x2d
    UCHAR LockType:1;                                                       //0x2e
    UCHAR MemoryType:2;                                                     //0x2e
    UCHAR ConstrainedVA:1;                                                  //0x2e
    UCHAR AllowFreeHead:1;                                                  //0x2e
    UCHAR Spare0:3;                                                         //0x2e
    UCHAR Spare1;                                                           //0x2f
}NOK_HEAP_VAMGR_ALLOCATOR, * NOK_PHEAP_VAMGR_ALLOCATOR;
//0xc0 bytes (sizeof)
typedef struct _NOK_HEAP_VS_CONTEXT
{
    ULONGLONG Lock;                                                         //0x0
    NOK_RTLP_HP_LOCK_TYPE LockType;                                       //0x8
    NOK_RTL_RB_TREE FreeChunkTree;                                      //0x10
    NOK_LIST_ENTRY SubsegmentList;                                      //0x20
    ULONGLONG TotalCommittedUnits;                                          //0x30
    ULONGLONG FreeCommittedUnits;                                           //0x38
    NOK_HEAP_VS_DELAY_FREE_CONTEXT DelayFreeContext;                    //0x40
    VOID* BackendCtx;                                                       //0x80
    NOK_HEAP_SUBALLOCATOR_CALLBACKS Callbacks;                          //0x88
    NOK_RTL_HP_VS_CONFIG Config;                                        //0xb0
    ULONG Flags;                                                            //0xb4
}NOK_HEAP_VS_CONTEXT, * NOK_PHEAP_VS_CONTEXT;
//0x1040 bytes (sizeof)
typedef struct _NOK_RTL_DYNAMIC_LOOKASIDE
{
    ULONGLONG EnabledBucketBitmap;                                          //0x0
    ULONG BucketCount;                                                      //0x8
    ULONG ActiveBucketCount;                                                //0xc
    NOK_RTL_LOOKASIDE Buckets[64];                                      //0x40
}NOK_RTL_DYNAMIC_LOOKASIDE, * NOK_PRTL_DYNAMIC_LOOKASIDE;
//0x38 bytes (sizeof)
typedef struct _NOK_RTL_QUERY_REGISTRY_TABLE
{
    LONG (*QueryRoutine)(WCHAR* arg1, ULONG arg2, VOID* arg3, ULONG arg4, VOID* arg5, VOID* arg6); //0x0
    ULONG Flags;                                                            //0x8
    WCHAR* Name;                                                            //0x10
    VOID* EntryContext;                                                     //0x18
    ULONG DefaultType;                                                      //0x20
    VOID* DefaultData;                                                      //0x28
    ULONG DefaultLength;                                                    //0x30
}NOK_RTL_QUERY_REGISTRY_TABLE, * NOK_PRTL_QUERY_REGISTRY_TABLE;
//0x20 bytes (sizeof)
typedef struct _NOK_RTL_RANGE_LIST
{
    NOK_LIST_ENTRY ListHead;                                            //0x0
    ULONG Flags;                                                            //0x10
    ULONG Count;                                                            //0x14
    ULONG Stamp;                                                            //0x18
}NOK_RTL_RANGE_LIST, * NOK_PRTL_RANGE_LIST;
//0x158 bytes (sizeof)
typedef struct _NOK_ARBITER_INSTANCE
{
    ULONG Signature;                                                        //0x0
    NOK_PKEVENT MutexEvent;                                             //0x8
    WCHAR* Name;                                                            //0x10
    WCHAR* OrderingName;                                                    //0x18
    LONG ResourceType;                                                      //0x20
    NOK_RTL_RANGE_LIST* Allocation;                                     //0x28
    NOK_RTL_RANGE_LIST* PossibleAllocation;                             //0x30
    NOK_ARBITER_ORDERING_LIST OrderingList;                             //0x38
    NOK_ARBITER_ORDERING_LIST ReservedList;                             //0x48
    LONG ReferenceCount;                                                    //0x58
    NOK_PARBITER_INTERFACE Interface;                                   //0x60
    ULONG AllocationStackMaxSize;                                           //0x68
    NOK_PARBITER_ALLOCATION_STATE AllocationStack;                      //0x70
    LONG (*UnpackRequirement)(NOK_PIO_RESOURCE_DESCRIPTOR arg1, ULONGLONG* arg2, ULONGLONG* arg3, ULONGLONG* arg4, ULONGLONG* arg5); //0x78
    LONG (*PackResource)(NOK_PIO_RESOURCE_DESCRIPTOR arg1, ULONGLONG arg2, NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR arg3); //0x80
    LONG (*UnpackResource)(NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x88
    LONG (*ScoreRequirement)(NOK_PIO_RESOURCE_DESCRIPTOR arg1);         //0x90
    LONG (*TestAllocation)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_TEST_ALLOCATION_PARAMETERS arg2); //0x98
    LONG (*RetestAllocation)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_RETEST_ALLOCATION_PARAMETERS arg2); //0xa0
    LONG (*CommitAllocation)(NOK_PARBITER_INSTANCE arg1);               //0xa8
    LONG (*RollbackAllocation)(NOK_PARBITER_INSTANCE arg1);             //0xb0
    LONG (*BootAllocation)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_BOOT_ALLOCATION_PARAMETERS arg2); //0xb8
    LONG (*QueryArbitrate)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_QUERY_ARBITRATE_PARAMETERS arg2); //0xc0
    LONG (*QueryConflict)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_QUERY_CONFLICT_PARAMETERS arg2); //0xc8
    LONG (*AddReserved)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ADD_RESERVED_PARAMETERS arg2); //0xd0
    LONG (*StartArbiter)(NOK_PARBITER_INSTANCE arg1, NOK_PCM_RESOURCE_LIST arg2); //0xd8
    LONG (*PreprocessEntry)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0xe0
    LONG (*AllocateEntry)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0xe8
    UCHAR (*GetNextAllocationRange)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0xf0
    UCHAR (*FindSuitableRange)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0xf8
    VOID (*AddAllocation)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0x100
    VOID (*BacktrackAllocation)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0x108
    UCHAR (*OverrideConflict)(NOK_PARBITER_INSTANCE arg1, NOK_PARBITER_ALLOCATION_STATE arg2); //0x110
    LONG (*InitializeRangeList)(NOK_PARBITER_INSTANCE arg1, ULONG arg2, NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR arg3, NOK_RTL_RANGE_LIST* arg4); //0x118
    LONG (*DeleteOwnerRanges)(NOK_PARBITER_INSTANCE arg1, VOID* arg2);  //0x120
    UCHAR TransactionInProgress;                                            //0x128
    NOK_PKEVENT TransactionEvent;                                       //0x130
    VOID* Extension;                                                        //0x138
    NOK_PDEVICE_OBJECT BusDeviceObject;                                 //0x140
    VOID* ConflictCallbackContext;                                          //0x148
    UCHAR (*ConflictCallback)(VOID* arg1, NOK_PRTL_RANGE arg2);         //0x150
}NOK_ARBITER_INSTANCE, * NOK_PARBITER_INSTANCE;
//0x8 bytes (sizeof)
typedef union _NOK_HEAP_LFH_SUBSEGMENT_STATS
{
    NOK_HEAP_LFH_SUBSEGMENT_STAT Buckets[4];                            //0x0
    VOID* AllStats;                                                         //0x0
}NOK_HEAP_LFH_SUBSEGMENT_STATS, * NOK_PHEAP_LFH_SUBSEGMENT_STATS;
//0x50 bytes (sizeof)
typedef struct _NOK_RTL_RETPOLINE_ROUTINES
{
    ULONG UnwindDataOffset;                                                 //0x0
    ULONG SwitchtableJump[16];                                              //0x4
    ULONG CfgIndirectRax;                                                   //0x44
    ULONG NonCfgIndirectRax;                                                //0x48
    ULONG ImportR10;                                                        //0x4c
}NOK_RTL_RETPOLINE_ROUTINES, * NOK_PRTL_RETPOLINE_ROUTINES;
//0x3840 bytes (sizeof)
typedef struct _NOK_HEAP_VAMGR_CTX
{
    NOK_HEAP_VAMGR_VASPACE VaSpace;                                     //0x0
    ULONGLONG AllocatorLock;                                                //0x860
    ULONG AllocatorCount;                                                   //0x868
    NOK_HEAP_VAMGR_ALLOCATOR Allocators[255];                           //0x870
}NOK_HEAP_VAMGR_CTX, * NOK_PHEAP_VAMGR_CTX;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_SPLAY_LINKS
{
    NOK_PRTL_SPLAY_LINKS Parent;                                        //0x0
    NOK_PRTL_SPLAY_LINKS LeftChild;                                     //0x8
    NOK_PRTL_SPLAY_LINKS RightChild;                                    //0x10
}NOK_RTL_SPLAY_LINKS, * NOK_PRTL_SPLAY_LINKS;
//0xa0 bytes (sizeof)
typedef struct _NOK_ALPC_COMPLETION_LIST
{
    NOK_LIST_ENTRY Entry;                                               //0x0
    NOK_PEPROCESS OwnerProcess;                                         //0x10
    NOK_EX_PUSH_LOCK CompletionListLock;                                //0x18
    NOK_PMDL Mdl;                                                       //0x20
    VOID* UserVa;                                                           //0x28
    VOID* UserLimit;                                                        //0x30
    VOID* DataUserVa;                                                       //0x38
    VOID* SystemVa;                                                         //0x40
    ULONGLONG TotalSize;                                                    //0x48
    NOK_ALPC_COMPLETION_LIST_HEADER* Header;                            //0x50
    VOID* List;                                                             //0x58
    ULONGLONG ListSize;                                                     //0x60
    VOID* Bitmap;                                                           //0x68
    ULONGLONG BitmapSize;                                                   //0x70
    VOID* Data;                                                             //0x78
    ULONGLONG DataSize;                                                     //0x80
    ULONG BitmapLimit;                                                      //0x88
    ULONG BitmapNextHint;                                                   //0x8c
    ULONG ConcurrencyCount;                                                 //0x90
    ULONG AttributeFlags;                                                   //0x94
    ULONG AttributeSize;                                                    //0x98
}NOK_ALPC_COMPLETION_LIST, * NOK_PALPC_COMPLETION_LIST;
//0x48 bytes (sizeof)
typedef struct _NOK_RTL_STACKDB_CONTEXT
{
    NOK_RTL_HASH_TABLE StackSegmentTable;                               //0x0
    NOK_RTL_HASH_TABLE StackEntryTable;                                 //0x10
    NOK_RTL_SRWLOCK StackEntryTableLock;                                //0x20
    NOK_RTL_SRWLOCK SegmentTableLock;                                   //0x28
    VOID* (*Allocate)(ULONGLONG arg1, VOID* arg2);                          //0x30
    VOID (*Free)(VOID* arg1, VOID* arg2);                                   //0x38
    VOID* AllocatorContext;                                                 //0x40
}NOK_RTL_STACKDB_CONTEXT, * NOK_PRTL_STACKDB_CONTEXT;
//0xac bytes (sizeof)
typedef struct _NOK_RTL_TIME_ZONE_INFORMATION
{
    LONG Bias;                                                              //0x0
    WCHAR StandardName[32];                                                 //0x4
    NOK_TIME_FIELDS StandardStart;                                      //0x44
    LONG StandardBias;                                                      //0x54
    WCHAR DaylightName[32];                                                 //0x58
    NOK_TIME_FIELDS DaylightStart;                                      //0x98
    LONG DaylightBias;                                                      //0xa8
}NOK_RTL_TIME_ZONE_INFORMATION, * NOK_PRTL_TIME_ZONE_INFORMATION;
//0x10 bytes (sizeof)
typedef struct _NOK_RTL_HASH_ENTRY
{
    NOK_SINGLE_LIST_ENTRY BucketLink;                                   //0x0
    ULONGLONG Key;                                                          //0x8
}NOK_RTL_HASH_ENTRY, * NOK_PRTL_HASH_ENTRY;
//0x20 bytes (sizeof)
typedef struct _NOK_RELATIVE_SYMLINK_INFO
{
    USHORT ExposedNamespaceLength;                                          //0x0
    USHORT Flags;                                                           //0x2
    USHORT DeviceNameLength;                                                //0x4
    USHORT Reserved;                                                        //0x6
    NOK_PRELATIVE_SYMLINK_INFO InteriorMountPoint;                      //0x8
    NOK_UNICODE_STRING OpenedName;                                      //0x10
}NOK_RELATIVE_SYMLINK_INFO, * NOK_PRELATIVE_SYMLINK_INFO;
//0x10 bytes (sizeof)
typedef struct _NOK_DMA_SCATTER_GATHER_LIST
{
    ULONG NumberOfElements;                                                 //0x0
    ULONGLONG Reserved;                                                     //0x8
    NOK_SCATTER_GATHER_ELEMENT Elements[0];                             //0x10
}NOK_DMA_SCATTER_GATHER_LIST, * NOK_PDMA_SCATTER_GATHER_LIST;
//0xa0 bytes (sizeof)
typedef struct _NOK_TIMEZONE_CHANGE_EVENT
{
    NOK_KDPC Dpc;                                                       //0x0
    NOK_KTIMER Timer;                                                   //0x40
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x80
}NOK_TIMEZONE_CHANGE_EVENT, * NOK_PTIMEZONE_CHANGE_EVENT;
//0x4 bytes (sizeof)
typedef enum _NOK_INTERRUPT_TARGET_TYPE
{
    NOK_InterruptTargetInvalid = 0,
    NOK_InterruptTargetAllIncludingSelf = 1,
    NOK_InterruptTargetAllExcludingSelf = 2,
    NOK_InterruptTargetSelfOnly = 3,
    NOK_InterruptTargetPhysical = 4,
    NOK_InterruptTargetLogicalFlat = 5,
    NOK_InterruptTargetLogicalClustered = 6,
    NOK_InterruptTargetRemapIndex = 7,
    NOK_InterruptTargetHypervisor = 8
}NOK_INTERRUPT_TARGET_TYPE, * NOK_PINTERRUPT_TARGET_TYPE;
//0x58 bytes (sizeof)
typedef struct _NOK_SECONDARY_INTERRUPT_PROVIDER_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    ULONG GsivBase;                                                         //0x10
    USHORT GsivSize;                                                        //0x14
    NOK_PDRIVER_OBJECT DriverObject;                                    //0x18
    VOID* Reserved1;                                                        //0x20
    VOID* Reserved2;                                                        //0x28
    VOID* Reserved3;                                                        //0x30
    VOID* Reserved4;                                                        //0x38
    VOID* Reserved5;                                                        //0x40
    VOID* Reserved6;                                                        //0x48
    VOID* Reserved7;                                                        //0x50
}NOK_SECONDARY_INTERRUPT_PROVIDER_INTERFACE, * NOK_PSECONDARY_INTERRUPT_PROVIDER_INTERFACE;
//0x10 bytes (sizeof)
typedef struct _NOK_SECONDARY_INTERRUPT_LINE_STATE
{
    NOK_KINTERRUPT_POLARITY Polarity;                                     //0x0
    NOK_KINTERRUPT_MODE Mode;                                             //0x4
    ULONG Vector;                                                           //0x8
    UCHAR Unmasked;                                                         //0xc
}NOK_SECONDARY_INTERRUPT_LINE_STATE, * NOK_PSECONDARY_INTERRUPT_LINE_STATE;
//0x40 bytes (sizeof)
typedef struct _NOK_SECTION_IMAGE_INFORMATION
{
    VOID* TransferAddress;                                                  //0x0
    ULONG ZeroBits;                                                         //0x8
    ULONGLONG MaximumStackSize;                                             //0x10
    ULONGLONG CommittedStackSize;                                           //0x18
    ULONG SubSystemType;                                                    //0x20
    union
    {
        struct
        {
            USHORT SubSystemMinorVersion;                                   //0x24
            USHORT SubSystemMajorVersion;                                   //0x26
        };
        ULONG SubSystemVersion;                                             //0x24
    };
    union
    {
        struct
        {
            USHORT MajorOperatingSystemVersion;                             //0x28
            USHORT MinorOperatingSystemVersion;                             //0x2a
        };
        ULONG OperatingSystemVersion;                                       //0x28
    };
    USHORT ImageCharacteristics;                                            //0x2c
    USHORT DllCharacteristics;                                              //0x2e
    USHORT Machine;                                                         //0x30
    UCHAR ImageContainsCode;                                                //0x32
    union
    {
        UCHAR ImageFlags;                                                   //0x33
        struct
        {
            UCHAR ComPlusNativeReady:1;                                     //0x33
            UCHAR ComPlusILOnly:1;                                          //0x33
            UCHAR ImageDynamicallyRelocated:1;                              //0x33
            UCHAR ImageMappedFlat:1;                                        //0x33
            UCHAR BaseBelow4gb:1;                                           //0x33
            UCHAR ComPlusPrefer32bit:1;                                     //0x33
            UCHAR Reserved:2;                                               //0x33
        };
    };
    ULONG LoaderFlags;                                                      //0x34
    ULONG ImageFileSize;                                                    //0x38
    ULONG CheckSum;                                                         //0x3c
}NOK_SECTION_IMAGE_INFORMATION, * NOK_PSECTION_IMAGE_INFORMATION;
//0x50 bytes (sizeof)
typedef struct _NOK_MI_SECTION_IMAGE_INFORMATION
{
    NOK_SECTION_IMAGE_INFORMATION ExportedImageInformation;             //0x0
    NOK_MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;            //0x40
}NOK_MI_SECTION_IMAGE_INFORMATION, * NOK_PMI_SECTION_IMAGE_INFORMATION;
//0x18 bytes (sizeof)
typedef struct _NOK_RTL_DRIVE_LETTER_CURDIR
{
    USHORT Flags;                                                           //0x0
    USHORT Length;                                                          //0x2
    ULONG TimeStamp;                                                        //0x4
    NOK_STRING DosPath;                                                 //0x8
}NOK_RTL_DRIVE_LETTER_CURDIR, * NOK_PRTL_DRIVE_LETTER_CURDIR;
//0x40 bytes (sizeof)
typedef struct _NOK_OBJECT_CREATE_INFORMATION
{
    ULONG Attributes;                                                       //0x0
    VOID* RootDirectory;                                                    //0x8
    CHAR ProbeMode;                                                         //0x10
    ULONG PagedPoolCharge;                                                  //0x14
    ULONG NonPagedPoolCharge;                                               //0x18
    ULONG SecurityDescriptorCharge;                                         //0x1c
    VOID* SecurityDescriptor;                                               //0x20
    NOK_PSECURITY_QUALITY_OF_SERVICE SecurityQos;                       //0x28
    NOK_SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;           //0x30
}NOK_OBJECT_CREATE_INFORMATION, * NOK_POBJECT_CREATE_INFORMATION;
//0x138 bytes (sizeof)
typedef struct _NOK_CM_KEY_CONTROL_BLOCK
{
    ULONGLONG RefCount;                                                     //0x0
    ULONG ExtFlags:16;                                                      //0x8
    ULONG Freed:1;                                                          //0x8
    ULONG Discarded:1;                                                      //0x8
    ULONG HiveUnloaded:1;                                                   //0x8
    ULONG Decommissioned:1;                                                 //0x8
    ULONG SpareExtFlag:1;                                                   //0x8
    ULONG TotalLevels:10;                                                   //0x8
    union
    {
        NOK_CM_KEY_HASH KeyHash;                                        //0x10
        struct
        {
            NOK_CM_PATH_HASH ConvKey;                                   //0x10
            NOK_PCM_KEY_HASH NextHash;                                  //0x18
            NOK_PHHIVE KeyHive;                                         //0x20
            ULONG KeyCell;                                                  //0x28
        };
    };
    NOK_EX_PUSH_LOCK KcbPushlock;                                       //0x30
    union
    {
        NOK_PKTHREAD Owner;                                             //0x38
        LONG SharedCount;                                                   //0x38
    };
    UCHAR DelayedDeref:1;                                                   //0x40
    UCHAR DelayedClose:1;                                                   //0x40
    UCHAR Parking:1;                                                        //0x40
    UCHAR LayerSemantics;                                                   //0x41
    SHORT LayerHeight;                                                      //0x42
    ULONG Spare1;                                                           //0x44
    NOK_PCM_KEY_CONTROL_BLOCK ParentKcb;                                //0x48
    NOK_PCM_NAME_CONTROL_BLOCK NameBlock;                               //0x50
    NOK_CM_KEY_SECURITY_CACHE* CachedSecurity;                          //0x58
    NOK_CHILD_LIST ValueList;                                           //0x60
    NOK_PCM_KEY_CONTROL_BLOCK LinkTarget;                               //0x68
    union
    {
        NOK_CM_INDEX_HINT_BLOCK* IndexHint;                             //0x70
        ULONG HashKey;                                                      //0x70
        ULONG SubKeyCount;                                                  //0x70
    };
    union
    {
        NOK_LIST_ENTRY KeyBodyListHead;                                 //0x78
        NOK_LIST_ENTRY ClonedListEntry;                                 //0x78
    };
    NOK_PCM_KEY_BODY KeyBodyArray[4];                                   //0x88
    NOK_LARGE_INTEGER KcbLastWriteTime;                                  //0xa8
    USHORT KcbMaxNameLen;                                                   //0xb0
    USHORT KcbMaxValueNameLen;                                              //0xb2
    ULONG KcbMaxValueDataLen;                                               //0xb4
    ULONG KcbUserFlags:4;                                                   //0xb8
    ULONG KcbVirtControlFlags:4;                                            //0xb8
    ULONG KcbDebug:8;                                                       //0xb8
    ULONG Flags:16;                                                         //0xb8
    ULONG Spare3;                                                           //0xbc
    NOK_PCM_KCB_LAYER_INFO LayerInfo;                                   //0xc0
    CHAR* RealKeyName;                                                      //0xc8
    NOK_LIST_ENTRY KCBUoWListHead;                                      //0xd0
    union
    {
        NOK_LIST_ENTRY DelayQueueEntry;                                 //0xe0
        volatile UCHAR* Stolen;                                             //0xe0
    };
    NOK_PCM_TRANS TransKCBOwner;                                        //0xf0
    NOK_CM_INTENT_LOCK KCBLock;                                         //0xf8
    NOK_CM_INTENT_LOCK KeyLock;                                         //0x108
    NOK_CHILD_LIST TransValueCache;                                     //0x118
    NOK_PCM_TRANS TransValueListOwner;                                  //0x120
    union
    {
        NOK_PUNICODE_STRING FullKCBName;                                //0x128
        struct
        {
            ULONGLONG FullKCBNameStale:1;                                   //0x128
            ULONGLONG Reserved:63;                                          //0x128
        };
    };
    ULONGLONG SequenceNumber;                                               //0x130
}NOK_CM_KEY_CONTROL_BLOCK, * NOK_PCM_KEY_CONTROL_BLOCK;
//0x488 bytes (sizeof)
typedef struct _NOK_CM_DIRTY_VECTOR_LOG
{
    volatile ULONG Next;                                                    //0x0
    ULONG Size;                                                             //0x4
    NOK_CM_DIRTY_VECTOR_LOG_ENTRY Log[16];                              //0x8
}NOK_CM_DIRTY_VECTOR_LOG, * NOK_PCM_DIRTY_VECTOR_LOG;
//0x8 bytes (sizeof)
typedef union _NOK_PS_CLIENT_SECURITY_CONTEXT
{
    ULONGLONG ImpersonationData;                                            //0x0
    VOID* ImpersonationToken;                                               //0x0
    ULONGLONG ImpersonationLevel:2;                                         //0x0
    ULONGLONG EffectiveOnly:1;                                              //0x0
}NOK_PS_CLIENT_SECURITY_CONTEXT, * NOK_PPS_CLIENT_SECURITY_CONTEXT;
//0x4c0 bytes (sizeof)
typedef struct _NOK_HEAP_LFH_CONTEXT
{
    VOID* BackendCtx;                                                       //0x0
    NOK_HEAP_SUBALLOCATOR_CALLBACKS Callbacks;                          //0x8
    UCHAR* AffinityModArray;                                                //0x30
    UCHAR MaxAffinity;                                                      //0x38
    UCHAR LockType;                                                         //0x39
    SHORT MemStatsOffset;                                                   //0x3a
    NOK_RTL_HP_LFH_CONFIG Config;                                       //0x3c
    NOK_HEAP_LFH_SUBSEGMENT_STATS BucketStats;                           //0x40
    ULONGLONG SubsegmentCreationLock;                                       //0x48
    NOK_HEAP_LFH_BUCKET* Buckets[129];                                  //0x80
}NOK_HEAP_LFH_CONTEXT, * NOK_PHEAP_LFH_CONTEXT;
//0x30 bytes (sizeof)
typedef struct _NOK_MAPPED_FILE_SEGMENT
{
    NOK_PCONTROL_AREA ControlArea;                                      //0x0
    ULONG TotalNumberOfPtes;                                                //0x8
    NOK_SEGMENT_FLAGS SegmentFlags;                                     //0xc
    ULONGLONG NumberOfCommittedPages;                                       //0x10
    ULONGLONG SizeOfSegment;                                                //0x18
    union
    {
        NOK_PMMEXTEND_INFO ExtendInfo;                                  //0x20
        VOID* BasedAddress;                                                 //0x20
    };
    NOK_EX_PUSH_LOCK SegmentLock;                                       //0x28
}NOK_MAPPED_FILE_SEGMENT, * NOK_PMAPPED_FILE_SEGMENT;
//0x800 bytes (sizeof)
typedef struct _NOK_SEGMENT_HEAP
{
    NOK_RTL_HP_ENV_HANDLE EnvHandle;                                     //0x0
    ULONG Signature;                                                        //0x10
    ULONG GlobalFlags;                                                      //0x14
    ULONG Interceptor;                                                      //0x18
    USHORT ProcessHeapListIndex;                                            //0x1c
    USHORT AllocatedFromMetadata:1;                                         //0x1e
    union
    {
        NOK_RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;                 //0x20
        struct
        {
            ULONGLONG ReservedMustBeZero1;                                  //0x20
            VOID* UserContext;                                              //0x28
            ULONGLONG ReservedMustBeZero2;                                  //0x30
            VOID* Spare;                                                    //0x38
        };
    };
    ULONGLONG LargeMetadataLock;                                            //0x40
    NOK_RTL_RB_TREE LargeAllocMetadata;                                 //0x48
    volatile ULONGLONG LargeReservedPages;                                  //0x58
    volatile ULONGLONG LargeCommittedPages;                                 //0x60
    NOK_RTL_RUN_ONCE StackTraceInitVar;                                  //0x68
    NOK_HEAP_RUNTIME_MEMORY_STATS MemStats;                             //0x80
    USHORT GlobalLockCount;                                                 //0xd8
    ULONG GlobalLockOwner;                                                  //0xdc
    ULONGLONG ContextExtendLock;                                            //0xe0
    UCHAR* AllocatedBase;                                                   //0xe8
    UCHAR* UncommittedBase;                                                 //0xf0
    UCHAR* ReservedLimit;                                                   //0xf8
    NOK_HEAP_SEG_CONTEXT SegContexts[2];                                //0x100
    NOK_HEAP_VS_CONTEXT VsContext;                                      //0x280
    NOK_HEAP_LFH_CONTEXT LfhContext;                                    //0x340
}NOK_SEGMENT_HEAP, * NOK_PSEGMENT_HEAP;
//0x10 bytes (sizeof)
typedef struct _NOK_RTLP_HP_METADATA_HEAP_CTX
{
    NOK_SEGMENT_HEAP* Heap;                                             //0x0
    NOK_RTL_RUN_ONCE InitOnce;                                           //0x8
}NOK_RTLP_HP_METADATA_HEAP_CTX, * NOK_PRTLP_HP_METADATA_HEAP_CTX;
//0x58 bytes (sizeof)
typedef struct _NOK_CM_NOTIFY_BLOCK
{
    NOK_LIST_ENTRY HiveList;                                            //0x0
    NOK_LIST_ENTRY PostList;                                            //0x10
    NOK_PCM_KEY_CONTROL_BLOCK KeyControlBlock;                          //0x20
    NOK_PCM_KEY_BODY KeyBody;                                           //0x28
    ULONG Filter:30;                                                        //0x30
    ULONG WatchTree:1;                                                      //0x30
    ULONG NotifyPending:1;                                                  //0x30
    NOK_SECURITY_SUBJECT_CONTEXT SubjectContext;                        //0x38
}NOK_CM_NOTIFY_BLOCK, * NOK_PCM_NOTIFY_BLOCK;
//0xa0 bytes (sizeof)
typedef struct _NOK_ACCESS_STATE
{
    NOK_LUID OperationID;                                               //0x0
    UCHAR SecurityEvaluated;                                                //0x8
    UCHAR GenerateAudit;                                                    //0x9
    UCHAR GenerateOnClose;                                                  //0xa
    UCHAR PrivilegesAllocated;                                              //0xb
    ULONG Flags;                                                            //0xc
    ULONG RemainingDesiredAccess;                                           //0x10
    ULONG PreviouslyGrantedAccess;                                          //0x14
    ULONG OriginalDesiredAccess;                                            //0x18
    NOK_SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;                //0x20
    VOID* SecurityDescriptor;                                               //0x40
    VOID* AuxData;                                                          //0x48
    union
    {
        NOK_INITIAL_PRIVILEGE_SET InitialPrivilegeSet;                  //0x50
        NOK_PRIVILEGE_SET PrivilegeSet;                                 //0x50
    } Privileges;                                                           //0x50
    UCHAR AuditPrivileges;                                                  //0x7c
    NOK_UNICODE_STRING ObjectName;                                      //0x80
    NOK_UNICODE_STRING ObjectTypeName;                                  //0x90
}NOK_ACCESS_STATE, * NOK_PACCESS_STATE;
//0x18 bytes (sizeof)
typedef struct _NOK_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
{
    NOK_SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType;                     //0x0
    union
    {
        VOID* PackageSid;                                                   //0x8
        NOK_UNICODE_STRING IsolationPrefix;                             //0x8
    };
}NOK_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR, * NOK_PSEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;
//0x10 bytes (sizeof)
typedef struct _NOK_SEP_CACHED_HANDLES_TABLE
{
    NOK_EX_PUSH_LOCK Lock;                                              //0x0
    NOK_PRTL_DYNAMIC_HASH_TABLE HashTable;                              //0x8
}NOK_SEP_CACHED_HANDLES_TABLE, * NOK_PSEP_CACHED_HANDLES_TABLE;
//0x4 bytes (sizeof)
typedef enum _NOK_SEP_CACHED_HANDLES_ENTRY_TYPE
{
    NOK_SepCachedHandlesEntryLowbox = 0,
    NOK_SepCachedHandlesEntryBnoIsolation = 1
}NOK_SEP_CACHED_HANDLES_ENTRY_TYPE, * NOK_PSEP_CACHED_HANDLES_ENTRY_TYPE;
//0x38 bytes (sizeof)
typedef struct _NOK_SEP_LOWBOX_NUMBER_ENTRY
{
    NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                         //0x0
    LONGLONG ReferenceCount;                                                //0x18
    VOID* PackageSid;                                                       //0x20
    ULONG LowboxNumber;                                                     //0x28
    VOID* AtomTable;                                                        //0x30
}NOK_SEP_LOWBOX_NUMBER_ENTRY, * NOK_PSEP_LOWBOX_NUMBER_ENTRY;
//0x28 bytes (sizeof)
typedef struct _NOK_SEP_LOWBOX_NUMBER_MAPPING
{
    NOK_EX_PUSH_LOCK Lock;                                              //0x0
    NOK_RTL_BITMAP Bitmap;                                              //0x8
    NOK_PRTL_DYNAMIC_HASH_TABLE HashTable;                              //0x18
    UCHAR Active;                                                           //0x20
}NOK_SEP_LOWBOX_NUMBER_MAPPING, * NOK_PSEP_LOWBOX_NUMBER_MAPPING;
//0x38 bytes (sizeof)
typedef struct _NOK_SEP_LUID_TO_INDEX_MAP_ENTRY
{
    NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                         //0x0
    LONGLONG ReferenceCount;                                                //0x18
    ULONGLONG Luid;                                                         //0x20
    ULONGLONG IndexIntoGlobalSingletonTable;                                //0x28
    UCHAR MarkedForDeletion;                                                //0x30
}NOK_SEP_LUID_TO_INDEX_MAP_ENTRY, * NOK_PSEP_LUID_TO_INDEX_MAP_ENTRY;
//0x30 bytes (sizeof)
typedef struct _NOK_SEP_SILOSTATE
{
    NOK_PSEP_LOGON_SESSION_REFERENCES SystemLogonSession;               //0x0
    NOK_PSEP_LOGON_SESSION_REFERENCES AnonymousLogonSession;            //0x8
    VOID* AnonymousLogonToken;                                              //0x10
    VOID* AnonymousLogonTokenNoEveryone;                                    //0x18
    NOK_PUNICODE_STRING UncSystemPaths;                                 //0x20
    NOK_PCI_NGEN_PATHS NgenPaths;                                       //0x28
}NOK_SEP_SILOSTATE, * NOK_PSEP_SILOSTATE;
//0x20 bytes (sizeof)
typedef struct _NOK_SEP_SID_VALUES_BLOCK
{
    ULONG BlockLength;                                                      //0x0
    LONGLONG ReferenceCount;                                                //0x8
    ULONG SidCount;                                                         //0x10
    ULONGLONG SidValuesStart;                                               //0x18
}NOK_SEP_SID_VALUES_BLOCK, * NOK_PSEP_SID_VALUES_BLOCK;
//0xc0 bytes (sizeof)
typedef struct _NOK_SEP_LOGON_SESSION_REFERENCES
{
    NOK_PSEP_LOGON_SESSION_REFERENCES Next;                             //0x0
    NOK_LUID LogonId;                                                   //0x8
    NOK_LUID BuddyLogonId;                                              //0x10
    LONGLONG ReferenceCount;                                                //0x18
    ULONG Flags;                                                            //0x20
    NOK_PDEVICE_MAP pDeviceMap;                                         //0x28
    VOID* Token;                                                            //0x30
    NOK_UNICODE_STRING AccountName;                                     //0x38
    NOK_UNICODE_STRING AuthorityName;                                   //0x48
    NOK_SEP_CACHED_HANDLES_TABLE CachedHandlesTable;                    //0x58
    NOK_EX_PUSH_LOCK SharedDataLock;                                    //0x68
    NOK_PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION SharedClaimAttributes;  //0x70
    NOK_PSEP_SID_VALUES_BLOCK SharedSidValues;                          //0x78
    NOK_OB_HANDLE_REVOCATION_BLOCK RevocationBlock;                     //0x80
    NOK_PEJOB ServerSilo;                                               //0xa0
    NOK_LUID SiblingAuthId;                                             //0xa8
    NOK_LIST_ENTRY TokenList;                                           //0xb0
}NOK_SEP_LOGON_SESSION_REFERENCES, * NOK_PSEP_LOGON_SESSION_REFERENCES;
//0x120 bytes (sizeof)
typedef struct _NOK_SEP_TOKEN_DIAG_TRACK_ENTRY
{
    VOID* ProcessCid;                                                       //0x0
    VOID* ThreadCid;                                                        //0x8
    UCHAR ImageFileName[16];                                                //0x10
    ULONG CreateMethod;                                                     //0x20
    ULONGLONG CreateTrace[30];                                              //0x28
    LONG Count;                                                             //0x118
    LONG CaptureCount;                                                      //0x11c
}NOK_SEP_TOKEN_DIAG_TRACK_ENTRY, * NOK_PSEP_TOKEN_DIAG_TRACK_ENTRY;
//0x40 bytes (sizeof)
typedef struct _NOK_SESSION_LOWBOX_MAP
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG SessionId;                                                        //0x10
    NOK_SEP_LOWBOX_NUMBER_MAPPING LowboxMap;                            //0x18
}NOK_SESSION_LOWBOX_MAP, * NOK_PSESSION_LOWBOX_MAP;
//0x4 bytes (sizeof)
typedef enum _NOK_DMA_WIDTH
{
    NOK_Width8Bits = 0,
    NOK_Width16Bits = 1,
    NOK_Width32Bits = 2,
    NOK_Width64Bits = 3,
    NOK_WidthNoWrap = 4,
    NOK_MaximumDmaWidth = 5
}NOK_DMA_WIDTH, * NOK_PDMA_WIDTH;
//0x18 bytes (sizeof)
typedef struct _NOK_SHARED_CACHE_MAP_LIST_CURSOR
{
    NOK_LIST_ENTRY SharedCacheMapLinks;                                 //0x0
    ULONG Flags;                                                            //0x10
}NOK_SHARED_CACHE_MAP_LIST_CURSOR, * NOK_PSHARED_CACHE_MAP_LIST_CURSOR;
//0x10 bytes (sizeof)
typedef struct _NOK_IO_PRIORITY_INFO
{
    ULONG Size;                                                             //0x0
    ULONG ThreadPriority;                                                   //0x4
    ULONG PagePriority;                                                     //0x8
    NOK_IO_PRIORITY_HINT IoPriority;                                      //0xc
}NOK_IO_PRIORITY_INFO, * NOK_PIO_PRIORITY_INFO;
//0x14 bytes (sizeof)
typedef struct _NOK_FILE_GET_QUOTA_INFORMATION
{
    ULONG NextEntryOffset;                                                  //0x0
    ULONG SidLength;                                                        //0x4
    NOK_SID Sid;                                                        //0x8
}NOK_FILE_GET_QUOTA_INFORMATION, * NOK_PFILE_GET_QUOTA_INFORMATION;
//0x4 bytes (sizeof)
typedef enum _NOK_TOKEN_TYPE
{
    NOK_TokenPrimary = 1,
    NOK_TokenImpersonation = 2
}NOK_TOKEN_TYPE, * NOK_PTOKEN_TYPE;
//0x260 bytes (sizeof)
typedef struct _NOK_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
    ULONG DeviceGroupsCount;                                                //0x0
    NOK_SID_AND_ATTRIBUTES* pDeviceGroups;                              //0x8
    ULONG RestrictedDeviceGroupsCount;                                      //0x10
    NOK_SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;                    //0x18
    NOK_SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;                       //0x20
    NOK_SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;             //0x130
    NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION pUserSecurityAttributes; //0x240
    NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION pDeviceSecurityAttributes; //0x248
    NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION pRestrictedUserSecurityAttributes; //0x250
    NOK_PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION pRestrictedDeviceSecurityAttributes; //0x258
}NOK_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, * NOK_PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
//0x4 bytes (sizeof)
typedef enum _NOK_NT_PRODUCT_TYPE
{
    NOK_NtProductWinNt = 1,
    NOK_NtProductLanManNt = 2,
    NOK_NtProductServer = 3
}NOK_NT_PRODUCT_TYPE, * NOK_PNT_PRODUCT_TYPE;
//0x8 bytes (sizeof)
typedef union _NOK_PS_INTERLOCKED_TIMER_DELAY_VALUES
{
    ULONGLONG DelayMs:30;                                                   //0x0
    ULONGLONG CoalescingWindowMs:30;                                        //0x0
    ULONGLONG Reserved:1;                                                   //0x0
    ULONGLONG NewTimerWheel:1;                                              //0x0
    ULONGLONG Retry:1;                                                      //0x0
    ULONGLONG Locked:1;                                                     //0x0
    ULONGLONG All;                                                          //0x0
}NOK_PS_INTERLOCKED_TIMER_DELAY_VALUES, * NOK_PPS_INTERLOCKED_TIMER_DELAY_VALUES;
//0xa40 bytes (sizeof)
typedef struct _NOK_EPROCESS
{
    NOK_KPROCESS Pcb;                                                   //0x0
    NOK_EX_PUSH_LOCK ProcessLock;                                       //0x438
    VOID* UniqueProcessId;                                                  //0x440
    NOK_LIST_ENTRY ActiveProcessLinks;                                  //0x448
    NOK_EX_RUNDOWN_REF RundownProtect;                                  //0x458
    union
    {
        ULONG Flags2;                                                       //0x460
        struct
        {
            ULONG JobNotReallyActive:1;                                     //0x460
            ULONG AccountingFolded:1;                                       //0x460
            ULONG NewProcessReported:1;                                     //0x460
            ULONG ExitProcessReported:1;                                    //0x460
            ULONG ReportCommitChanges:1;                                    //0x460
            ULONG LastReportMemory:1;                                       //0x460
            ULONG ForceWakeCharge:1;                                        //0x460
            ULONG CrossSessionCreate:1;                                     //0x460
            ULONG NeedsHandleRundown:1;                                     //0x460
            ULONG RefTraceEnabled:1;                                        //0x460
            ULONG PicoCreated:1;                                            //0x460
            ULONG EmptyJobEvaluated:1;                                      //0x460
            ULONG DefaultPagePriority:3;                                    //0x460
            ULONG PrimaryTokenFrozen:1;                                     //0x460
            ULONG ProcessVerifierTarget:1;                                  //0x460
            ULONG RestrictSetThreadContext:1;                               //0x460
            ULONG AffinityPermanent:1;                                      //0x460
            ULONG AffinityUpdateEnable:1;                                   //0x460
            ULONG PropagateNode:1;                                          //0x460
            ULONG ExplicitAffinity:1;                                       //0x460
            ULONG ProcessExecutionState:2;                                  //0x460
            ULONG EnableReadVmLogging:1;                                    //0x460
            ULONG EnableWriteVmLogging:1;                                   //0x460
            ULONG FatalAccessTerminationRequested:1;                        //0x460
            ULONG DisableSystemAllowedCpuSet:1;                             //0x460
            ULONG ProcessStateChangeRequest:2;                              //0x460
            ULONG ProcessStateChangeInProgress:1;                           //0x460
            ULONG InPrivate:1;                                              //0x460
        };
    };
    union
    {
        ULONG Flags;                                                        //0x464
        struct
        {
            ULONG CreateReported:1;                                         //0x464
            ULONG NoDebugInherit:1;                                         //0x464
            ULONG ProcessExiting:1;                                         //0x464
            ULONG ProcessDelete:1;                                          //0x464
            ULONG ManageExecutableMemoryWrites:1;                           //0x464
            ULONG VmDeleted:1;                                              //0x464
            ULONG OutswapEnabled:1;                                         //0x464
            ULONG Outswapped:1;                                             //0x464
            ULONG FailFastOnCommitFail:1;                                   //0x464
            ULONG Wow64VaSpace4Gb:1;                                        //0x464
            ULONG AddressSpaceInitialized:2;                                //0x464
            ULONG SetTimerResolution:1;                                     //0x464
            ULONG BreakOnTermination:1;                                     //0x464
            ULONG DeprioritizeViews:1;                                      //0x464
            ULONG WriteWatch:1;                                             //0x464
            ULONG ProcessInSession:1;                                       //0x464
            ULONG OverrideAddressSpace:1;                                   //0x464
            ULONG HasAddressSpace:1;                                        //0x464
            ULONG LaunchPrefetched:1;                                       //0x464
            ULONG Background:1;                                             //0x464
            ULONG VmTopDown:1;                                              //0x464
            ULONG ImageNotifyDone:1;                                        //0x464
            ULONG PdeUpdateNeeded:1;                                        //0x464
            ULONG VdmAllowed:1;                                             //0x464
            ULONG ProcessRundown:1;                                         //0x464
            ULONG ProcessInserted:1;                                        //0x464
            ULONG DefaultIoPriority:3;                                      //0x464
            ULONG ProcessSelfDelete:1;                                      //0x464
            ULONG SetTimerResolutionLink:1;                                 //0x464
        };
    };
    NOK_LARGE_INTEGER CreateTime;                                        //0x468
    ULONGLONG ProcessQuotaUsage[2];                                         //0x470
    ULONGLONG ProcessQuotaPeak[2];                                          //0x480
    ULONGLONG PeakVirtualSize;                                              //0x490
    ULONGLONG VirtualSize;                                                  //0x498
    NOK_LIST_ENTRY SessionProcessLinks;                                 //0x4a0
    union
    {
        VOID* ExceptionPortData;                                            //0x4b0
        ULONGLONG ExceptionPortValue;                                       //0x4b0
        ULONGLONG ExceptionPortState:3;                                     //0x4b0
    };
    NOK_EX_FAST_REF Token;                                              //0x4b8
    ULONGLONG MmReserved;                                                   //0x4c0
    NOK_EX_PUSH_LOCK AddressCreationLock;                               //0x4c8
    NOK_EX_PUSH_LOCK PageTableCommitmentLock;                           //0x4d0
    NOK_PETHREAD RotateInProgress;                                      //0x4d8
    NOK_PETHREAD ForkInProgress;                                        //0x4e0
    NOK_PEJOB volatile CommitChargeJob;                                 //0x4e8
    NOK_RTL_AVL_TREE CloneRoot;                                         //0x4f0
    volatile ULONGLONG NumberOfPrivatePages;                                //0x4f8
    volatile ULONGLONG NumberOfLockedPages;                                 //0x500
    VOID* Win32Process;                                                     //0x508
    NOK_PEJOB volatile Job;                                             //0x510
    VOID* SectionObject;                                                    //0x518
    VOID* SectionBaseAddress;                                               //0x520
    ULONG Cookie;                                                           //0x528
    NOK_PPAGEFAULT_HISTORY WorkingSetWatch;                             //0x530
    VOID* Win32WindowStation;                                               //0x538
    VOID* InheritedFromUniqueProcessId;                                     //0x540
    volatile ULONGLONG OwnerProcessId;                                      //0x548
    NOK_PPEB Peb;                                                       //0x550
    NOK_PMM_SESSION_SPACE Session;                                      //0x558
    VOID* Spare1;                                                           //0x560
    NOK_EPROCESS_QUOTA_BLOCK* QuotaBlock;                               //0x568
    NOK_PHANDLE_TABLE ObjectTable;                                      //0x570
    VOID* DebugPort;                                                        //0x578
    NOK_PEWOW64PROCESS WoW64Process;                                    //0x580
    VOID* DeviceMap;                                                        //0x588
    VOID* EtwDataSource;                                                    //0x590
    ULONGLONG PageDirectoryPte;                                             //0x598
    NOK_PFILE_OBJECT ImageFilePointer;                                  //0x5a0
    UCHAR ImageFileName[15];                                                //0x5a8
    UCHAR PriorityClass;                                                    //0x5b7
    VOID* SecurityPort;                                                     //0x5b8
    NOK_SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;      //0x5c0
    NOK_LIST_ENTRY JobLinks;                                            //0x5c8
    VOID* HighestUserAddress;                                               //0x5d8
    NOK_LIST_ENTRY ThreadListHead;                                      //0x5e0
    volatile ULONG ActiveThreads;                                           //0x5f0
    ULONG ImagePathHash;                                                    //0x5f4
    ULONG DefaultHardErrorProcessing;                                       //0x5f8
    LONG LastThreadExitStatus;                                              //0x5fc
    NOK_EX_FAST_REF PrefetchTrace;                                      //0x600
    VOID* LockedPagesList;                                                  //0x608
    NOK_LARGE_INTEGER ReadOperationCount;                                //0x610
    NOK_LARGE_INTEGER WriteOperationCount;                               //0x618
    NOK_LARGE_INTEGER OtherOperationCount;                               //0x620
    NOK_LARGE_INTEGER ReadTransferCount;                                 //0x628
    NOK_LARGE_INTEGER WriteTransferCount;                                //0x630
    NOK_LARGE_INTEGER OtherTransferCount;                                //0x638
    ULONGLONG CommitChargeLimit;                                            //0x640
    volatile ULONGLONG CommitCharge;                                        //0x648
    volatile ULONGLONG CommitChargePeak;                                    //0x650
    NOK_MMSUPPORT_FULL Vm;                                              //0x680
    NOK_LIST_ENTRY MmProcessLinks;                                      //0x7c0
    ULONG ModifiedPageCount;                                                //0x7d0
    LONG ExitStatus;                                                        //0x7d4
    NOK_RTL_AVL_TREE VadRoot;                                           //0x7d8
    VOID* VadHint;                                                          //0x7e0
    ULONGLONG VadCount;                                                     //0x7e8
    volatile ULONGLONG VadPhysicalPages;                                    //0x7f0
    ULONGLONG VadPhysicalPagesLimit;                                        //0x7f8
    NOK_ALPC_PROCESS_CONTEXT AlpcContext;                               //0x800
    NOK_LIST_ENTRY TimerResolutionLink;                                 //0x820
    NOK_PPO_DIAG_STACK_RECORD TimerResolutionStackRecord;               //0x830
    ULONG RequestedTimerResolution;                                         //0x838
    ULONG SmallestTimerResolution;                                          //0x83c
    NOK_LARGE_INTEGER ExitTime;                                          //0x840
    NOK_PINVERTED_FUNCTION_TABLE InvertedFunctionTable;                 //0x848
    NOK_EX_PUSH_LOCK InvertedFunctionTableLock;                         //0x850
    ULONG ActiveThreadsHighWatermark;                                       //0x858
    ULONG LargePrivateVadCount;                                             //0x85c
    NOK_EX_PUSH_LOCK ThreadListLock;                                    //0x860
    VOID* WnfContext;                                                       //0x868
    NOK_PEJOB ServerSilo;                                               //0x870
    UCHAR SignatureLevel;                                                   //0x878
    UCHAR SectionSignatureLevel;                                            //0x879
    NOK_PS_PROTECTION Protection;                                       //0x87a
    UCHAR HangCount:3;                                                      //0x87b
    UCHAR GhostCount:3;                                                     //0x87b
    UCHAR PrefilterException:1;                                             //0x87b
    union
    {
        ULONG Flags3;                                                       //0x87c
        struct
        {
            ULONG Minimal:1;                                                //0x87c
            ULONG ReplacingPageRoot:1;                                      //0x87c
            ULONG Crashed:1;                                                //0x87c
            ULONG JobVadsAreTracked:1;                                      //0x87c
            ULONG VadTrackingDisabled:1;                                    //0x87c
            ULONG AuxiliaryProcess:1;                                       //0x87c
            ULONG SubsystemProcess:1;                                       //0x87c
            ULONG IndirectCpuSets:1;                                        //0x87c
            ULONG RelinquishedCommit:1;                                     //0x87c
            ULONG HighGraphicsPriority:1;                                   //0x87c
            ULONG CommitFailLogged:1;                                       //0x87c
            ULONG ReserveFailLogged:1;                                      //0x87c
            ULONG SystemProcess:1;                                          //0x87c
            ULONG HideImageBaseAddresses:1;                                 //0x87c
            ULONG AddressPolicyFrozen:1;                                    //0x87c
            ULONG ProcessFirstResume:1;                                     //0x87c
            ULONG ForegroundExternal:1;                                     //0x87c
            ULONG ForegroundSystem:1;                                       //0x87c
            ULONG HighMemoryPriority:1;                                     //0x87c
            ULONG EnableProcessSuspendResumeLogging:1;                      //0x87c
            ULONG EnableThreadSuspendResumeLogging:1;                       //0x87c
            ULONG SecurityDomainChanged:1;                                  //0x87c
            ULONG SecurityFreezeComplete:1;                                 //0x87c
            ULONG VmProcessorHost:1;                                        //0x87c
            ULONG VmProcessorHostTransition:1;                              //0x87c
            ULONG AltSyscall:1;                                             //0x87c
            ULONG TimerResolutionIgnore:1;                                  //0x87c
            ULONG DisallowUserTerminate:1;                                  //0x87c
        };
    };
    LONG DeviceAsid;                                                        //0x880
    VOID* SvmData;                                                          //0x888
    NOK_EX_PUSH_LOCK SvmProcessLock;                                    //0x890
    ULONGLONG SvmLock;                                                      //0x898
    NOK_LIST_ENTRY SvmProcessDeviceListHead;                            //0x8a0
    ULONGLONG LastFreezeInterruptTime;                                      //0x8b0
    NOK_PPROCESS_DISK_COUNTERS DiskCounters;                            //0x8b8
    VOID* PicoContext;                                                      //0x8c0
    VOID* EnclaveTable;                                                     //0x8c8
    ULONGLONG EnclaveNumber;                                                //0x8d0
    NOK_EX_PUSH_LOCK EnclaveLock;                                       //0x8d8
    ULONG HighPriorityFaultsAllowed;                                        //0x8e0
    NOK_PPO_PROCESS_ENERGY_CONTEXT EnergyContext;                       //0x8e8
    VOID* VmContext;                                                        //0x8f0
    ULONGLONG SequenceNumber;                                               //0x8f8
    ULONGLONG CreateInterruptTime;                                          //0x900
    ULONGLONG CreateUnbiasedInterruptTime;                                  //0x908
    ULONGLONG TotalUnbiasedFrozenTime;                                      //0x910
    ULONGLONG LastAppStateUpdateTime;                                       //0x918
    ULONGLONG LastAppStateUptime:61;                                        //0x920
    ULONGLONG LastAppState:3;                                               //0x920
    volatile ULONGLONG SharedCommitCharge;                                  //0x928
    NOK_EX_PUSH_LOCK SharedCommitLock;                                  //0x930
    NOK_LIST_ENTRY SharedCommitLinks;                                   //0x938
    union
    {
        struct
        {
            ULONGLONG AllowedCpuSets;                                       //0x948
            ULONGLONG DefaultCpuSets;                                       //0x950
        };
        struct
        {
            ULONGLONG* AllowedCpuSetsIndirect;                              //0x948
            ULONGLONG* DefaultCpuSetsIndirect;                              //0x950
        };
    };
    VOID* DiskIoAttribution;                                                //0x958
    VOID* DxgProcess;                                                       //0x960
    ULONG Win32KFilterSet;                                                  //0x968
    volatile NOK_PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;     //0x970
    volatile ULONG KTimerSets;                                              //0x978
    volatile ULONG KTimer2Sets;                                             //0x97c
    volatile ULONG ThreadTimerSets;                                         //0x980
    ULONGLONG VirtualTimerListLock;                                         //0x988
    NOK_LIST_ENTRY VirtualTimerListHead;                                //0x990
    union
    {
        NOK_WNF_STATE_NAME WakeChannel;                                 //0x9a0
        NOK_PS_PROCESS_WAKE_INFORMATION WakeInfo;                       //0x9a0
    };
    union
    {
        ULONG MitigationFlags;                                              //0x9d0
        struct
        {
            ULONG ControlFlowGuardEnabled:1;                                //0x9d0
            ULONG ControlFlowGuardExportSuppressionEnabled:1;               //0x9d0
            ULONG ControlFlowGuardStrict:1;                                 //0x9d0
            ULONG DisallowStrippedImages:1;                                 //0x9d0
            ULONG ForceRelocateImages:1;                                    //0x9d0
            ULONG HighEntropyASLREnabled:1;                                 //0x9d0
            ULONG StackRandomizationDisabled:1;                             //0x9d0
            ULONG ExtensionPointDisable:1;                                  //0x9d0
            ULONG DisableDynamicCode:1;                                     //0x9d0
            ULONG DisableDynamicCodeAllowOptOut:1;                          //0x9d0
            ULONG DisableDynamicCodeAllowRemoteDowngrade:1;                 //0x9d0
            ULONG AuditDisableDynamicCode:1;                                //0x9d0
            ULONG DisallowWin32kSystemCalls:1;                              //0x9d0
            ULONG AuditDisallowWin32kSystemCalls:1;                         //0x9d0
            ULONG EnableFilteredWin32kAPIs:1;                               //0x9d0
            ULONG AuditFilteredWin32kAPIs:1;                                //0x9d0
            ULONG DisableNonSystemFonts:1;                                  //0x9d0
            ULONG AuditNonSystemFontLoading:1;                              //0x9d0
            ULONG PreferSystem32Images:1;                                   //0x9d0
            ULONG ProhibitRemoteImageMap:1;                                 //0x9d0
            ULONG AuditProhibitRemoteImageMap:1;                            //0x9d0
            ULONG ProhibitLowILImageMap:1;                                  //0x9d0
            ULONG AuditProhibitLowILImageMap:1;                             //0x9d0
            ULONG SignatureMitigationOptIn:1;                               //0x9d0
            ULONG AuditBlockNonMicrosoftBinaries:1;                         //0x9d0
            ULONG AuditBlockNonMicrosoftBinariesAllowStore:1;               //0x9d0
            ULONG LoaderIntegrityContinuityEnabled:1;                       //0x9d0
            ULONG AuditLoaderIntegrityContinuity:1;                         //0x9d0
            ULONG EnableModuleTamperingProtection:1;                        //0x9d0
            ULONG EnableModuleTamperingProtectionNoInherit:1;               //0x9d0
            ULONG RestrictIndirectBranchPrediction:1;                       //0x9d0
            ULONG IsolateSecurityDomain:1;                                  //0x9d0
        } MitigationFlagsValues;                                            //0x9d0
    };
    union
    {
        ULONG MitigationFlags2;                                             //0x9d4
        struct
        {
            ULONG EnableExportAddressFilter:1;                              //0x9d4
            ULONG AuditExportAddressFilter:1;                               //0x9d4
            ULONG EnableExportAddressFilterPlus:1;                          //0x9d4
            ULONG AuditExportAddressFilterPlus:1;                           //0x9d4
            ULONG EnableRopStackPivot:1;                                    //0x9d4
            ULONG AuditRopStackPivot:1;                                     //0x9d4
            ULONG EnableRopCallerCheck:1;                                   //0x9d4
            ULONG AuditRopCallerCheck:1;                                    //0x9d4
            ULONG EnableRopSimExec:1;                                       //0x9d4
            ULONG AuditRopSimExec:1;                                        //0x9d4
            ULONG EnableImportAddressFilter:1;                              //0x9d4
            ULONG AuditImportAddressFilter:1;                               //0x9d4
            ULONG DisablePageCombine:1;                                     //0x9d4
            ULONG SpeculativeStoreBypassDisable:1;                          //0x9d4
            ULONG CetUserShadowStacks:1;                                    //0x9d4
            ULONG AuditCetUserShadowStacks:1;                               //0x9d4
            ULONG AuditCetUserShadowStacksLogged:1;                         //0x9d4
            ULONG UserCetSetContextIpValidation:1;                          //0x9d4
            ULONG AuditUserCetSetContextIpValidation:1;                     //0x9d4
            ULONG AuditUserCetSetContextIpValidationLogged:1;               //0x9d4
            ULONG CetUserShadowStacksStrictMode:1;                          //0x9d4
            ULONG BlockNonCetBinaries:1;                                    //0x9d4
            ULONG BlockNonCetBinariesNonEhcont:1;                           //0x9d4
            ULONG AuditBlockNonCetBinaries:1;                               //0x9d4
            ULONG AuditBlockNonCetBinariesLogged:1;                         //0x9d4
            ULONG Reserved1:1;                                              //0x9d4
            ULONG Reserved2:1;                                              //0x9d4
            ULONG Reserved3:1;                                              //0x9d4
            ULONG Reserved4:1;                                              //0x9d4
            ULONG Reserved5:1;                                              //0x9d4
            ULONG CetDynamicApisOutOfProcOnly:1;                            //0x9d4
            ULONG UserCetSetContextIpValidationRelaxedMode:1;               //0x9d4
        } MitigationFlags2Values;                                           //0x9d4
    };
    VOID* PartitionObject;                                                  //0x9d8
    ULONGLONG SecurityDomain;                                               //0x9e0
    ULONGLONG ParentSecurityDomain;                                         //0x9e8
    VOID* CoverageSamplerContext;                                           //0x9f0
    VOID* MmHotPatchContext;                                                //0x9f8
    NOK_RTL_AVL_TREE DynamicEHContinuationTargetsTree;                  //0xa00
    NOK_EX_PUSH_LOCK DynamicEHContinuationTargetsLock;                  //0xa08
    NOK_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES DynamicEnforcedCetCompatibleRanges; //0xa10
    ULONG DisabledComponentFlags;                                           //0xa20
}NOK_EPROCESS, * NOK_PEPROCESS;
//0x4 bytes (sizeof)
typedef struct _NOK_SINGLE_LIST_ENTRY32
{
    ULONG Next;                                                             //0x0
}NOK_SINGLE_LIST_ENTRY32, * NOK_PSINGLE_LIST_ENTRY32;
//0x48 bytes (sizeof)
typedef struct _NOK_SK_CRASH_MODULE
{
    WCHAR ImageName[32];                                                    //0x0
    ULONG SizeOfImage;                                                      //0x40
    ULONG TimeDateStamp;                                                    //0x44
}NOK_SK_CRASH_MODULE, * NOK_PSK_CRASH_MODULE;
//0x8 bytes (sizeof)
typedef struct _NOK_SK_CRASH_STACK_FRAME
{
    union
    {
        struct
        {
            ULONG ModuleId;                                                 //0x0
            ULONG Rva;                                                      //0x4
        };
        ULONGLONG Pc;                                                       //0x0
    };
}NOK_SK_CRASH_STACK_FRAME, * NOK_PSK_CRASH_STACK_FRAME;
//0x1000 bytes (sizeof)
typedef struct _NOK_SK_CRASH_MINIDUMP
{
    ULONG Size;                                                             //0x0
    ULONG Version;                                                          //0x4
    ULONG ModuleCount;                                                      //0x8
    ULONG FrameCount;                                                       //0xc
    NOK_SK_CRASH_MODULE Modules[16];                                    //0x10
    NOK_SK_CRASH_STACK_FRAME StackFrames[366];                          //0x490
}NOK_SK_CRASH_MINIDUMP, * NOK_PSK_CRASH_MINIDUMP;
//0x24 bytes (sizeof)
typedef struct _NOK_RSDP
{
    ULONGLONG Signature;                                                    //0x0
    UCHAR Checksum;                                                         //0x8
    UCHAR OEMID[6];                                                         //0x9
    UCHAR Revision;                                                         //0xf
    ULONG RsdtAddress;                                                      //0x10
    ULONG Length;                                                           //0x14
    NOK_LARGE_INTEGER XsdtAddress;                                       //0x18
    UCHAR XChecksum;                                                        //0x20
    UCHAR Reserved[3];                                                      //0x21
}NOK_RSDP, * NOK_PRSDP;
//0x18 bytes (sizeof)
typedef struct _NOK_SMBIOS3_TABLE_HEADER
{
    UCHAR Signature[5];                                                     //0x0
    UCHAR Checksum;                                                         //0x5
    UCHAR Length;                                                           //0x6
    UCHAR MajorVersion;                                                     //0x7
    UCHAR MinorVersion;                                                     //0x8
    UCHAR Docrev;                                                           //0x9
    UCHAR EntryPointRevision;                                               //0xa
    UCHAR Reserved;                                                         //0xb
    ULONG StructureTableMaximumSize;                                        //0xc
    ULONGLONG StructureTableAddress;                                        //0x10
}NOK_SMBIOS3_TABLE_HEADER, * NOK_PSMBIOS3_TABLE_HEADER;
//0x8088 bytes (sizeof)
typedef struct _NOK_STACK_TABLE
{
    USHORT NumStackTraces;                                                  //0x0
    USHORT TraceCapacity;                                                   //0x2
    NOK_POBJECT_REF_TRACE StackTrace[16];                               //0x8
    USHORT StackTableHash[16381];                                           //0x88
}NOK_STACK_TABLE, * NOK_PSTACK_TABLE;
//0x440 bytes (sizeof)
typedef struct _NOK_RTL_USER_PROCESS_PARAMETERS
{
    ULONG MaximumLength;                                                    //0x0
    ULONG Length;                                                           //0x4
    ULONG Flags;                                                            //0x8
    ULONG DebugFlags;                                                       //0xc
    VOID* ConsoleHandle;                                                    //0x10
    ULONG ConsoleFlags;                                                     //0x18
    VOID* StandardInput;                                                    //0x20
    VOID* StandardOutput;                                                   //0x28
    VOID* StandardError;                                                    //0x30
    NOK_CURDIR CurrentDirectory;                                        //0x38
    NOK_UNICODE_STRING DllPath;                                         //0x50
    NOK_UNICODE_STRING ImagePathName;                                   //0x60
    NOK_UNICODE_STRING CommandLine;                                     //0x70
    VOID* Environment;                                                      //0x80
    ULONG StartingX;                                                        //0x88
    ULONG StartingY;                                                        //0x8c
    ULONG CountX;                                                           //0x90
    ULONG CountY;                                                           //0x94
    ULONG CountCharsX;                                                      //0x98
    ULONG CountCharsY;                                                      //0x9c
    ULONG FillAttribute;                                                    //0xa0
    ULONG WindowFlags;                                                      //0xa4
    ULONG ShowWindowFlags;                                                  //0xa8
    NOK_UNICODE_STRING WindowTitle;                                     //0xb0
    NOK_UNICODE_STRING DesktopInfo;                                     //0xc0
    NOK_UNICODE_STRING ShellInfo;                                       //0xd0
    NOK_UNICODE_STRING RuntimeData;                                     //0xe0
    NOK_RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];                  //0xf0
    ULONGLONG EnvironmentSize;                                              //0x3f0
    ULONGLONG EnvironmentVersion;                                           //0x3f8
    VOID* PackageDependencyData;                                            //0x400
    ULONG ProcessGroupId;                                                   //0x408
    ULONG LoaderThreads;                                                    //0x40c
    NOK_UNICODE_STRING RedirectionDllName;                              //0x410
    NOK_UNICODE_STRING HeapPartitionName;                               //0x420
    ULONGLONG* DefaultThreadpoolCpuSetMasks;                                //0x430
    ULONG DefaultThreadpoolCpuSetMaskCount;                                 //0x438
    ULONG DefaultThreadpoolThreadMaximum;                                   //0x43c
}NOK_RTL_USER_PROCESS_PARAMETERS, * NOK_PRTL_USER_PROCESS_PARAMETERS;
//0xd8 bytes (sizeof)
typedef struct _NOK_FILE_OBJECT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x8
    NOK_PVPB Vpb;                                                       //0x10
    VOID* FsContext;                                                        //0x18
    VOID* FsContext2;                                                       //0x20
    NOK_SECTION_OBJECT_POINTERS* SectionObjectPointer;                  //0x28
    VOID* PrivateCacheMap;                                                  //0x30
    LONG FinalStatus;                                                       //0x38
    NOK_PFILE_OBJECT RelatedFileObject;                                 //0x40
    UCHAR LockOperation;                                                    //0x48
    UCHAR DeletePending;                                                    //0x49
    UCHAR ReadAccess;                                                       //0x4a
    UCHAR WriteAccess;                                                      //0x4b
    UCHAR DeleteAccess;                                                     //0x4c
    UCHAR SharedRead;                                                       //0x4d
    UCHAR SharedWrite;                                                      //0x4e
    UCHAR SharedDelete;                                                     //0x4f
    ULONG Flags;                                                            //0x50
    NOK_UNICODE_STRING FileName;                                        //0x58
    NOK_LARGE_INTEGER CurrentByteOffset;                                 //0x68
    ULONG Waiters;                                                          //0x70
    ULONG Busy;                                                             //0x74
    VOID* LastLock;                                                         //0x78
    NOK_KEVENT Lock;                                                    //0x80
    NOK_KEVENT Event;                                                   //0x98
    NOK_PIO_COMPLETION_CONTEXT CompletionContext;                       //0xb0
    ULONGLONG IrpListLock;                                                  //0xb8
    NOK_LIST_ENTRY IrpList;                                             //0xc0
    VOID* FileObjectExtension;                                              //0xd0
}NOK_FILE_OBJECT, * NOK_PFILE_OBJECT;
//0xc0 bytes (sizeof)
typedef struct _NOK_SUPPORTED_RANGES
{
    USHORT Version;                                                         //0x0
    UCHAR Sorted;                                                           //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG NoIO;                                                             //0x4
    NOK_SUPPORTED_RANGE IO;                                             //0x8
    ULONG NoMemory;                                                         //0x30
    NOK_SUPPORTED_RANGE Memory;                                         //0x38
    ULONG NoPrefetchMemory;                                                 //0x60
    NOK_SUPPORTED_RANGE PrefetchMemory;                                 //0x68
    ULONG NoDma;                                                            //0x90
    NOK_SUPPORTED_RANGE Dma;                                            //0x98
}NOK_SUPPORTED_RANGES, * NOK_PSUPPORTED_RANGES;
//0x4 bytes (sizeof)
typedef enum _NOK_BUS_DATA_TYPE
{
    NOK_ConfigurationSpaceUndefined = -1,
    NOK_Cmos = 0,
    NOK_EisaConfiguration = 1,
    NOK_Pos = 2,
    NOK_CbusConfiguration = 3,
    NOK_PCIConfiguration = 4,
    NOK_VMEConfiguration = 5,
    NOK_NuBusConfiguration = 6,
    NOK_PCMCIAConfiguration = 7,
    NOK_MPIConfiguration = 8,
    NOK_MPSAConfiguration = 9,
    NOK_PNPISAConfiguration = 10,
    NOK_SgiInternalConfiguration = 11,
    NOK_MaximumBusDataType = 12
}NOK_BUS_DATA_TYPE, * NOK_PBUS_DATA_TYPE;
//0x520 bytes (sizeof)
typedef struct _NOK_RTL_UMS_CONTEXT
{
    NOK_SINGLE_LIST_ENTRY Link;                                         //0x0
    NOK_CONTEXT Context;                                                //0x10
    VOID* Teb;                                                              //0x4e0
    VOID* UserContext;                                                      //0x4e8
    union
    {
        struct
        {
            volatile ULONG ScheduledThread:1;                               //0x4f0
            volatile ULONG Suspended:1;                                     //0x4f0
            volatile ULONG VolatileContext:1;                               //0x4f0
            volatile ULONG Terminated:1;                                    //0x4f0
            volatile ULONG DebugActive:1;                                   //0x4f0
            volatile ULONG RunningOnSelfThread:1;                           //0x4f0
            volatile ULONG DenyRunningOnSelfThread:1;                       //0x4f0
        };
        volatile LONG Flags;                                                //0x4f0
    };
    union
    {
        struct
        {
            volatile ULONGLONG KernelUpdateLock:2;                          //0x4f8
            volatile ULONGLONG PrimaryClientID:62;                          //0x4f8
        };
        volatile ULONGLONG ContextLock;                                     //0x4f8
    };
    NOK_PRTL_UMS_CONTEXT PrimaryUmsContext;                             //0x500
    ULONG SwitchCount;                                                      //0x508
    ULONG KernelYieldCount;                                                 //0x50c
    ULONG MixedYieldCount;                                                  //0x510
    ULONG YieldCount;                                                       //0x514
}NOK_RTL_UMS_CONTEXT, * NOK_PRTL_UMS_CONTEXT;
//0xcc0 bytes (sizeof)
typedef struct _NOK_MI_VISIBLE_STATE
{
    NOK_LIST_ENTRY SessionWsList;                                       //0x0
    NOK_PRTL_BITMAP SessionIdBitmap;                                    //0x10
    NOK_MM_PAGED_POOL_INFO PagedPoolInfo;                               //0x18
    ULONGLONG MaximumNonPagedPoolInPages;                                   //0x30
    ULONGLONG SizeOfPagedPoolInPages;                                       //0x38
    NOK_MI_SYSTEM_PTE_TYPE SystemPteInfo;                               //0x40
    volatile ULONGLONG NonPagedPoolCommit;                                  //0xa0
    volatile ULONGLONG SmallNonPagedPtesCommit;                             //0xa8
    volatile ULONGLONG BootCommit;                                          //0xb0
    volatile ULONGLONG MdlPagesAllocated;                                   //0xb8
    volatile ULONGLONG SystemPageTableCommit;                               //0xc0
    volatile ULONGLONG ProcessCommit;                                       //0xc8
    volatile LONG DriverCommit;                                             //0xd0
    UCHAR PagingLevels;                                                     //0xd4
    volatile ULONGLONG PfnDatabaseCommit;                                   //0xd8
    NOK_MMSUPPORT_FULL SystemWs[6];                                     //0x100
    NOK_MMSUPPORT_SHARED SystemCacheShared;                             //0x880
    NOK_MMSUPPORT_AGGREGATION AggregateSystemWs[1];                     //0x900
    ULONG MapCacheFailures;                                                 //0x920
    ULONGLONG PagefileHashPages;                                            //0x928
    NOK_SYSPTES_HEADER PteHeader;                                       //0x930
    ULONGLONG SystemVaTypeCount[16];                                        //0xa48
    UCHAR SystemVaType[256];                                                //0xac8
    NOK_MI_SYSTEM_VA_ASSIGNMENT SystemVaRegions[13];                    //0xbc8
}NOK_MI_VISIBLE_STATE, * NOK_PMI_VISIBLE_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_SYSTEM_POWER_CONDITION
{
    NOK_PoAc = 0,
    NOK_PoDc = 1,
    NOK_PoHot = 2,
    NOK_PoConditionMaximum = 3
}NOK_SYSTEM_POWER_CONDITION, * NOK_PSYSTEM_POWER_CONDITION;
//0x1d8 bytes (sizeof)
typedef struct _NOK_POP_DEVICE_SYS_STATE
{
    UCHAR IrpMinor;                                                         //0x0
    NOK_SYSTEM_POWER_STATE SystemState;                                   //0x4
    ULONGLONG SpinLock;                                                     //0x8
    NOK_PKTHREAD Thread;                                                //0x10
    NOK_PKEVENT AbortEvent;                                             //0x18
    NOK_PKSEMAPHORE ReadySemaphore;                                     //0x20
    NOK_PKSEMAPHORE FinishedSemaphore;                                  //0x28
    NOK_PO_DEVICE_NOTIFY_ORDER Order;                                   //0x30
    NOK_LIST_ENTRY Pending;                                             //0x1b0
    LONG Status;                                                            //0x1c0
    NOK_PDEVICE_OBJECT FailedDevice;                                    //0x1c8
    UCHAR Waking;                                                           //0x1d0
    UCHAR Cancelled;                                                        //0x1d1
    UCHAR IgnoreErrors;                                                     //0x1d2
    UCHAR IgnoreNotImplemented;                                             //0x1d3
    UCHAR TimeRefreshLockAcquired;                                          //0x1d4
}NOK_POP_DEVICE_SYS_STATE, * NOK_PPOP_DEVICE_SYS_STATE;
//0x18 bytes (sizeof)
typedef struct _NOK_TEB_ACTIVE_FRAME
{
    ULONG Flags;                                                            //0x0
    NOK_TEB_ACTIVE_FRAME* Previous;                                     //0x8
    NOK_TEB_ACTIVE_FRAME_CONTEXT* Context;                              //0x10
}NOK_TEB_ACTIVE_FRAME, * NOK_PTEB_ACTIVE_FRAME;
//0x1838 bytes (sizeof)
typedef struct _NOK_TEB
{
    NOK_NT_TIB NtTib;                                                   //0x0
    VOID* EnvironmentPointer;                                               //0x38
    NOK_CLIENT_ID ClientId;                                             //0x40
    VOID* ActiveRpcHandle;                                                  //0x50
    VOID* ThreadLocalStoragePointer;                                        //0x58
    NOK_PPEB ProcessEnvironmentBlock;                                   //0x60
    ULONG LastErrorValue;                                                   //0x68
    ULONG CountOfOwnedCriticalSections;                                     //0x6c
    VOID* CsrClientThread;                                                  //0x70
    VOID* Win32ThreadInfo;                                                  //0x78
    ULONG User32Reserved[26];                                               //0x80
    ULONG UserReserved[5];                                                  //0xe8
    VOID* WOW32Reserved;                                                    //0x100
    ULONG CurrentLocale;                                                    //0x108
    ULONG FpSoftwareStatusRegister;                                         //0x10c
    VOID* ReservedForDebuggerInstrumentation[16];                           //0x110
    VOID* SystemReserved1[30];                                              //0x190
    CHAR PlaceholderCompatibilityMode;                                      //0x280
    UCHAR PlaceholderHydrationAlwaysExplicit;                               //0x281
    CHAR PlaceholderReserved[10];                                           //0x282
    ULONG ProxiedProcessId;                                                 //0x28c
    NOK_ACTIVATION_CONTEXT_STACK _ActivationStack;                      //0x290
    UCHAR WorkingOnBehalfTicket[8];                                         //0x2b8
    LONG ExceptionCode;                                                     //0x2c0
    UCHAR Padding0[4];                                                      //0x2c4
    NOK_ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;        //0x2c8
    ULONGLONG InstrumentationCallbackSp;                                    //0x2d0
    ULONGLONG InstrumentationCallbackPreviousPc;                            //0x2d8
    ULONGLONG InstrumentationCallbackPreviousSp;                            //0x2e0
    ULONG TxFsContext;                                                      //0x2e8
    UCHAR InstrumentationCallbackDisabled;                                  //0x2ec
    UCHAR UnalignedLoadStoreExceptions;                                     //0x2ed
    UCHAR Padding1[2];                                                      //0x2ee
    NOK_GDI_TEB_BATCH GdiTebBatch;                                      //0x2f0
    NOK_CLIENT_ID RealClientId;                                         //0x7d8
    VOID* GdiCachedProcessHandle;                                           //0x7e8
    ULONG GdiClientPID;                                                     //0x7f0
    ULONG GdiClientTID;                                                     //0x7f4
    VOID* GdiThreadLocalInfo;                                               //0x7f8
    ULONGLONG Win32ClientInfo[62];                                          //0x800
    VOID* glDispatchTable[233];                                             //0x9f0
    ULONGLONG glReserved1[29];                                              //0x1138
    VOID* glReserved2;                                                      //0x1220
    VOID* glSectionInfo;                                                    //0x1228
    VOID* glSection;                                                        //0x1230
    VOID* glTable;                                                          //0x1238
    VOID* glCurrentRC;                                                      //0x1240
    VOID* glContext;                                                        //0x1248
    ULONG LastStatusValue;                                                  //0x1250
    UCHAR Padding2[4];                                                      //0x1254
    NOK_UNICODE_STRING StaticUnicodeString;                             //0x1258
    WCHAR StaticUnicodeBuffer[261];                                         //0x1268
    UCHAR Padding3[6];                                                      //0x1472
    VOID* DeallocationStack;                                                //0x1478
    VOID* TlsSlots[64];                                                     //0x1480
    NOK_LIST_ENTRY TlsLinks;                                            //0x1680
    VOID* Vdm;                                                              //0x1690
    VOID* ReservedForNtRpc;                                                 //0x1698
    VOID* DbgSsReserved[2];                                                 //0x16a0
    ULONG HardErrorMode;                                                    //0x16b0
    UCHAR Padding4[4];                                                      //0x16b4
    VOID* Instrumentation[11];                                              //0x16b8
    NOK_GUID ActivityId;                                                //0x1710
    VOID* SubProcessTag;                                                    //0x1720
    VOID* PerflibData;                                                      //0x1728
    VOID* EtwTraceData;                                                     //0x1730
    VOID* WinSockData;                                                      //0x1738
    ULONG GdiBatchCount;                                                    //0x1740
    union
    {
        NOK_PROCESSOR_NUMBER CurrentIdealProcessor;                     //0x1744
        ULONG IdealProcessorValue;                                          //0x1744
        struct
        {
            UCHAR ReservedPad0;                                             //0x1744
            UCHAR ReservedPad1;                                             //0x1745
            UCHAR ReservedPad2;                                             //0x1746
            UCHAR IdealProcessor;                                           //0x1747
        };
    };
    ULONG GuaranteedStackBytes;                                             //0x1748
    UCHAR Padding5[4];                                                      //0x174c
    VOID* ReservedForPerf;                                                  //0x1750
    VOID* ReservedForOle;                                                   //0x1758
    ULONG WaitingOnLoaderLock;                                              //0x1760
    UCHAR Padding6[4];                                                      //0x1764
    VOID* SavedPriorityState;                                               //0x1768
    ULONGLONG ReservedForCodeCoverage;                                      //0x1770
    VOID* ThreadPoolData;                                                   //0x1778
    VOID** TlsExpansionSlots;                                               //0x1780
    VOID* DeallocationBStore;                                               //0x1788
    VOID* BStoreLimit;                                                      //0x1790
    ULONG MuiGeneration;                                                    //0x1798
    ULONG IsImpersonating;                                                  //0x179c
    VOID* NlsCache;                                                         //0x17a0
    VOID* pShimData;                                                        //0x17a8
    ULONG HeapData;                                                         //0x17b0
    UCHAR Padding7[4];                                                      //0x17b4
    VOID* CurrentTransactionHandle;                                         //0x17b8
    NOK_TEB_ACTIVE_FRAME* ActiveFrame;                                  //0x17c0
    VOID* FlsData;                                                          //0x17c8
    VOID* PreferredLanguages;                                               //0x17d0
    VOID* UserPrefLanguages;                                                //0x17d8
    VOID* MergedPrefLanguages;                                              //0x17e0
    ULONG MuiImpersonation;                                                 //0x17e8
    union
    {
        volatile USHORT CrossTebFlags;                                      //0x17ec
        USHORT SpareCrossTebBits:16;                                        //0x17ec
    };
    union
    {
        USHORT SameTebFlags;                                                //0x17ee
        struct
        {
            USHORT SafeThunkCall:1;                                         //0x17ee
            USHORT InDebugPrint:1;                                          //0x17ee
            USHORT HasFiberData:1;                                          //0x17ee
            USHORT SkipThreadAttach:1;                                      //0x17ee
            USHORT WerInShipAssertCode:1;                                   //0x17ee
            USHORT RanProcessInit:1;                                        //0x17ee
            USHORT ClonedThread:1;                                          //0x17ee
            USHORT SuppressDebugMsg:1;                                      //0x17ee
            USHORT DisableUserStackWalk:1;                                  //0x17ee
            USHORT RtlExceptionAttached:1;                                  //0x17ee
            USHORT InitialThread:1;                                         //0x17ee
            USHORT SessionAware:1;                                          //0x17ee
            USHORT LoadOwner:1;                                             //0x17ee
            USHORT LoaderWorker:1;                                          //0x17ee
            USHORT SkipLoaderInit:1;                                        //0x17ee
            USHORT SpareSameTebBits:1;                                      //0x17ee
        };
    };
    VOID* TxnScopeEnterCallback;                                            //0x17f0
    VOID* TxnScopeExitCallback;                                             //0x17f8
    VOID* TxnScopeContext;                                                  //0x1800
    ULONG LockCount;                                                        //0x1808
    LONG WowTebOffset;                                                      //0x180c
    VOID* ResourceRetValue;                                                 //0x1810
    VOID* ReservedForWdf;                                                   //0x1818
    ULONGLONG ReservedForCrt;                                               //0x1820
    NOK_GUID EffectiveContainerId;                                      //0x1828
}NOK_TEB, * NOK_PTEB;
//0x1000 bytes (sizeof)
typedef struct _NOK_TEB32
{
    NOK_NT_TIB32 NtTib;                                                 //0x0
    ULONG EnvironmentPointer;                                               //0x1c
    NOK_CLIENT_ID32 ClientId;                                           //0x20
    ULONG ActiveRpcHandle;                                                  //0x28
    ULONG ThreadLocalStoragePointer;                                        //0x2c
    ULONG ProcessEnvironmentBlock;                                          //0x30
    ULONG LastErrorValue;                                                   //0x34
    ULONG CountOfOwnedCriticalSections;                                     //0x38
    ULONG CsrClientThread;                                                  //0x3c
    ULONG Win32ThreadInfo;                                                  //0x40
    ULONG User32Reserved[26];                                               //0x44
    ULONG UserReserved[5];                                                  //0xac
    ULONG WOW32Reserved;                                                    //0xc0
    ULONG CurrentLocale;                                                    //0xc4
    ULONG FpSoftwareStatusRegister;                                         //0xc8
    ULONG ReservedForDebuggerInstrumentation[16];                           //0xcc
    ULONG SystemReserved1[26];                                              //0x10c
    CHAR PlaceholderCompatibilityMode;                                      //0x174
    UCHAR PlaceholderHydrationAlwaysExplicit;                               //0x175
    CHAR PlaceholderReserved[10];                                           //0x176
    ULONG ProxiedProcessId;                                                 //0x180
    NOK_ACTIVATION_CONTEXT_STACK32 _ActivationStack;                    //0x184
    UCHAR WorkingOnBehalfTicket[8];                                         //0x19c
    LONG ExceptionCode;                                                     //0x1a4
    ULONG ActivationContextStackPointer;                                    //0x1a8
    ULONG InstrumentationCallbackSp;                                        //0x1ac
    ULONG InstrumentationCallbackPreviousPc;                                //0x1b0
    ULONG InstrumentationCallbackPreviousSp;                                //0x1b4
    UCHAR InstrumentationCallbackDisabled;                                  //0x1b8
    UCHAR SpareBytes[23];                                                   //0x1b9
    ULONG TxFsContext;                                                      //0x1d0
    NOK_GDI_TEB_BATCH32 GdiTebBatch;                                    //0x1d4
    NOK_CLIENT_ID32 RealClientId;                                       //0x6b4
    ULONG GdiCachedProcessHandle;                                           //0x6bc
    ULONG GdiClientPID;                                                     //0x6c0
    ULONG GdiClientTID;                                                     //0x6c4
    ULONG GdiThreadLocalInfo;                                               //0x6c8
    ULONG Win32ClientInfo[62];                                              //0x6cc
    ULONG glDispatchTable[233];                                             //0x7c4
    ULONG glReserved1[29];                                                  //0xb68
    ULONG glReserved2;                                                      //0xbdc
    ULONG glSectionInfo;                                                    //0xbe0
    ULONG glSection;                                                        //0xbe4
    ULONG glTable;                                                          //0xbe8
    ULONG glCurrentRC;                                                      //0xbec
    ULONG glContext;                                                        //0xbf0
    ULONG LastStatusValue;                                                  //0xbf4
    NOK_STRING32 StaticUnicodeString;                                   //0xbf8
    WCHAR StaticUnicodeBuffer[261];                                         //0xc00
    ULONG DeallocationStack;                                                //0xe0c
    ULONG TlsSlots[64];                                                     //0xe10
    NOK_LIST_ENTRY32 TlsLinks;                                           //0xf10
    ULONG Vdm;                                                              //0xf18
    ULONG ReservedForNtRpc;                                                 //0xf1c
    ULONG DbgSsReserved[2];                                                 //0xf20
    ULONG HardErrorMode;                                                    //0xf28
    ULONG Instrumentation[9];                                               //0xf2c
    NOK_GUID ActivityId;                                                //0xf50
    ULONG SubProcessTag;                                                    //0xf60
    ULONG PerflibData;                                                      //0xf64
    ULONG EtwTraceData;                                                     //0xf68
    ULONG WinSockData;                                                      //0xf6c
    ULONG GdiBatchCount;                                                    //0xf70
    union
    {
        NOK_PROCESSOR_NUMBER CurrentIdealProcessor;                     //0xf74
        ULONG IdealProcessorValue;                                          //0xf74
        struct
        {
            UCHAR ReservedPad0;                                             //0xf74
            UCHAR ReservedPad1;                                             //0xf75
            UCHAR ReservedPad2;                                             //0xf76
            UCHAR IdealProcessor;                                           //0xf77
        };
    };
    ULONG GuaranteedStackBytes;                                             //0xf78
    ULONG ReservedForPerf;                                                  //0xf7c
    ULONG ReservedForOle;                                                   //0xf80
    ULONG WaitingOnLoaderLock;                                              //0xf84
    ULONG SavedPriorityState;                                               //0xf88
    ULONG ReservedForCodeCoverage;                                          //0xf8c
    ULONG ThreadPoolData;                                                   //0xf90
    ULONG TlsExpansionSlots;                                                //0xf94
    ULONG MuiGeneration;                                                    //0xf98
    ULONG IsImpersonating;                                                  //0xf9c
    ULONG NlsCache;                                                         //0xfa0
    ULONG pShimData;                                                        //0xfa4
    ULONG HeapData;                                                         //0xfa8
    ULONG CurrentTransactionHandle;                                         //0xfac
    ULONG ActiveFrame;                                                      //0xfb0
    ULONG FlsData;                                                          //0xfb4
    ULONG PreferredLanguages;                                               //0xfb8
    ULONG UserPrefLanguages;                                                //0xfbc
    ULONG MergedPrefLanguages;                                              //0xfc0
    ULONG MuiImpersonation;                                                 //0xfc4
    union
    {
        volatile USHORT CrossTebFlags;                                      //0xfc8
        USHORT SpareCrossTebBits:16;                                        //0xfc8
    };
    union
    {
        USHORT SameTebFlags;                                                //0xfca
        struct
        {
            USHORT SafeThunkCall:1;                                         //0xfca
            USHORT InDebugPrint:1;                                          //0xfca
            USHORT HasFiberData:1;                                          //0xfca
            USHORT SkipThreadAttach:1;                                      //0xfca
            USHORT WerInShipAssertCode:1;                                   //0xfca
            USHORT RanProcessInit:1;                                        //0xfca
            USHORT ClonedThread:1;                                          //0xfca
            USHORT SuppressDebugMsg:1;                                      //0xfca
            USHORT DisableUserStackWalk:1;                                  //0xfca
            USHORT RtlExceptionAttached:1;                                  //0xfca
            USHORT InitialThread:1;                                         //0xfca
            USHORT SessionAware:1;                                          //0xfca
            USHORT LoadOwner:1;                                             //0xfca
            USHORT LoaderWorker:1;                                          //0xfca
            USHORT SkipLoaderInit:1;                                        //0xfca
            USHORT SpareSameTebBits:1;                                      //0xfca
        };
    };
    ULONG TxnScopeEnterCallback;                                            //0xfcc
    ULONG TxnScopeExitCallback;                                             //0xfd0
    ULONG TxnScopeContext;                                                  //0xfd4
    ULONG LockCount;                                                        //0xfd8
    LONG WowTebOffset;                                                      //0xfdc
    ULONG ResourceRetValue;                                                 //0xfe0
    ULONG ReservedForWdf;                                                   //0xfe4
    ULONGLONG ReservedForCrt;                                               //0xfe8
    NOK_GUID EffectiveContainerId;                                      //0xff0
}NOK_TEB32, * NOK_PTEB32;
//0x8 bytes (sizeof)
typedef struct _NOK_WNF_LOCK
{
    NOK_EX_PUSH_LOCK PushLock;                                          //0x0
}NOK_WNF_LOCK, * NOK_PWNF_LOCK;
//0x1838 bytes (sizeof)
typedef struct _NOK_TEB64
{
    NOK_NT_TIB64 NtTib;                                                 //0x0
    ULONGLONG EnvironmentPointer;                                           //0x38
    NOK_CLIENT_ID64 ClientId;                                           //0x40
    ULONGLONG ActiveRpcHandle;                                              //0x50
    ULONGLONG ThreadLocalStoragePointer;                                    //0x58
    ULONGLONG ProcessEnvironmentBlock;                                      //0x60
    ULONG LastErrorValue;                                                   //0x68
    ULONG CountOfOwnedCriticalSections;                                     //0x6c
    ULONGLONG CsrClientThread;                                              //0x70
    ULONGLONG Win32ThreadInfo;                                              //0x78
    ULONG User32Reserved[26];                                               //0x80
    ULONG UserReserved[5];                                                  //0xe8
    ULONGLONG WOW32Reserved;                                                //0x100
    ULONG CurrentLocale;                                                    //0x108
    ULONG FpSoftwareStatusRegister;                                         //0x10c
    ULONGLONG ReservedForDebuggerInstrumentation[16];                       //0x110
    ULONGLONG SystemReserved1[30];                                          //0x190
    CHAR PlaceholderCompatibilityMode;                                      //0x280
    UCHAR PlaceholderHydrationAlwaysExplicit;                               //0x281
    CHAR PlaceholderReserved[10];                                           //0x282
    ULONG ProxiedProcessId;                                                 //0x28c
    NOK_ACTIVATION_CONTEXT_STACK64 _ActivationStack;                    //0x290
    UCHAR WorkingOnBehalfTicket[8];                                         //0x2b8
    LONG ExceptionCode;                                                     //0x2c0
    UCHAR Padding0[4];                                                      //0x2c4
    ULONGLONG ActivationContextStackPointer;                                //0x2c8
    ULONGLONG InstrumentationCallbackSp;                                    //0x2d0
    ULONGLONG InstrumentationCallbackPreviousPc;                            //0x2d8
    ULONGLONG InstrumentationCallbackPreviousSp;                            //0x2e0
    ULONG TxFsContext;                                                      //0x2e8
    UCHAR InstrumentationCallbackDisabled;                                  //0x2ec
    UCHAR UnalignedLoadStoreExceptions;                                     //0x2ed
    UCHAR Padding1[2];                                                      //0x2ee
    NOK_GDI_TEB_BATCH64 GdiTebBatch;                                    //0x2f0
    NOK_CLIENT_ID64 RealClientId;                                       //0x7d8
    ULONGLONG GdiCachedProcessHandle;                                       //0x7e8
    ULONG GdiClientPID;                                                     //0x7f0
    ULONG GdiClientTID;                                                     //0x7f4
    ULONGLONG GdiThreadLocalInfo;                                           //0x7f8
    ULONGLONG Win32ClientInfo[62];                                          //0x800
    ULONGLONG glDispatchTable[233];                                         //0x9f0
    ULONGLONG glReserved1[29];                                              //0x1138
    ULONGLONG glReserved2;                                                  //0x1220
    ULONGLONG glSectionInfo;                                                //0x1228
    ULONGLONG glSection;                                                    //0x1230
    ULONGLONG glTable;                                                      //0x1238
    ULONGLONG glCurrentRC;                                                  //0x1240
    ULONGLONG glContext;                                                    //0x1248
    ULONG LastStatusValue;                                                  //0x1250
    UCHAR Padding2[4];                                                      //0x1254
    NOK_STRING64 StaticUnicodeString;                                   //0x1258
    WCHAR StaticUnicodeBuffer[261];                                         //0x1268
    UCHAR Padding3[6];                                                      //0x1472
    ULONGLONG DeallocationStack;                                            //0x1478
    ULONGLONG TlsSlots[64];                                                 //0x1480
    NOK_LIST_ENTRY64 TlsLinks;                                           //0x1680
    ULONGLONG Vdm;                                                          //0x1690
    ULONGLONG ReservedForNtRpc;                                             //0x1698
    ULONGLONG DbgSsReserved[2];                                             //0x16a0
    ULONG HardErrorMode;                                                    //0x16b0
    UCHAR Padding4[4];                                                      //0x16b4
    ULONGLONG Instrumentation[11];                                          //0x16b8
    NOK_GUID ActivityId;                                                //0x1710
    ULONGLONG SubProcessTag;                                                //0x1720
    ULONGLONG PerflibData;                                                  //0x1728
    ULONGLONG EtwTraceData;                                                 //0x1730
    ULONGLONG WinSockData;                                                  //0x1738
    ULONG GdiBatchCount;                                                    //0x1740
    union
    {
        NOK_PROCESSOR_NUMBER CurrentIdealProcessor;                     //0x1744
        ULONG IdealProcessorValue;                                          //0x1744
        struct
        {
            UCHAR ReservedPad0;                                             //0x1744
            UCHAR ReservedPad1;                                             //0x1745
            UCHAR ReservedPad2;                                             //0x1746
            UCHAR IdealProcessor;                                           //0x1747
        };
    };
    ULONG GuaranteedStackBytes;                                             //0x1748
    UCHAR Padding5[4];                                                      //0x174c
    ULONGLONG ReservedForPerf;                                              //0x1750
    ULONGLONG ReservedForOle;                                               //0x1758
    ULONG WaitingOnLoaderLock;                                              //0x1760
    UCHAR Padding6[4];                                                      //0x1764
    ULONGLONG SavedPriorityState;                                           //0x1768
    ULONGLONG ReservedForCodeCoverage;                                      //0x1770
    ULONGLONG ThreadPoolData;                                               //0x1778
    ULONGLONG TlsExpansionSlots;                                            //0x1780
    ULONGLONG DeallocationBStore;                                           //0x1788
    ULONGLONG BStoreLimit;                                                  //0x1790
    ULONG MuiGeneration;                                                    //0x1798
    ULONG IsImpersonating;                                                  //0x179c
    ULONGLONG NlsCache;                                                     //0x17a0
    ULONGLONG pShimData;                                                    //0x17a8
    ULONG HeapData;                                                         //0x17b0
    UCHAR Padding7[4];                                                      //0x17b4
    ULONGLONG CurrentTransactionHandle;                                     //0x17b8
    ULONGLONG ActiveFrame;                                                  //0x17c0
    ULONGLONG FlsData;                                                      //0x17c8
    ULONGLONG PreferredLanguages;                                           //0x17d0
    ULONGLONG UserPrefLanguages;                                            //0x17d8
    ULONGLONG MergedPrefLanguages;                                          //0x17e0
    ULONG MuiImpersonation;                                                 //0x17e8
    union
    {
        volatile USHORT CrossTebFlags;                                      //0x17ec
        USHORT SpareCrossTebBits:16;                                        //0x17ec
    };
    union
    {
        USHORT SameTebFlags;                                                //0x17ee
        struct
        {
            USHORT SafeThunkCall:1;                                         //0x17ee
            USHORT InDebugPrint:1;                                          //0x17ee
            USHORT HasFiberData:1;                                          //0x17ee
            USHORT SkipThreadAttach:1;                                      //0x17ee
            USHORT WerInShipAssertCode:1;                                   //0x17ee
            USHORT RanProcessInit:1;                                        //0x17ee
            USHORT ClonedThread:1;                                          //0x17ee
            USHORT SuppressDebugMsg:1;                                      //0x17ee
            USHORT DisableUserStackWalk:1;                                  //0x17ee
            USHORT RtlExceptionAttached:1;                                  //0x17ee
            USHORT InitialThread:1;                                         //0x17ee
            USHORT SessionAware:1;                                          //0x17ee
            USHORT LoadOwner:1;                                             //0x17ee
            USHORT LoaderWorker:1;                                          //0x17ee
            USHORT SkipLoaderInit:1;                                        //0x17ee
            USHORT SpareSameTebBits:1;                                      //0x17ee
        };
    };
    ULONGLONG TxnScopeEnterCallback;                                        //0x17f0
    ULONGLONG TxnScopeExitCallback;                                         //0x17f8
    ULONGLONG TxnScopeContext;                                              //0x1800
    ULONG LockCount;                                                        //0x1808
    LONG WowTebOffset;                                                      //0x180c
    ULONGLONG ResourceRetValue;                                             //0x1810
    ULONGLONG ReservedForWdf;                                               //0x1818
    ULONGLONG ReservedForCrt;                                               //0x1820
    NOK_GUID EffectiveContainerId;                                      //0x1828
}NOK_TEB64, * NOK_PTEB64;
//0x10 bytes (sizeof)
typedef struct _NOK_TERMINATION_PORT
{
    NOK_PTERMINATION_PORT Next;                                         //0x0
    VOID* Port;                                                             //0x8
}NOK_TERMINATION_PORT, * NOK_PTERMINATION_PORT;
//0x90 bytes (sizeof)
typedef struct _NOK_POP_COOLING_EXTENSION
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_LIST_ENTRY RequestListHead;                                     //0x10
    NOK_POP_RW_LOCK Lock;                                               //0x20
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x30
    VOID* NotificationEntry;                                                //0x38
    UCHAR Enabled;                                                          //0x40
    UCHAR ActiveEngaged;                                                    //0x41
    UCHAR ThrottleLimit;                                                    //0x42
    UCHAR UpdatingToCurrent;                                                //0x43
    NOK_PKEVENT RemovalFlushEvent;                                      //0x48
    NOK_PKEVENT PnpFlushEvent;                                          //0x50
    NOK_THERMAL_COOLING_INTERFACE Interface;                            //0x58
}NOK_POP_COOLING_EXTENSION, * NOK_PPOP_COOLING_EXTENSION;
//0x5c bytes (sizeof)
typedef struct _NOK_THERMAL_INFORMATION_EX
{
    ULONG ThermalStamp;                                                     //0x0
    ULONG ThermalConstant1;                                                 //0x4
    ULONG ThermalConstant2;                                                 //0x8
    ULONG SamplingPeriod;                                                   //0xc
    ULONG CurrentTemperature;                                               //0x10
    ULONG PassiveTripPoint;                                                 //0x14
    ULONG ThermalStandbyTripPoint;                                          //0x18
    ULONG CriticalTripPoint;                                                //0x1c
    UCHAR ActiveTripPointCount;                                             //0x20
    UCHAR PassiveCoolingDevicesPresent;                                     //0x21
    ULONG ActiveTripPoint[10];                                              //0x24
    ULONG S4TransitionTripPoint;                                            //0x4c
    ULONG MinimumThrottle;                                                  //0x50
    ULONG OverThrottleThreshold;                                            //0x54
    ULONG PollingPeriod;                                                    //0x58
}NOK_THERMAL_INFORMATION_EX, * NOK_PTHERMAL_INFORMATION_EX;
//0x18 bytes (sizeof)
typedef struct _NOK_THERMAL_POLICY
{
    ULONG Version;                                                          //0x0
    UCHAR WaitForUpdate;                                                    //0x4
    UCHAR Hibernate;                                                        //0x5
    UCHAR Critical;                                                         //0x6
    UCHAR ThermalStandby;                                                   //0x7
    ULONG ActivationReasons;                                                //0x8
    ULONG PassiveLimit;                                                     //0xc
    ULONG ActiveLevel;                                                      //0x10
    UCHAR OverThrottled;                                                    //0x14
}NOK_THERMAL_POLICY, * NOK_PTHERMAL_POLICY;
//0x10 bytes (sizeof)
typedef struct _NOK_TEB_ACTIVE_FRAME_CONTEXT
{
    ULONG Flags;                                                            //0x0
    CHAR* FrameName;                                                        //0x8
}NOK_TEB_ACTIVE_FRAME_CONTEXT, * NOK_PTEB_ACTIVE_FRAME_CONTEXT;
//0x10 bytes (sizeof)
typedef struct _NOK_THERMAL_ZONE_COUNTERS
{
    ULONG Temperature;                                                      //0x0
    ULONG ThrottleLimit;                                                    //0x4
    ULONG ThrottleReasons;                                                  //0x8
    ULONG TemperatureHighPrecision;                                         //0xc
}NOK_THERMAL_ZONE_COUNTERS, * NOK_PTHERMAL_ZONE_COUNTERS;
//0xa0 bytes (sizeof)
typedef struct _NOK_PROCESS_ENERGY_VALUES_EXTENSION
{
    union
    {
        NOK_TIMELINE_BITMAP Timelines[14];                               //0x0
        struct
        {
            NOK_TIMELINE_BITMAP CpuTimeline;                             //0x0
            NOK_TIMELINE_BITMAP DiskTimeline;                            //0x8
            NOK_TIMELINE_BITMAP NetworkTimeline;                         //0x10
            NOK_TIMELINE_BITMAP MBBTimeline;                             //0x18
            NOK_TIMELINE_BITMAP ForegroundTimeline;                      //0x20
            NOK_TIMELINE_BITMAP DesktopVisibleTimeline;                  //0x28
            NOK_TIMELINE_BITMAP CompositionRenderedTimeline;             //0x30
            NOK_TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;       //0x38
            NOK_TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;      //0x40
            NOK_TIMELINE_BITMAP InputTimeline;                           //0x48
            NOK_TIMELINE_BITMAP AudioInTimeline;                         //0x50
            NOK_TIMELINE_BITMAP AudioOutTimeline;                        //0x58
            NOK_TIMELINE_BITMAP DisplayRequiredTimeline;                 //0x60
            NOK_TIMELINE_BITMAP KeyboardInputTimeline;                   //0x68
        };
    };
    union
    {
        NOK_ENERGY_STATE_DURATION Durations[5];                          //0x70
        struct
        {
            NOK_ENERGY_STATE_DURATION InputDuration;                     //0x70
            NOK_ENERGY_STATE_DURATION AudioInDuration;                   //0x78
            NOK_ENERGY_STATE_DURATION AudioOutDuration;                  //0x80
            NOK_ENERGY_STATE_DURATION DisplayRequiredDuration;           //0x88
            NOK_ENERGY_STATE_DURATION PSMBackgroundDuration;             //0x90
        };
    };
    ULONG KeyboardInput;                                                    //0x98
    ULONG MouseInput;                                                       //0x9c
}NOK_PROCESS_ENERGY_VALUES_EXTENSION, * NOK_PPROCESS_ENERGY_VALUES_EXTENSION;
//0x430 bytes (sizeof)
typedef struct _NOK_KTHREAD
{
    NOK_DISPATCHER_HEADER Header;                                       //0x0
    VOID* SListFaultAddress;                                                //0x18
    ULONGLONG QuantumTarget;                                                //0x20
    VOID* InitialStack;                                                     //0x28
    VOID* volatile StackLimit;                                              //0x30
    VOID* StackBase;                                                        //0x38
    ULONGLONG ThreadLock;                                                   //0x40
    volatile ULONGLONG CycleTime;                                           //0x48
    ULONG CurrentRunTime;                                                   //0x50
    ULONG ExpectedRunTime;                                                  //0x54
    VOID* KernelStack;                                                      //0x58
    NOK_PXSAVE_FORMAT StateSaveArea;                                    //0x60
    NOK_PKSCHEDULING_GROUP volatile SchedulingGroup;                    //0x68
    NOK_KWAIT_STATUS_REGISTER WaitRegister;                              //0x70
    volatile UCHAR Running;                                                 //0x71
    UCHAR Alerted[2];                                                       //0x72
    union
    {
        struct
        {
            ULONG AutoBoostActive:1;                                        //0x74
            ULONG ReadyTransition:1;                                        //0x74
            ULONG WaitNext:1;                                               //0x74
            ULONG SystemAffinityActive:1;                                   //0x74
            ULONG Alertable:1;                                              //0x74
            ULONG UserStackWalkActive:1;                                    //0x74
            ULONG ApcInterruptRequest:1;                                    //0x74
            ULONG QuantumEndMigrate:1;                                      //0x74
            ULONG UmsDirectedSwitchEnable:1;                                //0x74
            ULONG TimerActive:1;                                            //0x74
            ULONG SystemThread:1;                                           //0x74
            ULONG ProcessDetachActive:1;                                    //0x74
            ULONG CalloutActive:1;                                          //0x74
            ULONG ScbReadyQueue:1;                                          //0x74
            ULONG ApcQueueable:1;                                           //0x74
            ULONG ReservedStackInUse:1;                                     //0x74
            ULONG UmsPerformingSyscall:1;                                   //0x74
            ULONG TimerSuspended:1;                                         //0x74
            ULONG SuspendedWaitMode:1;                                      //0x74
            ULONG SuspendSchedulerApcWait:1;                                //0x74
            ULONG CetUserShadowStack:1;                                     //0x74
            ULONG BypassProcessFreeze:1;                                    //0x74
            ULONG Reserved:10;                                              //0x74
        };
        LONG MiscFlags;                                                     //0x74
    };
    union
    {
        struct
        {
            ULONG ThreadFlagsSpare:2;                                       //0x78
            ULONG AutoAlignment:1;                                          //0x78
            ULONG DisableBoost:1;                                           //0x78
            ULONG AlertedByThreadId:1;                                      //0x78
            ULONG QuantumDonation:1;                                        //0x78
            ULONG EnableStackSwap:1;                                        //0x78
            ULONG GuiThread:1;                                              //0x78
            ULONG DisableQuantum:1;                                         //0x78
            ULONG ChargeOnlySchedulingGroup:1;                              //0x78
            ULONG DeferPreemption:1;                                        //0x78
            ULONG QueueDeferPreemption:1;                                   //0x78
            ULONG ForceDeferSchedule:1;                                     //0x78
            ULONG SharedReadyQueueAffinity:1;                               //0x78
            ULONG FreezeCount:1;                                            //0x78
            ULONG TerminationApcRequest:1;                                  //0x78
            ULONG AutoBoostEntriesExhausted:1;                              //0x78
            ULONG KernelStackResident:1;                                    //0x78
            ULONG TerminateRequestReason:2;                                 //0x78
            ULONG ProcessStackCountDecremented:1;                           //0x78
            ULONG RestrictedGuiThread:1;                                    //0x78
            ULONG VpBackingThread:1;                                        //0x78
            ULONG ThreadFlagsSpare2:1;                                      //0x78
            ULONG EtwStackTraceApcInserted:8;                               //0x78
        };
        volatile LONG ThreadFlags;                                          //0x78
    };
    volatile UCHAR Tag;                                                     //0x7c
    UCHAR SystemHeteroCpuPolicy;                                            //0x7d
    UCHAR UserHeteroCpuPolicy:7;                                            //0x7e
    UCHAR ExplicitSystemHeteroCpuPolicy:1;                                  //0x7e
    union
    {
        struct
        {
            UCHAR RunningNonRetpolineCode:1;                                //0x7f
            UCHAR SpecCtrlSpare:7;                                          //0x7f
        };
        UCHAR SpecCtrl;                                                     //0x7f
    };
    ULONG SystemCallNumber;                                                 //0x80
    ULONG ReadyTime;                                                        //0x84
    VOID* FirstArgument;                                                    //0x88
    NOK_PKTRAP_FRAME TrapFrame;                                         //0x90
    union
    {
        NOK_KAPC_STATE ApcState;                                        //0x98
        struct
        {
            UCHAR ApcStateFill[43];                                         //0x98
            CHAR Priority;                                                  //0xc3
            ULONG UserIdealProcessor;                                       //0xc4
        };
    };
    volatile LONGLONG WaitStatus;                                           //0xc8
    NOK_PKWAIT_BLOCK WaitBlockList;                                     //0xd0
    union
    {
        NOK_LIST_ENTRY WaitListEntry;                                   //0xd8
        NOK_SINGLE_LIST_ENTRY SwapListEntry;                            //0xd8
    };
    NOK_PDISPATCHER_HEADER volatile Queue;                              //0xe8
    VOID* Teb;                                                              //0xf0
    ULONGLONG RelativeTimerBias;                                            //0xf8
    NOK_KTIMER Timer;                                                   //0x100
    union
    {
        NOK_KWAIT_BLOCK WaitBlock[4];                                   //0x140
        struct
        {
            UCHAR WaitBlockFill4[20];                                       //0x140
            ULONG ContextSwitches;                                          //0x154
        };
        struct
        {
            UCHAR WaitBlockFill5[68];                                       //0x140
            volatile UCHAR State;                                           //0x184
            CHAR Spare13;                                                   //0x185
            UCHAR WaitIrql;                                                 //0x186
            CHAR WaitMode;                                                  //0x187
        };
        struct
        {
            UCHAR WaitBlockFill6[116];                                      //0x140
            ULONG WaitTime;                                                 //0x1b4
        };
        struct
        {
            UCHAR WaitBlockFill7[164];                                      //0x140
            union
            {
                struct
                {
                    SHORT KernelApcDisable;                                 //0x1e4
                    SHORT SpecialApcDisable;                                //0x1e6
                };
                ULONG CombinedApcDisable;                                   //0x1e4
            };
        };
        struct
        {
            UCHAR WaitBlockFill8[40];                                       //0x140
            NOK_KTHREAD_COUNTERS* ThreadCounters;                       //0x168
        };
        struct
        {
            UCHAR WaitBlockFill9[88];                                       //0x140
            NOK_PXSTATE_SAVE XStateSave;                                //0x198
        };
        struct
        {
            UCHAR WaitBlockFill10[136];                                     //0x140
            VOID* volatile Win32Thread;                                     //0x1c8
        };
        struct
        {
            UCHAR WaitBlockFill11[176];                                     //0x140
            NOK_PUMS_CONTROL_BLOCK Ucb;                                 //0x1f0
            NOK_PKUMS_CONTEXT_HEADER volatile Uch;                      //0x1f8
        };
    };
    union
    {
        volatile LONG ThreadFlags2;                                         //0x200
        struct
        {
            ULONG BamQosLevel:8;                                            //0x200
            ULONG ThreadFlags2Reserved:24;                                  //0x200
        };
    };
    ULONG Spare21;                                                          //0x204
    NOK_LIST_ENTRY QueueListEntry;                                      //0x208
    union
    {
        volatile ULONG NextProcessor;                                       //0x218
        struct
        {
            ULONG NextProcessorNumber:31;                                   //0x218
            ULONG SharedReadyQueue:1;                                       //0x218
        };
    };
    LONG QueuePriority;                                                     //0x21c
    NOK_PKPROCESS Process;                                              //0x220
    union
    {
        NOK_GROUP_AFFINITY UserAffinity;                                //0x228
        struct
        {
            UCHAR UserAffinityFill[10];                                     //0x228
            CHAR PreviousMode;                                              //0x232
            CHAR BasePriority;                                              //0x233
            union
            {
                CHAR PriorityDecrement;                                     //0x234
                struct
                {
                    UCHAR ForegroundBoost:4;                                //0x234
                    UCHAR UnusualBoost:4;                                   //0x234
                };
            };
            UCHAR Preempted;                                                //0x235
            UCHAR AdjustReason;                                             //0x236
            CHAR AdjustIncrement;                                           //0x237
        };
    };
    ULONGLONG AffinityVersion;                                              //0x238
    union
    {
        NOK_GROUP_AFFINITY Affinity;                                    //0x240
        struct
        {
            UCHAR AffinityFill[10];                                         //0x240
            UCHAR ApcStateIndex;                                            //0x24a
            UCHAR WaitBlockCount;                                           //0x24b
            ULONG IdealProcessor;                                           //0x24c
        };
    };
    ULONGLONG NpxState;                                                     //0x250
    union
    {
        NOK_KAPC_STATE SavedApcState;                                   //0x258
        struct
        {
            UCHAR SavedApcStateFill[43];                                    //0x258
            UCHAR WaitReason;                                               //0x283
            CHAR SuspendCount;                                              //0x284
            CHAR Saturation;                                                //0x285
            USHORT SListFaultCount;                                         //0x286
        };
    };
    union
    {
        NOK_KAPC SchedulerApc;                                          //0x288
        struct
        {
            UCHAR SchedulerApcFill0[1];                                     //0x288
            UCHAR ResourceIndex;                                            //0x289
        };
        struct
        {
            UCHAR SchedulerApcFill1[3];                                     //0x288
            UCHAR QuantumReset;                                             //0x28b
        };
        struct
        {
            UCHAR SchedulerApcFill2[4];                                     //0x288
            ULONG KernelTime;                                               //0x28c
        };
        struct
        {
            UCHAR SchedulerApcFill3[64];                                    //0x288
            NOK_PKPRCB volatile WaitPrcb;                               //0x2c8
        };
        struct
        {
            UCHAR SchedulerApcFill4[72];                                    //0x288
            VOID* LegoData;                                                 //0x2d0
        };
        struct
        {
            UCHAR SchedulerApcFill5[83];                                    //0x288
            UCHAR CallbackNestingLevel;                                     //0x2db
            ULONG UserTime;                                                 //0x2dc
        };
    };
    NOK_KEVENT SuspendEvent;                                            //0x2e0
    NOK_LIST_ENTRY ThreadListEntry;                                     //0x2f8
    NOK_LIST_ENTRY MutantListHead;                                      //0x308
    UCHAR AbEntrySummary;                                                   //0x318
    UCHAR AbWaitEntryCount;                                                 //0x319
    UCHAR AbAllocationRegionCount;                                          //0x31a
    CHAR SystemPriority;                                                    //0x31b
    ULONG SecureThreadCookie;                                               //0x31c
    NOK_PKLOCK_ENTRY LockEntries;                                       //0x320
    NOK_SINGLE_LIST_ENTRY PropagateBoostsEntry;                         //0x328
    NOK_SINGLE_LIST_ENTRY IoSelfBoostsEntry;                            //0x330
    UCHAR PriorityFloorCounts[16];                                          //0x338
    UCHAR PriorityFloorCountsReserved[16];                                  //0x348
    ULONG PriorityFloorSummary;                                             //0x358
    volatile LONG AbCompletedIoBoostCount;                                  //0x35c
    volatile LONG AbCompletedIoQoSBoostCount;                               //0x360
    volatile SHORT KeReferenceCount;                                        //0x364
    UCHAR AbOrphanedEntrySummary;                                           //0x366
    UCHAR AbOwnedEntryCount;                                                //0x367
    ULONG ForegroundLossTime;                                               //0x368
    union
    {
        NOK_LIST_ENTRY GlobalForegroundListEntry;                       //0x370
        struct
        {
            NOK_SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;          //0x370
            ULONGLONG InGlobalForegroundList;                               //0x378
        };
    };
    LONGLONG ReadOperationCount;                                            //0x380
    LONGLONG WriteOperationCount;                                           //0x388
    LONGLONG OtherOperationCount;                                           //0x390
    LONGLONG ReadTransferCount;                                             //0x398
    LONGLONG WriteTransferCount;                                            //0x3a0
    LONGLONG OtherTransferCount;                                            //0x3a8
    NOK_PKSCB QueuedScb;                                                //0x3b0
    volatile ULONG ThreadTimerDelay;                                        //0x3b8
    union
    {
        volatile LONG ThreadFlags3;                                         //0x3bc
        struct
        {
            ULONG ThreadFlags3Reserved:8;                                   //0x3bc
            ULONG PpmPolicy:2;                                              //0x3bc
            ULONG ThreadFlags3Reserved2:22;                                 //0x3bc
        };
    };
    ULONGLONG TracingPrivate[1];                                            //0x3c0
    VOID* SchedulerAssist;                                                  //0x3c8
    VOID* volatile AbWaitObject;                                            //0x3d0
    ULONG ReservedPreviousReadyTimeValue;                                   //0x3d8
    ULONGLONG KernelWaitTime;                                               //0x3e0
    ULONGLONG UserWaitTime;                                                 //0x3e8
    union
    {
        NOK_LIST_ENTRY GlobalUpdateVpThreadPriorityListEntry;           //0x3f0
        struct
        {
            NOK_SINGLE_LIST_ENTRY UpdateVpThreadPriorityDpcStackListEntry; //0x3f0
            ULONGLONG InGlobalUpdateVpThreadPriorityList;                   //0x3f8
        };
    };
    LONG SchedulerAssistPriorityFloor;                                      //0x400
    ULONG Spare28;                                                          //0x404
    ULONGLONG EndPadding[5];                                                //0x408
}NOK_KTHREAD, * NOK_PKTHREAD;
//0x1b0 bytes (sizeof)
typedef struct _NOK_RTL_DYNAMIC_TIME_ZONE_INFORMATION
{
    NOK_RTL_TIME_ZONE_INFORMATION tzi;                                  //0x0
    WCHAR TimeZoneKeyName[128];                                             //0xac
    UCHAR DynamicDaylightTimeDisabled;                                      //0x1ac
}NOK_RTL_DYNAMIC_TIME_ZONE_INFORMATION, * NOK_PRTL_DYNAMIC_TIME_ZONE_INFORMATION;
//0xa0 bytes (sizeof)
typedef struct _NOK_PROCESSOR_PROFILE_CONTROL_AREA
{
    NOK_PEBS_DS_SAVE_AREA PebsDsSaveArea;                               //0x0
}NOK_PROCESSOR_PROFILE_CONTROL_AREA, * NOK_PPROCESSOR_PROFILE_CONTROL_AREA;
//0x28 bytes (sizeof)
typedef struct _NOK_TOKEN_CONTROL
{
    NOK_LUID TokenId;                                                   //0x0
    NOK_LUID AuthenticationId;                                          //0x8
    NOK_LUID ModifiedId;                                                //0x10
    NOK_TOKEN_SOURCE TokenSource;                                       //0x18
}NOK_TOKEN_CONTROL, * NOK_PTOKEN_CONTROL;
//0x48 bytes (sizeof)
typedef struct _NOK_SECURITY_CLIENT_CONTEXT
{
    NOK_SECURITY_QUALITY_OF_SERVICE SecurityQos;                        //0x0
    VOID* ClientToken;                                                      //0x10
    UCHAR DirectlyAccessClientToken;                                        //0x18
    UCHAR DirectAccessEffectiveOnly;                                        //0x19
    UCHAR ServerIsRemote;                                                   //0x1a
    NOK_TOKEN_CONTROL ClientTokenControl;                               //0x1c
}NOK_SECURITY_CLIENT_CONTEXT, * NOK_PSECURITY_CLIENT_CONTEXT;
//0x48 bytes (sizeof)
typedef struct _NOK_ALPC_PORT_ATTRIBUTES
{
    ULONG Flags;                                                            //0x0
    NOK_SECURITY_QUALITY_OF_SERVICE SecurityQos;                        //0x4
    ULONGLONG MaxMessageLength;                                             //0x10
    ULONGLONG MemoryBandwidth;                                              //0x18
    ULONGLONG MaxPoolUsage;                                                 //0x20
    ULONGLONG MaxSectionSize;                                               //0x28
    ULONGLONG MaxViewSize;                                                  //0x30
    ULONGLONG MaxTotalSectionSize;                                          //0x38
    ULONG DupObjectTypes;                                                   //0x40
    ULONG Reserved;                                                         //0x44
}NOK_ALPC_PORT_ATTRIBUTES, * NOK_PALPC_PORT_ATTRIBUTES;
//0x1d8 bytes (sizeof)
typedef struct _NOK_ALPC_PORT
{
    NOK_LIST_ENTRY PortListEntry;                                       //0x0
    NOK_PALPC_COMMUNICATION_INFO CommunicationInfo;                     //0x10
    NOK_PEPROCESS OwnerProcess;                                         //0x18
    VOID* CompletionPort;                                                   //0x20
    VOID* CompletionKey;                                                    //0x28
    NOK_PALPC_COMPLETION_PACKET_LOOKASIDE CompletionPacketLookaside;    //0x30
    VOID* PortContext;                                                      //0x38
    NOK_SECURITY_CLIENT_CONTEXT StaticSecurity;                         //0x40
    NOK_EX_PUSH_LOCK IncomingQueueLock;                                 //0x88
    NOK_LIST_ENTRY MainQueue;                                           //0x90
    NOK_LIST_ENTRY LargeMessageQueue;                                   //0xa0
    NOK_EX_PUSH_LOCK PendingQueueLock;                                  //0xb0
    NOK_LIST_ENTRY PendingQueue;                                        //0xb8
    NOK_EX_PUSH_LOCK DirectQueueLock;                                   //0xc8
    NOK_LIST_ENTRY DirectQueue;                                         //0xd0
    NOK_EX_PUSH_LOCK WaitQueueLock;                                     //0xe0
    NOK_LIST_ENTRY WaitQueue;                                           //0xe8
    union
    {
        NOK_PKSEMAPHORE Semaphore;                                      //0xf8
        NOK_PKEVENT DummyEvent;                                         //0xf8
    };
    NOK_ALPC_PORT_ATTRIBUTES PortAttributes;                            //0x100
    NOK_EX_PUSH_LOCK ResourceListLock;                                  //0x148
    NOK_LIST_ENTRY ResourceListHead;                                    //0x150
    NOK_EX_PUSH_LOCK PortObjectLock;                                    //0x160
    NOK_PALPC_COMPLETION_LIST CompletionList;                           //0x168
    NOK_PCALLBACK_OBJECT CallbackObject;                                //0x170
    VOID* CallbackContext;                                                  //0x178
    NOK_LIST_ENTRY CanceledQueue;                                       //0x180
    LONG SequenceNo;                                                        //0x190
    LONG ReferenceNo;                                                       //0x194
    NOK_PPALPC_PORT_REFERENCE_WAIT_BLOCK ReferenceNoWait;               //0x198
    union
    {
        struct
        {
            ULONG Initialized:1;                                            //0x1a0
            ULONG Type:2;                                                   //0x1a0
            ULONG ConnectionPending:1;                                      //0x1a0
            ULONG ConnectionRefused:1;                                      //0x1a0
            ULONG Disconnected:1;                                           //0x1a0
            ULONG Closed:1;                                                 //0x1a0
            ULONG NoFlushOnClose:1;                                         //0x1a0
            ULONG ReturnExtendedInfo:1;                                     //0x1a0
            ULONG Waitable:1;                                               //0x1a0
            ULONG DynamicSecurity:1;                                        //0x1a0
            ULONG Wow64CompletionList:1;                                    //0x1a0
            ULONG Lpc:1;                                                    //0x1a0
            ULONG LpcToLpc:1;                                               //0x1a0
            ULONG HasCompletionList:1;                                      //0x1a0
            ULONG HadCompletionList:1;                                      //0x1a0
            ULONG EnableCompletionList:1;                                   //0x1a0
        } s1;                                                               //0x1a0
        ULONG State;                                                        //0x1a0
    } u1;                                                                   //0x1a0
    NOK_PALPC_PORT TargetQueuePort;                                     //0x1a8
    NOK_PALPC_PORT TargetSequencePort;                                  //0x1b0
    NOK_PKALPC_MESSAGE CachedMessage;                                   //0x1b8
    ULONG MainQueueLength;                                                  //0x1c0
    ULONG LargeMessageQueueLength;                                          //0x1c4
    ULONG PendingQueueLength;                                               //0x1c8
    ULONG DirectQueueLength;                                                //0x1cc
    ULONG CanceledQueueLength;                                              //0x1d0
    ULONG WaitQueueLength;                                                  //0x1d4
}NOK_ALPC_PORT, * NOK_PALPC_PORT;
//0x70 bytes (sizeof)
typedef struct _NOK_KALPC_SECURITY_DATA
{
    NOK_PALPC_HANDLE_TABLE HandleTable;                                 //0x0
    VOID* ContextHandle;                                                    //0x8
    NOK_PEPROCESS OwningProcess;                                        //0x10
    NOK_PALPC_PORT OwnerPort;                                           //0x18
    NOK_SECURITY_CLIENT_CONTEXT DynamicSecurity;                        //0x20
    union
    {
        struct
        {
            ULONG Revoked:1;                                                //0x68
            ULONG Impersonated:1;                                           //0x68
        } s1;                                                               //0x68
    } u1;                                                                   //0x68
}NOK_KALPC_SECURITY_DATA, * NOK_PKALPC_SECURITY_DATA;
//0x4 bytes (sizeof)
typedef struct _NOK_TOKEN_MANDATORY_POLICY
{
    ULONG Policy;                                                           //0x0
}NOK_TOKEN_MANDATORY_POLICY, * NOK_PTOKEN_MANDATORY_POLICY;
//0x10 bytes (sizeof)
typedef struct _NOK_TOKEN_PRIVILEGES
{
    ULONG PrivilegeCount;                                                   //0x0
    NOK_LUID_AND_ATTRIBUTES Privileges[1];                              //0x4
}NOK_TOKEN_PRIVILEGES, * NOK_PTOKEN_PRIVILEGES;
//0x4 bytes (sizeof)
typedef enum _NOK_TP_CALLBACK_PRIORITY
{
    NOK_TP_CALLBACK_PRIORITY_HIGH = 0,
    NOK_TP_CALLBACK_PRIORITY_NORMAL = 1,
    NOK_TP_CALLBACK_PRIORITY_LOW = 2,
    NOK_TP_CALLBACK_PRIORITY_INVALID = 3,
    NOK_TP_CALLBACK_PRIORITY_COUNT = 3
}NOK_TP_CALLBACK_PRIORITY, * NOK_PTP_CALLBACK_PRIORITY;
//0x1220 bytes (sizeof)
typedef struct _NOK_ETW_SILODRIVERSTATE
{
    NOK_PEJOB Silo;                                                     //0x0
    NOK_PESERVERSILO_GLOBALS SiloGlobals;                               //0x8
    ULONG MaxLoggers;                                                       //0x10
    NOK_ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;                   //0x18
    NOK_EX_RUNDOWN_REF_CACHE_AWARE** EtwpLoggerRundown;                 //0x1c0
    NOK_PWMI_LOGGER_CONTEXT* EtwpLoggerContext;                         //0x1c8
    NOK_ETW_HASH_BUCKET EtwpGuidHashTable[64];                          //0x1d0
    USHORT EtwpSecurityLoggers[8];                                          //0xfd0
    UCHAR EtwpSecurityProviderEnableMask;                                   //0xfe0
    LONG EtwpShutdownInProgress;                                            //0xfe4
    ULONG EtwpSecurityProviderPID;                                          //0xfe8
    NOK_ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;               //0xff0
    NOK_ETW_COUNTERS EtwpCounters;                                      //0x1010
    NOK_LARGE_INTEGER LogfileBytesWritten;                               //0x1020
    NOK_PETW_SILO_TRACING_BLOCK ProcessorBlocks;                        //0x1028
    NOK_PEX_WNF_SUBSCRIPTION ContainerRestoreWnfSubscription;           //0x1030
    NOK_GUID PartitionId;                                               //0x1038
    NOK_GUID ParentId;                                                  //0x1048
    NOK_LARGE_INTEGER QpcOffsetFromRoot;                                 //0x1058
    CHAR* PartitionName;                                                    //0x1060
    USHORT PartitionNameSize;                                               //0x1068
    USHORT UnusedPadding;                                                   //0x106a
    ULONG PartitionType;                                                    //0x106c
    NOK_ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;                //0x1070
    NOK_KMUTANT EtwpStartTraceMutex;                                    //0x11e8
}NOK_ETW_SILODRIVERSTATE, * NOK_PETW_SILODRIVERSTATE;
//0x480 bytes (sizeof)
typedef struct _NOK_PEB32
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages:1;                                    //0x3
            UCHAR IsProtectedProcess:1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated:1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
            UCHAR IsPackagedProcess:1;                                      //0x3
            UCHAR IsAppContainer:1;                                         //0x3
            UCHAR IsProtectedProcessLight:1;                                //0x3
            UCHAR IsLongPathAwareProcess:1;                                 //0x3
        };
    };
    ULONG Mutant;                                                           //0x4
    ULONG ImageBaseAddress;                                                 //0x8
    ULONG Ldr;                                                              //0xc
    ULONG ProcessParameters;                                                //0x10
    ULONG SubSystemData;                                                    //0x14
    ULONG ProcessHeap;                                                      //0x18
    ULONG FastPebLock;                                                      //0x1c
    ULONG AtlThunkSListPtr;                                                 //0x20
    ULONG IFEOKey;                                                          //0x24
    union
    {
        ULONG CrossProcessFlags;                                            //0x28
        struct
        {
            ULONG ProcessInJob:1;                                           //0x28
            ULONG ProcessInitializing:1;                                    //0x28
            ULONG ProcessUsingVEH:1;                                        //0x28
            ULONG ProcessUsingVCH:1;                                        //0x28
            ULONG ProcessUsingFTH:1;                                        //0x28
            ULONG ProcessPreviouslyThrottled:1;                             //0x28
            ULONG ProcessCurrentlyThrottled:1;                              //0x28
            ULONG ProcessImagesHotPatched:1;                                //0x28
            ULONG ReservedBits0:24;                                         //0x28
        };
    };
    union
    {
        ULONG KernelCallbackTable;                                          //0x2c
        ULONG UserSharedInfoPtr;                                            //0x2c
    };
    ULONG SystemReserved;                                                   //0x30
    ULONG AtlThunkSListPtr32;                                               //0x34
    ULONG ApiSetMap;                                                        //0x38
    ULONG TlsExpansionCounter;                                              //0x3c
    ULONG TlsBitmap;                                                        //0x40
    ULONG TlsBitmapBits[2];                                                 //0x44
    ULONG ReadOnlySharedMemoryBase;                                         //0x4c
    ULONG SharedData;                                                       //0x50
    ULONG ReadOnlyStaticServerData;                                         //0x54
    ULONG AnsiCodePageData;                                                 //0x58
    ULONG OemCodePageData;                                                  //0x5c
    ULONG UnicodeCaseTableData;                                             //0x60
    ULONG NumberOfProcessors;                                               //0x64
    ULONG NtGlobalFlag;                                                     //0x68
    NOK_LARGE_INTEGER CriticalSectionTimeout;                            //0x70
    ULONG HeapSegmentReserve;                                               //0x78
    ULONG HeapSegmentCommit;                                                //0x7c
    ULONG HeapDeCommitTotalFreeThreshold;                                   //0x80
    ULONG HeapDeCommitFreeBlockThreshold;                                   //0x84
    ULONG NumberOfHeaps;                                                    //0x88
    ULONG MaximumNumberOfHeaps;                                             //0x8c
    ULONG ProcessHeaps;                                                     //0x90
    ULONG GdiSharedHandleTable;                                             //0x94
    ULONG ProcessStarterHelper;                                             //0x98
    ULONG GdiDCAttributeList;                                               //0x9c
    ULONG LoaderLock;                                                       //0xa0
    ULONG OSMajorVersion;                                                   //0xa4
    ULONG OSMinorVersion;                                                   //0xa8
    USHORT OSBuildNumber;                                                   //0xac
    USHORT OSCSDVersion;                                                    //0xae
    ULONG OSPlatformId;                                                     //0xb0
    ULONG ImageSubsystem;                                                   //0xb4
    ULONG ImageSubsystemMajorVersion;                                       //0xb8
    ULONG ImageSubsystemMinorVersion;                                       //0xbc
    ULONG ActiveProcessAffinityMask;                                        //0xc0
    ULONG GdiHandleBuffer[34];                                              //0xc4
    ULONG PostProcessInitRoutine;                                           //0x14c
    ULONG TlsExpansionBitmap;                                               //0x150
    ULONG TlsExpansionBitmapBits[32];                                       //0x154
    ULONG SessionId;                                                        //0x1d4
    NOK_ULARGE_INTEGER AppCompatFlags;                                   //0x1d8
    NOK_ULARGE_INTEGER AppCompatFlagsUser;                               //0x1e0
    ULONG pShimData;                                                        //0x1e8
    ULONG AppCompatInfo;                                                    //0x1ec
    NOK_STRING32 CSDVersion;                                            //0x1f0
    ULONG ActivationContextData;                                            //0x1f8
    ULONG ProcessAssemblyStorageMap;                                        //0x1fc
    ULONG SystemDefaultActivationContextData;                               //0x200
    ULONG SystemAssemblyStorageMap;                                         //0x204
    ULONG MinimumStackCommit;                                               //0x208
    ULONG SparePointers[4];                                                 //0x20c
    ULONG SpareUlongs[5];                                                   //0x21c
    ULONG WerRegistrationData;                                              //0x230
    ULONG WerShipAssertPtr;                                                 //0x234
    ULONG pUnused;                                                          //0x238
    ULONG pImageHeaderHash;                                                 //0x23c
    union
    {
        ULONG TracingFlags;                                                 //0x240
        struct
        {
            ULONG HeapTracingEnabled:1;                                     //0x240
            ULONG CritSecTracingEnabled:1;                                  //0x240
            ULONG LibLoaderTracingEnabled:1;                                //0x240
            ULONG SpareTracingBits:29;                                      //0x240
        };
    };
    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x248
    ULONG TppWorkerpListLock;                                               //0x250
    NOK_LIST_ENTRY32 TppWorkerpList;                                     //0x254
    ULONG WaitOnAddressHashTable[128];                                      //0x25c
    ULONG TelemetryCoverageHeader;                                          //0x45c
    ULONG CloudFileFlags;                                                   //0x460
    ULONG CloudFileDiagFlags;                                               //0x464
    CHAR PlaceholderCompatibilityMode;                                      //0x468
    CHAR PlaceholderCompatibilityModeReserved[7];                           //0x469
    ULONG LeapSecondData;                                                   //0x470
    union
    {
        ULONG LeapSecondFlags;                                              //0x474
        struct
        {
            ULONG SixtySecondEnabled:1;                                     //0x474
            ULONG Reserved:31;                                              //0x474
        };
    };
    ULONG NtGlobalFlag2;                                                    //0x478
}NOK_PEB32, * NOK_PPEB32;
//0x20 bytes (sizeof)
typedef struct _NOK_TRIAGE_9F_PNP
{
    USHORT Signature;                                                       //0x0
    USHORT Revision;                                                        //0x2
    NOK_PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE CompletionQueue;            //0x8
    NOK_PTRIAGE_EX_WORK_QUEUE DelayedWorkQueue;                         //0x10
    NOK_PTRIAGE_EX_WORK_QUEUE DelayedIoWorkQueue;                       //0x18
}NOK_TRIAGE_9F_PNP, * NOK_PTRIAGE_9F_PNP;
//0x28 bytes (sizeof)
typedef struct _NOK_TRIAGE_9F_POWER
{
    USHORT Signature;                                                       //0x0
    USHORT Revision;                                                        //0x2
    NOK_PLIST_ENTRY IrpList;                                            //0x8
    NOK_PLIST_ENTRY ThreadList;                                         //0x10
    NOK_PTRIAGE_EX_WORK_QUEUE DelayedWorkQueue;                         //0x18
    NOK_PTRIAGE_EX_WORK_QUEUE DelayedIoWorkQueue;                       //0x20
}NOK_TRIAGE_9F_POWER, * NOK_PTRIAGE_9F_POWER;
//0x8 bytes (sizeof)
typedef union _NOK_JOBOBJECT_ENERGY_TRACKING_STATE
{
    ULONGLONG Value;                                                        //0x0
    struct
    {
        ULONG UpdateMask;                                                   //0x0
    };
    ULONG DesiredState;                                                     //0x4
}NOK_JOBOBJECT_ENERGY_TRACKING_STATE, * NOK_PJOBOBJECT_ENERGY_TRACKING_STATE;
//0x2b0 bytes (sizeof)
typedef struct _NOK_TRIAGE_EX_WORK_QUEUE
{
    NOK_KPRIQUEUE WorkPriQueue;                                         //0x0
}NOK_TRIAGE_EX_WORK_QUEUE, * NOK_PTRIAGE_EX_WORK_QUEUE;
//0x10 bytes (sizeof)
typedef struct _NOK_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
{
    NOK_LIST_ENTRY DispatchedList;                                      //0x0
}NOK_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE, * NOK_PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
//0x18 bytes (sizeof)
typedef struct _NOK_TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PTRIAGE_DEVICE_NODE DeviceNode;                                 //0x10
}NOK_TRIAGE_PNP_DEVICE_COMPLETION_REQUEST, * NOK_PTRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
//0x38 bytes (sizeof)
typedef struct _NOK_TRIAGE_POP_FX_DEVICE
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_PIRP Irp;                                                       //0x10
    NOK_PTRIAGE_POP_IRP_DATA IrpData;                                   //0x18
    LONG Status;                                                            //0x20
    LONG PowerReqCall;                                                      //0x24
    LONG PowerNotReqCall;                                                   //0x28
    NOK_PTRIAGE_DEVICE_NODE DeviceNode;                                 //0x30
}NOK_TRIAGE_POP_FX_DEVICE, * NOK_PTRIAGE_POP_FX_DEVICE;
//0x20 bytes (sizeof)
typedef struct _NOK_TRIAGE_POP_IRP_DATA
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_PIRP Irp;                                                       //0x10
    NOK_PDEVICE_OBJECT Pdo;                                             //0x18
}NOK_TRIAGE_POP_IRP_DATA, * NOK_PTRIAGE_POP_IRP_DATA;
//0x10 bytes (sizeof)
typedef struct _NOK_TRUSTLET_COLLABORATION_ID
{
    ULONGLONG Value[2];                                                     //0x0
}NOK_TRUSTLET_COLLABORATION_ID, * NOK_PTRUSTLET_COLLABORATION_ID;
//0x10 bytes (sizeof)
typedef struct _NOK_TRUSTLET_MAILBOX_KEY
{
    ULONGLONG SecretValue[2];                                               //0x0
}NOK_TRUSTLET_MAILBOX_KEY, * NOK_PTRUSTLET_MAILBOX_KEY;
//0x10 bytes (sizeof)
typedef struct _NOK_TXN_PARAMETER_BLOCK
{
    USHORT Length;                                                          //0x0
    USHORT TxFsContext;                                                     //0x2
    VOID* TransactionObject;                                                //0x8
}NOK_TXN_PARAMETER_BLOCK, * NOK_PTXN_PARAMETER_BLOCK;
//0x10 bytes (sizeof)
typedef struct _NOK_TraceLoggingMetadata_t
{
    ULONG Signature;                                                        //0x0
    USHORT Size;                                                            //0x4
    UCHAR Version;                                                          //0x6
    UCHAR Flags;                                                            //0x7
    ULONGLONG Magic;                                                        //0x8
}NOK_TraceLoggingMetadata_t, * NOK_PTraceLoggingMetadata_t;
//0x88 bytes (sizeof)
typedef struct _NOK_UMS_CONTROL_BLOCK
{
    NOK_PRTL_UMS_CONTEXT UmsContext;                                    //0x0
    NOK_PSINGLE_LIST_ENTRY CompletionListEntry;                         //0x8
    NOK_PKEVENT CompletionListEvent;                                    //0x10
    ULONG ServiceSequenceNumber;                                            //0x18
    union
    {
        struct
        {
            NOK_KQUEUE UmsQueue;                                        //0x20
            NOK_LIST_ENTRY QueueEntry;                                  //0x60
            NOK_PRTL_UMS_CONTEXT YieldingUmsContext;                    //0x70
            VOID* YieldingParam;                                            //0x78
            VOID* UmsTeb;                                                   //0x80
        };
        struct
        {
            NOK_PKQUEUE UmsAssociatedQueue;                             //0x20
            NOK_PLIST_ENTRY UmsQueueListEntry;                          //0x28
            NOK_KEVENT UmsWaitEvent;                                    //0x30
            VOID* StagingArea;                                              //0x48
            union
            {
                struct
                {
                    ULONG UmsPrimaryDeliveredContext:1;                     //0x50
                    ULONG UmsAssociatedQueueUsed:1;                         //0x50
                    ULONG UmsThreadParked:1;                                //0x50
                };
                ULONG UmsFlags;                                             //0x50
            };
        };
    };
}NOK_UMS_CONTROL_BLOCK, * NOK_PUMS_CONTROL_BLOCK;
//0x8 bytes (sizeof)
typedef struct _NOK_UNEXPECTED_INTERRUPT
{
    UCHAR PushImm;                                                          //0x0
    UCHAR Vector;                                                           //0x1
    UCHAR PushRbp;                                                          //0x2
    UCHAR JmpOp;                                                            //0x3
    LONG JmpOffset;                                                         //0x4
}NOK_UNEXPECTED_INTERRUPT, * NOK_PUNEXPECTED_INTERRUPT;
//0x58 bytes (sizeof)
typedef struct _NOK_TRIAGE_DEVICE_NODE
{
    NOK_PTRIAGE_DEVICE_NODE Sibling;                                    //0x0
    NOK_PTRIAGE_DEVICE_NODE Child;                                      //0x8
    NOK_PTRIAGE_DEVICE_NODE Parent;                                     //0x10
    NOK_PTRIAGE_DEVICE_NODE LastChild;                                  //0x18
    NOK_PDEVICE_OBJECT PhysicalDeviceObject;                            //0x20
    NOK_UNICODE_STRING InstancePath;                                    //0x28
    NOK_UNICODE_STRING ServiceName;                                     //0x38
    NOK_PIRP PendingIrp;                                                //0x48
    NOK_PTRIAGE_POP_FX_DEVICE FxDevice;                                 //0x50
}NOK_TRIAGE_DEVICE_NODE, * NOK_PTRIAGE_DEVICE_NODE;
//0x10 bytes (sizeof)
typedef struct _NOK_VACB_ARRAY_HEADER
{
    ULONG VacbArrayIndex;                                                   //0x0
    ULONG MappingCount;                                                     //0x4
    ULONG HighestMappedIndex;                                               //0x8
    ULONG Reserved;                                                         //0xc
}NOK_VACB_ARRAY_HEADER, * NOK_PVACB_ARRAY_HEADER;
//0x3f0 bytes (sizeof)
typedef struct _NOK_EX_TIMEZONE_STATE
{
    NOK_RTL_DYNAMIC_TIME_ZONE_INFORMATION TimeZoneInformation;          //0x0
    ULONG CurrentTimeZoneId;                                                //0x1b0
    LONG LastTimeZoneBias;                                                  //0x1b4
    NOK_LARGE_INTEGER TimeZoneBias;                                      //0x1b8
    NOK_TIMEZONE_CHANGE_EVENT TimeZone;                                 //0x1c0
    NOK_TIMEZONE_CHANGE_EVENT Century;                                  //0x260
    NOK_TIMEZONE_CHANGE_EVENT NextYear;                                 //0x300
    LONG OkToTimeZoneRefresh;                                               //0x3a0
    NOK_LARGE_INTEGER NextCenturyTimeInUTC;                              //0x3a8
    NOK_TIME_FIELDS NextCenturyTimeFieldsInLocalTime;                   //0x3b0
    NOK_LARGE_INTEGER NextYearTimeInUTC;                                 //0x3c0
    NOK_TIME_FIELDS NextYearTimeFieldsInLocalTime;                      //0x3c8
    SHORT LastDynamicTimeZoneYear;                                          //0x3d8
    NOK_LARGE_INTEGER NextSystemCutoverInUTC;                            //0x3e0
    ULONG RefreshFailures;                                                  //0x3e8
}NOK_EX_TIMEZONE_STATE, * NOK_PEX_TIMEZONE_STATE;
//0x20 bytes (sizeof)
typedef struct _NOK_VACB_LEVEL_ALLOCATION_LIST
{
    NOK_LIST_ENTRY VacbLevelList;                                       //0x0
    VOID* VacbLevelWithBcbListHeads;                                        //0x10
    ULONG VacbLevelsAllocated;                                              //0x18
}NOK_VACB_LEVEL_ALLOCATION_LIST, * NOK_PVACB_LEVEL_ALLOCATION_LIST;
//0x10 bytes (sizeof)
typedef struct _NOK_VF_ADDRESS_RANGE
{
    UCHAR* Start;                                                           //0x0
    UCHAR* End;                                                             //0x8
}NOK_VF_ADDRESS_RANGE, * NOK_PVF_ADDRESS_RANGE;
//0x28 bytes (sizeof)
typedef struct _NOK_VF_AVL_TREE
{
    ULONGLONG NodeRangeSize;                                                //0x0
    volatile ULONGLONG NodeCount;                                           //0x8
    NOK_PVF_AVL_TABLE Tables;                                           //0x10
    ULONG TablesNo;                                                         //0x18
    UCHAR UseSessionId;                                                     //0x1c
    union
    {
        ULONG NodeSize;                                                     //0x20
        ULONG UseLookaside;                                                 //0x20
    } u1;                                                                   //0x20
}NOK_VF_AVL_TREE, * NOK_PVF_AVL_TREE;
//0x10 bytes (sizeof)
typedef struct _NOK_VF_AVL_TREE_NODE
{
    VOID* p;                                                                //0x0
    ULONGLONG RangeSize;                                                    //0x8
}NOK_VF_AVL_TREE_NODE, * NOK_PVF_AVL_TREE_NODE;
//0x18 bytes (sizeof)
typedef struct _NOK_VF_AVL_TREE_NODE_EX
{
    NOK_VF_AVL_TREE_NODE Base;                                          //0x0
    ULONG SessionId;                                                        //0x10
}NOK_VF_AVL_TREE_NODE_EX, * NOK_PVF_AVL_TREE_NODE_EX;
//0x100 bytes (sizeof)
typedef struct _NOK_VF_DRIVER_IO_CALLBACKS
{
    LONG (*DriverInit)(NOK_PDRIVER_OBJECT arg1, NOK_PUNICODE_STRING arg2); //0x0
    VOID (*DriverStartIo)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2);  //0x8
    VOID (*DriverUnload)(NOK_PDRIVER_OBJECT arg1);                      //0x10
    LONG (*AddDevice)(NOK_PDRIVER_OBJECT arg1, NOK_PDEVICE_OBJECT arg2); //0x18
    LONG (*MajorFunction[28])(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2); //0x20
}NOK_VF_DRIVER_IO_CALLBACKS, * NOK_PVF_DRIVER_IO_CALLBACKS;
//0x40 bytes (sizeof)
typedef struct _NOK_VF_KE_CRITICAL_REGION_TRACE
{
    NOK_PETHREAD Thread;                                                //0x0
    VOID* StackTrace[7];                                                    //0x8
}NOK_VF_KE_CRITICAL_REGION_TRACE, * NOK_PVF_KE_CRITICAL_REGION_TRACE;
//0x80 bytes (sizeof)
typedef struct _NOK_VF_POOL_TRACE
{
    VOID* Address;                                                          //0x0
    ULONGLONG Size;                                                         //0x8
    NOK_PETHREAD Thread;                                                //0x10
    VOID* StackTrace[13];                                                   //0x18
}NOK_VF_POOL_TRACE, * NOK_PVF_POOL_TRACE;
//0x28 bytes (sizeof)
typedef struct _NOK_VF_SUSPECT_DRIVER_ENTRY
{
    NOK_LIST_ENTRY Links;                                               //0x0
    ULONG Loads;                                                            //0x10
    ULONG Unloads;                                                          //0x14
    NOK_UNICODE_STRING BaseName;                                        //0x18
}NOK_VF_SUSPECT_DRIVER_ENTRY, * NOK_PVF_SUSPECT_DRIVER_ENTRY;
//0x20 bytes (sizeof)
typedef struct _NOK_VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
    NOK_PVERIFIER_SHARED_EXPORT_THUNK SharedExportThunks;               //0x0
    NOK_PVERIFIER_SHARED_EXPORT_THUNK PoolSharedExportThunks;           //0x8
    NOK_PVERIFIER_SHARED_EXPORT_THUNK OrderDependentSharedExportThunks; //0x10
    NOK_PVERIFIER_SHARED_EXPORT_THUNK XdvSharedExportThunks;            //0x18
}NOK_VF_TARGET_ALL_SHARED_EXPORT_THUNKS, * NOK_PVF_TARGET_ALL_SHARED_EXPORT_THUNKS;
//0x40 bytes (sizeof)
typedef struct _NOK_VF_TARGET_DRIVER
{
    NOK_VF_AVL_TREE_NODE_EX TreeNode;                                   //0x0
    union
    {
        NOK_VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;   //0x18
        struct
        {
            ULONG SnapSharedExportsFailed:1;                                //0x18
            ULONG Spare:31;                                                 //0x18
        } Flags;                                                            //0x18
    } u1;                                                                   //0x18
    NOK_PVF_TARGET_VERIFIED_DRIVER_DATA VerifiedData;                   //0x38
}NOK_VF_TARGET_DRIVER, * NOK_PVF_TARGET_DRIVER;
//0x1c0 bytes (sizeof)
typedef struct _NOK_MI_HARDWARE_STATE
{
    ULONG NodeMask;                                                         //0x0
    ULONG NumaHintIndex;                                                    //0x4
    ULONG NumaLastRangeIndexInclusive;                                      //0x8
    UCHAR NodeShift;                                                        //0xc
    UCHAR ChannelShift;                                                     //0xd
    ULONG ChannelHintIndex;                                                 //0x10
    ULONG ChannelLastRangeIndexInclusive;                                   //0x14
    NOK_PMI_NODE_NUMBER_ZERO_BASED NodeGraph;                           //0x18
    NOK_PMI_SYSTEM_NODE_INFORMATION SystemNodeInformation;              //0x20
    NOK_HAL_NODE_RANGE TemporaryNumaRanges[2];                          //0x28
    NOK_PHAL_NODE_RANGE NumaMemoryRanges;                               //0x48
    NOK_PHAL_CHANNEL_MEMORY_RANGES ChannelMemoryRanges;                 //0x50
    ULONG SecondLevelCacheSize;                                             //0x58
    ULONG FirstLevelCacheSize;                                              //0x5c
    ULONG PhysicalAddressBits;                                              //0x60
    ULONG LogicalProcessorsPerCore;                                         //0x64
    UCHAR ProcessorCachesFlushedOnPowerLoss;                                //0x68
    ULONGLONG TotalPagesAllowed;                                            //0x70
    ULONG SecondaryColorMask;                                               //0x78
    ULONG SecondaryColors;                                                  //0x7c
    ULONG FlushTbForAttributeChange;                                        //0x80
    ULONG FlushCacheForAttributeChange;                                     //0x84
    ULONG FlushCacheForPageAttributeChange;                                 //0x88
    ULONG CacheFlushPromoteThreshold;                                       //0x8c
    NOK_LARGE_INTEGER PerformanceCounterFrequency;                       //0x90
    ULONGLONG InvalidPteMask;                                               //0xc0
    ULONG LargePageColors[3];                                               //0x100
    ULONGLONG FlushTbThreshold;                                             //0x110
    NOK_MI_PFN_CACHE_ATTRIBUTE OptimalZeroingAttribute[4][4];             //0x118
    UCHAR AttributeChangeRequiresReZero;                                    //0x158
    NOK_MI_ZERO_COST_COUNTS ZeroCostCounts[2];                          //0x160
    ULONGLONG VsmKernelPageCount;                                           //0x180
}NOK_MI_HARDWARE_STATE, * NOK_PMI_HARDWARE_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_VF_TRACKER
{
    ULONG TrackerFlags;                                                     //0x0
    ULONG TrackerSize;                                                      //0x4
    ULONG TrackerIndex;                                                     //0x8
    ULONG TraceDepth;                                                       //0xc
}NOK_VF_TRACKER, * NOK_PVF_TRACKER;
//0x10 bytes (sizeof)
typedef struct _NOK_VF_TRACKER_STAMP
{
    VOID* Thread;                                                           //0x0
    UCHAR Flags:8;                                                          //0x8
    UCHAR OldIrql:8;                                                        //0x9
    UCHAR NewIrql:8;                                                        //0xa
    UCHAR Processor:8;                                                      //0xb
}NOK_VF_TRACKER_STAMP, * NOK_PVF_TRACKER_STAMP;
//0x20 bytes (sizeof)
typedef struct _NOK_VF_WATCHDOG_IRP
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PIRP Irp;                                                       //0x10
    ULONG DueTickCount;                                                     //0x18
    volatile UCHAR Inserted;                                                //0x1c
    CHAR TrackedStackLocation;                                              //0x1d
    USHORT CancelTimeoutTicks;                                              //0x1e
}NOK_VF_WATCHDOG_IRP, * NOK_PVF_WATCHDOG_IRP;
//0x70 bytes (sizeof)
typedef struct _NOK_VIRTUAL_EFI_RUNTIME_SERVICES
{
    ULONGLONG GetTime;                                                      //0x0
    ULONGLONG SetTime;                                                      //0x8
    ULONGLONG GetWakeupTime;                                                //0x10
    ULONGLONG SetWakeupTime;                                                //0x18
    ULONGLONG SetVirtualAddressMap;                                         //0x20
    ULONGLONG ConvertPointer;                                               //0x28
    ULONGLONG GetVariable;                                                  //0x30
    ULONGLONG GetNextVariableName;                                          //0x38
    ULONGLONG SetVariable;                                                  //0x40
    ULONGLONG GetNextHighMonotonicCount;                                    //0x48
    ULONGLONG ResetSystem;                                                  //0x50
    ULONGLONG UpdateCapsule;                                                //0x58
    ULONGLONG QueryCapsuleCapabilities;                                     //0x60
    ULONGLONG QueryVariableInfo;                                            //0x68
}NOK_VIRTUAL_EFI_RUNTIME_SERVICES, * NOK_PVIRTUAL_EFI_RUNTIME_SERVICES;
//0x4 bytes (sizeof)
typedef enum _NOK_KERNEL_STACK_LIMITS
{
    NOK_BugcheckStackLimits = 0,
    NOK_DPCStackLimits = 1,
    NOK_ExpandedStackLimits = 2,
    NOK_NormalStackLimits = 3,
    NOK_Win32kStackLimits = 4,
    NOK_SwapBusyStackLimits = 5,
    NOK_IsrStackLimits = 6,
    NOK_DebuggerStackLimits = 7,
    NOK_NmiStackLimits = 8,
    NOK_MachineCheckStackLimits = 9,
    NOK_ExceptionStackLimits = 10,
    NOK_MaximumStackLimits = 11
}NOK_KERNEL_STACK_LIMITS, * NOK_PKERNEL_STACK_LIMITS;
//0xd0 bytes (sizeof)
typedef struct _NOK_VI_DEADLOCK_NODE
{
    NOK_PVI_DEADLOCK_NODE Parent;                                       //0x0
    NOK_LIST_ENTRY ChildrenList;                                        //0x8
    NOK_LIST_ENTRY SiblingsList;                                        //0x18
    union
    {
        NOK_LIST_ENTRY ResourceList;                                    //0x28
        NOK_LIST_ENTRY FreeListEntry;                                   //0x28
    };
    NOK_PVI_DEADLOCK_RESOURCE Root;                                     //0x38
    NOK_PVI_DEADLOCK_THREAD ThreadEntry;                                //0x40
    union
    {
        ULONG Active:1;                                                     //0x48
        ULONG OnlyTryAcquireUsed:1;                                         //0x48
        ULONG ReleasedOutOfOrder:1;                                         //0x48
        ULONG SequenceNumber:29;                                            //0x48
        ULONG Whole;                                                        //0x48
    } u1;                                                                   //0x48
    LONG ChildrenCount;                                                     //0x4c
    VOID* StackTrace[8];                                                    //0x50
    VOID* ParentStackTrace[8];                                              //0x90
}NOK_VI_DEADLOCK_NODE, * NOK_PVI_DEADLOCK_NODE;
//0xf8 bytes (sizeof)
typedef struct _NOK_VI_DEADLOCK_RESOURCE
{
    NOK_VI_DEADLOCK_RESOURCE_TYPE Type;                                   //0x0
    ULONG NodeCount:16;                                                     //0x4
    ULONG RecursionCount:16;                                                //0x4
    VOID* ResourceAddress;                                                  //0x8
    NOK_PVI_DEADLOCK_THREAD ThreadOwner;                                //0x10
    NOK_LIST_ENTRY ResourceList;                                        //0x18
    union
    {
        NOK_LIST_ENTRY HashChainList;                                   //0x28
        NOK_LIST_ENTRY FreeListEntry;                                   //0x28
    };
    VOID* StackTrace[8];                                                    //0x38
    VOID* LastAcquireTrace[8];                                              //0x78
    VOID* LastReleaseTrace[8];                                              //0xb8
}NOK_VI_DEADLOCK_RESOURCE, * NOK_PVI_DEADLOCK_RESOURCE;
//0x38 bytes (sizeof)
typedef struct _NOK_VI_DEADLOCK_THREAD
{
    NOK_PKTHREAD Thread;                                                //0x0
    NOK_PVI_DEADLOCK_NODE CurrentSpinNode;                              //0x8
    NOK_PVI_DEADLOCK_NODE CurrentOtherNode;                             //0x10
    union
    {
        NOK_LIST_ENTRY ListEntry;                                       //0x18
        NOK_LIST_ENTRY FreeListEntry;                                   //0x18
    };
    ULONG NodeCount;                                                        //0x28
    volatile ULONG PagingCount;                                             //0x2c
    UCHAR ThreadUsesEresources;                                             //0x30
}NOK_VI_DEADLOCK_THREAD, * NOK_PVI_DEADLOCK_THREAD;
//0x48 bytes (sizeof)
typedef struct _NOK_VI_FAULT_TRACE
{
    NOK_PETHREAD Thread;                                                //0x0
    VOID* StackTrace[8];                                                    //0x8
}NOK_VI_FAULT_TRACE, * NOK_PVI_FAULT_TRACE;
//0x18 bytes (sizeof)
typedef struct _NOK_VI_POOL_PAGE_HEADER
{
    NOK_PSLIST_ENTRY NextPage;                                          //0x0
    VOID* VerifierEntry;                                                    //0x8
    ULONGLONG Signature;                                                    //0x10
}NOK_VI_POOL_PAGE_HEADER, * NOK_PVI_POOL_PAGE_HEADER;
//0x20 bytes (sizeof)
typedef struct _NOK_VI_POOL_ENTRY_INUSE
{
    VOID* VirtualAddress;                                                   //0x0
    VOID* CallingAddress;                                                   //0x8
    ULONGLONG NumberOfBytes;                                                //0x10
    ULONGLONG Tag;                                                          //0x18
}NOK_VI_POOL_ENTRY_INUSE, * NOK_PVI_POOL_ENTRY_INUSE;
//0x20 bytes (sizeof)
typedef struct _NOK_VI_POOL_ENTRY
{
    union
    {
        NOK_VI_POOL_PAGE_HEADER PageHeader;                             //0x0
        NOK_VI_POOL_ENTRY_INUSE InUse;                                  //0x0
        NOK_PSLIST_ENTRY NextFree;                                      //0x0
    };
}NOK_VI_POOL_ENTRY, * NOK_PVI_POOL_ENTRY;
//0x38 bytes (sizeof)
typedef struct _NOK_VI_TRACK_IRQL
{
    VOID* Thread;                                                           //0x0
    UCHAR OldIrql;                                                          //0x8
    UCHAR NewIrql;                                                          //0x9
    USHORT Processor;                                                       //0xa
    ULONG TickCount;                                                        //0xc
    VOID* StackTrace[5];                                                    //0x10
}NOK_VI_TRACK_IRQL, * NOK_PVI_TRACK_IRQL;
//0x20 bytes (sizeof)
typedef struct _NOK_VI_VERIFIER_ISSUE
{
    ULONGLONG IssueType;                                                    //0x0
    VOID* Address;                                                          //0x8
    ULONGLONG Parameters[2];                                                //0x10
}NOK_VI_VERIFIER_ISSUE, * NOK_PVI_VERIFIER_ISSUE;
//0x8 bytes (sizeof)
typedef struct _NOK_VI_VERIFIER_POOL_HEADER
{
    NOK_PVI_POOL_ENTRY VerifierPoolEntry;                               //0x0
}NOK_VI_VERIFIER_POOL_HEADER, * NOK_PVI_VERIFIER_POOL_HEADER;
//0xd0 bytes (sizeof)
typedef struct _NOK_VOLUME_CACHE_MAP
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteCode;                                                     //0x2
    ULONG UseCount;                                                         //0x4
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x8
    NOK_LIST_ENTRY VolumeCacheMapLinks;                                 //0x10
    ULONGLONG DirtyPages;                                                   //0x20
    NOK_LOG_HANDLE_CONTEXT LogHandleContext;                            //0x28
    ULONG Flags;                                                            //0xc0
    ULONG PagesQueuedToDisk;                                                //0xc4
    ULONG LoggedPagesQueuedToDisk;                                          //0xc8
}NOK_VOLUME_CACHE_MAP, * NOK_PVOLUME_CACHE_MAP;
//0x60 bytes (sizeof)
typedef struct _NOK_VPB
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    USHORT Flags;                                                           //0x4
    USHORT VolumeLabelLength;                                               //0x6
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x8
    NOK_PDEVICE_OBJECT RealDevice;                                      //0x10
    ULONG SerialNumber;                                                     //0x18
    ULONG ReferenceCount;                                                   //0x1c
    WCHAR VolumeLabel[32];                                                  //0x20
}NOK_VPB, * NOK_PVPB;
//0x118 bytes (sizeof)
typedef struct _NOK_TRACE_LOGFILE_HEADER
{
    ULONG BufferSize;                                                       //0x0
    union
    {
        ULONG Version;                                                      //0x4
        struct
        {
            UCHAR MajorVersion;                                             //0x4
            UCHAR MinorVersion;                                             //0x5
            UCHAR SubVersion;                                               //0x6
            UCHAR SubMinorVersion;                                          //0x7
        } VersionDetail;                                                    //0x4
    };
    ULONG ProviderVersion;                                                  //0x8
    ULONG NumberOfProcessors;                                               //0xc
    NOK_LARGE_INTEGER EndTime;                                           //0x10
    ULONG TimerResolution;                                                  //0x18
    ULONG MaximumFileSize;                                                  //0x1c
    ULONG LogFileMode;                                                      //0x20
    ULONG BuffersWritten;                                                   //0x24
    union
    {
        NOK_GUID LogInstanceGuid;                                       //0x28
        struct
        {
            ULONG StartBuffers;                                             //0x28
            ULONG PointerSize;                                              //0x2c
            ULONG EventsLost;                                               //0x30
            ULONG CpuSpeedInMHz;                                            //0x34
        };
    };
    WCHAR* LoggerName;                                                      //0x38
    WCHAR* LogFileName;                                                     //0x40
    NOK_RTL_TIME_ZONE_INFORMATION TimeZone;                             //0x48
    NOK_LARGE_INTEGER BootTime;                                          //0xf8
    NOK_LARGE_INTEGER PerfFreq;                                          //0x100
    NOK_LARGE_INTEGER StartTime;                                         //0x108
    ULONG ReservedFlags;                                                    //0x110
    ULONG BuffersLost;                                                      //0x114
}NOK_TRACE_LOGFILE_HEADER, * NOK_PTRACE_LOGFILE_HEADER;
//0x40 bytes (sizeof)
typedef struct _NOK_WAITING_IRP
{
    NOK_LIST_ENTRY Links;                                               //0x0
    NOK_PIRP Irp;                                                       //0x10
    VOID (*CompletionRoutine)(VOID* arg1, NOK_PIRP arg2);               //0x18
    VOID* Context;                                                          //0x20
    NOK_PKEVENT Event;                                                  //0x28
    ULONG Information;                                                      //0x30
    UCHAR BreakAllRH;                                                       //0x34
    UCHAR OplockBreakNotify;                                                //0x35
    NOK_PFILE_OBJECT FileObject;                                        //0x38
}NOK_WAITING_IRP, * NOK_PWAITING_IRP;
//0x18 bytes (sizeof)
typedef struct _NOK_DEVICE_OBJECT_LIST_ENTRY
{
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x0
    NOK_DEVICE_RELATION_LEVEL RelationLevel;                              //0x8
    ULONG Ordinal;                                                          //0xc
    ULONG Flags;                                                            //0x10
}NOK_DEVICE_OBJECT_LIST_ENTRY, * NOK_PDEVICE_OBJECT_LIST_ENTRY;
//0x1 bytes (sizeof)
typedef struct _NOK_WDT_HANDLE
{
    CHAR Reserved;                                                          //0x0
}NOK_WDT_HANDLE, * NOK_PWDT_HANDLE;
//0x2 bytes (sizeof)
typedef union _NOK_WHEA_REVISION
{
    struct
    {
        UCHAR MinorRevision;                                                //0x0
        UCHAR MajorRevision;                                                //0x1
    };
    USHORT AsUSHORT;                                                        //0x0
}NOK_WHEA_REVISION, * NOK_PWHEA_REVISION;
//0x2 bytes (sizeof)
typedef union _NOK_WHEA_NOTIFICATION_FLAGS
{
    USHORT PollIntervalRW:1;                                                //0x0
    USHORT SwitchToPollingThresholdRW:1;                                    //0x0
    USHORT SwitchToPollingWindowRW:1;                                       //0x0
    USHORT ErrorThresholdRW:1;                                              //0x0
    USHORT ErrorThresholdWindowRW:1;                                        //0x0
    USHORT Reserved:11;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}NOK_WHEA_NOTIFICATION_FLAGS, * NOK_PWHEA_NOTIFICATION_FLAGS;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_ERROR_SOURCE_TYPE
{
    NOK_WheaErrSrcTypeMCE = 0,
    NOK_WheaErrSrcTypeCMC = 1,
    NOK_WheaErrSrcTypeCPE = 2,
    NOK_WheaErrSrcTypeNMI = 3,
    NOK_WheaErrSrcTypePCIe = 4,
    NOK_WheaErrSrcTypeGeneric = 5,
    NOK_WheaErrSrcTypeINIT = 6,
    NOK_WheaErrSrcTypeBOOT = 7,
    NOK_WheaErrSrcTypeSCIGeneric = 8,
    NOK_WheaErrSrcTypeIPFMCA = 9,
    NOK_WheaErrSrcTypeIPFCMC = 10,
    NOK_WheaErrSrcTypeIPFCPE = 11,
    NOK_WheaErrSrcTypeGenericV2 = 12,
    NOK_WheaErrSrcTypeSCIGenericV2 = 13,
    NOK_WheaErrSrcTypeBMC = 14,
    NOK_WheaErrSrcTypePMEM = 15,
    NOK_WheaErrSrcTypeDeviceDriver = 16,
    NOK_WheaErrSrcTypeMax = 17
}NOK_WHEA_ERROR_SOURCE_TYPE, * NOK_PWHEA_ERROR_SOURCE_TYPE;
//0x18 bytes (sizeof)
typedef struct _NOK_WHEA_ERROR_SOURCE_CONFIGURATION_DD
{
    LONG (*Initialize)(VOID* arg1, ULONG arg2);                             //0x0
    VOID (*Uninitialize)(VOID* arg1);                                       //0x8
    LONG (*Correct)(VOID* arg1, ULONG* arg2);                               //0x10
}NOK_WHEA_ERROR_SOURCE_CONFIGURATION_DD, * NOK_PWHEA_ERROR_SOURCE_CONFIGURATION_DD;
//0xe8 bytes (sizeof)
typedef struct _NOK_SYSTEM_POWER_POLICY
{
    ULONG Revision;                                                         //0x0
    NOK_POWER_ACTION_POLICY PowerButton;                                 //0x4
    NOK_POWER_ACTION_POLICY SleepButton;                                 //0x10
    NOK_POWER_ACTION_POLICY LidClose;                                    //0x1c
    NOK_SYSTEM_POWER_STATE LidOpenWake;                                   //0x28
    ULONG Reserved;                                                         //0x2c
    NOK_POWER_ACTION_POLICY Idle;                                        //0x30
    ULONG IdleTimeout;                                                      //0x3c
    UCHAR IdleSensitivity;                                                  //0x40
    UCHAR DynamicThrottle;                                                  //0x41
    UCHAR Spare2[2];                                                        //0x42
    NOK_SYSTEM_POWER_STATE MinSleep;                                      //0x44
    NOK_SYSTEM_POWER_STATE MaxSleep;                                      //0x48
    NOK_SYSTEM_POWER_STATE ReducedLatencySleep;                           //0x4c
    ULONG WinLogonFlags;                                                    //0x50
    ULONG Spare3;                                                           //0x54
    ULONG DozeS4Timeout;                                                    //0x58
    ULONG BroadcastCapacityResolution;                                      //0x5c
    NOK_SYSTEM_POWER_LEVEL DischargePolicy[4];                           //0x60
    ULONG VideoTimeout;                                                     //0xc0
    UCHAR VideoDimDisplay;                                                  //0xc4
    ULONG VideoReserved[3];                                                 //0xc8
    ULONG SpindownTimeout;                                                  //0xd4
    UCHAR OptimizeForPower;                                                 //0xd8
    UCHAR FanThrottleTolerance;                                             //0xd9
    UCHAR ForcedThrottle;                                                   //0xda
    UCHAR MinThrottle;                                                      //0xdb
    NOK_POWER_ACTION_POLICY OverThrottled;                               //0xdc
}NOK_SYSTEM_POWER_POLICY, * NOK_PSYSTEM_POWER_POLICY;
//0x4 bytes (sizeof)
typedef struct _NOK_WHEA_PCI_SLOT_NUMBER
{
    union
    {
        struct
        {
            ULONG DeviceNumber:5;                                           //0x0
            ULONG FunctionNumber:3;                                         //0x0
            ULONG Reserved:24;                                              //0x0
        } bits;                                                             //0x0
        ULONG AsULONG;                                                      //0x0
    } u;                                                                    //0x0
}NOK_WHEA_PCI_SLOT_NUMBER, * NOK_PWHEA_PCI_SLOT_NUMBER;
//0x2 bytes (sizeof)
typedef union _NOK_AER_BRIDGE_DESCRIPTOR_FLAGS
{
    USHORT UncorrectableErrorMaskRW:1;                                      //0x0
    USHORT UncorrectableErrorSeverityRW:1;                                  //0x0
    USHORT CorrectableErrorMaskRW:1;                                        //0x0
    USHORT AdvancedCapsAndControlRW:1;                                      //0x0
    USHORT SecondaryUncorrectableErrorMaskRW:1;                             //0x0
    USHORT SecondaryUncorrectableErrorSevRW:1;                              //0x0
    USHORT SecondaryCapsAndControlRW:1;                                     //0x0
    USHORT Reserved:9;                                                      //0x0
    USHORT AsUSHORT;                                                        //0x0
}NOK_AER_BRIDGE_DESCRIPTOR_FLAGS, * NOK_PAER_BRIDGE_DESCRIPTOR_FLAGS;
//0x2 bytes (sizeof)
typedef union _NOK_AER_ENDPOINT_DESCRIPTOR_FLAGS
{
    USHORT UncorrectableErrorMaskRW:1;                                      //0x0
    USHORT UncorrectableErrorSeverityRW:1;                                  //0x0
    USHORT CorrectableErrorMaskRW:1;                                        //0x0
    USHORT AdvancedCapsAndControlRW:1;                                      //0x0
    USHORT Reserved:12;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}NOK_AER_ENDPOINT_DESCRIPTOR_FLAGS, * NOK_PAER_ENDPOINT_DESCRIPTOR_FLAGS;
//0xc0 bytes (sizeof)
typedef struct _NOK_WHEA_AMD_EXTENDED_REGISTERS
{
    ULONGLONG IPID;                                                         //0x0
    ULONGLONG SYND;                                                         //0x8
    ULONGLONG CONFIG;                                                       //0x10
    ULONGLONG DESTAT;                                                       //0x18
    ULONGLONG DEADDR;                                                       //0x20
    ULONGLONG MISC1;                                                        //0x28
    ULONGLONG MISC2;                                                        //0x30
    ULONGLONG MISC3;                                                        //0x38
    ULONGLONG MISC4;                                                        //0x40
    ULONGLONG RasCap;                                                       //0x48
    ULONGLONG Reserved[14];                                                 //0x50
}NOK_WHEA_AMD_EXTENDED_REGISTERS, * NOK_PWHEA_AMD_EXTENDED_REGISTERS;
//0x74 bytes (sizeof)
typedef struct _NOK_WHEA_DEVICE_DRIVER_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    NOK_GUID SourceGuid;                                                //0x4
    USHORT LogTag;                                                          //0x14
    USHORT Reserved2;                                                       //0x16
    ULONG PacketLength;                                                     //0x18
    ULONG PacketCount;                                                      //0x1c
    UCHAR* PacketBuffer;                                                    //0x20
    NOK_WHEA_ERROR_SOURCE_CONFIGURATION_DD Config;                      //0x28
    NOK_GUID CreatorId;                                                 //0x40
    NOK_GUID PartitionId;                                               //0x50
    ULONG MaxSectionDataLength;                                             //0x60
    ULONG MaxSectionsPerRecord;                                             //0x64
    UCHAR* PacketStateBuffer;                                               //0x68
    LONG OpenHandles;                                                       //0x70
}NOK_WHEA_DEVICE_DRIVER_DESCRIPTOR, * NOK_PWHEA_DEVICE_DRIVER_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_ERROR_PACKET_DATA_FORMAT
{
    NOK_WheaDataFormatIPFSalRecord = 0,
    NOK_WheaDataFormatXPFMCA = 1,
    NOK_WheaDataFormatMemory = 2,
    NOK_WheaDataFormatPCIExpress = 3,
    NOK_WheaDataFormatNMIPort = 4,
    NOK_WheaDataFormatPCIXBus = 5,
    NOK_WheaDataFormatPCIXDevice = 6,
    NOK_WheaDataFormatGeneric = 7,
    NOK_WheaDataFormatMax = 8
}NOK_WHEA_ERROR_PACKET_DATA_FORMAT, * NOK_PWHEA_ERROR_PACKET_DATA_FORMAT;
//0x8 bytes (sizeof)
typedef union _NOK_WHEA_PERSISTENCE_INFO
{
    ULONGLONG Signature:16;                                                 //0x0
    ULONGLONG Length:24;                                                    //0x0
    ULONGLONG Identifier:16;                                                //0x0
    ULONGLONG Attributes:2;                                                 //0x0
    ULONGLONG DoNotLog:1;                                                   //0x0
    ULONGLONG Reserved:5;                                                   //0x0
    ULONGLONG AsULONGLONG;                                                  //0x0
}NOK_WHEA_PERSISTENCE_INFO, * NOK_PWHEA_PERSISTENCE_INFO;
//0x4 bytes (sizeof)
typedef enum _NOK_KD_CALLBACK_ACTION
{
    NOK_KdConfigureDeviceAndContinue = 0,
    NOK_KdSkipDeviceAndContinue = 1,
    NOK_KdConfigureDeviceAndStop = 2,
    NOK_KdSkipDeviceAndStop = 3
}NOK_KD_CALLBACK_ACTION, * NOK_PKD_CALLBACK_ACTION;
//0x1 bytes (sizeof)
typedef union _NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
    UCHAR FRUId:1;                                                          //0x0
    UCHAR FRUText:1;                                                        //0x0
    UCHAR Reserved:6;                                                       //0x0
    UCHAR AsUCHAR;                                                          //0x0
}NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, * NOK_PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
//0x4 bytes (sizeof)
typedef union _NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
    ULONG Primary:1;                                                        //0x0
    ULONG ContainmentWarning:1;                                             //0x0
    ULONG Reset:1;                                                          //0x0
    ULONG ThresholdExceeded:1;                                              //0x0
    ULONG ResourceNotAvailable:1;                                           //0x0
    ULONG LatentError:1;                                                    //0x0
    ULONG Propagated:1;                                                     //0x0
    ULONG Reserved:25;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, * NOK_PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
//0x48 bytes (sizeof)
typedef struct _NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
    ULONG SectionOffset;                                                    //0x0
    ULONG SectionLength;                                                    //0x4
    NOK_WHEA_REVISION Revision;                                          //0x8
    NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;        //0xa
    UCHAR Reserved;                                                         //0xb
    NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;                //0xc
    NOK_GUID SectionType;                                               //0x10
    NOK_GUID FRUId;                                                     //0x20
    NOK_WHEA_ERROR_SEVERITY SectionSeverity;                              //0x30
    CHAR FRUText[20];                                                       //0x34
}NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, * NOK_PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef struct _NOK_WHEA_IPF_CMC_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
}NOK_WHEA_IPF_CMC_DESCRIPTOR, * NOK_PWHEA_IPF_CMC_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef union _NOK_XPF_MCE_FLAGS
{
    ULONG MCG_CapabilityRW:1;                                               //0x0
    ULONG MCG_GlobalControlRW:1;                                            //0x0
    ULONG Reserved:30;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_XPF_MCE_FLAGS, * NOK_PXPF_MCE_FLAGS;
//0x4 bytes (sizeof)
typedef union _NOK_WHEA_EVENT_LOG_ENTRY_FLAGS
{
    ULONG Reserved1:1;                                                      //0x0
    ULONG LogInternalEtw:1;                                                 //0x0
    ULONG LogBlackbox:1;                                                    //0x0
    ULONG LogSel:1;                                                         //0x0
    ULONG RawSel:1;                                                         //0x0
    ULONG NoFormat:1;                                                       //0x0
    ULONG Driver:1;                                                         //0x0
    ULONG Reserved2:25;                                                     //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_WHEA_EVENT_LOG_ENTRY_FLAGS, * NOK_PWHEA_EVENT_LOG_ENTRY_FLAGS;
//0x20 bytes (sizeof)
typedef struct _NOK_WHEA_EVENT_LOG_ENTRY_HEADER
{
    ULONG Signature;                                                        //0x0
    ULONG Version;                                                          //0x4
    ULONG Length;                                                           //0x8
    NOK_WHEA_EVENT_LOG_ENTRY_TYPE Type;                                   //0xc
    ULONG OwnerTag;                                                         //0x10
    NOK_WHEA_EVENT_LOG_ENTRY_ID Id;                                       //0x14
    NOK_WHEA_EVENT_LOG_ENTRY_FLAGS Flags;                                //0x18
    ULONG PayloadLength;                                                    //0x1c
}NOK_WHEA_EVENT_LOG_ENTRY_HEADER, * NOK_PWHEA_EVENT_LOG_ENTRY_HEADER;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_EVENT_LOG_ENTRY_ID
{
    NOK_WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    NOK_WheaEventLogEntryIdWheaInit = -2147483646,
    NOK_WheaEventLogEntryIdCmcSwitchToPolling = -2147483645,
    NOK_WheaEventLogEntryIdDroppedCorrectedError = -2147483644,
    NOK_WheaEventLogEntryIdStartedReportHwError = -2147483643,
    NOK_WheaEventLogEntryIdPFAMemoryOfflined = -2147483642,
    NOK_WheaEventLogEntryIdPFAMemoryRemoveMonitor = -2147483641,
    NOK_WheaEventLogEntryIdPFAMemoryPolicy = -2147483640,
    NOK_WheaEventLogEntryIdPshedInjectError = -2147483639,
    NOK_WheaEventLogEntryIdOscCapabilities = -2147483638,
    NOK_WheaEventLogEntryIdPshedPluginRegister = -2147483637,
    NOK_WheaEventLogEntryIdAddRemoveErrorSource = -2147483636,
    NOK_WheaEventLogEntryIdWorkQueueItem = -2147483635,
    NOK_WheaEventLogEntryIdAttemptErrorRecovery = -2147483634,
    NOK_WheaEventLogEntryIdMcaFoundErrorInBank = -2147483633,
    NOK_WheaEventLogEntryIdMcaStuckErrorCheck = -2147483632,
    NOK_WheaEventLogEntryIdMcaErrorCleared = -2147483631,
    NOK_WheaEventLogEntryIdClearedPoison = -2147483630,
    NOK_WheaEventLogEntryIdProcessEINJ = -2147483629,
    NOK_WheaEventLogEntryIdProcessHEST = -2147483628,
    NOK_WheaEventLogEntryIdCreateGenericRecord = -2147483627,
    NOK_WheaEventLogEntryIdErrorRecord = -2147483626,
    NOK_WheaEventLogEntryIdErrorRecordLimit = -2147483625,
    NOK_WheaEventLogEntryIdErrSrcArrayInvalid = -2147483623,
    NOK_WheaEventLogEntryIdAcpiTimeOut = -2147483622,
    NOK_WheaEventLogCmciRestart = -2147483621,
    NOK_WheaEventLogCmciFinalRestart = -2147483620,
    NOK_WheaEventLogEntryEtwOverFlow = -2147483619,
    NOK_WheaEventLogAzccRootBusSearchErr = -2147483618,
    NOK_WheaEventLogAzccRootBusList = -2147483617,
    NOK_WheaEventLogEntryIdErrSrcInvalid = -2147483616,
    NOK_WheaEventLogEntryIdGenericErrMemMap = -2147483615,
    NOK_WheaEventLogEntryIdPshedCallbackCollision = -2147483614,
    NOK_WheaEventLogEntryIdSELBugCheckProgress = -2147483613,
    NOK_WheaEventLogEntryIdPshedPluginLoad = -2147483612,
    NOK_WheaEventLogEntryIdPshedPluginUnload = -2147483611,
    NOK_WheaEventLogEntryIdPshedPluginSupported = -2147483610,
    NOK_WheaEventLogEntryIdDeviceDriver = -2147483609,
    NOK_WheaEventLogEntryIdCmciImplPresent = -2147483608,
    NOK_WheaEventLogEntryIdCmciInitError = -2147483607,
    NOK_WheaEventLogEntryIdSELBugCheckRecovery = -2147483606,
    NOK_WheaEventLogEntryIdDrvErrSrcInvalid = -2147483605,
    NOK_WheaEventLogEntryIdDrvHandleBusy = -2147483604,
    NOK_WheaEventLogEntryIdWheaHeartbeat = -2147483603,
    NOK_WheaEventLogAzccRootBusPoisonSet = -2147483602,
    NOK_WheaEventLogEntryIdSELBugCheckInfo = -2147483601,
    NOK_WheaEventLogEntryIdErrDimmInfoMismatch = -2147483600,
    NOK_WheaEventLogEntryIdeDpcEnabled = -2147483599
}NOK_WHEA_EVENT_LOG_ENTRY_ID, * NOK_PWHEA_EVENT_LOG_ENTRY_ID;
//0x8 bytes (sizeof)
typedef struct _NOK_VACB_LEVEL_REFERENCE
{
    LONG Reference;                                                         //0x0
    LONG SpecialReference;                                                  //0x4
}NOK_VACB_LEVEL_REFERENCE, * NOK_PVACB_LEVEL_REFERENCE;
//0x4 bytes (sizeof)
typedef struct _NOK_WHEA_IPF_CPE_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
}NOK_WHEA_IPF_CPE_DESCRIPTOR, * NOK_PWHEA_IPF_CPE_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef struct _NOK_WHEA_IPF_MCA_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
}NOK_WHEA_IPF_MCA_DESCRIPTOR, * NOK_PWHEA_IPF_MCA_DESCRIPTOR;
//0x3 bytes (sizeof)
typedef struct _NOK_WHEA_XPF_NMI_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
}NOK_WHEA_XPF_NMI_DESCRIPTOR, * NOK_PWHEA_XPF_NMI_DESCRIPTOR;
//0x1 bytes (sizeof)
typedef union _NOK_XPF_MC_BANK_FLAGS
{
    UCHAR ClearOnInitializationRW:1;                                        //0x0
    UCHAR ControlDataRW:1;                                                  //0x0
    UCHAR Reserved:6;                                                       //0x0
    UCHAR AsUCHAR;                                                          //0x0
}NOK_XPF_MC_BANK_FLAGS, * NOK_PXPF_MC_BANK_FLAGS;
//0x8 bytes (sizeof)
typedef union _NOK_WHEA_ERROR_STATUS
{
    ULONGLONG ErrorStatus;                                                  //0x0
    ULONGLONG Reserved1:8;                                                  //0x0
    ULONGLONG ErrorType:8;                                                  //0x0
    ULONGLONG Address:1;                                                    //0x0
    ULONGLONG Control:1;                                                    //0x0
    ULONGLONG Data:1;                                                       //0x0
    ULONGLONG Responder:1;                                                  //0x0
    ULONGLONG Requester:1;                                                  //0x0
    ULONGLONG FirstError:1;                                                 //0x0
    ULONGLONG Overflow:1;                                                   //0x0
    ULONGLONG Reserved2:41;                                                 //0x0
}NOK_WHEA_ERROR_STATUS, * NOK_PWHEA_ERROR_STATUS;
//0x68 bytes (sizeof)
typedef struct _NOK_BOOT_ENTROPY_SOURCE_LDR_RESULT
{
    NOK_BOOT_ENTROPY_SOURCE_ID SourceId;                                  //0x0
    ULONGLONG Policy;                                                       //0x8
    NOK_BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;                       //0x10
    LONG ResultStatus;                                                      //0x14
    ULONGLONG Time;                                                         //0x18
    ULONG EntropyLength;                                                    //0x20
    UCHAR EntropyData[64];                                                  //0x24
}NOK_BOOT_ENTROPY_SOURCE_LDR_RESULT, * NOK_PBOOT_ENTROPY_SOURCE_LDR_RESULT;
//0x2 bytes (sizeof)
typedef union _NOK_AER_ROOTPORT_DESCRIPTOR_FLAGS
{
    USHORT UncorrectableErrorMaskRW:1;                                      //0x0
    USHORT UncorrectableErrorSeverityRW:1;                                  //0x0
    USHORT CorrectableErrorMaskRW:1;                                        //0x0
    USHORT AdvancedCapsAndControlRW:1;                                      //0x0
    USHORT RootErrorCommandRW:1;                                            //0x0
    USHORT Reserved:11;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}NOK_AER_ROOTPORT_DESCRIPTOR_FLAGS, * NOK_PAER_ROOTPORT_DESCRIPTOR_FLAGS;
//0x8 bytes (sizeof)
typedef union _NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
{
    ULONGLONG ProcessorType:1;                                              //0x0
    ULONGLONG InstructionSet:1;                                             //0x0
    ULONGLONG ErrorType:1;                                                  //0x0
    ULONGLONG Operation:1;                                                  //0x0
    ULONGLONG Flags:1;                                                      //0x0
    ULONGLONG Level:1;                                                      //0x0
    ULONGLONG CPUVersion:1;                                                 //0x0
    ULONGLONG CPUBrandString:1;                                             //0x0
    ULONGLONG ProcessorId:1;                                                //0x0
    ULONGLONG TargetAddress:1;                                              //0x0
    ULONGLONG RequesterId:1;                                                //0x0
    ULONGLONG ResponderId:1;                                                //0x0
    ULONGLONG InstructionPointer:1;                                         //0x0
    ULONGLONG Reserved:51;                                                  //0x0
    ULONGLONG ValidBits;                                                    //0x0
}NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS, * NOK_PWHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
//0xc0 bytes (sizeof)
typedef struct _NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION
{
    NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;        //0x0
    UCHAR ProcessorType;                                                    //0x8
    UCHAR InstructionSet;                                                   //0x9
    UCHAR ErrorType;                                                        //0xa
    UCHAR Operation;                                                        //0xb
    UCHAR Flags;                                                            //0xc
    UCHAR Level;                                                            //0xd
    USHORT Reserved;                                                        //0xe
    ULONGLONG CPUVersion;                                                   //0x10
    UCHAR CPUBrandString[128];                                              //0x18
    ULONGLONG ProcessorId;                                                  //0x98
    ULONGLONG TargetAddress;                                                //0xa0
    ULONGLONG RequesterId;                                                  //0xa8
    ULONGLONG ResponderId;                                                  //0xb0
    ULONGLONG InstructionPointer;                                           //0xb8
}NOK_WHEA_PROCESSOR_GENERIC_ERROR_SECTION, * NOK_PWHEA_PROCESSOR_GENERIC_ERROR_SECTION;
//0x20 bytes (sizeof)
typedef struct _NOK_WHEA_RECOVERY_CONTEXT
{
    union
    {
        struct
        {
            ULONGLONG Address;                                              //0x0
            UCHAR Consumed;                                                 //0x8
            USHORT ErrorCode;                                               //0xa
            UCHAR ErrorIpValid;                                             //0xc
            UCHAR RestartIpValid;                                           //0xd
            UCHAR ClearPoison;                                              //0xe
        } MemoryError;                                                      //0x0
        struct
        {
            ULONGLONG PmemErrInfo;                                          //0x0
        } PmemError;                                                        //0x0
    };
    ULONGLONG PartitionId;                                                  //0x10
    ULONG VpIndex;                                                          //0x18
    NOK_WHEA_RECOVERY_CONTEXT_ERROR_TYPE ErrorType;                       //0x1c
}NOK_WHEA_RECOVERY_CONTEXT, * NOK_PWHEA_RECOVERY_CONTEXT;
//0x1c bytes (sizeof)
typedef struct _NOK_WHEA_NOTIFICATION_DESCRIPTOR
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    NOK_WHEA_NOTIFICATION_FLAGS Flags;                                   //0x2
    union
    {
        struct
        {
            ULONG PollInterval;                                             //0x4
        } Polled;                                                           //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Interrupt;                                                        //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } LocalInterrupt;                                                   //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Sci;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Nmi;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Sea;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Sei;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Gsiv;                                                             //0x4
    } u;                                                                    //0x4
}NOK_WHEA_NOTIFICATION_DESCRIPTOR, * NOK_PWHEA_NOTIFICATION_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_CPU_VENDOR
{
    NOK_WheaCpuVendorOther = 0,
    NOK_WheaCpuVendorIntel = 1,
    NOK_WheaCpuVendorAmd = 2
}NOK_WHEA_CPU_VENDOR, * NOK_PWHEA_CPU_VENDOR;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_ERROR_SOURCE_STATE
{
    NOK_WheaErrSrcStateStopped = 1,
    NOK_WheaErrSrcStateStarted = 2,
    NOK_WheaErrSrcStateRemoved = 3,
    NOK_WheaErrSrcStateRemovePending = 4
}NOK_WHEA_ERROR_SOURCE_STATE, * NOK_PWHEA_ERROR_SOURCE_STATE;
//0x1c bytes (sizeof)
typedef struct _NOK_WHEA_XPF_MC_BANK_DESCRIPTOR
{
    UCHAR BankNumber;                                                       //0x0
    UCHAR ClearOnInitialization;                                            //0x1
    UCHAR StatusDataFormat;                                                 //0x2
    NOK_XPF_MC_BANK_FLAGS Flags;                                         //0x3
    ULONG ControlMsr;                                                       //0x4
    ULONG StatusMsr;                                                        //0x8
    ULONG AddressMsr;                                                       //0xc
    ULONG MiscMsr;                                                          //0x10
    ULONGLONG ControlData;                                                  //0x14
}NOK_WHEA_XPF_MC_BANK_DESCRIPTOR, * NOK_PWHEA_XPF_MC_BANK_DESCRIPTOR;
//0x398 bytes (sizeof)
typedef struct _NOK_WHEA_XPF_MCE_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR NumberOfBanks;                                                    //0x3
    NOK_XPF_MCE_FLAGS Flags;                                             //0x4
    ULONGLONG MCG_Capability;                                               //0x8
    ULONGLONG MCG_GlobalControl;                                            //0x10
    NOK_WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];                          //0x18
}NOK_WHEA_XPF_MCE_DESCRIPTOR, * NOK_PWHEA_XPF_MCE_DESCRIPTOR;
//0x8 bytes (sizeof)
typedef union _NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS
{
    ULONGLONG LocalAPICId:1;                                                //0x0
    ULONGLONG CpuId:1;                                                      //0x0
    ULONGLONG ProcInfoCount:6;                                              //0x0
    ULONGLONG ContextInfoCount:6;                                           //0x0
    ULONGLONG Reserved:50;                                                  //0x0
    ULONGLONG ValidBits;                                                    //0x0
}NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS, * NOK_PWHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS;
//0x41 bytes (sizeof)
typedef struct _NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION
{
    NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;            //0x0
    ULONGLONG LocalAPICId;                                                  //0x8
    UCHAR CpuId[48];                                                        //0x10
    UCHAR VariableInfo[1];                                                  //0x40
}NOK_WHEA_XPF_PROCESSOR_ERROR_SECTION, * NOK_PWHEA_XPF_PROCESSOR_ERROR_SECTION;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_BUFFER_STATE
{
    NOK_EtwBufferStateFree = 0,
    NOK_EtwBufferStateGeneralLogging = 1,
    NOK_EtwBufferStateCSwitch = 2,
    NOK_EtwBufferStateFlush = 3,
    NOK_EtwBufferStatePendingCompression = 4,
    NOK_EtwBufferStateCompressed = 5,
    NOK_EtwBufferStatePlaceholder = 6,
    NOK_EtwBufferStateMaximum = 7
}NOK_ETW_BUFFER_STATE, * NOK_PETW_BUFFER_STATE;
//0x88 bytes (sizeof)
typedef struct _NOK_WHEAP_WORK_QUEUE
{
    NOK_LIST_ENTRY ListHead;                                            //0x0
    ULONGLONG ListLock;                                                     //0x10
    volatile LONG ItemCount;                                                //0x18
    NOK_KDPC Dpc;                                                       //0x20
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x60
    VOID (*WorkRoutine)(NOK_PWHEAP_WORK_QUEUE arg1, NOK_PLIST_ENTRY arg2); //0x80
}NOK_WHEAP_WORK_QUEUE, * NOK_PWHEAP_WORK_QUEUE;
//0x34 bytes (sizeof)
typedef struct _NOK_WHEA_GENERIC_ERROR_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Reserved;                                                         //0x2
    UCHAR Enabled;                                                          //0x3
    ULONG ErrStatusBlockLength;                                             //0x4
    ULONG RelatedErrorSourceId;                                             //0x8
    UCHAR ErrStatusAddressSpaceID;                                          //0xc
    UCHAR ErrStatusAddressBitWidth;                                         //0xd
    UCHAR ErrStatusAddressBitOffset;                                        //0xe
    UCHAR ErrStatusAddressAccessSize;                                       //0xf
    NOK_LARGE_INTEGER ErrStatusAddress;                                  //0x10
    NOK_WHEA_NOTIFICATION_DESCRIPTOR Notify;                            //0x18
}NOK_WHEA_GENERIC_ERROR_DESCRIPTOR, * NOK_PWHEA_GENERIC_ERROR_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef struct _NOK_WNF_NODE_HEADER
{
    USHORT NodeTypeCode;                                                    //0x0
    USHORT NodeByteSize;                                                    //0x2
}NOK_WNF_NODE_HEADER, * NOK_PWNF_NODE_HEADER;
//0x38 bytes (sizeof)
typedef struct _NOK_WNF_SILODRIVERSTATE
{
    NOK_PWNF_SCOPE_MAP ScopeMap;                                        //0x0
    VOID* volatile PermanentNameStoreRootKey;                               //0x8
    VOID* volatile PersistentNameStoreRootKey;                              //0x10
    volatile LONGLONG PermanentNameSequenceNumber;                          //0x18
    NOK_WNF_LOCK PermanentNameSequenceNumberLock;                       //0x20
    volatile LONGLONG PermanentNameSequenceNumberPool;                      //0x28
    volatile LONGLONG RuntimeNameSequenceNumber;                            //0x30
}NOK_WNF_SILODRIVERSTATE, * NOK_PWNF_SILODRIVERSTATE;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_COMPRESSION_RESUMPTION_MODE
{
    NOK_EtwCompressionModeRestart = 0,
    NOK_EtwCompressionModeNoDisable = 1,
    NOK_EtwCompressionModeNoRestart = 2
}NOK_ETW_COMPRESSION_RESUMPTION_MODE, * NOK_PETW_COMPRESSION_RESUMPTION_MODE;
//0x10 bytes (sizeof)
typedef struct _NOK_WNF_TYPE_ID
{
    NOK_GUID TypeId;                                                    //0x0
}NOK_WNF_TYPE_ID, * NOK_PWNF_TYPE_ID;
//0x88 bytes (sizeof)
typedef struct _NOK_WNF_PROCESS_CONTEXT
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    NOK_PEPROCESS Process;                                              //0x8
    NOK_LIST_ENTRY WnfProcessesListEntry;                               //0x10
    VOID* ImplicitScopeInstances[3];                                        //0x20
    NOK_WNF_LOCK TemporaryNamesListLock;                                //0x38
    NOK_LIST_ENTRY TemporaryNamesListHead;                              //0x40
    NOK_WNF_LOCK ProcessSubscriptionListLock;                           //0x50
    NOK_LIST_ENTRY ProcessSubscriptionListHead;                         //0x58
    NOK_WNF_LOCK DeliveryPendingListLock;                               //0x68
    NOK_LIST_ENTRY DeliveryPendingListHead;                             //0x70
    NOK_PKEVENT NotificationEvent;                                      //0x80
}NOK_WNF_PROCESS_CONTEXT, * NOK_PWNF_PROCESS_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_WNF_DATA_SCOPE
{
    NOK_WnfDataScopeSystem = 0,
    NOK_WnfDataScopeSession = 1,
    NOK_WnfDataScopeUser = 2,
    NOK_WnfDataScopeProcess = 3,
    NOK_WnfDataScopeMachine = 4,
    NOK_WnfDataScopePhysicalMachine = 5
}NOK_WNF_DATA_SCOPE, * NOK_PWNF_DATA_SCOPE;
//0x18 bytes (sizeof)
typedef struct _NOK_WNF_SCOPE_MAP_ENTRY
{
    NOK_WNF_LOCK MapEntryLock;                                          //0x0
    NOK_LIST_ENTRY MapEntryHead;                                        //0x8
}NOK_WNF_SCOPE_MAP_ENTRY, * NOK_PWNF_SCOPE_MAP_ENTRY;
//0xb0 bytes (sizeof)
typedef struct _NOK_WNF_SCOPE_MAP
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    NOK_PWNF_SCOPE_INSTANCE SystemScopeInstance;                        //0x8
    NOK_PWNF_SCOPE_INSTANCE MachineScopeInstance;                       //0x10
    NOK_PWNF_SCOPE_INSTANCE PhysicalMachineScopeInstance;               //0x18
    NOK_WNF_SCOPE_MAP_ENTRY ByDataScope[6];                             //0x20
}NOK_WNF_SCOPE_MAP, * NOK_PWNF_SCOPE_MAP;
//0x30 bytes (sizeof)
typedef struct _NOK_WNF_DISPATCHER
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x8
    LONG State;                                                             //0x28
}NOK_WNF_DISPATCHER, * NOK_PWNF_DISPATCHER;
//0x10 bytes (sizeof)
typedef struct _NOK_WNF_STATE_DATA
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    ULONG AllocatedSize;                                                    //0x4
    ULONG DataSize;                                                         //0x8
    ULONG ChangeStamp;                                                      //0xc
}NOK_WNF_STATE_DATA, * NOK_PWNF_STATE_DATA;
//0x18 bytes (sizeof)
typedef struct _NOK_WNF_STATE_NAME_REGISTRATION
{
    ULONG MaxStateSize;                                                     //0x0
    NOK_PWNF_TYPE_ID TypeId;                                            //0x8
    NOK_PSECURITY_DESCRIPTOR SecurityDescriptor;                        //0x10
}NOK_WNF_STATE_NAME_REGISTRATION, * NOK_PWNF_STATE_NAME_REGISTRATION;
//0x8 bytes (sizeof)
typedef struct _NOK_WNF_STATE_NAME_STRUCT
{
    ULONGLONG Version:4;                                                    //0x0
    ULONGLONG NameLifetime:2;                                               //0x0
    ULONGLONG DataScope:4;                                                  //0x0
    ULONGLONG PermanentData:1;                                              //0x0
    ULONGLONG Sequence:53;                                                  //0x0
}NOK_WNF_STATE_NAME_STRUCT, * NOK_PWNF_STATE_NAME_STRUCT;
//0xa8 bytes (sizeof)
typedef struct _NOK_WNF_NAME_INSTANCE
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    NOK_EX_RUNDOWN_REF RunRef;                                          //0x8
    NOK_RTL_BALANCED_NODE TreeLinks;                                    //0x10
    NOK_WNF_STATE_NAME_STRUCT StateName;                                //0x28
    NOK_PWNF_SCOPE_INSTANCE ScopeInstance;                              //0x30
    NOK_WNF_STATE_NAME_REGISTRATION StateNameInfo;                      //0x38
    NOK_WNF_LOCK StateDataLock;                                         //0x50
    NOK_PWNF_STATE_DATA StateData;                                      //0x58
    ULONG CurrentChangeStamp;                                               //0x60
    VOID* PermanentDataStore;                                               //0x68
    NOK_WNF_LOCK StateSubscriptionListLock;                             //0x70
    NOK_LIST_ENTRY StateSubscriptionListHead;                           //0x78
    NOK_LIST_ENTRY TemporaryNameListEntry;                              //0x88
    NOK_PEPROCESS CreatorProcess;                                       //0x98
    LONG DataSubscribersCount;                                              //0xa0
    LONG CurrentDeliveryCount;                                              //0xa4
}NOK_WNF_NAME_INSTANCE, * NOK_PWNF_NAME_INSTANCE;
//0x88 bytes (sizeof)
typedef struct _NOK_WNF_SUBSCRIPTION
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    NOK_EX_RUNDOWN_REF RunRef;                                          //0x8
    ULONGLONG SubscriptionId;                                               //0x10
    NOK_LIST_ENTRY ProcessSubscriptionListEntry;                        //0x18
    NOK_PEPROCESS Process;                                              //0x28
    NOK_PWNF_NAME_INSTANCE NameInstance;                                //0x30
    NOK_WNF_STATE_NAME_STRUCT StateName;                                //0x38
    NOK_LIST_ENTRY StateSubscriptionListEntry;                          //0x40
    ULONGLONG CallbackRoutine;                                              //0x50
    VOID* CallbackContext;                                                  //0x58
    ULONG CurrentChangeStamp;                                               //0x60
    ULONG SubscribedEventSet;                                               //0x64
    NOK_LIST_ENTRY PendingSubscriptionListEntry;                        //0x68
    NOK_WNF_SUBSCRIPTION_STATE SubscriptionState;                         //0x78
    ULONG SignaledEventSet;                                                 //0x7c
    ULONG InDeliveryEventSet;                                               //0x80
}NOK_WNF_SUBSCRIPTION, * NOK_PWNF_SUBSCRIPTION;
//0x30 bytes (sizeof)
typedef struct _NOK_WNF_DELIVERY_DESCRIPTOR
{
    ULONGLONG SubscriptionId;                                               //0x0
    NOK_WNF_STATE_NAME StateName;                                       //0x8
    ULONG ChangeStamp;                                                      //0x10
    ULONG StateDataSize;                                                    //0x14
    ULONG EventMask;                                                        //0x18
    NOK_WNF_TYPE_ID TypeId;                                             //0x1c
    ULONG StateDataOffset;                                                  //0x2c
}NOK_WNF_DELIVERY_DESCRIPTOR, * NOK_PWNF_DELIVERY_DESCRIPTOR;
//0x2c bytes (sizeof)
typedef struct _NOK_WHEA_AER_BRIDGE_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG BusNumber;                                                        //0x4
    NOK_WHEA_PCI_SLOT_NUMBER Slot;                                      //0x8
    USHORT DeviceControl;                                                   //0xc
    NOK_AER_BRIDGE_DESCRIPTOR_FLAGS Flags;                               //0xe
    ULONG UncorrectableErrorMask;                                           //0x10
    ULONG UncorrectableErrorSeverity;                                       //0x14
    ULONG CorrectableErrorMask;                                             //0x18
    ULONG AdvancedCapsAndControl;                                           //0x1c
    ULONG SecondaryUncorrectableErrorMask;                                  //0x20
    ULONG SecondaryUncorrectableErrorSev;                                   //0x24
    ULONG SecondaryCapsAndControl;                                          //0x28
}NOK_WHEA_AER_BRIDGE_DESCRIPTOR, * NOK_PWHEA_AER_BRIDGE_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef enum _NOK_SERVERSILO_STATE
{
    NOK_SERVERSILO_INITING = 0,
    NOK_SERVERSILO_STARTED = 1,
    NOK_SERVERSILO_SHUTTING_DOWN = 2,
    NOK_SERVERSILO_TERMINATING = 3,
    NOK_SERVERSILO_TERMINATED = 4
}NOK_SERVERSILO_STATE, * NOK_PSERVERSILO_STATE;
//0x8 bytes (sizeof)
typedef struct _NOK_WRITE_BEHIND_THROUGHPUT
{
    ULONG PagesYetToWrite;                                                  //0x0
    ULONG Throughput;                                                       //0x4
}NOK_WRITE_BEHIND_THROUGHPUT, * NOK_PWRITE_BEHIND_THROUGHPUT;
//0x34 bytes (sizeof)
typedef struct _NOK_DBGKD_MANIPULATE_STATE32
{
    ULONG ApiNumber;                                                        //0x0
    USHORT ProcessorLevel;                                                  //0x4
    USHORT Processor;                                                       //0x6
    LONG ReturnStatus;                                                      //0x8
    union
    {
        NOK_DBGKD_READ_MEMORY32 ReadMemory;                             //0xc
        NOK_DBGKD_WRITE_MEMORY32 WriteMemory;                           //0xc
        NOK_DBGKD_READ_MEMORY64 ReadMemory64;                           //0xc
        NOK_DBGKD_WRITE_MEMORY64 WriteMemory64;                         //0xc
        NOK_DBGKD_GET_CONTEXT GetContext;                               //0xc
        NOK_DBGKD_SET_CONTEXT SetContext;                               //0xc
        NOK_DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;                   //0xc
        NOK_DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;                 //0xc
        NOK_DBGKD_CONTINUE Continue;                                    //0xc
        NOK_DBGKD_CONTINUE2 Continue2;                                  //0xc
        NOK_DBGKD_READ_WRITE_IO32 ReadWriteIo;                          //0xc
        NOK_DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;         //0xc
        NOK_DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;                //0xc
        NOK_DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;                    //0xc
        NOK_DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;      //0xc
        NOK_DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;      //0xc
        NOK_DBGKD_GET_VERSION32 GetVersion32;                           //0xc
        NOK_DBGKD_BREAKPOINTEX BreakPointEx;                            //0xc
        NOK_DBGKD_READ_WRITE_MSR ReadWriteMsr;                          //0xc
        NOK_DBGKD_SEARCH_MEMORY SearchMemory;                           //0xc
        NOK_DBGKD_CONTEXT_EX GetContextEx;                              //0xc
        NOK_DBGKD_CONTEXT_EX SetContextEx;                              //0xc
    } u;                                                                    //0xc
}NOK_DBGKD_MANIPULATE_STATE32, * NOK_PDBGKD_MANIPULATE_STATE32;
//0x8c bytes (sizeof)
typedef struct _NOK_X86_KTRAP_FRAME
{
    ULONG DbgEbp;                                                           //0x0
    ULONG DbgEip;                                                           //0x4
    ULONG DbgArgMark;                                                       //0x8
    ULONG DbgArgPointer;                                                    //0xc
    ULONG TempSegCs;                                                        //0x10
    ULONG TempEsp;                                                          //0x14
    ULONG Dr0;                                                              //0x18
    ULONG Dr1;                                                              //0x1c
    ULONG Dr2;                                                              //0x20
    ULONG Dr3;                                                              //0x24
    ULONG Dr6;                                                              //0x28
    ULONG Dr7;                                                              //0x2c
    ULONG SegGs;                                                            //0x30
    ULONG SegEs;                                                            //0x34
    ULONG SegDs;                                                            //0x38
    ULONG Edx;                                                              //0x3c
    ULONG Ecx;                                                              //0x40
    ULONG Eax;                                                              //0x44
    UCHAR PreviousPreviousMode;                                             //0x48
    UCHAR EntropyQueueDpc;                                                  //0x49
    UCHAR Reserved[2];                                                      //0x4a
    ULONG ExceptionList;                                                    //0x4c
    ULONG SegFs;                                                            //0x50
    ULONG Edi;                                                              //0x54
    ULONG Esi;                                                              //0x58
    ULONG Ebx;                                                              //0x5c
    ULONG Ebp;                                                              //0x60
    ULONG ErrCode;                                                          //0x64
    ULONG Eip;                                                              //0x68
    ULONG SegCs;                                                            //0x6c
    ULONG EFlags;                                                           //0x70
    ULONG HardwareEsp;                                                      //0x74
    ULONG HardwareSegSs;                                                    //0x78
    ULONG V86Es;                                                            //0x7c
    ULONG V86Ds;                                                            //0x80
    ULONG V86Fs;                                                            //0x84
    ULONG V86Gs;                                                            //0x88
}NOK_X86_KTRAP_FRAME, * NOK_PX86_KTRAP_FRAME;
//0x8c bytes (sizeof)
typedef struct _NOK_X86_KTRAP_FRAME_BLUE
{
    ULONG DbgEbp;                                                           //0x0
    ULONG DbgEip;                                                           //0x4
    ULONG DbgArgMark;                                                       //0x8
    USHORT TempSegCs;                                                       //0xc
    UCHAR Logging;                                                          //0xe
    UCHAR FrameType;                                                        //0xf
    ULONG TempEsp;                                                          //0x10
    ULONG Dr0;                                                              //0x14
    ULONG Dr1;                                                              //0x18
    ULONG Dr2;                                                              //0x1c
    ULONG Dr3;                                                              //0x20
    ULONG Dr6;                                                              //0x24
    ULONG Dr7;                                                              //0x28
    ULONG SegGs;                                                            //0x2c
    ULONG SegEs;                                                            //0x30
    ULONG SegDs;                                                            //0x34
    ULONG Edx;                                                              //0x38
    ULONG Ecx;                                                              //0x3c
    ULONG Eax;                                                              //0x40
    UCHAR PreviousPreviousMode;                                             //0x44
    UCHAR EntropyQueueDpc;                                                  //0x45
    UCHAR Reserved[2];                                                      //0x46
    ULONG MxCsr;                                                            //0x48
    ULONG ExceptionList;                                                    //0x4c
    ULONG SegFs;                                                            //0x50
    ULONG Edi;                                                              //0x54
    ULONG Esi;                                                              //0x58
    ULONG Ebx;                                                              //0x5c
    ULONG Ebp;                                                              //0x60
    ULONG ErrCode;                                                          //0x64
    ULONG Eip;                                                              //0x68
    ULONG SegCs;                                                            //0x6c
    ULONG EFlags;                                                           //0x70
    ULONG HardwareEsp;                                                      //0x74
    ULONG HardwareSegSs;                                                    //0x78
    ULONG V86Es;                                                            //0x7c
    ULONG V86Ds;                                                            //0x80
    ULONG V86Fs;                                                            //0x84
    ULONG V86Gs;                                                            //0x88
}NOK_X86_KTRAP_FRAME_BLUE, * NOK_PX86_KTRAP_FRAME_BLUE;
//0xc bytes (sizeof)
typedef struct _NOK_CACHE_DESCRIPTOR
{
    UCHAR Level;                                                            //0x0
    UCHAR Associativity;                                                    //0x1
    USHORT LineSize;                                                        //0x2
    ULONG Size;                                                             //0x4
    NOK_PROCESSOR_CACHE_TYPE Type;                                        //0x8
}NOK_CACHE_DESCRIPTOR, * NOK_PCACHE_DESCRIPTOR;
//0x68 bytes (sizeof)
typedef struct _NOK_EPROCESS_VALUES
{
    ULONGLONG KernelTime;                                                   //0x0
    ULONGLONG UserTime;                                                     //0x8
    ULONGLONG ReadyTime;                                                    //0x10
    ULONGLONG CycleTime;                                                    //0x18
    ULONGLONG ContextSwitches;                                              //0x20
    LONGLONG ReadOperationCount;                                            //0x28
    LONGLONG WriteOperationCount;                                           //0x30
    LONGLONG OtherOperationCount;                                           //0x38
    LONGLONG ReadTransferCount;                                             //0x40
    LONGLONG WriteTransferCount;                                            //0x48
    LONGLONG OtherTransferCount;                                            //0x50
    ULONGLONG KernelWaitTime;                                               //0x58
    ULONGLONG UserWaitTime;                                                 //0x60
}NOK_EPROCESS_VALUES, * NOK_PEPROCESS_VALUES;
//0x88 bytes (sizeof)
typedef struct _NOK_WORK_QUEUE_ENTRY
{
    NOK_LIST_ENTRY WorkQueueLinks;                                      //0x0
    union
    {
        struct
        {
            NOK_PFILE_OBJECT FileObject;                                //0x10
            VOID* DiskIoAttribution;                                        //0x18
        } Read;                                                             //0x10
        struct
        {
            NOK_PSHARED_CACHE_MAP SharedCacheMap;                       //0x10
        } Write;                                                            //0x10
        struct
        {
            NOK_PKEVENT Event;                                          //0x10
        } Event;                                                            //0x10
        struct
        {
            ULONG Reason;                                                   //0x10
        } Notification;                                                     //0x10
        struct
        {
            NOK_PSHARED_CACHE_MAP SharedCacheMap;                       //0x10
            NOK_PIO_STATUS_BLOCK IoStatus;                              //0x18
            NOK_KEVENT CallerWaitEvent;                                 //0x20
            UCHAR IsLowPriWriteBehind;                                      //0x38
        } LowPriWrite;                                                      //0x10
        struct
        {
            NOK_PSHARED_CACHE_MAP SharedCacheMap;                       //0x10
            NOK_LARGE_INTEGER FileOffset;                                //0x18
            NOK_PFILE_OBJECT FileObject;                                //0x20
            ULONG Length;                                                   //0x28
            NOK_PSINGLE_LIST_ENTRY PrefetchList;                        //0x30
            ULONG PrefetchPagePriority;                                     //0x38
            NOK_PMDL Mdl;                                               //0x40
            NOK_PIO_STATUS_BLOCK IoStatusBlock;                         //0x48
            NOK_PCC_ASYNC_READ_CONTEXT CallbackContext;                 //0x50
            NOK_PEPROCESS OriginatingProcess;                           //0x58
            NOK_PETHREAD IoIssuerThread;                                //0x60
            VOID* DiskIoAttribution;                                        //0x68
            CHAR RequestorMode;                                             //0x70
            ULONG NestingLevel;                                             //0x74
        } AsyncRead;                                                        //0x10
    } Parameters;                                                           //0x10
    UCHAR Function;                                                         //0x78
    NOK_PCC_PARTITION Partition;                                        //0x80
}NOK_WORK_QUEUE_ENTRY, * NOK_PWORK_QUEUE_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_ALTERNATIVE_ARCHITECTURE_TYPE
{
    NOK_StandardDesign = 0,
    NOK_NEC98x86 = 1,
    NOK_EndAlternatives = 2
}NOK_ALTERNATIVE_ARCHITECTURE_TYPE, * NOK_PALTERNATIVE_ARCHITECTURE_TYPE;
//0x20 bytes (sizeof)
typedef struct _NOK_XSTATE_CONTEXT
{
    ULONGLONG Mask;                                                         //0x0
    ULONG Length;                                                           //0x8
    ULONG Reserved1;                                                        //0xc
    NOK_PXSAVE_AREA Area;                                               //0x10
    VOID* Buffer;                                                           //0x18
}NOK_XSTATE_CONTEXT, * NOK_PXSTATE_CONTEXT;
//0x338 bytes (sizeof)
typedef struct _NOK_XSTATE_CONFIGURATION
{
    ULONGLONG EnabledFeatures;                                              //0x0
    ULONGLONG EnabledVolatileFeatures;                                      //0x8
    ULONG Size;                                                             //0x10
    union
    {
        ULONG ControlFlags;                                                 //0x14
        struct
        {
            ULONG OptimizedSave:1;                                          //0x14
            ULONG CompactionEnabled:1;                                      //0x14
        };
    };
    NOK_XSTATE_FEATURE Features[64];                                    //0x18
    ULONGLONG EnabledSupervisorFeatures;                                    //0x218
    ULONGLONG AlignedFeatures;                                              //0x220
    ULONG AllFeatureSize;                                                   //0x228
    ULONG AllFeatures[64];                                                  //0x22c
    ULONGLONG EnabledUserVisibleSupervisorFeatures;                         //0x330
}NOK_XSTATE_CONFIGURATION, * NOK_PXSTATE_CONFIGURATION;
//0x38 bytes (sizeof)
typedef struct _NOK_XSTATE_SAVE
{
    NOK_PXSTATE_SAVE Prev;                                              //0x0
    NOK_PKTHREAD Thread;                                                //0x8
    UCHAR Level;                                                            //0x10
    NOK_XSTATE_CONTEXT XStateContext;                                   //0x18
}NOK_XSTATE_SAVE, * NOK_PXSTATE_SAVE;
//0x8 bytes (sizeof)
typedef struct _NOK__WIL__WNF_STATE_NAME
{
    ULONG Data[2];                                                          //0x0
}NOK__WIL__WNF_STATE_NAME, * NOK_P_WIL__WNF_STATE_NAME;
//0x10 bytes (sizeof)
typedef struct _NOK__WIL__WNF_TYPE_ID
{
    NOK_GUID TypeId;                                                    //0x0
}NOK__WIL__WNF_TYPE_ID, * NOK_P_WIL__WNF_TYPE_ID;
//0x180 bytes (sizeof)
typedef struct _NOK_KNODE
{
    ULONGLONG IdleNonParkedCpuSet;                                          //0x0
    ULONGLONG IdleSmtSet;                                                   //0x8
    ULONGLONG NonPairedSmtSet;                                              //0x10
    ULONGLONG IdleCpuSet;                                                   //0x18
    ULONGLONG DeepIdleSet;                                                  //0x40
    ULONGLONG IdleConstrainedSet;                                           //0x48
    ULONGLONG NonParkedSet;                                                 //0x50
    ULONGLONG SoftParkedSet;                                                //0x58
    ULONGLONG NonIsrTargetedSet;                                            //0x60
    LONG ParkLock;                                                          //0x68
    USHORT ThreadSeed;                                                      //0x6c
    USHORT ProcessSeed;                                                     //0x6e
    ULONG SiblingMask;                                                      //0x80
    union
    {
        NOK_GROUP_AFFINITY Affinity;                                    //0x88
        struct
        {
            UCHAR AffinityFill[10];                                         //0x88
            USHORT NodeNumber;                                              //0x92
            USHORT PrimaryNodeNumber;                                       //0x94
            USHORT Spare0;                                                  //0x96
        };
    };
    ULONGLONG SharedReadyQueueMask;                                         //0x98
    ULONGLONG StrideMask;                                                   //0xa0
    ULONG ProximityId;                                                      //0xa8
    ULONG Lowest;                                                           //0xac
    ULONG Highest;                                                          //0xb0
    UCHAR MaximumProcessors;                                                //0xb4
    NOK_flags Flags;                                                    //0xb5
    UCHAR Spare10;                                                          //0xb6
    NOK_KHETERO_PROCESSOR_SET HeteroSets[5];                            //0xb8
    ULONGLONG PpmConfiguredQosSets[5];                                      //0x130
    ULONGLONG Spare11;                                                      //0x158
    NOK_KQOS_GROUPING_SETS QosGroupingSets;                              //0x160
    ULONGLONG QosPreemptibleSet;                                            //0x170
    ULONGLONG LLCLeaders;                                                   //0x178
}NOK_KNODE, * NOK_PKNODE;
//0x30 bytes (sizeof)
typedef struct _NOK_iobuf
{
    CHAR* _ptr;                                                             //0x0
    LONG _cnt;                                                              //0x8
    CHAR* _base;                                                            //0x10
    LONG _flag;                                                             //0x18
    LONG _file;                                                             //0x1c
    LONG _charbuf;                                                          //0x20
    LONG _bufsiz;                                                           //0x24
    CHAR* _tmpfname;                                                        //0x28
}NOK_iobuf, * NOK_Piobuf;
//0x13 bytes (sizeof)
typedef struct _NOK_tlgProviderMetadata_t
{
    UCHAR Type;                                                             //0x0
    NOK_GUID ProviderId;                                                //0x1
    USHORT RemainingSize;                                                   //0x11
}NOK_tlgProviderMetadata_t, * NOK_PtlgProviderMetadata_t;
//0x38 bytes (sizeof)
typedef struct _NOK_tlgProvider_t
{
    ULONG LevelPlus1;                                                       //0x0
    USHORT* ProviderMetadataPtr;                                            //0x8
    ULONGLONG KeywordAny;                                                   //0x10
    ULONGLONG KeywordAll;                                                   //0x18
    ULONGLONG RegHandle;                                                    //0x20
    VOID (*EnableCallback)(NOK_PGUID arg1, ULONG arg2, UCHAR arg3, ULONGLONG arg4, ULONGLONG arg5, NOK_PEVENT_FILTER_DESCRIPTOR arg6, VOID* arg7); //0x28
    VOID* CallbackContext;                                                  //0x30
}NOK_tlgProvider_t, * NOK_PtlgProvider_t;
//0x8 bytes (sizeof)
typedef struct _NOK_wil_details_UsageSubscriptionData
{
    ULONG featureId;                                                        //0x0
    USHORT serviceReportingKind;                                            //0x4
}NOK_wil_details_UsageSubscriptionData, * NOK_Pwil_details_UsageSubscriptionData;
//0x18 bytes (sizeof)
typedef struct _NOK_tagSWITCH_CONTEXT_ATTRIBUTE
{
    ULONGLONG ulContextUpdateCounter;                                       //0x0
    LONG fAllowContextUpdate;                                               //0x8
    LONG fEnableTrace;                                                      //0xc
    ULONGLONG EtwHandle;                                                    //0x10
}NOK_tagSWITCH_CONTEXT_ATTRIBUTE, * NOK_PtagSWITCH_CONTEXT_ATTRIBUTE;
//0x340 bytes (sizeof)
typedef struct _NOK_tagSWITCH_CONTEXT_DATA
{
    ULONGLONG ullOsMaxVersionTested;                                        //0x0
    ULONG ulTargetPlatform;                                                 //0x8
    ULONGLONG ullContextMinimum;                                            //0x10
    NOK_GUID guPlatform;                                                //0x18
    NOK_GUID guMinPlatform;                                             //0x28
    ULONG ulContextSource;                                                  //0x38
    ULONG ulElementCount;                                                   //0x3c
    NOK_GUID guElements[48];                                            //0x40
}NOK_tagSWITCH_CONTEXT_DATA, * NOK_PtagSWITCH_CONTEXT_DATA;
//0x358 bytes (sizeof)
typedef struct _NOK_tagSWITCH_CONTEXT
{
    NOK_tagSWITCH_CONTEXT_ATTRIBUTE Attribute;                           //0x0
    NOK_tagSWITCH_CONTEXT_DATA Data;                                     //0x18
}NOK_tagSWITCH_CONTEXT, * NOK_PtagSWITCH_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureEnabledState
{
    NOK_wil_FeatureEnabledState_Default = 0,
    NOK_wil_FeatureEnabledState_Disabled = 1,
    NOK_wil_FeatureEnabledState_Enabled = 2
}NOK_wil_FeatureEnabledState, * NOK_Pwil_FeatureEnabledState;
//0x18 bytes (sizeof)
typedef struct _NOK_wil_details_FeatureDescriptor
{
    NOK_Pwil_details_FeatureStateCache featureStateCache;                 //0x0
    ULONG featureId;                                                        //0x8
    UCHAR changeTime;                                                       //0xc
    UCHAR isAlwaysDisabled;                                                 //0xd
    UCHAR isAlwaysEnabled;                                                  //0xe
    UCHAR isEnabledByDefault;                                               //0xf
    NOK_Pwil_details_FeatureDescriptor* requiresFeatures;                //0x10
}NOK_wil_details_FeatureDescriptor, * NOK_Pwil_details_FeatureDescriptor;
//0x4 bytes (sizeof)
typedef union _NOK_wil_details_RecordedState
{
    ULONG exchange;                                                         //0x0
    ULONG recordedDeviceUsage:1;                                            //0x0
    ULONG recordedDevicePotential:1;                                        //0x0
    ULONG recordedDeviceOpportunity:1;                                      //0x0
    ULONG recordedDevicePotentialOpportunity:1;                             //0x0
    ULONG recordedVariantDeviceUsage:1;                                     //0x0
    ULONG recordedVariant:6;                                                //0x0
    ULONG unused:21;                                                        //0x0
}NOK_wil_details_RecordedState, * NOK_Pwil_details_RecordedState;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureVariantPayloadKind
{
    NOK_wil_FeatureVariantPayloadKind_None = 0,
    NOK_wil_FeatureVariantPayloadKind_Resident = 1,
    NOK_wil_FeatureVariantPayloadKind_External = 2
}NOK_wil_FeatureVariantPayloadKind, * NOK_Pwil_FeatureVariantPayloadKind;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_details_ServiceReportingKind
{
    NOK_wil_details_ServiceReportingKind_UniqueUsage = 0,
    NOK_wil_details_ServiceReportingKind_UniqueOpportunity = 1,
    NOK_wil_details_ServiceReportingKind_DeviceUsage = 2,
    NOK_wil_details_ServiceReportingKind_DeviceOpportunity = 3,
    NOK_wil_details_ServiceReportingKind_PotentialUniqueUsage = 4,
    NOK_wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5,
    NOK_wil_details_ServiceReportingKind_PotentialDeviceUsage = 6,
    NOK_wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7,
    NOK_wil_details_ServiceReportingKind_EnabledTotalDuration = 8,
    NOK_wil_details_ServiceReportingKind_EnabledPausedDuration = 9,
    NOK_wil_details_ServiceReportingKind_DisabledTotalDuration = 10,
    NOK_wil_details_ServiceReportingKind_DisabledPausedDuration = 11,
    NOK_wil_details_ServiceReportingKind_CustomEnabledBase = 100,
    NOK_wil_details_ServiceReportingKind_CustomDisabledBase = 150,
    NOK_wil_details_ServiceReportingKind_Store = 254,
    NOK_wil_details_ServiceReportingKind_None = 255,
    NOK_wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256,
    NOK_wil_details_ServiceReportingKind_VariantDeviceUsageBase = 320,
    NOK_wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384,
    NOK_wil_details_ServiceReportingKind_VariantUniqueUsageBase = 448
}NOK_wil_details_ServiceReportingKind, * NOK_Pwil_details_ServiceReportingKind;
//0x4 bytes (sizeof)
typedef struct _NOK_wil_details_StagingConfigHeaderProperties
{
    ULONG ignoreServiceState:1;                                             //0x0
    ULONG ignoreUserState:1;                                                //0x0
    ULONG ignoreTestState:1;                                                //0x0
    ULONG ignoreVariants:1;                                                 //0x0
    ULONG unused:28;                                                        //0x0
}NOK_wil_details_StagingConfigHeaderProperties, * NOK_Pwil_details_StagingConfigHeaderProperties;
//0x10 bytes (sizeof)
typedef struct _NOK_wil_details_StagingConfigHeader
{
    UCHAR version;                                                          //0x0
    UCHAR versionMinor;                                                     //0x1
    USHORT headerSizeBytes;                                                 //0x2
    USHORT featureCount;                                                    //0x4
    USHORT featureUsageTriggerCount;                                        //0x6
    NOK_wil_details_StagingConfigHeaderProperties sessionProperties;     //0x8
    NOK_wil_details_StagingConfigHeaderProperties properties;            //0xc
}NOK_wil_details_StagingConfigHeader, * NOK_Pwil_details_StagingConfigHeader;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureStore
{
    NOK_wil_FeatureStore_Machine = 0,
    NOK_wil_FeatureStore_User = 1,
    NOK_wil_FeatureStore_All = 2
}NOK_wil_FeatureStore, * NOK_Pwil_FeatureStore;
//0xc bytes (sizeof)
typedef struct _NOK_wil_details_StagingConfigFeature
{
    ULONG featureId;                                                        //0x0
    ULONG changedInSession:1;                                               //0x4
    ULONG isVariantConfig:1;                                                //0x4
    ULONG unused1:6;                                                        //0x4
    ULONG serviceState:2;                                                   //0x4
    ULONG userState:2;                                                      //0x4
    ULONG testState:2;                                                      //0x4
    ULONG unused2:2;                                                        //0x4
    ULONG unused3:8;                                                        //0x4
    ULONG variant:6;                                                        //0x4
    ULONG payloadKind:2;                                                    //0x4
    ULONG payload;                                                          //0x8
}NOK_wil_details_StagingConfigFeature, * NOK_Pwil_details_StagingConfigFeature;
//0x58 bytes (sizeof)
typedef struct _NOK_wil_details_StagingConfig
{
    NOK_wil_FeatureStore store;                                            //0x0
    LONG forUpdate;                                                         //0x4
    ULONG readChangeStamp;                                                  //0x8
    UCHAR readVersion;                                                      //0xc
    LONG modified;                                                          //0x10
    NOK_wil_details_StagingConfigHeader* header;                         //0x18
    NOK_wil_details_StagingConfigFeature* features;                      //0x20
    NOK_wil_details_StagingConfigUsageTrigger* triggers;                 //0x28
    LONG changedInSession;                                                  //0x30
    VOID* buffer;                                                           //0x38
    ULONGLONG bufferSize;                                                   //0x40
    ULONGLONG bufferAlloc;                                                  //0x48
    LONG bufferOwned;                                                       //0x50
}NOK_wil_details_StagingConfig, * NOK_Pwil_details_StagingConfig;
//0x8 bytes (sizeof)
typedef struct _NOK_wil_details_StagingConfigWnfStateName
{
    ULONG Data[2];                                                          //0x0
}NOK_wil_details_StagingConfigWnfStateName, * NOK_Pwil_details_StagingConfigWnfStateName;
//0x10 bytes (sizeof)
typedef struct _NOK_wil_details_StagingConfigUsageTrigger
{
    ULONG featureId;                                                        //0x0
    NOK_wil_details_StagingConfigWnfStateName trigger;                   //0x4
    ULONG serviceReportingKind:16;                                          //0xc
    ULONG isVariantConfig:1;                                                //0xc
    ULONG unused:15;                                                        //0xc
}NOK_wil_details_StagingConfigUsageTrigger, * NOK_Pwil_details_StagingConfigUsageTrigger;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVICE_TEXT_TYPE
{
    NOK_DeviceTextDescription = 0,
    NOK_DeviceTextLocationInformation = 1
}NOK_DEVICE_TEXT_TYPE, * NOK_PDEVICE_TEXT_TYPE;
//0x148 bytes (sizeof)
typedef struct _NOK_POP_POWER_SETTING_VALUES
{
    ULONG StructureSize;                                                    //0x0
    NOK_SYSTEM_POWER_POLICY PopPolicy;                                  //0x4
    NOK_SYSTEM_POWER_CONDITION CurrentAcDcPowerState;                      //0xec
    UCHAR AwayModeEnabled;                                                  //0xf0
    UCHAR AwayModeEngaged;                                                  //0xf1
    UCHAR AwayModePolicyAllowed;                                            //0xf2
    volatile LONG AwayModeIgnoreUserPresent;                                //0xf4
    volatile LONG AwayModeIgnoreAction;                                     //0xf8
    UCHAR DisableFastS4;                                                    //0xfc
    UCHAR DisableStandbyStates;                                             //0xfd
    ULONG UnattendSleepTimeout;                                             //0x100
    volatile ULONG DiskIgnoreTime;                                          //0x104
    volatile ULONG DeviceIdlePolicy;                                        //0x108
    ULONG VideoDimTimeout;                                                  //0x10c
    ULONG VideoNormalBrightness;                                            //0x110
    ULONG VideoDimBrightness;                                               //0x114
    ULONG AlsOffset;                                                        //0x118
    ULONG AlsEnabled;                                                       //0x11c
    ULONG EsBrightness;                                                     //0x120
    UCHAR SwitchShutdownForced;                                             //0x124
    ULONG SystemCoolingPolicy;                                              //0x128
    UCHAR MediaBufferingEngaged;                                            //0x12c
    UCHAR AudioActivity;                                                    //0x12d
    UCHAR FullscreenVideoPlayback;                                          //0x12e
    ULONG EsBatteryThreshold;                                               //0x130
    UCHAR EsAggressive;                                                     //0x134
    UCHAR EsUserAwaySetting;                                                //0x135
    ULONG ConnectivityInStandby;                                            //0x138
    ULONG DisconnectedStandbyMode;                                          //0x13c
    ULONG UserPresencePredictionEnabled;                                    //0x140
    UCHAR AirplaneModeEnabled;                                              //0x144
    UCHAR BluetoothDeviceCharging;                                          //0x145
}NOK_POP_POWER_SETTING_VALUES, * NOK_PPOP_POWER_SETTING_VALUES;
//0x4 bytes (sizeof)
typedef enum _NOK_DMA_INTERRUPT_TYPE
{
    NOK_InterruptTypeCompletion = 0,
    NOK_InterruptTypeError = 1,
    NOK_InterruptTypeCancelled = 2
}NOK_DMA_INTERRUPT_TYPE, * NOK_PDMA_INTERRUPT_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_PERIODIC_TIMER_STATE
{
    NOK_EtwpPeriodicTimerUnset = 0,
    NOK_EtwpPeriodicTimerSet = 1
}NOK_ETW_PERIODIC_TIMER_STATE, * NOK_PETW_PERIODIC_TIMER_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_FEATURE_CHANGE_TIME
{
    NOK_FEATURE_CHANGE_TIME_READ = 0,
    NOK_FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
    NOK_FEATURE_CHANGE_TIME_SESSION = 2,
    NOK_FEATURE_CHANGE_TIME_REBOOT = 3,
    NOK_FEATURE_CHANGE_TIME_USER_FLAG = 128
}NOK_FEATURE_CHANGE_TIME, * NOK_PFEATURE_CHANGE_TIME;
//0x4 bytes (sizeof)
typedef enum _NOK_FEATURE_ENABLED_STATE
{
    NOK_FEATURE_ENABLED_STATE_DEFAULT = 0,
    NOK_FEATURE_ENABLED_STATE_DISABLED = 1,
    NOK_FEATURE_ENABLED_STATE_ENABLED = 2,
    NOK_FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,
    NOK_FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64
}NOK_FEATURE_ENABLED_STATE, * NOK_PFEATURE_ENABLED_STATE;
//0x58 bytes (sizeof)
typedef struct _NOK_INTERRUPT_VECTOR_DATA
{
    NOK_INTERRUPT_CONNECTION_TYPE Type;                                    //0x0
    ULONG Vector;                                                           //0x4
    UCHAR Irql;                                                             //0x8
    NOK_KINTERRUPT_POLARITY Polarity;                                     //0xc
    NOK_KINTERRUPT_MODE Mode;                                             //0x10
    NOK_GROUP_AFFINITY TargetProcessors;                                //0x18
    NOK_INTERRUPT_REMAPPING_INFO IntRemapInfo;                          //0x28
    struct
    {
        ULONG Gsiv;                                                         //0x38
        ULONG WakeInterrupt:1;                                              //0x3c
        ULONG ReservedFlags:31;                                             //0x3c
    } ControllerInput;                                                      //0x38
    ULONGLONG HvDeviceId;                                                   //0x40
    union
    {
        struct
        {
            NOK_LARGE_INTEGER Address;                                   //0x48
            ULONG DataPayload;                                              //0x50
        } XapicMessage;                                                     //0x48
        struct
        {
            NOK_INTERRUPT_HT_INTR_INFO IntrInfo;                        //0x48
        } Hypertransport;                                                   //0x48
        struct
        {
            NOK_LARGE_INTEGER Address;                                   //0x48
            ULONG DataPayload;                                              //0x50
        } GenericMessage;                                                   //0x48
        struct
        {
            NOK_HAL_APIC_DESTINATION_MODE DestinationMode;                 //0x48
        } MessageRequest;                                                   //0x48
    };
}NOK_INTERRUPT_VECTOR_DATA, * NOK_PINTERRUPT_VECTOR_DATA;
//0x4 bytes (sizeof)
typedef enum _NOK_UoWActionType
{
    NOK_UoWAddThisKey = 0,
    NOK_UoWAddChildKey = 1,
    NOK_UoWDeleteThisKey = 2,
    NOK_UoWDeleteChildKey = 3,
    NOK_UoWSetValueNew = 4,
    NOK_UoWSetValueExisting = 5,
    NOK_UoWDeleteValue = 6,
    NOK_UoWSetKeyUserFlags = 7,
    NOK_UoWSetLastWriteTime = 8,
    NOK_UoWSetSecurityDescriptor = 9,
    NOK_UoWRenameSubKey = 10,
    NOK_UoWRenameOldSubKey = 11,
    NOK_UoWRenameNewSubKey = 12,
    NOK_UoWIsolation = 13,
    NOK_UoWInvalid = 14
}NOK_UoWActionType, * NOK_PUoWActionType;
//0x30 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_SPB_I2C_RESOURCE
{
    NOK_PEP_ACPI_SPB_RESOURCE SpbCommon;                                //0x0
    ULONG ConnectionSpeed;                                                  //0x28
    USHORT SlaveAddress;                                                    //0x2c
}NOK_PEP_ACPI_SPB_I2C_RESOURCE, * NOK_PPEP_ACPI_SPB_I2C_RESOURCE;
//0x28 bytes (sizeof)
typedef struct _NOK_DEVICE_OBJECT_LIST
{
    ULONG Count;                                                            //0x0
    ULONG MaxCount;                                                         //0x4
    ULONG TagCount;                                                         //0x8
    NOK_PNP_DEVICE_DELETE_TYPE OperationCode;                             //0xc
    NOK_DEVICE_OBJECT_LIST_ENTRY Devices[1];                            //0x10
}NOK_DEVICE_OBJECT_LIST, * NOK_PDEVICE_OBJECT_LIST;
//0x4 bytes (sizeof)
typedef enum _NOK_JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
    NOK_JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    NOK_JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    NOK_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    NOK_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    NOK_JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
}NOK_JOB_OBJECT_IO_RATE_CONTROL_FLAGS, * NOK_PJOB_OBJECT_IO_RATE_CONTROL_FLAGS;
//0x4 bytes (sizeof)
typedef enum _NOK_JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
    NOK_JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    NOK_JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    NOK_JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    NOK_JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
}NOK_JOB_OBJECT_NET_RATE_CONTROL_FLAGS, * NOK_PJOB_OBJECT_NET_RATE_CONTROL_FLAGS;
//0x28 bytes (sizeof)
typedef struct _NOK_IO_RESOURCE_LIST
{
    USHORT Version;                                                         //0x0
    USHORT Revision;                                                        //0x2
    ULONG Count;                                                            //0x4
    NOK_IO_RESOURCE_DESCRIPTOR Descriptors[1];                          //0x8
}NOK_IO_RESOURCE_LIST, * NOK_PIO_RESOURCE_LIST;
//0xf8 bytes (sizeof)
typedef struct _NOK_DEBUG_DEVICE_DESCRIPTOR
{
    ULONG Bus;                                                              //0x0
    ULONG Slot;                                                             //0x4
    USHORT Segment;                                                         //0x8
    USHORT VendorID;                                                        //0xa
    USHORT DeviceID;                                                        //0xc
    UCHAR BaseClass;                                                        //0xe
    UCHAR SubClass;                                                         //0xf
    UCHAR ProgIf;                                                           //0x10
    union
    {
        UCHAR Flags;                                                        //0x11
        struct
        {
            UCHAR DbgHalScratchAllocated:1;                                 //0x11
            UCHAR DbgBarsMapped:1;                                          //0x11
            UCHAR DbgScratchAllocated:1;                                    //0x11
        };
    };
    UCHAR Initialized;                                                      //0x12
    UCHAR Configured;                                                       //0x13
    NOK_DEBUG_DEVICE_ADDRESS BaseAddress[6];                             //0x18
    NOK_DEBUG_MEMORY_REQUIREMENTS Memory;                                //0xa8
    ULONG Dbg2TableIndex;                                                   //0xc8
    USHORT PortType;                                                        //0xcc
    USHORT PortSubtype;                                                     //0xce
    VOID* OemData;                                                          //0xd0
    ULONG OemDataLength;                                                    //0xd8
    NOK_KD_NAMESPACE_ENUM NameSpace;                                       //0xdc
    WCHAR* NameSpacePath;                                                   //0xe0
    ULONG NameSpacePathLength;                                              //0xe8
    ULONG TransportType;                                                    //0xec
    NOK_DEBUG_TRANSPORT_DATA TransportData;                             //0xf0
}NOK_DEBUG_DEVICE_DESCRIPTOR, * NOK_PDEBUG_DEVICE_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef enum _NOK_KENLISTMENT_STATE
{
    NOK_KEnlistmentUninitialized = 0,
    NOK_KEnlistmentActive = 256,
    NOK_KEnlistmentPreparing = 257,
    NOK_KEnlistmentPrepared = 258,
    NOK_KEnlistmentInDoubt = 259,
    NOK_KEnlistmentCommitted = 260,
    NOK_KEnlistmentCommittedNotify = 261,
    NOK_KEnlistmentCommitRequested = 262,
    NOK_KEnlistmentAborted = 263,
    NOK_KEnlistmentDelegated = 264,
    NOK_KEnlistmentDelegatedDisconnected = 265,
    NOK_KEnlistmentPrePreparing = 266,
    NOK_KEnlistmentForgotten = 267,
    NOK_KEnlistmentRecovering = 268,
    NOK_KEnlistmentAborting = 269,
    NOK_KEnlistmentReadOnly = 270,
    NOK_KEnlistmentOutcomeUnavailable = 271,
    NOK_KEnlistmentOffline = 272,
    NOK_KEnlistmentPrePrepared = 273,
    NOK_KEnlistmentInitialized = 274
}NOK_KENLISTMENT_STATE, * NOK_PKENLISTMENT_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_LSA_FOREST_TRUST_RECORD_TYPE
{
    NOK_ForestTrustTopLevelName = 0,
    NOK_ForestTrustTopLevelNameEx = 1,
    NOK_ForestTrustDomainInfo = 2,
    NOK_ForestTrustRecordTypeLast = 2
}NOK_LSA_FOREST_TRUST_RECORD_TYPE, * NOK_PLSA_FOREST_TRUST_RECORD_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PDCCLIENTID
{
    NOK_PDC_INVALID_CLIENT = 0,
    NOK_PDC_PLM_CLIENT = 1,
    NOK_PDC_NQM_CLIENT = 2,
    NOK_PDC_WNS_CLIENT = 3,
    NOK_PDC_DAM_CLIENT = 4,
    NOK_PDC_WCM_CLIENT = 5,
    NOK_PDC_NCSI_CLIENT = 7,
    NOK_PDC_DHCP_CLIENT = 8,
    NOK_PDC_TCPIP_CLIENT = 9,
    NOK_PDC_WU_CLIENT = 11,
    NOK_PDC_GP_CLIENT = 12,
    NOK_PDC_NCA_CLIENT = 14,
    NOK_PDC_BI_CLIENT = 15,
    NOK_PDC_MSCHED_CLIENT = 16,
    NOK_PDC_SUSPENDRESUME_CLIENT = 17,
    NOK_PDC_INTERNAL_CLIENT = 18,
    NOK_PDC_DEFAULT_KM_TEST_CLIENT_EXEMPTED = 19,
    NOK_PDC_DEFAULT_UM_TEST_CLIENT_EXEMPTED = 20,
    NOK_PDC_DAM_PHASE_TEST_CLIENT = 21,
    NOK_PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
    NOK_PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
    NOK_PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
    NOK_PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
    NOK_PDC_DAM_KM_TEST_CLIENT = 26,
    NOK_PDC_DAM_UM_TEST_CLIENT = 27,
    NOK_PDC_SINGLETON_TEST_CLIENT = 28,
    NOK_PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
    NOK_PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
    NOK_PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
    NOK_PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
    NOK_PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
    NOK_PDC_SHELL_CLIENT = 34,
    NOK_PDC_MAINTENANCE_CLIENT = 35,
    NOK_PDC_SYNC_CLIENT = 36,
    NOK_PDC_IDM_CLIENT = 37,
    NOK_PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
    NOK_PDC_TETHERING_CLIENT = 39,
    NOK_PDC_AUDIO_CLIENT = 40,
    NOK_PDC_LOCK_SCREEN = 41,
    NOK_PDC_LREC_CLIENT = 42,
    NOK_PDC_WP_BW_CLIENT = 43,
    NOK_PDC_WP_MEDIA_STREAMING_CLIENT = 44,
    NOK_PDC_WP_MAPS_CLIENT = 46,
    NOK_PDC_WP_SYNC_CLIENT = 47,
    NOK_PDC_SETTING_SYNC_CLIENT = 48,
    NOK_PDC_WP_EDM_CLIENT = 49,
    NOK_PDC_WP_WALLET_CLIENT = 50,
    NOK_PDC_WP_LOCATION_CLIENT = 51,
    NOK_PDC_WP_CM_CLIENT = 53,
    NOK_PDC_WP_DCP_CLIENT = 54,
    NOK_PDC_WP_WIFIAUTO_CLIENT = 55,
    NOK_PDC_BITLOCKER_CLIENT = 56,
    NOK_PDC_MDM_CERTINSTALLER_CLIENT = 57,
    NOK_PDC_WP_IM_CLIENT = 58,
    NOK_PDC_WP_MMS_CLIENT = 59,
    NOK_PDC_DEVICEENROLLER_CLIENT = 60,
    NOK_PDC_WP_WIFI_SCANNING_CLIENT = 61,
    NOK_PDC_WP_OMADM_CLIENT = 62,
    NOK_PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
    NOK_PDC_WP_DIS_CLIENT = 64,
    NOK_PDC_BITS_CLIENT = 65,
    NOK_PDC_WP_VOIP_EXECUTION_CLIENT = 66,
    NOK_PDC_WP_RESERVED_CLIENT3 = 67,
    NOK_PDC_SLEEP_STUDY_CLIENT = 68,
    NOK_PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
    NOK_PDC_HYPERV_CLIENT = 70,
    NOK_PDC_KM_SIGNAL_CLIENT = 71,
    NOK_PDC_UM_SIGNAL_CLIENT = 72,
    NOK_PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
    NOK_PDC_XB_SYSTEM_CLIENT = 74,
    NOK_PDC_XB_HOST_CLIENT = 75,
    NOK_PDC_PRINT_JOB_MANAGER_CLIENT = 76,
    NOK_PDC_TELEMETRY_CLIENT = 77,
    NOK_PDC_ERROR_REPORTING_CLIENT = 78,
    NOK_PDC_XBOX_NTM = 79,
    NOK_PDC_CBE_CLIENT = 80,
    NOK_PDC_FIND_MY_PHONE_CLIENT = 81,
    NOK_PDC_COMMAND_CHANNEL_CLIENT = 82,
    NOK_PDC_PPM_PROFILES_CLIENT = 83,
    NOK_PDC_WIFI_CALLING_CLIENT = 84,
    NOK_PDC_WU_REBOOT_CLIENT = 85,
    NOK_PDC_SYSMAIN_CLIENT = 86,
    NOK_PDC_XBOX_UPDATE_CLIENT = 87,
    NOK_PDC_CHAT_SERVICE_CLIENT = 88,
    NOK_PDC_FIND_MY_DEVICE_CLIENT = 89,
    NOK_PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
    NOK_PDC_INSTALL_AGENT_CLIENT = 91,
    NOK_PDC_XBOX_WAKE_ON_VOICE = 92,
    NOK_PDC_PLM_AUDIO_CLIENT = 93,
    NOK_PDC_WP_BCKAUDIO_CLIENT = 94,
    NOK_PDC_WAKE_ON_LAN_CLIENT = 95,
    NOK_PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
    NOK_PDC_DATA_MIGRATION_MANAGER = 97,
    NOK_PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
    NOK_PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
    NOK_PDC_HAM_CLIENT = 100,
    NOK_PDC_FILESHARINGSERVER_CLIENT = 101,
    NOK_PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
    NOK_PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
    NOK_PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
    NOK_PDC_HTTPSDATASOURCE_CLIENT = 105,
    NOK_PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
    NOK_PDC_TERMINALSERVER_SESSION_CLIENT = 107,
    NOK_PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
    NOK_PDC_XBOX_NUI_CLIENT = 110,
    NOK_PDC_WIFI_CALLING_IMS_CLIENT = 111,
    NOK_PDC_SLEEPSTUDY_HELPER_USER_CLIENT = 112,
    NOK_PDC_SLEEPSTUDY_HELPER_KERNEL_CLIENT = 113,
    NOK_PDC_CONTAINER_MANAGER_CLIENT = 114,
    NOK_PDC_NUMBER_OF_CLIENTS = 115
}NOK_PDCCLIENTID, * NOK_PPDCCLIENTID;
//0x4 bytes (sizeof)
typedef enum _NOK_PDC_ACTIVITY_TYPE
{
    NOK_PdcNetwork = 0,
    NOK_PdcSystem = 1,
    NOK_PdcTimer = 2,
    NOK_PdcAllNetworks = 3,
    NOK_PdcAnyNetwork = 4,
    NOK_PdcInvalidActivity = 5,
    NOK_PdcMaxActivity = 5
}NOK_PDC_ACTIVITY_TYPE, * NOK_PPDC_ACTIVITY_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PDC_CS_PHASE
{
    NOK_PdcNoCsPhase = 0,
    NOK_PdcConnectionPhase = 1,
    NOK_PdcShellPhase = 2,
    NOK_PdcPlmPhase = 3,
    NOK_PdcMaintenancePhase = 4,
    NOK_PdcDamPhase = 5,
    NOK_PdcLowPowerPhase = 6,
    NOK_PdcResiliencyNotificationPhase = 7,
    NOK_PdcResiliencyPhase = 8,
    NOK_PdcInvalidPhase = 9,
    NOK_PdcMaxPhase = 9
}NOK_PDC_CS_PHASE, * NOK_PPDC_CS_PHASE;
//0x4 bytes (sizeof)
typedef enum _NOK_PDC_RESOURCE
{
    NOK_PdcResourceSystemForeground = 0,
    NOK_PdcResourceUniversalApplications = 1,
    NOK_PdcResourceWin32 = 2,
    NOK_PdcResourceNetwork = 3,
    NOK_PdcResourceSystemBackground = 4,
    NOK_PdcResourceMin = 0,
    NOK_PdcResourceMax = 4
}NOK_PDC_RESOURCE, * NOK_PPDC_RESOURCE;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVICE_RELATION_TYPE
{
    NOK_BusRelations = 0,
    NOK_EjectionRelations = 1,
    NOK_PowerRelations = 2,
    NOK_RemovalRelations = 3,
    NOK_TargetDeviceRelation = 4,
    NOK_SingleBusRelations = 5,
    NOK_TransportRelations = 6
}NOK_DEVICE_RELATION_TYPE, * NOK_PDEVICE_RELATION_TYPE;
//0x420 bytes (sizeof)
typedef struct _NOK_POP_THERMAL_ZONE
{
    union
    {
        NOK_POP_POLICY_DEVICE PolicyDevice;                             //0x0
        struct
        {
            NOK_LIST_ENTRY Link;                                        //0x0
            NOK_POWER_POLICY_DEVICE_TYPE DeviceType;                       //0x10
            VOID* Notification;                                             //0x18
            NOK_UNICODE_STRING Name;                                    //0x20
            NOK_PDEVICE_OBJECT Device;                                  //0x30
            NOK_PIRP Irp;                                               //0x38
        };
    };
    UCHAR State;                                                            //0x40
    UCHAR Flags;                                                            //0x41
    UCHAR Removing;                                                         //0x42
    UCHAR Mode;                                                             //0x43
    UCHAR PendingMode;                                                      //0x44
    UCHAR ActivePoint;                                                      //0x45
    UCHAR PendingActivePoint;                                               //0x46
    UCHAR Critical;                                                         //0x47
    UCHAR ThermalStandby;                                                   //0x48
    UCHAR OverThrottled;                                                    //0x49
    LONG HighPrecisionThrottle;                                             //0x4c
    LONG Throttle;                                                          //0x50
    LONG PendingThrottle;                                                   //0x54
    ULONG ThrottleReasons;                                                  //0x58
    ULONGLONG LastPassiveTime;                                              //0x60
    ULONG SampleRate;                                                       //0x68
    ULONG LastTemp;                                                         //0x6c
    NOK_THERMAL_INFORMATION_EX Info;                                    //0x70
    NOK_THERMAL_POLICY Policy;                                          //0xcc
    UCHAR PolicyDriver;                                                     //0xe4
    ULONG PollingRate;                                                      //0xe8
    ULONGLONG LastTemperatureTime;                                          //0xf0
    ULONGLONG LastActiveStartTime;                                          //0xf8
    ULONGLONG LastPassiveStartTime;                                         //0x100
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x108
    NOK_KTIMER2 ZoneUpdateTimer;                                        //0x128
    NOK_POP_RW_LOCK Lock;                                               //0x1b0
    NOK_KEVENT ZoneStopped;                                             //0x1c0
    NOK_KEVENT TemperatureUpdated;                                      //0x1d8
    ULONG InstanceId;                                                       //0x1f0
    NOK_POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;                 //0x1f8
    NOK_UNICODE_STRING Description;                                     //0x410
}NOK_POP_THERMAL_ZONE, * NOK_PPOP_THERMAL_ZONE;
//0x410 bytes (sizeof)
typedef struct _NOK_PROC_IDLE_ACCOUNTING
{
    ULONG StateCount;                                                       //0x0
    ULONG TotalTransitions;                                                 //0x4
    ULONG ResetCount;                                                       //0x8
    ULONG AbortCount;                                                       //0xc
    ULONGLONG StartTime;                                                    //0x10
    ULONGLONG PriorIdleTime;                                                //0x18
    NOK_PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                //0x20
    NOK_PROC_IDLE_STATE_ACCOUNTING State[1];                            //0x28
}NOK_PROC_IDLE_ACCOUNTING, * NOK_PPROC_IDLE_ACCOUNTING;
//0x30 bytes (sizeof)
typedef struct _NOK_DOCK_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
    ULONG (*ProfileDepartureSetMode)(VOID* arg1, NOK_PROFILE_DEPARTURE_STYLE arg2); //0x20
    ULONG (*ProfileDepartureUpdate)(VOID* arg1);                            //0x28
}NOK_DOCK_INTERFACE, * NOK_PDOCK_INTERFACE;
//0x130 bytes (sizeof)
typedef struct _NOK_VF_TARGET_VERIFIED_DRIVER_DATA
{
    NOK_PVF_SUSPECT_DRIVER_ENTRY SuspectDriverEntry;                    //0x0
    VOID* WMICallback;                                                      //0x8
    NOK_LIST_ENTRY EtwHandlesListHead;                                  //0x10
    union
    {
        struct
        {
            ULONG MissedEtwRegistration:1;                                  //0x20
            ULONG IsBootDriver:1;                                           //0x20
            ULONG Spare:30;                                                 //0x20
        } Flags;                                                            //0x20
        ULONG Whole;                                                        //0x20
    } u1;                                                                   //0x20
    ULONGLONG Signature;                                                    //0x28
    UCHAR SeSigningLevel;                                                   //0x30
    NOK_SLIST_HEADER PoolPageHeaders;                                    //0x40
    NOK_SLIST_HEADER PoolTrackers;                                       //0x50
    VOID** DifPluginData;                                                   //0x60
    volatile ULONG CurrentPagedPoolAllocations;                             //0x68
    volatile ULONG CurrentNonPagedPoolAllocations;                          //0x6c
    ULONG PeakPagedPoolAllocations;                                         //0x70
    ULONG PeakNonPagedPoolAllocations;                                      //0x74
    volatile ULONGLONG PagedBytes;                                          //0x78
    volatile ULONGLONG NonPagedBytes;                                       //0x80
    ULONGLONG PeakPagedBytes;                                               //0x88
    ULONGLONG PeakNonPagedBytes;                                            //0x90
    ULONG RaiseIrqls;                                                       //0x98
    ULONG AcquireSpinLocks;                                                 //0x9c
    ULONG SynchronizeExecutions;                                            //0xa0
    ULONG AllocationsWithNoTag;                                             //0xa4
    ULONG AllocationsFailed;                                                //0xa8
    ULONG AllocationsFailedDeliberately;                                    //0xac
    ULONGLONG LockedBytes;                                                  //0xb0
    ULONGLONG PeakLockedBytes;                                              //0xb8
    ULONGLONG MappedLockedBytes;                                            //0xc0
    ULONGLONG PeakMappedLockedBytes;                                        //0xc8
    ULONGLONG MappedIoSpaceBytes;                                           //0xd0
    ULONGLONG PeakMappedIoSpaceBytes;                                       //0xd8
    ULONGLONG PagesForMdlBytes;                                             //0xe0
    ULONGLONG PeakPagesForMdlBytes;                                         //0xe8
    ULONGLONG ContiguousMemoryBytes;                                        //0xf0
    ULONGLONG PeakContiguousMemoryBytes;                                    //0xf8
    NOK_LIST_ENTRY ContiguousMemoryListHead;                            //0x100
    volatile ULONG ExecutePoolTypes;                                        //0x110
    volatile ULONG ExecutePageProtections;                                  //0x114
    volatile ULONG ExecutePageMappings;                                     //0x118
    volatile ULONG ExecuteWriteSections;                                    //0x11c
    volatile ULONG SectionAlignmentFailures;                                //0x120
    volatile ULONG IATInExecutableSection;                                  //0x124
}NOK_VF_TARGET_VERIFIED_DRIVER_DATA, * NOK_PVF_TARGET_VERIFIED_DRIVER_DATA;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_CREATE_STATE
{
    NOK_PsCreateInitialState = 0,
    NOK_PsCreateFailOnFileOpen = 1,
    NOK_PsCreateFailOnSectionCreate = 2,
    NOK_PsCreateFailExeFormat = 3,
    NOK_PsCreateFailMachineMismatch = 4,
    NOK_PsCreateFailExeName = 5,
    NOK_PsCreateSuccess = 6,
    NOK_PsCreateMaximumStates = 7
}NOK_PS_CREATE_STATE, * NOK_PPS_CREATE_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTLP_CSPARSE_BITMAP_STATE
{
    NOK_CommitBitmapInvalid = 0,
    NOK_UserBitmapInvalid = 1,
    NOK_UserBitmapValid = 2
}NOK_RTLP_CSPARSE_BITMAP_STATE, * NOK_PRTLP_CSPARSE_BITMAP_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_ReplacesCorHdrNumericDefines
{
    NOK_COMIMAGE_FLAGS_ILONLY = 1,
    NOK_COMIMAGE_FLAGS_32BITREQUIRED = 2,
    NOK_COMIMAGE_FLAGS_IL_LIBRARY = 4,
    NOK_COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    NOK_COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    NOK_COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
    NOK_COMIMAGE_FLAGS_32BITPREFERRED = 131072,
    NOK_COR_VERSION_MAJOR_V2 = 2,
    NOK_COR_VERSION_MAJOR = 2,
    NOK_COR_VERSION_MINOR = 5,
    NOK_COR_DELETED_NAME_LENGTH = 8,
    NOK_COR_VTABLEGAP_NAME_LENGTH = 8,
    NOK_NATIVE_TYPE_MAX_CB = 1,
    NOK_COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    NOK_IMAGE_COR_MIH_METHODRVA = 1,
    NOK_IMAGE_COR_MIH_EHRVA = 2,
    NOK_IMAGE_COR_MIH_BASICBLOCK = 8,
    NOK_COR_VTABLE_32BIT = 1,
    NOK_COR_VTABLE_64BIT = 2,
    NOK_COR_VTABLE_FROM_UNMANAGED = 4,
    NOK_COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    NOK_COR_VTABLE_CALL_MOST_DERIVED = 16,
    NOK_IMAGE_COR_EATJ_THUNK_SIZE = 32,
    NOK_MAX_CLASS_NAME = 1024,
    NOK_MAX_PACKAGE_NAME = 1024
}NOK_ReplacesCorHdrNumericDefines, * NOK_PReplacesCorHdrNumericDefines;
//0x4 bytes (sizeof)
typedef enum _NOK_SE_WS_APPX_SIGNATURE_ORIGIN
{
    NOK_SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    NOK_SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    NOK_SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    NOK_SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    NOK_SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
}NOK_SE_WS_APPX_SIGNATURE_ORIGIN, * NOK_PSE_WS_APPX_SIGNATURE_ORIGIN;
//0x4 bytes (sizeof)
typedef enum _NOK_SLEEPSTUDY_SPM_SCENARIO_CS_EXIT
{
    NOK_SpmScenarioStopReasonUnspecified = 16,
    NOK_SpmScenarioStopReasonCsExit = 17,
    NOK_SpmScenarioStopReasonInternalSegmentTransition = 18,
    NOK_SpmScenarioStopReasonMax = 19
}NOK_SLEEPSTUDY_SPM_SCENARIO_CS_EXIT, * NOK_PSLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
//0x1c8 bytes (sizeof)
typedef struct _NOK_POP_POWER_ACTION
{
    UCHAR Updates;                                                          //0x0
    UCHAR State;                                                            //0x1
    UCHAR Shutdown;                                                         //0x2
    NOK_POWER_ACTION Action;                                               //0x4
    NOK_SYSTEM_POWER_STATE LightestState;                                 //0x8
    ULONG Flags;                                                            //0xc
    LONG Status;                                                            //0x10
    NOK_POWER_POLICY_DEVICE_TYPE DeviceType;                               //0x14
    ULONG DeviceTypeFlags;                                                  //0x18
    UCHAR IrpMinor;                                                         //0x1c
    UCHAR Waking;                                                           //0x1d
    NOK_SYSTEM_POWER_STATE SystemState;                                   //0x20
    NOK_SYSTEM_POWER_STATE NextSystemState;                               //0x24
    NOK_SYSTEM_POWER_STATE EffectiveSystemState;                          //0x28
    NOK_SYSTEM_POWER_STATE CurrentSystemState;                            //0x2c
    NOK_PPOP_SHUTDOWN_BUG_CHECK ShutdownBugCode;                        //0x30
    NOK_PPOP_DEVICE_SYS_STATE DevState;                                 //0x38
    NOK_PPOP_HIBER_CONTEXT HiberContext;                                //0x40
    ULONGLONG WakeTime;                                                     //0x48
    ULONGLONG SleepTime;                                                    //0x50
    ULONGLONG WakeFirstUnattendedTime;                                      //0x58
    NOK_SYSTEM_POWER_CONDITION WakeAlarmSignaled;                          //0x60
    struct
    {
        ULONGLONG RequestedTime;                                            //0x68
        ULONGLONG ProgrammedTime;                                           //0x70
        NOK_PDIAGNOSTIC_BUFFER TimerInfo;                               //0x78
    } WakeAlarm[3];                                                         //0x68
    UCHAR WakeAlarmPaused;                                                  //0xb0
    ULONGLONG WakeAlarmLastTime;                                            //0xb8
    ULONGLONG DozeDeferralStartTime;                                        //0xc0
    NOK_SYSTEM_POWER_CAPABILITIES FilteredCapabilities;                  //0xc8
    ULONGLONG WatchdogLock;                                                 //0x118
    NOK_KDPC WatchdogDpc;                                               //0x120
    NOK_KTIMER WatchdogTimer;                                           //0x160
    UCHAR WatchdogInitialized;                                              //0x1a0
    NOK_POP_POWER_ACTION_WATCHDOG_STATE WatchdogState;                    //0x1a4
    ULONGLONG WatchdogStartTime;                                            //0x1a8
    NOK_PKTHREAD ActionWorkerThread;                                    //0x1b0
    NOK_PKTHREAD PromoteActionWorkerThread;                             //0x1b8
    NOK_PKTHREAD UnlockAfterSleepWorkerThread;                          //0x1c0
}NOK_POP_POWER_ACTION, * NOK_PPOP_POWER_ACTION;
//0x4 bytes (sizeof)
typedef enum _NOK_TlgIn_t
{
    NOK_TlgInNULL = 0,
    NOK_TlgInUNICODESTRING = 1,
    NOK_TlgInANSISTRING = 2,
    NOK_TlgInINT8 = 3,
    NOK_TlgInUINT8 = 4,
    NOK_TlgInINT16 = 5,
    NOK_TlgInUINT16 = 6,
    NOK_TlgInINT32 = 7,
    NOK_TlgInUINT32 = 8,
    NOK_TlgInINT64 = 9,
    NOK_TlgInUINT64 = 10,
    NOK_TlgInFLOAT = 11,
    NOK_TlgInDOUBLE = 12,
    NOK_TlgInBOOL32 = 13,
    NOK_TlgInBINARY = 14,
    NOK_TlgInGUID = 15,
    NOK__TlgInPOINTER_unsupported = 16,
    NOK_TlgInFILETIME = 17,
    NOK_TlgInSYSTEMTIME = 18,
    NOK_TlgInSID = 19,
    NOK_TlgInHEXINT32 = 20,
    NOK_TlgInHEXINT64 = 21,
    NOK_TlgInCOUNTEDSTRING = 22,
    NOK_TlgInCOUNTEDANSISTRING = 23,
    NOK__TlgInSTRUCT = 24,
    NOK_TlgInCOUNTEDBINARY = 25,
    NOK__TlgInMax = 26,
    NOK_TlgInINTPTR = 9,
    NOK_TlgInUINTPTR = 10,
    NOK_TlgInPOINTER = 21,
    NOK_TlgInLONG = 7,
    NOK_TlgInULONG = 8,
    NOK_TlgInHEXLONG = 20,
    NOK__TlgInCcount = 32,
    NOK_TlgInVcount = 64,
    NOK__TlgInChain = 128,
    NOK__TlgInCustom = 96,
    NOK__TlgInTypeMask = 31,
    NOK__TlgInCountMask = 96,
    NOK__TlgInFlagMask = 224
}NOK_TlgIn_t, * NOK_PTlgIn_t;
//0x4 bytes (sizeof)
typedef enum _NOK_TlgOut_t
{
    NOK_TlgOutNULL = 0,
    NOK_TlgOutNOPRINT = 1,
    NOK_TlgOutSTRING = 2,
    NOK_TlgOutBOOLEAN = 3,
    NOK_TlgOutHEX = 4,
    NOK_TlgOutPID = 5,
    NOK_TlgOutTID = 6,
    NOK_TlgOutPORT = 7,
    NOK_TlgOutIPV4 = 8,
    NOK_TlgOutIPV6 = 9,
    NOK_TlgOutSOCKETADDRESS = 10,
    NOK_TlgOutXML = 11,
    NOK_TlgOutJSON = 12,
    NOK_TlgOutWIN32ERROR = 13,
    NOK_TlgOutNTSTATUS = 14,
    NOK_TlgOutHRESULT = 15,
    NOK_TlgOutFILETIME = 16,
    NOK_TlgOutSIGNED = 17,
    NOK_TlgOutUNSIGNED = 18,
    NOK_TlgOutUTF8 = 35,
    NOK_TlgOutPKCS7_WITH_TYPE_INFO = 36,
    NOK_TlgOutCODE_POINTER = 37,
    NOK_TlgOutDATETIME_UTC = 38,
    NOK__TlgOutMax = 39,
    NOK__TlgOutChain = 128,
    NOK__TlgOutTypeMask = 127
}NOK_TlgOut_t, * NOK_PTlgOut_t;
//0x2c bytes (sizeof)
typedef struct _NOK_XSDT
{
    NOK_DESCRIPTION_HEADER Header;                                      //0x0
    NOK_LARGE_INTEGER Tables[1];                                         //0x24
}NOK_XSDT, * NOK_PXSDT;
//0x4 bytes (sizeof)
typedef enum _NOK_ADD_DRIVER_STAGE
{
    NOK_ClassConfigFilters = 0,
    NOK_LowerDeviceFilters = 1,
    NOK_LowerClassFilters = 2,
    NOK_DeviceService = 3,
    NOK_UpperDeviceFilters = 4,
    NOK_UpperClassFilters = 5,
    NOK_MaximumAddStage = 6
}NOK_ADD_DRIVER_STAGE, * NOK_PADD_DRIVER_STAGE;
//0xb0 bytes (sizeof)
typedef struct _NOK_BUS_HANDLER
{
    ULONG Version;                                                          //0x0
    NOK_INTERFACE_TYPE InterfaceType;                                     //0x4
    NOK_BUS_DATA_TYPE ConfigurationType;                                  //0x8
    ULONG BusNumber;                                                        //0xc
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x10
    NOK_PBUS_HANDLER ParentHandler;                                     //0x18
    VOID* BusData;                                                          //0x20
    ULONG DeviceControlExtensionSize;                                       //0x28
    NOK_SUPPORTED_RANGES* BusAddresses;                                 //0x30
    ULONG Reserved[4];                                                      //0x38
    ULONG (*GetBusData)(NOK_PBUS_HANDLER arg1, NOK_PBUS_HANDLER arg2, ULONG arg3, VOID* arg4, ULONG arg5, ULONG arg6); //0x48
    ULONG (*SetBusData)(NOK_PBUS_HANDLER arg1, NOK_PBUS_HANDLER arg2, ULONG arg3, VOID* arg4, ULONG arg5, ULONG arg6); //0x50
    LONG (*AdjustResourceList)(NOK_PBUS_HANDLER arg1, NOK_PBUS_HANDLER arg2, NOK_PIO_RESOURCE_REQUIREMENTS_LIST* arg3); //0x58
    LONG (*AssignSlotResources)(NOK_PBUS_HANDLER arg1, NOK_PBUS_HANDLER arg2, NOK_PUNICODE_STRING arg3, NOK_PUNICODE_STRING arg4, NOK_PDRIVER_OBJECT arg5, NOK_PDEVICE_OBJECT arg6, ULONG arg7, NOK_PCM_RESOURCE_LIST* arg8); //0x60
    UCHAR (*TranslateBusAddress)(NOK_PBUS_HANDLER arg1, NOK_PBUS_HANDLER arg2, NOK_LARGE_INTEGER arg3, ULONG* arg4, NOK_PLARGE_INTEGER arg5); //0x68
    VOID* Spare1;                                                           //0x70
    VOID* Spare2;                                                           //0x78
    VOID* Spare3;                                                           //0x80
    VOID* Spare4;                                                           //0x88
    VOID* Spare5;                                                           //0x90
    VOID* Spare6;                                                           //0x98
    VOID* Spare7;                                                           //0xa0
    VOID* Spare8;                                                           //0xa8
}NOK_BUS_HANDLER, * NOK_PBUS_HANDLER;
//0x30 bytes (sizeof)
typedef struct _NOK_ARBITER_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
    LONG (*ArbiterHandler)(VOID* arg1, NOK_ARBITER_ACTION arg2, NOK_PARBITER_PARAMETERS arg3); //0x20
    ULONG Flags;                                                            //0x28
}NOK_ARBITER_INTERFACE, * NOK_PARBITER_INTERFACE;
//0x40 bytes (sizeof)
typedef struct _NOK_PNP_RESOURCE_REQUEST
{
    NOK_PDEVICE_OBJECT PhysicalDevice;                                  //0x0
    ULONG Flags;                                                            //0x8
    NOK_ARBITER_REQUEST_SOURCE AllocationType;                            //0xc
    ULONG Priority;                                                         //0x10
    ULONG Position;                                                         //0x14
    NOK_PIO_RESOURCE_REQUIREMENTS_LIST ResourceRequirements;            //0x18
    VOID* ReqList;                                                          //0x20
    NOK_PCM_RESOURCE_LIST ResourceAssignment;                           //0x28
    NOK_PCM_RESOURCE_LIST TranslatedResourceAssignment;                 //0x30
    LONG Status;                                                            //0x38
}NOK_PNP_RESOURCE_REQUEST, * NOK_PPNP_RESOURCE_REQUEST;
//0x48 bytes (sizeof)
typedef struct _NOK_PNP_DEVICE_COMPLETION_REQUEST
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PDEVICE_NODE DeviceNode;                                        //0x10
    VOID* Context;                                                          //0x18
    NOK_PNP_DEVNODE_STATE CompletionState;                                //0x20
    ULONG IrpPended;                                                        //0x24
    LONG Status;                                                            //0x28
    VOID* Information;                                                      //0x30
    LONG ReferenceCount;                                                    //0x38
    NOK_PPNP_WATCHDOG Watchdog;                                         //0x40
}NOK_PNP_DEVICE_COMPLETION_REQUEST, * NOK_PPNP_DEVICE_COMPLETION_REQUEST;
//0x4 bytes (sizeof)
typedef enum _NOK_BLOB_ID
{
    NOK_BLOB_TYPE_UNKNOWN = 0,
    NOK_BLOB_TYPE_CONNECTION_INFO = 1,
    NOK_BLOB_TYPE_MESSAGE = 2,
    NOK_BLOB_TYPE_SECURITY_CONTEXT = 3,
    NOK_BLOB_TYPE_SECTION = 4,
    NOK_BLOB_TYPE_REGION = 5,
    NOK_BLOB_TYPE_VIEW = 6,
    NOK_BLOB_TYPE_RESERVE = 7,
    NOK_BLOB_TYPE_DIRECT_TRANSFER = 8,
    NOK_BLOB_TYPE_HANDLE_DATA = 9,
    NOK_BLOB_TYPE_MAX_ID = 10
}NOK_BLOB_ID, * NOK_PBLOB_ID;
//0x868 bytes (sizeof)
typedef struct _NOK_BOOT_ENTROPY_LDR_RESULT
{
    ULONG maxEntropySources;                                                //0x0
    NOK_BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];         //0x8
    UCHAR SeedBytesForCng[48];                                              //0x418
    UCHAR RngBytesForNtoskrnl[1024];                                        //0x448
    UCHAR KdEntropy[32];                                                    //0x848
}NOK_BOOT_ENTROPY_LDR_RESULT, * NOK_PBOOT_ENTROPY_LDR_RESULT;
//0xe38 bytes (sizeof)
typedef struct _NOK_LOADER_PARAMETER_EXTENSION
{
    ULONG Size;                                                             //0x0
    NOK_PROFILE_PARAMETER_BLOCK Profile;                                //0x4
    VOID* EmInfFileImage;                                                   //0x18
    ULONG EmInfFileSize;                                                    //0x20
    VOID* TriageDumpBlock;                                                  //0x28
    NOK_PHEADLESS_LOADER_BLOCK HeadlessLoaderBlock;                     //0x30
    NOK_PSMBIOS3_TABLE_HEADER SMBiosEPSHeader;                          //0x38
    VOID* DrvDBImage;                                                       //0x40
    ULONG DrvDBSize;                                                        //0x48
    VOID* DrvDBPatchImage;                                                  //0x50
    ULONG DrvDBPatchSize;                                                   //0x58
    NOK_PNETWORK_LOADER_BLOCK NetworkLoaderBlock;                       //0x60
    NOK_LIST_ENTRY FirmwareDescriptorListHead;                          //0x68
    VOID* AcpiTable;                                                        //0x78
    ULONG AcpiTableSize;                                                    //0x80
    ULONG LastBootSucceeded:1;                                              //0x84
    ULONG LastBootShutdown:1;                                               //0x84
    ULONG IoPortAccessSupported:1;                                          //0x84
    ULONG BootDebuggerActive:1;                                             //0x84
    ULONG StrongCodeGuarantees:1;                                           //0x84
    ULONG HardStrongCodeGuarantees:1;                                       //0x84
    ULONG SidSharingDisabled:1;                                             //0x84
    ULONG TpmInitialized:1;                                                 //0x84
    ULONG VsmConfigured:1;                                                  //0x84
    ULONG IumEnabled:1;                                                     //0x84
    ULONG IsSmbboot:1;                                                      //0x84
    ULONG BootLogEnabled:1;                                                 //0x84
    ULONG DriverVerifierEnabled:1;                                          //0x84
    ULONG SuppressMonitorX:1;                                               //0x84
    ULONG KernelCetEnabled:1;                                               //0x84
    ULONG SuppressSmap:1;                                                   //0x84
    ULONG Unused:5;                                                         //0x84
    ULONG FeatureSimulations:6;                                             //0x84
    ULONG MicrocodeSelfHosting:1;                                           //0x84
    ULONG XhciLegacyHandoffSkip:1;                                          //0x84
    ULONG DisableInsiderOptInHVCI:1;                                        //0x84
    ULONG MicrocodeMinVerSupported:1;                                       //0x84
    ULONG GpuIommuEnabled:1;                                                //0x84
    NOK_LOADER_PERFORMANCE_DATA LoaderPerformanceData;                  //0x88
    NOK_LIST_ENTRY BootApplicationPersistentData;                       //0xe8
    VOID* WmdTestResult;                                                    //0xf8
    NOK_GUID BootIdentifier;                                            //0x100
    ULONG ResumePages;                                                      //0x110
    VOID* DumpHeader;                                                       //0x118
    VOID* BgContext;                                                        //0x120
    VOID* NumaLocalityInfo;                                                 //0x128
    VOID* NumaGroupAssignment;                                              //0x130
    NOK_LIST_ENTRY AttachedHives;                                       //0x138
    ULONG MemoryCachingRequirementsCount;                                   //0x148
    VOID* MemoryCachingRequirements;                                        //0x150
    NOK_BOOT_ENTROPY_LDR_RESULT BootEntropyResult;                      //0x158
    ULONGLONG ProcessorCounterFrequency;                                    //0x9c0
    NOK_LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;      //0x9c8
    NOK_GUID HardwareConfigurationId;                                   //0xa08
    NOK_LIST_ENTRY HalExtensionModuleList;                              //0xa18
    NOK_LARGE_INTEGER SystemTime;                                        //0xa28
    ULONGLONG TimeStampAtSystemTimeRead;                                    //0xa30
    union
    {
        ULONGLONG BootFlags;                                                //0xa38
        struct
        {
            ULONGLONG DbgMenuOsSelection:1;                                 //0xa38
            ULONGLONG DbgHiberBoot:1;                                       //0xa38
            ULONGLONG DbgSoftRestart:1;                                     //0xa38
            ULONGLONG DbgMeasuredLaunch:1;                                  //0xa38
        };
    };
    union
    {
        ULONGLONG InternalBootFlags;                                        //0xa40
        struct
        {
            ULONGLONG DbgUtcBootTime:1;                                     //0xa40
            ULONGLONG DbgRtcBootTime:1;                                     //0xa40
            ULONGLONG DbgNoLegacyServices:1;                                //0xa40
        };
    };
    VOID* WfsFPData;                                                        //0xa48
    ULONG WfsFPDataSize;                                                    //0xa50
    NOK_LOADER_BUGCHECK_PARAMETERS BugcheckParameters;                  //0xa58
    VOID* ApiSetSchema;                                                     //0xa80
    ULONG ApiSetSchemaSize;                                                 //0xa88
    NOK_LIST_ENTRY ApiSetSchemaExtensions;                              //0xa90
    NOK_UNICODE_STRING AcpiBiosVersion;                                 //0xaa0
    NOK_UNICODE_STRING SmbiosVersion;                                   //0xab0
    NOK_UNICODE_STRING EfiVersion;                                      //0xac0
    NOK_PDEBUG_DEVICE_DESCRIPTOR KdDebugDevice;                         //0xad0
    NOK_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable; //0xad8
    NOK_UNICODE_STRING ManufacturingProfile;                            //0xaf8
    VOID* BbtBuffer;                                                        //0xb08
    ULONGLONG XsaveAllowedFeatures;                                         //0xb10
    ULONG XsaveFlags;                                                       //0xb18
    VOID* BootOptions;                                                      //0xb20
    ULONG IumEnablement;                                                    //0xb28
    ULONG IumPolicy;                                                        //0xb2c
    LONG IumStatus;                                                         //0xb30
    ULONG BootId;                                                           //0xb34
    NOK_PLOADER_PARAMETER_CI_EXTENSION CodeIntegrityData;               //0xb38
    ULONG CodeIntegrityDataSize;                                            //0xb40
    NOK_LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;               //0xb44
    ULONG SoftRestartCount;                                                 //0xb58
    LONGLONG SoftRestartTime;                                               //0xb60
    VOID* HypercallCodeVa;                                                  //0xb68
    VOID* HalVirtualAddress;                                                //0xb70
    ULONGLONG HalNumberOfBytes;                                             //0xb78
    NOK_PLEAP_SECOND_DATA LeapSecondData;                               //0xb80
    ULONG MajorRelease;                                                     //0xb88
    ULONG Reserved1;                                                        //0xb8c
    CHAR NtBuildLab[224];                                                   //0xb90
    CHAR NtBuildLabEx[224];                                                 //0xc70
    NOK_LOADER_RESET_REASON ResetReason;                                //0xd50
    ULONG MaxPciBusNumber;                                                  //0xd80
    ULONG FeatureSettings;                                                  //0xd84
    ULONG HotPatchReserveSize;                                              //0xd88
    ULONG RetpolineReserveSize;                                             //0xd8c
    struct
    {
        VOID* CodeBase;                                                     //0xd90
        ULONGLONG CodeSize;                                                 //0xd98
    } MiniExecutive;                                                        //0xd90
    NOK_VSM_PERFORMANCE_DATA VsmPerformanceData;                        //0xda0
    NOK_PNUMA_MEMORY_RANGE NumaMemoryRanges;                            //0xde0
    ULONG NumaMemoryRangeCount;                                             //0xde8
    ULONG IommuFaultPolicy;                                                 //0xdec
    NOK_LOADER_FEATURE_CONFIGURATION_INFORMATION FeatureConfigurationInformation; //0xdf0
}NOK_LOADER_PARAMETER_EXTENSION, * NOK_PLOADER_PARAMETER_EXTENSION;
//0x4 bytes (sizeof)
typedef enum _NOK_BUGCHECK_RECOVERY_LOG_EVENT
{
    NOK_RecoveryEventStart = 0,
    NOK_RecoveryEventPhase1Status = 1,
    NOK_RecoveryEventPhase2Status = 2,
    NOK_RecoveryEventMax = 3
}NOK_BUGCHECK_RECOVERY_LOG_EVENT, * NOK_PBUGCHECK_RECOVERY_LOG_EVENT;
//0x4 bytes (sizeof)
typedef enum _NOK_HAL_CLOCK_TIMER_MODE
{
    NOK_HalClockTimerModePeriodic = 0,
    NOK_HalClockTimerModeOneShot = 1,
    NOK_HalClockTimerModeMax = 2
}NOK_HAL_CLOCK_TIMER_MODE, * NOK_PHAL_CLOCK_TIMER_MODE;
//0x4 bytes (sizeof)
typedef enum _NOK_CMP_FAILURE_INJECTION_POINT
{
    NOK_CmpFailurePointPoolAllocation = 0,
    NOK_CmpFailurePointViewMapping = 1,
    NOK_CmpFailurePointViewPinning = 2,
    NOK_CmpFailurePointResourceCharging = 3,
    NOK_CmpFailurePointFileWrite = 4,
    NOK_CmpFailurePointFileRead = 5,
    NOK_CmpFailurePointCacheFlush = 6,
    NOK_CmpFailurePointFlush = 7,
    NOK_CmpFailurePointFlushAndPurge = 8,
    NOK_CmpFailurePointForceLargeBin = 9,
    NOK_CmpFailurePointDontFixAlignment = 10,
    NOK_CmpFailurePointAllocateCell = 11,
    NOK_CmpFailurePointMarkDirty = 12,
    NOK_CmpFailurePointForceMultiLevelMap = 13,
    NOK_CmpFailurePointAllocateContiguousLogEntry = 14,
    NOK_CmpFailurePointAllocateKcb = 15,
    NOK_CmpFailurePointCreateKeyBody = 16,
    NOK_CmpFailurePointForceFreeKcb = 17,
    NOK_CmpFailurePointKcbLockUpgrade = 18,
    NOK_CmpFailurePointKcbLockUpgradeDelay = 19,
    NOK_CmpFailurePointKeyEnumResumeContextVerification = 20,
    NOK_CmpFailurePointKeyEnumForceRetry = 21,
    NOK_CmpFailurePointForceReorganization = 22,
    NOK_CmpFailurePointForceLazyCOWByPolicy = 23,
    NOK_CmpFailureInjectionPointCount = 24
}NOK_CMP_FAILURE_INJECTION_POINT, * NOK_PCMP_FAILURE_INJECTION_POINT;
//0x12e8 bytes (sizeof)
typedef struct _NOK_CMHIVE
{
    NOK_HHIVE Hive;                                                     //0x0
    VOID* FileHandles[6];                                                   //0x600
    NOK_LIST_ENTRY NotifyList;                                          //0x630
    NOK_LIST_ENTRY HiveList;                                            //0x640
    NOK_LIST_ENTRY PreloadedHiveList;                                   //0x650
    NOK_EX_RUNDOWN_REF HiveRundown;                                     //0x660
    NOK_CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;                         //0x668
    ULONG KcbCacheTableSize;                                                //0x670
    NOK_CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;                       //0x678
    ULONG DeletedKcbTableSize;                                              //0x680
    ULONG Identity;                                                         //0x684
    NOK_CMSI_RW_LOCK HiveLock;                                          //0x688
    NOK_RTL_BITMAP FlushDirtyVector;                                    //0x690
    ULONG FlushDirtyVectorSize;                                             //0x6a0
    NOK_PCMP_OFFSET_ARRAY FlushLogEntryOffsetArray;                      //0x6a8
    ULONG FlushLogEntryOffsetArrayCount;                                    //0x6b0
    ULONG FlushLogEntrySize;                                                //0x6b4
    ULONG FlushHiveTruncated;                                               //0x6b8
    UCHAR FlushBaseBlockDirty;                                              //0x6bc
    NOK_RTL_BITMAP CapturedUnreconciledVector;                          //0x6c0
    ULONG CapturedUnreconciledVectorSize;                                   //0x6d0
    NOK_PCMP_OFFSET_ARRAY UnreconciledOffsetArray;                       //0x6d8
    ULONG UnreconciledOffsetArrayCount;                                     //0x6e0
    NOK_PHBASE_BLOCK UnreconciledBaseBlock;                             //0x6e8
    NOK_EX_PUSH_LOCK SecurityLock;                                      //0x6f0
    ULONG LastShrinkHiveSize;                                               //0x6f8
    NOK_LARGE_INTEGER ActualFileSize;                                    //0x700
    NOK_LARGE_INTEGER LogFileSizes[2];                                   //0x708
    NOK_UNICODE_STRING FileFullPath;                                    //0x718
    NOK_UNICODE_STRING FileUserName;                                    //0x728
    NOK_UNICODE_STRING HiveRootPath;                                    //0x738
    ULONG SecurityCount;                                                    //0x748
    ULONG SecurityCacheSize;                                                //0x74c
    LONG SecurityHitHint;                                                   //0x750
    NOK_CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;                     //0x758
    NOK_LIST_ENTRY SecurityHash[64];                                    //0x760
    ULONG UnloadEventCount;                                                 //0xb60
    NOK_PKEVENT* UnloadEventArray;                                      //0xb68
    NOK_PCM_KEY_CONTROL_BLOCK RootKcb;                                  //0xb70
    UCHAR Frozen;                                                           //0xb78
    NOK_PCM_WORKITEM UnloadWorkItem;                                    //0xb80
    NOK_CM_WORKITEM UnloadWorkItemHolder;                               //0xb88
    NOK_CM_DIRTY_VECTOR_LOG DirtyVectorLog;                             //0xbb0
    ULONG Flags;                                                            //0x1038
    NOK_LIST_ENTRY TrustClassEntry;                                     //0x1040
    ULONGLONG DirtyTime;                                                    //0x1050
    ULONGLONG UnreconciledTime;                                             //0x1058
    NOK_PCM_RM CmRm;                                                    //0x1060
    ULONG CmRmInitFailPoint;                                                //0x1068
    LONG CmRmInitFailStatus;                                                //0x106c
    NOK_PKTHREAD CreatorOwner;                                          //0x1070
    NOK_PKTHREAD RundownThread;                                         //0x1078
    NOK_LARGE_INTEGER LastWriteTime;                                     //0x1080
    NOK_HIVE_WRITE_WAIT_QUEUE FlushQueue;                               //0x1088
    NOK_HIVE_WRITE_WAIT_QUEUE ReconcileQueue;                           //0x1098
    union
    {
        ULONG FlushFlags;                                                   //0x10a8
        struct
        {
            ULONG PrimaryFilePurged:1;                                      //0x10a8
            ULONG DiskFileBad:1;                                            //0x10a8
        };
    };
    ULONG PrimaryFileSizeBeforeLastFlush;                                   //0x10ac
    volatile LONG ReferenceCount;                                           //0x10b0
    LONG UnloadHistoryIndex;                                                //0x10b4
    ULONG UnloadHistory[128];                                               //0x10b8
    ULONG BootStart;                                                        //0x12b8
    ULONG UnaccessedStart;                                                  //0x12bc
    ULONG UnaccessedEnd;                                                    //0x12c0
    ULONG LoadedKeyCount;                                                   //0x12c4
    volatile ULONG HandleClosePending;                                      //0x12c8
    NOK_EX_PUSH_LOCK HandleClosePendingEvent;                           //0x12d0
    UCHAR FinalFlushSucceeded;                                              //0x12d8
    NOK_PCMP_VOLUME_CONTEXT VolumeContext;                              //0x12e0
}NOK_CMHIVE, * NOK_PCMHIVE;
//0x1b0 bytes (sizeof)
typedef struct _NOK_HIVE_LOAD_FAILURE
{
    NOK_PHHIVE Hive;                                                    //0x0
    USHORT Index;                                                           //0x8
    USHORT RecoverableIndex;                                                //0xa
    struct
    {
        NOK_CM_LOAD_FAILURE_TYPE Failure;                                 //0xc
        LONG Status;                                                        //0x10
        ULONG Point;                                                        //0x14
    } Locations[8];                                                         //0xc
    struct
    {
        NOK_CM_LOAD_FAILURE_TYPE Failure;                                 //0x6c
        LONG Status;                                                        //0x70
        ULONG Point;                                                        //0x74
    } RecoverableLocations[8];                                              //0x6c
    struct
    {
        ULONG Action;                                                       //0xd0
        VOID* Handle;                                                       //0xd8
        LONG Status;                                                        //0xe0
    } RegistryIO;                                                           //0xd0
    struct
    {
        VOID* CheckStack;                                                   //0xe8
    } CheckRegistry2;                                                       //0xe8
    struct
    {
        ULONG Cell;                                                         //0xf0
        NOK_PCELL_DATA CellPoint;                                       //0xf8
        VOID* RootPoint;                                                    //0x100
        ULONG Index;                                                        //0x108
    } CheckKey;                                                             //0xf0
    struct
    {
        NOK_PCELL_DATA List;                                            //0x110
        ULONG Index;                                                        //0x118
        ULONG Cell;                                                         //0x11c
        NOK_PCELL_DATA CellPoint;                                       //0x120
    } CheckValueList;                                                       //0x110
    struct
    {
        ULONG Space;                                                        //0x128
        ULONG MapPoint;                                                     //0x12c
        NOK_PHBIN BinPoint;                                             //0x130
    } CheckHive;                                                            //0x128
    struct
    {
        ULONG Space;                                                        //0x138
        ULONG MapPoint;                                                     //0x13c
        NOK_PHBIN BinPoint;                                             //0x140
    } CheckHive1;                                                           //0x138
    struct
    {
        NOK_PHBIN Bin;                                                  //0x148
        NOK_PHCELL CellPoint;                                           //0x150
    } CheckBin;                                                             //0x148
    struct
    {
        ULONG FileOffset;                                                   //0x158
    } RecoverData;                                                          //0x158
    NOK_CM_PARSE_DEBUG_INFO LinkDebug;                                  //0x160
}NOK_HIVE_LOAD_FAILURE, * NOK_PHIVE_LOAD_FAILURE;
//0x4 bytes (sizeof)
typedef enum _NOK_CM_SHARE_DISPOSITION
{
    NOK_CmResourceShareUndetermined = 0,
    NOK_CmResourceShareDeviceExclusive = 1,
    NOK_CmResourceShareDriverExclusive = 2,
    NOK_CmResourceShareShared = 3
}NOK_CM_SHARE_DISPOSITION, * NOK_PCM_SHARE_DISPOSITION;
//0x48 bytes (sizeof)
typedef struct _NOK_CONFIGURATION_COMPONENT_DATA
{
    NOK_CONFIGURATION_COMPONENT_DATA* Parent;                           //0x0
    NOK_CONFIGURATION_COMPONENT_DATA* Child;                            //0x8
    NOK_CONFIGURATION_COMPONENT_DATA* Sibling;                          //0x10
    NOK_CONFIGURATION_COMPONENT ComponentEntry;                         //0x18
    VOID* ConfigurationData;                                                //0x40
}NOK_CONFIGURATION_COMPONENT_DATA, * NOK_PCONFIGURATION_COMPONENT_DATA;
//0x160 bytes (sizeof)
typedef struct _NOK_LOADER_PARAMETER_BLOCK
{
    ULONG OsMajorVersion;                                                   //0x0
    ULONG OsMinorVersion;                                                   //0x4
    ULONG Size;                                                             //0x8
    ULONG OsLoaderSecurityVersion;                                          //0xc
    NOK_LIST_ENTRY LoadOrderListHead;                                   //0x10
    NOK_LIST_ENTRY MemoryDescriptorListHead;                            //0x20
    NOK_LIST_ENTRY BootDriverListHead;                                  //0x30
    NOK_LIST_ENTRY EarlyLaunchListHead;                                 //0x40
    NOK_LIST_ENTRY CoreDriverListHead;                                  //0x50
    NOK_LIST_ENTRY CoreExtensionsDriverListHead;                        //0x60
    NOK_LIST_ENTRY TpmCoreDriverListHead;                               //0x70
    ULONGLONG KernelStack;                                                  //0x80
    ULONGLONG Prcb;                                                         //0x88
    ULONGLONG Process;                                                      //0x90
    ULONGLONG Thread;                                                       //0x98
    ULONG KernelStackSize;                                                  //0xa0
    ULONG RegistryLength;                                                   //0xa4
    VOID* RegistryBase;                                                     //0xa8
    NOK_CONFIGURATION_COMPONENT_DATA* ConfigurationRoot;                //0xb0
    CHAR* ArcBootDeviceName;                                                //0xb8
    CHAR* ArcHalDeviceName;                                                 //0xc0
    CHAR* NtBootPathName;                                                   //0xc8
    CHAR* NtHalPathName;                                                    //0xd0
    CHAR* LoadOptions;                                                      //0xd8
    NOK_PNLS_DATA_BLOCK NlsData;                                        //0xe0
    NOK_PARC_DISK_INFORMATION ArcDiskInformation;                       //0xe8
    NOK_PLOADER_PARAMETER_EXTENSION Extension;                          //0xf0
    union
    {
        NOK_I386_LOADER_BLOCK I386;                                     //0xf8
        NOK_ARM_LOADER_BLOCK Arm;                                       //0xf8
    } u;                                                                    //0xf8
    NOK_FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;          //0x108
    CHAR* OsBootstatPathName;                                               //0x148
    CHAR* ArcOSDataDeviceName;                                              //0x150
    CHAR* ArcWindowsSysPartName;                                            //0x158
}NOK_LOADER_PARAMETER_BLOCK, * NOK_PLOADER_PARAMETER_BLOCK;
//0x4 bytes (sizeof)
typedef enum _NOK_FS_FILTER_SECTION_SYNC_TYPE
{
    NOK_SyncTypeOther = 0,
    NOK_SyncTypeCreateSection = 1
}NOK_FS_FILTER_SECTION_SYNC_TYPE, * NOK_PFS_FILTER_SECTION_SYNC_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_ConnectionResourceConsumerDesc
{
    NOK_ConnectionResourceConsumerDescIsUndefined = 0,
    NOK_ConnectionResourceConsumerDescIsDevice = 1,
    NOK_ConnectionResourceConsumerDescIsOpregion = 2,
    NOK_ConnectionResourceConsumerDescMax = 3
}NOK_ConnectionResourceConsumerDesc, * NOK_PConnectionResourceConsumerDesc;
//0x18 bytes (sizeof)
typedef struct _NOK_POP_CURRENT_BROADCAST
{
    UCHAR InProgress;                                                       //0x0
    NOK_SYSTEM_POWER_STATE_CONTEXT SystemContext;                       //0x4
    NOK_POWER_ACTION PowerAction;                                          //0x8
    NOK_PPOP_DEVICE_SYS_STATE DeviceState;                              //0x10
}NOK_POP_CURRENT_BROADCAST, * NOK_PPOP_CURRENT_BROADCAST;
//0x10 bytes (sizeof)
typedef struct _NOK_RELATION_LIST
{
    NOK_DEVICE_OBJECT_LIST* DeviceObjectList;                           //0x0
    UCHAR Sorted;                                                           //0x8
}NOK_RELATION_LIST, * NOK_PRELATION_LIST;
//0x78 bytes (sizeof)
typedef struct _NOK_CM_KCB_UOW
{
    NOK_LIST_ENTRY TransactionListEntry;                                //0x0
    NOK_PCM_INTENT_LOCK KCBLock;                                        //0x10
    NOK_PCM_INTENT_LOCK KeyLock;                                        //0x18
    NOK_LIST_ENTRY KCBListEntry;                                        //0x20
    NOK_PCM_KEY_CONTROL_BLOCK KeyControlBlock;                          //0x30
    NOK_PCM_TRANS Transaction;                                          //0x38
    ULONG UoWState;                                                         //0x40
    NOK_UoWActionType ActionType;                                          //0x44
    NOK_HSTORAGE_TYPE StorageType;                                         //0x48
    NOK_PCM_KCB_UOW ParentUoW;                                          //0x50
    union
    {
        NOK_PCM_KEY_CONTROL_BLOCK ChildKCB;                             //0x58
        ULONG VolatileKeyCell;                                              //0x58
        struct
        {
            ULONG OldValueCell;                                             //0x58
            ULONG NewValueCell;                                             //0x5c
        };
        ULONG UserFlags;                                                    //0x58
        NOK_LARGE_INTEGER LastWriteTime;                                 //0x58
        struct
        {
            NOK_CM_KEY_SECURITY_CACHE* TxCachedSecurity;                //0x58
            ULONG TxSecurityCell;                                           //0x60
        };
        struct
        {
            NOK_PCM_KEY_CONTROL_BLOCK OldChildKCB;                      //0x58
            NOK_PCM_KEY_CONTROL_BLOCK NewChildKCB;                      //0x60
        };
        struct
        {
            NOK_PCM_KEY_CONTROL_BLOCK OtherChildKCB;                    //0x58
            ULONG ThisVolatileKeyCell;                                      //0x60
        };
    };
    union
    {
        VOID* PrepareDataPointer;                                           //0x68
        NOK_PCM_UOW_SET_SD_DATA SecurityData;                           //0x68
        NOK_PCM_UOW_KEY_STATE_MODIFICATION ModifyKeysData;              //0x68
        NOK_PCM_UOW_SET_VALUE_LIST_DATA SetValueData;                   //0x68
    };
    union
    {
        NOK_PCM_UOW_SET_VALUE_KEY_DATA ValueData;                       //0x70
        NOK_PCMP_DISCARD_AND_REPLACE_KCB_CONTEXT DiscardReplaceContext; //0x70
    };
}NOK_CM_KCB_UOW, * NOK_PCM_KCB_UOW;
//0x4 bytes (sizeof)
typedef enum _NOK_DIRECTORY_NOTIFY_INFORMATION_CLASS
{
    NOK_DirectoryNotifyInformation = 1,
    NOK_DirectoryNotifyExtendedInformation = 2
}NOK_DIRECTORY_NOTIFY_INFORMATION_CLASS, * NOK_PDIRECTORY_NOTIFY_INFORMATION_CLASS;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVICE_WAKE_DEPTH
{
    NOK_DeviceWakeDepthNotWakeable = 0,
    NOK_DeviceWakeDepthD0 = 1,
    NOK_DeviceWakeDepthD1 = 2,
    NOK_DeviceWakeDepthD2 = 3,
    NOK_DeviceWakeDepthD3hot = 4,
    NOK_DeviceWakeDepthD3cold = 5,
    NOK_DeviceWakeDepthMaximum = 6
}NOK_DEVICE_WAKE_DEPTH, * NOK_PDEVICE_WAKE_DEPTH;
//0x4 bytes (sizeof)
typedef enum _NOK_DEVPROP_OPERATOR
{
    NOK_DEVPROP_OPERATOR_MODIFIER_NOT = 65536,
    NOK_DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 131072,
    NOK_DEVPROP_OPERATOR_NONE = 0,
    NOK_DEVPROP_OPERATOR_EXISTS = 1,
    NOK_DEVPROP_OPERATOR_NOT_EXISTS = 65537,
    NOK_DEVPROP_OPERATOR_EQUALS = 2,
    NOK_DEVPROP_OPERATOR_NOT_EQUALS = 65538,
    NOK_DEVPROP_OPERATOR_GREATER_THAN = 3,
    NOK_DEVPROP_OPERATOR_LESS_THAN = 4,
    NOK_DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
    NOK_DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
    NOK_DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 131074,
    NOK_DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 196610,
    NOK_DEVPROP_OPERATOR_BITWISE_AND = 7,
    NOK_DEVPROP_OPERATOR_BITWISE_OR = 8,
    NOK_DEVPROP_OPERATOR_BEGINS_WITH = 9,
    NOK_DEVPROP_OPERATOR_ENDS_WITH = 10,
    NOK_DEVPROP_OPERATOR_CONTAINS = 11,
    NOK_DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 131081,
    NOK_DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 131082,
    NOK_DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 131083,
    NOK_DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
    NOK_DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
    NOK_DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
    NOK_DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
    NOK_DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 135168,
    NOK_DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 139264,
    NOK_DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 143360,
    NOK_DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 147456,
    NOK_DEVPROP_OPERATOR_AND_OPEN = 1048576,
    NOK_DEVPROP_OPERATOR_AND_CLOSE = 2097152,
    NOK_DEVPROP_OPERATOR_OR_OPEN = 3145728,
    NOK_DEVPROP_OPERATOR_OR_CLOSE = 4194304,
    NOK_DEVPROP_OPERATOR_NOT_OPEN = 5242880,
    NOK_DEVPROP_OPERATOR_NOT_CLOSE = 6291456,
    NOK_DEVPROP_OPERATOR_ARRAY_CONTAINS = 268435456,
    NOK_DEVPROP_OPERATOR_MASK_EVAL = 4095,
    NOK_DEVPROP_OPERATOR_MASK_LIST = 61440,
    NOK_DEVPROP_OPERATOR_MASK_MODIFIER = 983040,
    NOK_DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
    NOK_DEVPROP_OPERATOR_MASK_LOGICAL = 267386880,
    NOK_DEVPROP_OPERATOR_MASK_ARRAY = -268435456
}NOK_DEVPROP_OPERATOR, * NOK_PDEVPROP_OPERATOR;
//0x270 bytes (sizeof)
typedef struct _NOK_SILO_USER_SHARED_DATA
{
    ULONG ServiceSessionId;                                                 //0x0
    ULONG ActiveConsoleId;                                                  //0x4
    LONGLONG ConsoleSessionForegroundProcessId;                             //0x8
    NOK_NT_PRODUCT_TYPE NtProductType;                                    //0x10
    ULONG SuiteMask;                                                        //0x14
    ULONG SharedUserSessionId;                                              //0x18
    UCHAR IsMultiSessionSku;                                                //0x1c
    WCHAR NtSystemRoot[260];                                                //0x1e
    USHORT UserModeGlobalLogger[16];                                        //0x226
    ULONG TimeZoneId;                                                       //0x248
    volatile LONG TimeZoneBiasStamp;                                        //0x24c
    NOK_KSYSTEM_TIME TimeZoneBias;                                      //0x250
    NOK_LARGE_INTEGER TimeZoneBiasEffectiveStart;                        //0x260
    NOK_LARGE_INTEGER TimeZoneBiasEffectiveEnd;                          //0x268
}NOK_SILO_USER_SHARED_DATA, * NOK_PSILO_USER_SHARED_DATA;
//0xb0 bytes (sizeof)
typedef struct _NOK_SECONDARY_IC_LIST_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG GsivBase;                                                         //0x10
    ULONG GsivSize;                                                         //0x14
    NOK_SECONDARY_INTERRUPT_PROVIDER_INTERFACE Interface;               //0x18
    volatile LONG BusyCount;                                                //0x70
    volatile LONG ExclusiveWaiterCount;                                     //0x74
    NOK_KEVENT NotificationEvent;                                       //0x78
    NOK_LIST_ENTRY SignalListEntry;                                     //0x90
    NOK_SECONDARY_INTERRUPT_LINE_STATE State[1];                        //0xa0
}NOK_SECONDARY_IC_LIST_ENTRY, * NOK_PSECONDARY_IC_LIST_ENTRY;
//0x108 bytes (sizeof)
typedef struct _NOK_DUMP_INITIALIZATION_CONTEXT
{
    ULONG Length;                                                           //0x0
    ULONG Reserved;                                                         //0x4
    VOID* MemoryBlock;                                                      //0x8
    VOID* CommonBuffer[2];                                                  //0x10
    NOK_LARGE_INTEGER PhysicalAddress[2];                                //0x20
    VOID (*StallRoutine)(ULONG arg1);                                       //0x30
    UCHAR (*OpenRoutine)(NOK_LARGE_INTEGER arg1);                        //0x38
    LONG (*WriteRoutine)(NOK_PLARGE_INTEGER arg1, NOK_PMDL arg2);    //0x40
    VOID (*FinishRoutine)();                                                //0x48
    NOK_PADAPTER_OBJECT AdapterObject;                                  //0x50
    VOID* MappedRegisterBase;                                               //0x58
    VOID* PortConfiguration;                                                //0x60
    UCHAR CrashDump;                                                        //0x68
    UCHAR MarkMemoryOnly;                                                   //0x69
    UCHAR HiberResume;                                                      //0x6a
    UCHAR Reserved1;                                                        //0x6b
    ULONG MaximumTransferSize;                                              //0x6c
    ULONG CommonBufferSize;                                                 //0x70
    VOID* TargetAddress;                                                    //0x78
    LONG (*WritePendingRoutine)(LONG arg1, NOK_PLARGE_INTEGER arg2, NOK_PMDL arg3, VOID* arg4); //0x80
    ULONG PartitionStyle;                                                   //0x88
    union
    {
        struct
        {
            ULONG Signature;                                                //0x8c
            ULONG CheckSum;                                                 //0x90
        } Mbr;                                                              //0x8c
        struct
        {
            NOK_GUID DiskId;                                            //0x8c
        } Gpt;                                                              //0x8c
    } DiskInfo;                                                             //0x8c
    LONG (*ReadRoutine)(LONG arg1, NOK_PLARGE_INTEGER arg2, NOK_PMDL arg3); //0xa0
    LONG (*GetDriveTelemetryRoutine)(ULONG arg1, ULONG arg2, VOID* arg3, ULONG arg4); //0xa8
    ULONG LogSectionTruncateSize;                                           //0xb0
    ULONG Parameters[16];                                                   //0xb4
    VOID (*GetTransferSizesRoutine)(ULONG* arg1, ULONG* arg2);              //0xf8
    VOID (*DumpNotifyRoutine)(NOK_DUMP_EVENTS arg1, VOID* arg2, ULONG arg3); //0x100
}NOK_DUMP_INITIALIZATION_CONTEXT, * NOK_PDUMP_INITIALIZATION_CONTEXT;
//0x60 bytes (sizeof)
typedef struct _NOK_ARBITER_LIST_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG AlternativeCount;                                                 //0x10
    NOK_PIO_RESOURCE_DESCRIPTOR Alternatives;                           //0x18
    NOK_PDEVICE_OBJECT PhysicalDeviceObject;                            //0x20
    NOK_ARBITER_REQUEST_SOURCE RequestSource;                             //0x28
    ULONG Flags;                                                            //0x2c
    LONGLONG WorkSpace;                                                     //0x30
    NOK_INTERFACE_TYPE InterfaceType;                                     //0x38
    ULONG SlotNumber;                                                       //0x3c
    ULONG BusNumber;                                                        //0x40
    NOK_PCM_PARTIAL_RESOURCE_DESCRIPTOR Assignment;                     //0x48
    NOK_PIO_RESOURCE_DESCRIPTOR SelectedAlternative;                    //0x50
    NOK_ARBITER_RESULT Result;                                            //0x58
}NOK_ARBITER_LIST_ENTRY, * NOK_PARBITER_LIST_ENTRY;
//0xd8 bytes (sizeof)
typedef struct _NOK_OPEN_PACKET
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    NOK_PFILE_OBJECT FileObject;                                        //0x8
    LONG FinalStatus;                                                       //0x10
    ULONGLONG Information;                                                  //0x18
    ULONG ParseCheck;                                                       //0x20
    union
    {
        NOK_PFILE_OBJECT RelatedFileObject;                             //0x28
        NOK_PDEVICE_OBJECT ReferencedDeviceObject;                      //0x28
    };
    NOK_POBJECT_ATTRIBUTES OriginalAttributes;                          //0x30
    NOK_LARGE_INTEGER AllocationSize;                                    //0x38
    ULONG CreateOptions;                                                    //0x40
    USHORT FileAttributes;                                                  //0x44
    USHORT ShareAccess;                                                     //0x46
    VOID* EaBuffer;                                                         //0x48
    ULONG EaLength;                                                         //0x50
    ULONG Options;                                                          //0x54
    ULONG Disposition;                                                      //0x58
    NOK_PFILE_BASIC_INFORMATION BasicInformation;                       //0x60
    NOK_PFILE_NETWORK_OPEN_INFORMATION NetworkInformation;              //0x68
    VOID* FileInformation;                                                  //0x70
    NOK_CREATE_FILE_TYPE CreateFileType;                                  //0x78
    VOID* MailslotOrPipeParameters;                                         //0x80
    UCHAR Override;                                                         //0x88
    UCHAR QueryOnly;                                                        //0x89
    UCHAR DeleteOnly;                                                       //0x8a
    UCHAR FullAttributes;                                                   //0x8b
    NOK_PDUMMY_FILE_OBJECT LocalFileObject;                             //0x90
    ULONG InternalFlags;                                                    //0x98
    CHAR AccessMode;                                                        //0x9c
    NOK_IO_DRIVER_CREATE_CONTEXT DriverCreateContext;                   //0xa0
    NOK_FILE_INFORMATION_CLASS FileInformationClass;                      //0xc8
    ULONG FileInformationLength;                                            //0xcc
    UCHAR FilterQuery;                                                      //0xd0
}NOK_OPEN_PACKET, * NOK_POPEN_PACKET;
//0x88 bytes (sizeof)
typedef struct _NOK_HALP_DMA_DOMAIN_OBJECT
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_LARGE_INTEGER MaximumPhysicalAddress;                            //0x10
    NOK_LARGE_INTEGER BoundaryAddressMultiple;                           //0x18
    UCHAR CacheCoherent;                                                    //0x20
    UCHAR FirmwareReserved;                                                 //0x21
    VOID* IommuDomainPointer;                                               //0x28
    VOID* LaState;                                                          //0x30
    ULONGLONG LaStateLock;                                                  //0x38
    NOK_EXT_IOMMU_TRANSLATION_TYPE TranslationType;                       //0x40
    NOK_PADAPTER_OBJECT OwningAdapter;                                  //0x48
    NOK_RTL_RB_TREE CommonBufferRoot;                                   //0x50
    ULONGLONG CommonBufferTreeLock;                                         //0x60
    NOK_LIST_ENTRY VectorCommonBufferListHead;                          //0x68
    ULONGLONG VectorCommonBufferLock;                                       //0x78
    ULONG DomainRefCount;                                                   //0x80
}NOK_HALP_DMA_DOMAIN_OBJECT, * NOK_PHALP_DMA_DOMAIN_OBJECT;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_GUID_TYPE
{
    NOK_EtwTraceGuidType = 0,
    NOK_EtwNotificationGuidType = 1,
    NOK_EtwGroupGuidType = 2,
    NOK_EtwGuidTypeMax = 3
}NOK_ETW_GUID_TYPE, * NOK_PETW_GUID_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_HEADER_TYPE
{
    NOK_EtwHeaderTypeNative = 0,
    NOK_EtwHeaderTypeWow = 1,
    NOK_EtwHeaderTypeMax = 2
}NOK_ETW_HEADER_TYPE, * NOK_PETW_HEADER_TYPE;
//0x48 bytes (sizeof)
typedef struct _NOK_ETWP_NOTIFICATION_HEADER
{
    NOK_ETW_NOTIFICATION_TYPE NotificationType;                           //0x0
    ULONG NotificationSize;                                                 //0x4
    LONG RefCount;                                                          //0x8
    UCHAR ReplyRequested;                                                   //0xc
    union
    {
        ULONG ReplyIndex;                                                   //0x10
        ULONG Timeout;                                                      //0x10
    };
    union
    {
        ULONG ReplyCount;                                                   //0x14
        ULONG NotifyeeCount;                                                //0x14
    };
    union
    {
        ULONGLONG ReplyHandle;                                              //0x18
        VOID* ReplyObject;                                                  //0x18
        ULONG RegIndex;                                                     //0x18
    };
    ULONG TargetPID;                                                        //0x20
    ULONG SourcePID;                                                        //0x24
    NOK_GUID DestinationGuid;                                           //0x28
    NOK_GUID SourceGuid;                                                //0x38
}NOK_ETWP_NOTIFICATION_HEADER, * NOK_PETWP_NOTIFICATION_HEADER;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_PERFECT_HASH_FUNCTION_TYPE
{
    NOK_ETW_PHF_EVENT_ID = 0,
    NOK_ETW_PHF_STACK_WALK = 1,
    NOK_ETW_PHF_MAX_COUNT = 2
}NOK_ETW_PERFECT_HASH_FUNCTION_TYPE, * NOK_PETW_PERFECT_HASH_FUNCTION_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_RT_EVENT_LOSS
{
    NOK_EtwRtEventNoLoss = 0,
    NOK_EtwRtEventLost = 1,
    NOK_EtwRtBufferLost = 2,
    NOK_EtwRtBackupLost = 3,
    NOK_EtwRtEventLossMax = 4
}NOK_ETW_RT_EVENT_LOSS, * NOK_PETW_RT_EVENT_LOSS;
//0x5c0 bytes (sizeof)
typedef struct _NOK_KPROCESSOR_STATE
{
    NOK_KSPECIAL_REGISTERS SpecialRegisters;                            //0x0
    NOK_CONTEXT ContextFrame;                                           //0xf0
}NOK_KPROCESSOR_STATE, * NOK_PKPROCESSOR_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_ETW_STRING_TOKEN_TYPE
{
    NOK_ETW_STRING_TOKEN_EXE = 0,
    NOK_ETW_STRING_TOKEN_PACKAGE_ID = 1,
    NOK_ETW_STRING_TOKEN_PKG_APP_ID = 2,
    NOK_ETW_STRING_TOKEN_CONTAINER = 3,
    NOK_ETW_STRING_TOKEN_MAX_COUNT = 4
}NOK_ETW_STRING_TOKEN_TYPE, * NOK_PETW_STRING_TOKEN_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_EVENT_INFO_CLASS
{
    NOK_EventProviderBinaryTrackInfo = 0,
    NOK_EventProviderSetReserved1 = 1,
    NOK_EventProviderSetTraits = 2,
    NOK_EventProviderUseDescriptorType = 3,
    NOK_MaxEventInfo = 4
}NOK_EVENT_INFO_CLASS, * NOK_PEVENT_INFO_CLASS;
//0x4 bytes (sizeof)
typedef enum _NOK_EVENT_TYPE
{
    NOK_NotificationEvent = 0,
    NOK_SynchronizationEvent = 1
}NOK_EVENT_TYPE, * NOK_PEVENT_TYPE;
//0x10 bytes (sizeof)
typedef struct _NOK_EXCEPTION_REGISTRATION_RECORD
{
    NOK_PEXCEPTION_REGISTRATION_RECORD Next;                            //0x0
    NOK_EXCEPTION_DISPOSITION (*Handler)(NOK_PEXCEPTION_RECORD arg1, VOID* arg2, NOK_PCONTEXT arg3, VOID* arg4); //0x8
}NOK_EXCEPTION_REGISTRATION_RECORD, * NOK_PEXCEPTION_REGISTRATION_RECORD;
//0x20 bytes (sizeof)
typedef struct _NOK_EX_PARTITION
{
    NOK_PEPARTITION PartitionObject;                                    //0x0
    NOK_PEX_WORK_QUEUE* volatile* WorkQueues;                           //0x8
    NOK_EX_WORK_QUEUE_MANAGER** WorkQueueManagers;                      //0x10
    volatile LONG QueueAllocationMask;                                      //0x18
}NOK_EX_PARTITION, * NOK_PEX_PARTITION;
//0x4 bytes (sizeof)
typedef enum _NOK_HALP_DMA_ADAPTER_ALLOCATION_STATE
{
    NOK_HalpDmaAdapterAllocationStateNone = 0,
    NOK_HalpDmaAdapterAllocateChannel = 1,
    NOK_HalpDmaAdapterAllocateMapRegisters = 2,
    NOK_HalpDmaAdapterAllocateChannelRemapResources = 3,
    NOK_HalpDmaAdapterAllocationStateComplete = 4,
    NOK_HalpDmaAdapterAllocationStateMax = 5
}NOK_HALP_DMA_ADAPTER_ALLOCATION_STATE, * NOK_PHALP_DMA_ADAPTER_ALLOCATION_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_EX_GEN_RANDOM_DOMAIN
{
    NOK_ExGenRandomDomainKernel = 0,
    NOK_ExGenRandomDomainFirst = 0,
    NOK_ExGenRandomDomainUserVisible = 1,
    NOK_ExGenRandomDomainMax = 2
}NOK_EX_GEN_RANDOM_DOMAIN, * NOK_PEX_GEN_RANDOM_DOMAIN;
//0x4 bytes (sizeof)
typedef enum _NOK_EX_HEAP_TYPE
{
    NOK_ExHeapTypeNonPagedMin = 0,
    NOK_ExHeapTypeNonPaged = 0,
    NOK_ExHeapTypeNonPagedMax = 1,
    NOK_ExHeapTypeNonPagedNx = 1,
    NOK_ExHeapTypePagedMin = 2,
    NOK_ExHeapTypePaged = 2,
    NOK_ExHeapTypePagedMax = 3,
    NOK_ExHeapTypeMmSt = 3,
    NOK_ExHeapTypeMax = 4,
    NOK_ExHeapTypeSpecialMax = 4
}NOK_EX_HEAP_TYPE, * NOK_PEX_HEAP_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_EX_POOL_PRIORITY
{
    NOK_LowPoolPriority = 0,
    NOK_LowPoolPrioritySpecialPoolOverrun = 8,
    NOK_LowPoolPrioritySpecialPoolUnderrun = 9,
    NOK_NormalPoolPriority = 16,
    NOK_NormalPoolPrioritySpecialPoolOverrun = 24,
    NOK_NormalPoolPrioritySpecialPoolUnderrun = 25,
    NOK_HighPoolPriority = 32,
    NOK_HighPoolPrioritySpecialPoolOverrun = 40,
    NOK_HighPoolPrioritySpecialPoolUnderrun = 41
}NOK_EX_POOL_PRIORITY, * NOK_PEX_POOL_PRIORITY;
//0x4 bytes (sizeof)
typedef enum _NOK_FAULT_INFORMATION_ARM64_TYPE
{
    NOK_UnsupportedUpstreamTransaction = 0,
    NOK_AddressSizeFault = 1,
    NOK_TlbMatchConflict = 2,
    NOK_ExternalFault = 3,
    NOK_PermissionFault = 4,
    NOK_AccessFlagFault = 5,
    NOK_TranslationFault = 6,
    NOK_MaxFaultType = 7
}NOK_FAULT_INFORMATION_ARM64_TYPE, * NOK_PFAULT_INFORMATION_ARM64_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_FSINFOCLASS
{
    NOK_FileFsVolumeInformation = 1,
    NOK_FileFsLabelInformation = 2,
    NOK_FileFsSizeInformation = 3,
    NOK_FileFsDeviceInformation = 4,
    NOK_FileFsAttributeInformation = 5,
    NOK_FileFsControlInformation = 6,
    NOK_FileFsFullSizeInformation = 7,
    NOK_FileFsObjectIdInformation = 8,
    NOK_FileFsDriverPathInformation = 9,
    NOK_FileFsVolumeFlagsInformation = 10,
    NOK_FileFsSectorSizeInformation = 11,
    NOK_FileFsDataCopyInformation = 12,
    NOK_FileFsMetadataSizeInformation = 13,
    NOK_FileFsFullSizeInformationEx = 14,
    NOK_FileFsMaximumInformation = 15
}NOK_FSINFOCLASS, * NOK_PFSINFOCLASS;
//0x4 bytes (sizeof)
typedef enum _NOK_FILE_OBJECT_EXTENSION_TYPE
{
    NOK_FoExtTypeTransactionParams = 0,
    NOK_FoExtTypeInternal = 1,
    NOK_FoExtTypeIosbRange = 2,
    NOK_FoExtTypeGeneric = 3,
    NOK_FoExtTypeSfio = 4,
    NOK_FoExtTypeSymlink = 5,
    NOK_FoExtTypeOplockKey = 6,
    NOK_FoExtTypeSilo = 7,
    NOK_FoExtTypeMemoryPartitionInfo = 8,
    NOK_MaxFoExtTypes = 9
}NOK_FILE_OBJECT_EXTENSION_TYPE, * NOK_PFILE_OBJECT_EXTENSION_TYPE;
//0x28 bytes (sizeof)
typedef union _NOK_FS_FILTER_PARAMETERS
{
    struct
    {
        NOK_PLARGE_INTEGER EndingOffset;                                 //0x0
        NOK_PERESOURCE* ResourceToRelease;                              //0x8
    } AcquireForModifiedPageWriter;                                         //0x0
    struct
    {
        NOK_PERESOURCE ResourceToRelease;                               //0x0
    } ReleaseForModifiedPageWriter;                                         //0x0
    struct
    {
        NOK_FS_FILTER_SECTION_SYNC_TYPE SyncType;                         //0x0
        ULONG PageProtection;                                               //0x4
        NOK_PFS_FILTER_SECTION_SYNC_OUTPUT OutputInformation;           //0x8
        ULONG Flags;                                                        //0x10
    } AcquireForSectionSynchronization;                                     //0x0
    struct
    {
        NOK_PIRP Irp;                                                   //0x0
        VOID* FileInformation;                                              //0x8
        ULONG* Length;                                                      //0x10
        NOK_FILE_INFORMATION_CLASS FileInformationClass;                  //0x18
        LONG CompletionStatus;                                              //0x1c
    } QueryOpen;                                                            //0x0
    struct
    {
        VOID* Argument1;                                                    //0x0
        VOID* Argument2;                                                    //0x8
        VOID* Argument3;                                                    //0x10
        VOID* Argument4;                                                    //0x18
        VOID* Argument5;                                                    //0x20
    } Others;                                                               //0x0
}NOK_FS_FILTER_PARAMETERS, * NOK_PFS_FILTER_PARAMETERS;
//0x178 bytes (sizeof)
typedef struct _NOK_DUMP_STACK_CONTEXT
{
    NOK_DUMP_INITIALIZATION_CONTEXT Init;                               //0x0
    NOK_LARGE_INTEGER PartitionOffset;                                   //0x108
    union
    {
        VOID* DumpPointers;                                                 //0x110
        VOID* StorageInfo;                                                  //0x110
    };
    UCHAR UseStorageInfo;                                                   //0x118
    ULONG PointersLength;                                                   //0x11c
    WCHAR* ModulePrefix;                                                    //0x120
    NOK_LIST_ENTRY DriverList;                                          //0x128
    NOK_STRING InitMsg;                                                 //0x138
    NOK_STRING ProgMsg;                                                 //0x148
    NOK_STRING DoneMsg;                                                 //0x158
    VOID* FileObject;                                                       //0x168
    NOK_DEVICE_USAGE_NOTIFICATION_TYPE UsageType;                         //0x170
}NOK_DUMP_STACK_CONTEXT, * NOK_PDUMP_STACK_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_GPIO_PIN_IORESTRICTION_TYPE
{
    NOK_IoRestrictionNone = 0,
    NOK_IoRestrictionInputOnly = 1,
    NOK_IoRestrictionOutputOnly = 2,
    NOK_IoRestrictionNoneAndPreserve = 3
}NOK_GPIO_PIN_IORESTRICTION_TYPE, * NOK_PGPIO_PIN_IORESTRICTION_TYPE;
//0x48 bytes (sizeof)
typedef struct _NOK_WMI_BUFFER_HEADER
{
    ULONG BufferSize;                                                       //0x0
    ULONG SavedOffset;                                                      //0x4
    volatile ULONG CurrentOffset;                                           //0x8
    volatile LONG ReferenceCount;                                           //0xc
    NOK_LARGE_INTEGER TimeStamp;                                         //0x10
    LONGLONG SequenceNumber;                                                //0x18
    union
    {
        struct
        {
            ULONGLONG ClockType:3;                                          //0x20
            ULONGLONG Frequency:61;                                         //0x20
        };
        NOK_SINGLE_LIST_ENTRY SlistEntry;                               //0x20
        NOK_PWMI_BUFFER_HEADER NextBuffer;                              //0x20
    };
    NOK_ETW_BUFFER_CONTEXT ClientContext;                               //0x28
    NOK_ETW_BUFFER_STATE State;                                           //0x2c
    ULONG Offset;                                                           //0x30
    USHORT BufferFlag;                                                      //0x34
    USHORT BufferType;                                                      //0x36
    union
    {
        ULONG Padding1[4];                                                  //0x38
        NOK_ETW_REF_CLOCK ReferenceTime;                                //0x38
        NOK_LIST_ENTRY GlobalEntry;                                     //0x38
        struct
        {
            VOID* Pointer0;                                                 //0x38
            VOID* Pointer1;                                                 //0x40
        };
    };
}NOK_WMI_BUFFER_HEADER, * NOK_PWMI_BUFFER_HEADER;
//0x88 bytes (sizeof)
typedef struct _NOK_DYNAMIC_FUNCTION_TABLE
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PIMAGE_RUNTIME_FUNCTION_ENTRY FunctionTable;                    //0x10
    NOK_LARGE_INTEGER TimeStamp;                                         //0x18
    ULONGLONG MinimumAddress;                                               //0x20
    ULONGLONG MaximumAddress;                                               //0x28
    ULONGLONG BaseAddress;                                                  //0x30
    NOK_PIMAGE_RUNTIME_FUNCTION_ENTRY (*Callback)(ULONGLONG arg1, VOID* arg2); //0x38
    VOID* Context;                                                          //0x40
    WCHAR* OutOfProcessCallbackDll;                                         //0x48
    NOK_FUNCTION_TABLE_TYPE Type;                                         //0x50
    ULONG EntryCount;                                                       //0x54
    NOK_RTL_BALANCED_NODE TreeNodeMin;                                  //0x58
    NOK_RTL_BALANCED_NODE TreeNodeMax;                                  //0x70
}NOK_DYNAMIC_FUNCTION_TABLE, * NOK_PDYNAMIC_FUNCTION_TABLE;
//0x4 bytes (sizeof)
typedef enum _NOK_HALP_DMA_MAP_BUFFER_TYPE
{
    NOK_HalpDmaContiguousMapBuffer = 0,
    NOK_HalpDmaNonContiguousMapBuffer = 1,
    NOK_HalpDmaMaximumMapBufferType = 2
}NOK_HALP_DMA_MAP_BUFFER_TYPE, * NOK_PHALP_DMA_MAP_BUFFER_TYPE;
//0x18 bytes (sizeof)
typedef struct _NOK_HALP_EMERGENCY_LA_QUEUE_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_HALP_EMERGENCY_LA_QUEUE_TYPE EntryType;                           //0x10
}NOK_HALP_EMERGENCY_LA_QUEUE_ENTRY, * NOK_PHALP_EMERGENCY_LA_QUEUE_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_HAL_PROCESSOR_STAT_TYPE
{
    NOK_HalProcessorStatResidency = 0,
    NOK_HalProcessorStatCount = 1,
    NOK_HalProcessorStatMax = 2
}NOK_HAL_PROCESSOR_STAT_TYPE, * NOK_PHAL_PROCESSOR_STAT_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_HAL_DMA_CRASH_DUMP_REGISTER_TYPE
{
    NOK_HalDmaCrashDumpRegisterSet1 = 0,
    NOK_HalDmaCrashDumpRegisterSet2 = 1,
    NOK_HalDmaCrashDumpRegisterSetMax = 2
}NOK_HAL_DMA_CRASH_DUMP_REGISTER_TYPE, * NOK_PHAL_DMA_CRASH_DUMP_REGISTER_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_HAL_INIT_PHASE
{
    NOK_HalInitPhaseBspProcEarly = 0,
    NOK_HalInitPhaseBspProcEarlyMmReady = 1,
    NOK_HalInitPhaseBspProcEarlyTimerReady = 2,
    NOK_HalInitPhaseBspProcEarlyEnd = 3,
    NOK_HalInitPhasePnProcEarly = 4,
    NOK_HalInitPhasePnProcEarlyInterruptsReady = 5,
    NOK_HalInitPhasePnProcEarlyEnd = 6,
    NOK_HalInitPhaseBspSystemEarly = 7,
    NOK_HalInitPhaseBspSystemEarlyAcpiReady = 8,
    NOK_HalInitPhaseBspSystemEarlyHalExtensionsReady = 9,
    NOK_HalInitPhaseBspSystemEarlyInterruptsAlmostReady = 10,
    NOK_HalInitPhaseBspSystemEarlyIommusReady = 11,
    NOK_HalInitPhaseBspSystemEarlyInterruptsReady = 12,
    NOK_HalInitPhaseBspSystemEarlyDmaReady = 12,
    NOK_HalInitPhaseBspSystemEarlyProcReady = 13,
    NOK_HalInitPhaseBspSystemEarlyHwPerfCntReady = 14,
    NOK_HalInitPhaseBspSystemEarlyAllocationDone = 15,
    NOK_HalInitPhaseBspSystemEarlyEnd = 16,
    NOK_HalInitPhaseBspSystemLate = 17,
    NOK_HalInitPhaseBspSystemLateEnd = 18,
    NOK_HalInitPhasePnSystemLate = 19,
    NOK_HalInitPhasePnSystemLateEnd = 20,
    NOK_HalInitPhaseAllProcStartComplete = 21,
    NOK_HalInitPhaseAllProcStartCompleteEnd = 22,
    NOK_HalInitPhaseExPhase1Ready = 23,
    NOK_HalInitPhaseExPhase1ReadyEnd = 24,
    NOK_HalInitPhaseAcpiPdoStarted = 25,
    NOK_HalInitPhaseAcpiPdoStartedEnd = 26,
    NOK_HalInitPhaseReportResources = 27,
    NOK_HalInitPhaseReportResourcesEnd = 28,
    NOK_HalInitPhaseReportCoreSystemResources = 29,
    NOK_HalInitPhaseReportCoreSystemResourcesEnd = 30,
    NOK_HalInitPhaseLateSystemActions = 31,
    NOK_HalInitPhaseLateSystemActionsTelemetryReady = 32,
    NOK_HalInitPhaseLateSystemActionsEnd = 33
}NOK_HAL_INIT_PHASE, * NOK_PHAL_INIT_PHASE;
//0x60 bytes (sizeof)
typedef struct _NOK_INTERRUPT_CONNECTION_DATA
{
    ULONG Count;                                                            //0x0
    NOK_INTERRUPT_VECTOR_DATA Vectors[1];                               //0x8
}NOK_INTERRUPT_CONNECTION_DATA, * NOK_PINTERRUPT_CONNECTION_DATA;
//0x1c0 bytes (sizeof)
typedef struct _NOK_THREAD_PERFORMANCE_DATA
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    NOK_PROCESSOR_NUMBER ProcessorNumber;                               //0x4
    ULONG ContextSwitches;                                                  //0x8
    ULONG HwCountersCount;                                                  //0xc
    volatile ULONGLONG UpdateCount;                                         //0x10
    ULONGLONG WaitReasonBitMap;                                             //0x18
    ULONGLONG HardwareCounters;                                             //0x20
    NOK_COUNTER_READING CycleTime;                                      //0x28
    NOK_COUNTER_READING HwCounters[16];                                 //0x40
}NOK_THREAD_PERFORMANCE_DATA, * NOK_PTHREAD_PERFORMANCE_DATA;
//0x38d0 bytes (sizeof)
typedef struct _NOK_RTLP_HP_HEAP_MANAGER
{
    NOK_PRTLP_HP_HEAP_GLOBALS Globals;                                  //0x0
    NOK_RTLP_HP_ALLOC_TRACKER AllocTracker;                             //0x8
    NOK_HEAP_VAMGR_CTX VaMgr;                                           //0x58
    NOK_RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];                     //0x3898
    NOK_RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;                   //0x38c8
}NOK_RTLP_HP_HEAP_MANAGER, * NOK_PRTLP_HP_HEAP_MANAGER;
//0x38 bytes (sizeof)
typedef struct _NOK_RTLP_HP_HEAP_GLOBALS
{
    ULONGLONG HeapKey;                                                      //0x0
    ULONGLONG LfhKey;                                                       //0x8
    NOK_HEAP_FAILURE_INFORMATION* FailureInfo;                          //0x10
    NOK_RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;                     //0x18
}NOK_RTLP_HP_HEAP_GLOBALS, * NOK_PRTLP_HP_HEAP_GLOBALS;
//0x4 bytes (sizeof)
typedef enum _NOK_HEAP_LFH_LOCKMODE
{
    NOK_HeapLockNotHeld = 0,
    NOK_HeapLockShared = 1,
    NOK_HeapLockExclusive = 2
}NOK_HEAP_LFH_LOCKMODE, * NOK_PHEAP_LFH_LOCKMODE;
//0x4 bytes (sizeof)
typedef enum _NOK_HEAP_SEGMGR_LARGE_PAGE_POLICY
{
    NOK_HeapSegMgrNoLargePages = 0,
    NOK_HeapSegMgrEnableLargePages = 1,
    NOK_HeapSegMgrNormalPolicy = 1,
    NOK_HeapSegMgrForceSmall = 2,
    NOK_HeapSegMgrForceLarge = 3,
    NOK_HeapSegMgrForceRandom = 4,
    NOK_HeapSegMgrLargePagePolicyMax = 5
}NOK_HEAP_SEGMGR_LARGE_PAGE_POLICY, * NOK_PHEAP_SEGMGR_LARGE_PAGE_POLICY;
//0x4 bytes (sizeof)
typedef enum _NOK_HV_EXT_EPF_MODE
{
    NOK_HvExtEpfModeMin = 0,
    NOK_HvExtEpfModeNt = 0,
    NOK_HvExtEpfModeMax = 1
}NOK_HV_EXT_EPF_MODE, * NOK_PHV_EXT_EPF_MODE;
//0x280 bytes (sizeof)
typedef struct _NOK_ADAPTER_OBJECT
{
    NOK_HALP_DMA_ADAPTER_OBJECT AdapterObject;                          //0x0
    NOK_PHALP_DMA_MASTER_ADAPTER_OBJECT MasterAdapter;                  //0x98
    NOK_LIST_ENTRY WaitQueueEntry;                                      //0xa0
    union
    {
        NOK_KDEVICE_QUEUE ChannelWaitQueue;                             //0xb0
        struct
        {
            ULONGLONG ResourceWaitLock;                                     //0xb0
            NOK_LIST_ENTRY ResourceWaitQueue;                           //0xb8
            NOK_LIST_ENTRY ChannelResourceWaitQueue;                    //0xc8
        };
    };
    UCHAR ResourceQueueBusy;                                                //0xd8
    ULONG MapRegistersPerChannel;                                           //0xe0
    VOID* MapRegisterBase;                                                  //0xe8
    ULONG NumberOfMapRegisters;                                             //0xf0
    ULONG MaxTransferLength;                                                //0xf4
    VOID* CrashDumpRegisterBase[2];                                         //0xf8
    ULONG NumberOfCrashDumpRegisters[2];                                    //0x108
    ULONG CrashDumpRegisterRefCount[2];                                     //0x110
    NOK_LIST_ENTRY AdapterCrashDumpList;                                //0x118
    NOK_PMDL MapRegisterMdl;                                            //0x128
    ULONGLONG MapRegisterMdlLock;                                           //0x130
    NOK_EX_PUSH_LOCK ExpiredLock;                                       //0x138
    VOID* AllocationHandle;                                                 //0x140
    VOID* VirtualAddress;                                                   //0x148
    UCHAR IsAllocationMdlBased;                                             //0x150
    UCHAR NoLocalPool;                                                      //0x151
    UCHAR ExpiredFlag;                                                      //0x152
    NOK_PWAIT_CONTEXT_BLOCK CurrentWcb;                                 //0x158
    NOK_PDMA_TRANSFER_CONTEXT CurrentTransferContext;                   //0x160
    NOK_PHALP_DMA_CONTROLLER DmaController;                             //0x168
    ULONG Controller;                                                       //0x170
    ULONG ChannelNumber;                                                    //0x174
    ULONG RequestLine;                                                      //0x178
    ULONG RequestedChannelCount;                                            //0x17c
    ULONG AllocatedChannelCount;                                            //0x180
    ULONG AllocatedChannels[8];                                             //0x184
    VOID* ChannelAdapter;                                                   //0x1a8
    UCHAR NeedsMapRegisters;                                                //0x1b0
    UCHAR MasterDevice;                                                     //0x1b1
    UCHAR ScatterGather;                                                    //0x1b2
    UCHAR AutoInitialize;                                                   //0x1b3
    UCHAR IgnoreCount;                                                      //0x1b4
    UCHAR CacheCoherent;                                                    //0x1b5
    union
    {
        struct
        {
            UCHAR Dma32BitAddresses;                                        //0x1b8
            UCHAR Dma64BitAddresses;                                        //0x1b9
        };
        ULONG DmaAddressWidth;                                              //0x1b8
    };
    NOK_DMA_WIDTH DmaPortWidth;                                           //0x1bc
    NOK_LARGE_INTEGER DeviceAddress;                                     //0x1c0
    NOK_LIST_ENTRY AdapterList;                                         //0x1c8
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x1d8
    NOK_PHALP_DMA_DOMAIN_OBJECT DomainPointer;                          //0x1f8
    NOK_EXT_IOMMU_TRANSLATION_TYPE TranslationType;                       //0x200
    UCHAR AdapterInUse;                                                     //0x204
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x208
    NOK_PEXT_IOMMU_DEVICE_ID DeviceId;                                  //0x210
    VOID* IommuDevice;                                                      //0x218
    NOK_PMDL ScatterGatherMdl;                                          //0x220
    ULONGLONG LowMemoryLogicalAddressBase;                                  //0x228
    ULONGLONG LowMemoryLogicalAddressQueueLock;                             //0x230
    NOK_LIST_ENTRY LowMemoryLogicalAddressQueue;                        //0x238
    UCHAR LowMemoryLogicalAddressQueueInUse;                                //0x248
    NOK_HALP_EMERGENCY_LA_QUEUE_ENTRY LowMemoryLogicalAddressQueueEntry; //0x250
    NOK_HALP_DMA_ADAPTER_ALLOCATION_STATE AllocationState;                //0x268
    ULONG ScatterGatherBufferLength;                                        //0x26c
    NOK_SCATTER_GATHER_LIST ScatterGatherBuffer;                        //0x270
}NOK_ADAPTER_OBJECT, * NOK_PADAPTER_OBJECT;
//0x4 bytes (sizeof)
typedef enum _NOK_INTERLOCKED_RESULT
{
    NOK_ResultNegative = 1,
    NOK_ResultZero = 0,
    NOK_ResultPositive = 2
}NOK_INTERLOCKED_RESULT, * NOK_PINTERLOCKED_RESULT;
//0x4 bytes (sizeof)
typedef enum _NOK_KNOWN_CONTROLLER_TYPE
{
    NOK_InterruptControllerInvalid = 0,
    NOK_InterruptControllerPic = 1,
    NOK_InterruptControllerApic = 2,
    NOK_InterruptControllerGic = 3,
    NOK_InterruptControllerGicV3 = 4,
    NOK_InterruptControllerGicV4 = 5,
    NOK_InterruptControllerBcm = 6,
    NOK_InterruptControllerUnknown = 4096
}NOK_KNOWN_CONTROLLER_TYPE, * NOK_PKNOWN_CONTROLLER_TYPE;
//0x38 bytes (sizeof)
typedef struct _NOK_INTERRUPT_LINE_STATE
{
    NOK_KINTERRUPT_POLARITY Polarity;                                     //0x0
    UCHAR EmulateActiveBoth;                                                //0x4
    NOK_KINTERRUPT_MODE TriggerMode;                                      //0x8
    ULONG Flags;                                                            //0xc
    NOK_INTERRUPT_LINE Routing;                                         //0x10
    NOK_INTERRUPT_TARGET ProcessorTarget;                               //0x18
    ULONG Vector;                                                           //0x30
    ULONG Priority;                                                         //0x34
}NOK_INTERRUPT_LINE_STATE, * NOK_PINTERRUPT_LINE_STATE;
//0xb8 bytes (sizeof)
typedef struct _NOK_INTERRUPT_FUNCTION_TABLE
{
    LONG (*InitializeLocalUnit)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG* arg6); //0x0
    LONG (*InitializeIoUnit)(VOID* arg1);                                   //0x8
    VOID (*SetPriority)(VOID* arg1, ULONG arg2);                            //0x10
    ULONG (*GetLocalUnitError)(VOID* arg1);                                 //0x18
    VOID (*ClearLocalUnitError)(VOID* arg1);                                //0x20
    LONG (*GetLogicalId)(VOID* arg1, NOK_PINTERRUPT_TARGET arg2);       //0x28
    LONG (*SetLogicalId)(VOID* arg1, NOK_PINTERRUPT_TARGET arg2);       //0x30
    NOK_INTERRUPT_RESULT (*AcceptAndGetSource)(VOID* arg1, LONG* arg2, ULONG* arg3); //0x38
    VOID (*EndOfInterrupt)(VOID* arg1);                                     //0x40
    VOID (*FastEndOfInterrupt)();                                           //0x48
    LONG (*SetLineState)(VOID* arg1, NOK_PINTERRUPT_LINE arg2, NOK_INTERRUPT_LINE_STATE* arg3); //0x50
    LONG (*RequestInterrupt)(VOID* arg1, NOK_PINTERRUPT_LINE arg2, NOK_PINTERRUPT_TARGET arg3, ULONG arg4, NOK_PINTERRUPT_LINE arg5); //0x58
    LONG (*StartProcessor)(VOID* arg1, ULONG arg2, VOID* arg3, ULONG arg4); //0x60
    LONG (*GenerateMessage)(VOID* arg1, NOK_INTERRUPT_LINE_STATE* arg2, ULONGLONG* arg3, ULONGLONG* arg4); //0x68
    LONG (*ConvertId)(VOID* arg1, ULONG* arg2, NOK_PINTERRUPT_TARGET arg3, UCHAR arg4); //0x70
    LONG (*SaveLocalInterrupts)(VOID* arg1, VOID* arg2);                    //0x78
    LONG (*ReplayLocalInterrupts)(VOID* arg1, VOID* arg2);                  //0x80
    LONG (*DeinitializeLocalUnit)(VOID* arg1);                              //0x88
    LONG (*DeinitializeIoUnit)(VOID* arg1);                                 //0x90
    NOK_INTERRUPT_RESULT (*QueryAndGetSource)(VOID* arg1, LONG* arg2, ULONG* arg3, UCHAR* arg4); //0x98
    VOID (*DeactivateInterrupt)(VOID* arg1, ULONG arg2);                    //0xa0
    VOID (*DirectedEndOfInterrupt)(VOID* arg1, ULONG arg2, ULONG arg3);     //0xa8
    LONG (*QueryLocalUnitInfo)(VOID* arg1, ULONG arg2, ULONG* arg3, ULONG* arg4, NOK_PKINTERRUPT_MODE arg5, NOK_PKINTERRUPT_MODE arg6); //0xb0
}NOK_INTERRUPT_FUNCTION_TABLE, * NOK_PINTERRUPT_FUNCTION_TABLE;
//0x4 bytes (sizeof)
typedef enum _NOK_INVPCID_TYPE
{
    NOK_InvpcidIndividualAddress = 0,
    NOK_InvpcidSingleContext = 1,
    NOK_InvpcidAllContextAndGlobals = 2,
    NOK_InvpcidAllContext = 3
}NOK_INVPCID_TYPE, * NOK_PINVPCID_TYPE;
//0x58 bytes (sizeof)
typedef struct _NOK_IOP_FILE_OBJECT_EXTENSION
{
    ULONG FoExtFlags;                                                       //0x0
    VOID* FoExtPerTypeExtension[9];                                         //0x8
    NOK_IOP_PRIORITY_HINT FoIoPriorityHint;                               //0x50
}NOK_IOP_FILE_OBJECT_EXTENSION, * NOK_PIOP_FILE_OBJECT_EXTENSION;
//0x4 bytes (sizeof)
typedef enum _NOK_MEMORY_CACHING_TYPE
{
    NOK_MmNonCached = 0,
    NOK_MmCached = 1,
    NOK_MmWriteCombined = 2,
    NOK_MmHardwareCoherentCached = 3,
    NOK_MmNonCachedUnordered = 4,
    NOK_MmUSWCCached = 5,
    NOK_MmMaximumCacheType = 6,
    NOK_MmNotMapped = -1
}NOK_MEMORY_CACHING_TYPE, * NOK_PMEMORY_CACHING_TYPE;
//0x40 bytes (sizeof)
typedef struct _NOK_DEVICE_DESCRIPTION
{
    ULONG Version;                                                          //0x0
    UCHAR Master;                                                           //0x4
    UCHAR ScatterGather;                                                    //0x5
    UCHAR DemandMode;                                                       //0x6
    UCHAR AutoInitialize;                                                   //0x7
    UCHAR Dma32BitAddresses;                                                //0x8
    UCHAR IgnoreCount;                                                      //0x9
    UCHAR Reserved1;                                                        //0xa
    UCHAR Dma64BitAddresses;                                                //0xb
    ULONG BusNumber;                                                        //0xc
    ULONG DmaChannel;                                                       //0x10
    NOK_INTERFACE_TYPE InterfaceType;                                     //0x14
    NOK_DMA_WIDTH DmaWidth;                                               //0x18
    NOK_DMA_SPEED DmaSpeed;                                               //0x1c
    ULONG MaximumLength;                                                    //0x20
    ULONG DmaPort;                                                          //0x24
    ULONG DmaAddressWidth;                                                  //0x28
    ULONG DmaControllerInstance;                                            //0x2c
    ULONG DmaRequestLine;                                                   //0x30
    NOK_LARGE_INTEGER DeviceAddress;                                     //0x38
}NOK_DEVICE_DESCRIPTION, * NOK_PDEVICE_DESCRIPTION;
//0x4 bytes (sizeof)
typedef enum _NOK_IO_RATE_CONTROL_TYPE
{
    NOK_IoRateControlTypeCapMin = 0,
    NOK_IoRateControlTypeIopsCap = 0,
    NOK_IoRateControlTypeBandwidthCap = 1,
    NOK_IoRateControlTypeTimePercentCap = 2,
    NOK_IoRateControlTypeCapMax = 2,
    NOK_IoRateControlTypeReservationMin = 3,
    NOK_IoRateControlTypeIopsReservation = 3,
    NOK_IoRateControlTypeBandwidthReservation = 4,
    NOK_IoRateControlTypeTimePercentReservation = 5,
    NOK_IoRateControlTypeReservationMax = 5,
    NOK_IoRateControlTypeCriticalReservationMin = 6,
    NOK_IoRateControlTypeIopsCriticalReservation = 6,
    NOK_IoRateControlTypeBandwidthCriticalReservation = 7,
    NOK_IoRateControlTypeTimePercentCriticalReservation = 8,
    NOK_IoRateControlTypeCriticalReservationMax = 8,
    NOK_IoRateControlTypeSoftCapMin = 9,
    NOK_IoRateControlTypeIopsSoftCap = 9,
    NOK_IoRateControlTypeBandwidthSoftCap = 10,
    NOK_IoRateControlTypeTimePercentSoftCap = 11,
    NOK_IoRateControlTypeSoftCapMax = 11,
    NOK_IoRateControlTypeLimitExcessNotifyMin = 12,
    NOK_IoRateControlTypeIopsLimitExcessNotify = 12,
    NOK_IoRateControlTypeBandwidthLimitExcessNotify = 13,
    NOK_IoRateControlTypeTimePercentLimitExcessNotify = 14,
    NOK_IoRateControlTypeLimitExcessNotifyMax = 14,
    NOK_IoRateControlTypeMax = 15
}NOK_IO_RATE_CONTROL_TYPE, * NOK_PIO_RATE_CONTROL_TYPE;
//0xa0 bytes (sizeof)
typedef struct _NOK_HALP_DMA_CHANNEL
{
    ULONG ChannelNumber;                                                    //0x0
    UCHAR Initialized;                                                      //0x4
    UCHAR Busy;                                                             //0x5
    UCHAR Complete;                                                         //0x6
    VOID (*CurrentCompletionRoutine)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, NOK_DMA_COMPLETION_STATUS arg4); //0x8
    VOID* CurrentCompletionContext;                                         //0x10
    NOK_PADAPTER_OBJECT CurrentChildAdapter;                            //0x18
    NOK_DMA_INTERRUPT_TYPE CurrentInterruptType;                          //0x20
    NOK_KDPC Dpc;                                                       //0x28
    UCHAR GeneratesInterrupt;                                               //0x68
    LONG Gsi;                                                               //0x6c
    NOK_KINTERRUPT_POLARITY InterruptPolarity;                            //0x70
    NOK_KINTERRUPT_MODE InterruptMode;                                    //0x74
    ULONG CommonBufferLength;                                               //0x78
    VOID* CommonBufferVirtualAddress;                                       //0x80
    NOK_LARGE_INTEGER CommonBufferLogicalAddress;                        //0x88
    NOK_LIST_ENTRY AdapterQueue;                                        //0x90
}NOK_HALP_DMA_CHANNEL, * NOK_PHALP_DMA_CHANNEL;
//0x4 bytes (sizeof)
typedef enum _NOK_JOBOBJECTINFOCLASS
{
    NOK_JobObjectBasicAccountingInformation = 1,
    NOK_JobObjectBasicLimitInformation = 2,
    NOK_JobObjectBasicProcessIdList = 3,
    NOK_JobObjectBasicUIRestrictions = 4,
    NOK_JobObjectSecurityLimitInformation = 5,
    NOK_JobObjectEndOfJobTimeInformation = 6,
    NOK_JobObjectAssociateCompletionPortInformation = 7,
    NOK_JobObjectBasicAndIoAccountingInformation = 8,
    NOK_JobObjectExtendedLimitInformation = 9,
    NOK_JobObjectJobSetInformation = 10,
    NOK_JobObjectGroupInformation = 11,
    NOK_JobObjectNotificationLimitInformation = 12,
    NOK_JobObjectLimitViolationInformation = 13,
    NOK_JobObjectGroupInformationEx = 14,
    NOK_JobObjectCpuRateControlInformation = 15,
    NOK_JobObjectCompletionFilter = 16,
    NOK_JobObjectCompletionCounter = 17,
    NOK_JobObjectFreezeInformation = 18,
    NOK_JobObjectExtendedAccountingInformation = 19,
    NOK_JobObjectWakeInformation = 20,
    NOK_JobObjectBackgroundInformation = 21,
    NOK_JobObjectSchedulingRankBiasInformation = 22,
    NOK_JobObjectTimerVirtualizationInformation = 23,
    NOK_JobObjectCycleTimeNotification = 24,
    NOK_JobObjectClearEvent = 25,
    NOK_JobObjectInterferenceInformation = 26,
    NOK_JobObjectClearPeakJobMemoryUsed = 27,
    NOK_JobObjectMemoryUsageInformation = 28,
    NOK_JobObjectSharedCommit = 29,
    NOK_JobObjectContainerId = 30,
    NOK_JobObjectIoRateControlInformation = 31,
    NOK_JobObjectSiloRootDirectory = 37,
    NOK_JobObjectServerSiloBasicInformation = 38,
    NOK_JobObjectServerSiloUserSharedData = 39,
    NOK_JobObjectServerSiloInitialize = 40,
    NOK_JobObjectServerSiloRunningState = 41,
    NOK_JobObjectIoAttribution = 42,
    NOK_JobObjectMemoryPartitionInformation = 43,
    NOK_JobObjectContainerTelemetryId = 44,
    NOK_JobObjectSiloSystemRoot = 45,
    NOK_JobObjectEnergyTrackingState = 46,
    NOK_JobObjectThreadImpersonationInformation = 47,
    NOK_JobObjectReserved1Information = 18,
    NOK_JobObjectReserved2Information = 19,
    NOK_JobObjectReserved3Information = 20,
    NOK_JobObjectReserved4Information = 21,
    NOK_JobObjectReserved5Information = 22,
    NOK_JobObjectReserved6Information = 23,
    NOK_JobObjectReserved7Information = 24,
    NOK_JobObjectReserved8Information = 25,
    NOK_JobObjectReserved9Information = 26,
    NOK_JobObjectReserved10Information = 27,
    NOK_JobObjectReserved11Information = 28,
    NOK_JobObjectReserved12Information = 29,
    NOK_JobObjectReserved13Information = 30,
    NOK_JobObjectReserved14Information = 31,
    NOK_JobObjectNetRateControlInformation = 32,
    NOK_JobObjectNotificationLimitInformation2 = 33,
    NOK_JobObjectLimitViolationInformation2 = 34,
    NOK_JobObjectCreateSilo = 35,
    NOK_JobObjectSiloBasicInformation = 36,
    NOK_JobObjectReserved15Information = 37,
    NOK_JobObjectReserved16Information = 38,
    NOK_JobObjectReserved17Information = 39,
    NOK_JobObjectReserved18Information = 40,
    NOK_JobObjectReserved19Information = 41,
    NOK_JobObjectReserved20Information = 42,
    NOK_JobObjectReserved21Information = 43,
    NOK_JobObjectReserved22Information = 44,
    NOK_JobObjectReserved23Information = 45,
    NOK_JobObjectReserved24Information = 46,
    NOK_JobObjectReserved25Information = 47,
    NOK_MaxJobObjectInfoClass = 48
}NOK_JOBOBJECTINFOCLASS, * NOK_PJOBOBJECTINFOCLASS;
//0x4 bytes (sizeof)
typedef enum _NOK_KCONTINUE_TYPE
{
    NOK_KCONTINUE_UNWIND = 0,
    NOK_KCONTINUE_RESUME = 1,
    NOK_KCONTINUE_LONGJUMP = 2,
    NOK_KCONTINUE_SET = 3,
    NOK_KCONTINUE_LAST = 4
}NOK_KCONTINUE_TYPE, * NOK_PKCONTINUE_TYPE;
//0x8180 bytes (sizeof)
typedef struct _NOK_VI_DEADLOCK_GLOBALS
{
    LONGLONG TimeAcquire;                                                   //0x0
    LONGLONG TimeRelease;                                                   //0x8
    NOK_PLIST_ENTRY ResourceDatabase;                                   //0x10
    ULONGLONG ResourceDatabaseCount;                                        //0x18
    NOK_VF_ADDRESS_RANGE ResourceAddressRange[1023];                    //0x20
    NOK_PLIST_ENTRY ThreadDatabase;                                     //0x4010
    ULONGLONG ThreadDatabaseCount;                                          //0x4018
    NOK_VF_ADDRESS_RANGE ThreadAddressRange[1023];                      //0x4020
    volatile ULONG AllocationFailures;                                      //0x8010
    ULONG NodesTrimmedBasedOnAge;                                           //0x8014
    ULONG NodesTrimmedBasedOnCount;                                         //0x8018
    ULONG NodesSearched;                                                    //0x801c
    ULONG MaxNodesSearched;                                                 //0x8020
    ULONG SequenceNumber;                                                   //0x8024
    ULONG RecursionDepthLimit;                                              //0x8028
    ULONG SearchedNodesLimit;                                               //0x802c
    ULONG DepthLimitHits;                                                   //0x8030
    ULONG SearchLimitHits;                                                  //0x8034
    ULONG StackLimitHits;                                                   //0x8038
    ULONG ABC_ACB_Skipped;                                                  //0x803c
    ULONG OutOfOrderReleases;                                               //0x8040
    ULONG NodesReleasedOutOfOrder;                                          //0x8044
    ULONG TotalReleases;                                                    //0x8048
    ULONG RootNodesDeleted;                                                 //0x804c
    ULONG ForgetHistoryCounter;                                             //0x8050
    VOID* Instigator;                                                       //0x8058
    ULONG NumberOfParticipants;                                             //0x8060
    NOK_PVI_DEADLOCK_NODE Participant[32];                              //0x8068
    LONG ChildrenCountWatermark;                                            //0x8168
    NOK_KERNEL_STACK_LIMITS StackType;                                    //0x816c
    ULONGLONG StackLowLimit;                                                //0x8170
    ULONGLONG StackHighLimit;                                               //0x8178
}NOK_VI_DEADLOCK_GLOBALS, * NOK_PVI_DEADLOCK_GLOBALS;
//0x4 bytes (sizeof)
typedef enum _NOK_KE_WAKE_SOURCE_TYPE
{
    NOK_KeWakeSourceTypeSpuriousWake = 0,
    NOK_KeWakeSourceTypeSpuriousClock = 1,
    NOK_KeWakeSourceTypeSpuriousInterrupt = 2,
    NOK_KeWakeSourceTypeQueryFailure = 3,
    NOK_KeWakeSourceTypeAccountingFailure = 4,
    NOK_KeWakeSourceTypeStaticSourceMax = 4,
    NOK_KeWakeSourceTypeInterrupt = 5,
    NOK_KeWakeSourceTypeIRTimer = 6,
    NOK_KeWakeSourceTypeMax = 7
}NOK_KE_WAKE_SOURCE_TYPE, * NOK_PKE_WAKE_SOURCE_TYPE;
//0xab0 bytes (sizeof)
typedef struct _NOK_PPM_ENGINE_SETTINGS
{
    NOK_PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];                     //0x0
    UCHAR ThrottlingPolicy;                                                 //0x10
    ULONG PerfTimeCheck;                                                    //0x14
    UCHAR PerfHistoryCount[2];                                              //0x18
    UCHAR PerfMinPolicy[2];                                                 //0x1a
    UCHAR PerfMaxPolicy[2];                                                 //0x1c
    UCHAR PerfDecreaseTime[2];                                              //0x1e
    UCHAR PerfIncreaseTime[2];                                              //0x20
    UCHAR PerfDecreasePolicy[2];                                            //0x22
    UCHAR PerfIncreasePolicy[2];                                            //0x24
    UCHAR PerfDecreaseThreshold[2];                                         //0x26
    UCHAR PerfIncreaseThreshold[2];                                         //0x28
    ULONG PerfFrequencyCap[2];                                              //0x2c
    ULONG PerfBoostPolicy;                                                  //0x34
    ULONG PerfBoostMode;                                                    //0x38
    ULONG PerfReductionTolerance;                                           //0x3c
    ULONG EnergyPerfPreference[2];                                          //0x40
    ULONG AutonomousActivityWindow;                                         //0x48
    UCHAR AutonomousPreference;                                             //0x4c
    UCHAR LatencyHintPerf[2];                                               //0x4d
    UCHAR LatencyHintUnpark[2];                                             //0x4f
    ULONG ResponsivenessDisableThreshold[2];                                //0x54
    ULONG ResponsivenessEnableThreshold[2];                                 //0x5c
    UCHAR ResponsivenessDisableTime[2];                                     //0x64
    UCHAR ResponsivenessEnableTime[2];                                      //0x66
    ULONG ResponsivenessEppCeiling[2];                                      //0x68
    ULONG ResponsivenessPerfFloor[2];                                       //0x70
    UCHAR DutyCycling;                                                      //0x78
    UCHAR ParkingPerfState[2];                                              //0x79
    UCHAR DistributeUtility;                                                //0x7b
    UCHAR CoreParkingOverUtilizationThreshold;                              //0x7c
    UCHAR CoreParkingConcurrencyThreshold;                                  //0x7d
    UCHAR CoreParkingHeadroomThreshold;                                     //0x7e
    UCHAR CoreParkingDistributionThreshold;                                 //0x7f
    UCHAR CoreParkingDecreasePolicy;                                        //0x80
    UCHAR CoreParkingIncreasePolicy;                                        //0x81
    ULONG CoreParkingDecreaseTime;                                          //0x84
    ULONG CoreParkingIncreaseTime;                                          //0x88
    UCHAR CoreParkingMinCores[2];                                           //0x8c
    UCHAR CoreParkingMaxCores[2];                                           //0x8e
    ULONG SoftParkLatency;                                                  //0x90
    UCHAR AllowScaling;                                                     //0x94
    UCHAR IdleDisabled;                                                     //0x95
    ULONG IdleTimeCheck;                                                    //0x98
    UCHAR IdleDemotePercent;                                                //0x9c
    UCHAR IdlePromotePercent;                                               //0x9d
    UCHAR IdleStateMax;                                                     //0x9e
    UCHAR HeteroDecreaseTime;                                               //0x9f
    UCHAR HeteroIncreaseTime;                                               //0xa0
    UCHAR HeteroDecreaseThreshold[1280];                                    //0xa1
    UCHAR HeteroIncreaseThreshold[1280];                                    //0x5a1
    UCHAR Class0FloorPerformance;                                           //0xaa1
    UCHAR Class1InitialPerformance;                                         //0xaa2
    NOK_KHETERO_CPU_POLICY ThreadPolicies[2];                             //0xaa4
}NOK_PPM_ENGINE_SETTINGS, * NOK_PPPM_ENGINE_SETTINGS;
//0x4 bytes (sizeof)
typedef enum _NOK_PROC_HYPERVISOR_STATE
{
    NOK_ProcHypervisorNone = 0,
    NOK_ProcHypervisorPresent = 1,
    NOK_ProcHypervisorPower = 2,
    NOK_ProcHypervisorHvCounters = 3
}NOK_PROC_HYPERVISOR_STATE, * NOK_PPROC_HYPERVISOR_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_KHETERO_RUNNING_TYPE
{
    NOK_KHeteroShortRunning = 0,
    NOK_KHeteroLongRunning = 1,
    NOK_KHeteroRunningTypeMax = 2
}NOK_KHETERO_RUNNING_TYPE, * NOK_PKHETERO_RUNNING_TYPE;
//0x70 bytes (sizeof)
typedef struct _NOK_PI_BUS_EXTENSION
{
    ULONG Flags;                                                            //0x0
    UCHAR NumberCSNs;                                                       //0x4
    UCHAR* ReadDataPort;                                                    //0x8
    UCHAR DataPortMapped;                                                   //0x10
    UCHAR* AddressPort;                                                     //0x18
    UCHAR AddrPortMapped;                                                   //0x20
    UCHAR* CommandPort;                                                     //0x28
    UCHAR CmdPortMapped;                                                    //0x30
    ULONG NextSlotNumber;                                                   //0x34
    NOK_SINGLE_LIST_ENTRY DeviceList;                                   //0x38
    NOK_SINGLE_LIST_ENTRY CardList;                                     //0x40
    NOK_PDEVICE_OBJECT PhysicalBusDevice;                               //0x48
    NOK_PDEVICE_OBJECT FunctionalBusDevice;                             //0x50
    NOK_PDEVICE_OBJECT AttachedDevice;                                  //0x58
    ULONG BusNumber;                                                        //0x60
    NOK_SYSTEM_POWER_STATE SystemPowerState;                              //0x64
    NOK_DEVICE_POWER_STATE DevicePowerState;                              //0x68
}NOK_PI_BUS_EXTENSION, * NOK_PPI_BUS_EXTENSION;
//0x48 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_EXTENDED_ADDRESS
{
    NOK_PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    NOK_PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0x4
    UCHAR ResourceFlags;                                                    //0x8
    UCHAR GeneralFlags;                                                     //0x9
    UCHAR TypeSpecificFlags;                                                //0xa
    UCHAR RevisionId;                                                       //0xb
    UCHAR Reserved;                                                         //0xc
    ULONGLONG Granularity;                                                  //0x10
    ULONGLONG MinimumAddress;                                               //0x18
    ULONGLONG MaximumAddress;                                               //0x20
    ULONGLONG TranslationAddress;                                           //0x28
    ULONGLONG AddressLength;                                                //0x30
    ULONGLONG TypeAttribute;                                                //0x38
    NOK_PUNICODE_STRING DescriptorName;                                 //0x40
}NOK_PEP_ACPI_EXTENDED_ADDRESS, * NOK_PPEP_ACPI_EXTENDED_ADDRESS;
//0x4 bytes (sizeof)
typedef enum _NOK_KI_CALLBACK
{
    NOK_KiCallbackNmi = 0,
    NOK_KiCallbackBound = 1,
    NOK_KiCallbackSx = 2,
    NOK_KiCallbackCount = 3,
    NOK_KiFirstCallback = 0
}NOK_KI_CALLBACK, * NOK_PKI_CALLBACK;
//0x160 bytes (sizeof)
typedef struct _NOK_REGISTERED_INTERRUPT_CONTROLLER
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    VOID* InternalData;                                                     //0x10
    ULONG InternalDataSize;                                                 //0x18
    NOK_INTERRUPT_FUNCTION_TABLE FunctionTable;                         //0x20
    NOK_KNOWN_CONTROLLER_TYPE KnownType;                                  //0xd8
    ULONG Capabilities;                                                     //0xdc
    ULONG Flags;                                                            //0xe0
    ULONG MaxPriority;                                                      //0xe4
    ULONG UnitId;                                                           //0xe8
    NOK_LIST_ENTRY LinesHead;                                           //0xf0
    NOK_LIST_ENTRY OutputLinesHead;                                     //0x100
    LONG MinLine;                                                           //0x110
    LONG MaxLine;                                                           //0x114
    ULONG MaxClusterSize;                                                   //0x118
    ULONG MaxClusters;                                                      //0x11c
    ULONG InterruptReplayDataSize;                                          //0x120
    NOK_INTERRUPT_PROBLEM Problem;                                        //0x124
    LONG ProblemStatus;                                                     //0x128
    CHAR* ProblemSourceFile;                                                //0x130
    ULONG ProblemSourceLine;                                                //0x138
    ULONG CustomProblem;                                                    //0x13c
    LONG CustomProblemStatus;                                               //0x140
    NOK_UNICODE_STRING ResourceId;                                      //0x148
    NOK_PPOHANDLE__ PowerHandle;                                         //0x158
}NOK_REGISTERED_INTERRUPT_CONTROLLER, * NOK_PREGISTERED_INTERRUPT_CONTROLLER;
//0x4 bytes (sizeof)
typedef enum _NOK_KOBJECTS
{
    NOK_EventNotificationObject = 0,
    NOK_EventSynchronizationObject = 1,
    NOK_MutantObject = 2,
    NOK_ProcessObject = 3,
    NOK_QueueObject = 4,
    NOK_SemaphoreObject = 5,
    NOK_ThreadObject = 6,
    NOK_GateObject = 7,
    NOK_TimerNotificationObject = 8,
    NOK_TimerSynchronizationObject = 9,
    NOK_Spare2Object = 10,
    NOK_Spare3Object = 11,
    NOK_Spare4Object = 12,
    NOK_Spare5Object = 13,
    NOK_Spare6Object = 14,
    NOK_Spare7Object = 15,
    NOK_Spare8Object = 16,
    NOK_ProfileCallbackObject = 17,
    NOK_ApcObject = 18,
    NOK_DpcObject = 19,
    NOK_DeviceQueueObject = 20,
    NOK_PriQueueObject = 21,
    NOK_InterruptObject = 22,
    NOK_ProfileObject = 23,
    NOK_Timer2NotificationObject = 24,
    NOK_Timer2SynchronizationObject = 25,
    NOK_ThreadedDpcObject = 26,
    NOK_MaximumKernelObject = 27
}NOK_KOBJECTS, * NOK_PKOBJECTS;
//0x4 bytes (sizeof)
typedef union _NOK_PPM_IDLE_SYNCHRONIZATION_STATE
{
    LONG AsLong;                                                            //0x0
    LONG RefCount:24;                                                       //0x0
    ULONG State:8;                                                          //0x0
}NOK_PPM_IDLE_SYNCHRONIZATION_STATE, * NOK_PPPM_IDLE_SYNCHRONIZATION_STATE;
//0x200 bytes (sizeof)
typedef struct _NOK_PROCESSOR_POWER_STATE
{
    NOK_PPM_IDLE_STATES* IdleStates;                                    //0x0
    NOK_PPROC_IDLE_ACCOUNTING IdleAccounting;                           //0x8
    ULONGLONG IdleTimeLast;                                                 //0x10
    ULONGLONG IdleTimeTotal;                                                //0x18
    volatile ULONGLONG IdleTimeEntry;                                       //0x20
    ULONGLONG IdleTimeExpiration;                                           //0x28
    UCHAR NonInterruptibleTransition;                                       //0x30
    UCHAR PepWokenTransition;                                               //0x31
    UCHAR HvTargetState;                                                    //0x32
    UCHAR SoftParked;                                                       //0x33
    ULONG TargetIdleState;                                                  //0x34
    NOK_PROC_IDLE_POLICY IdlePolicy;                                    //0x38
    volatile NOK_PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;          //0x40
    NOK_PROC_FEEDBACK PerfFeedback;                                     //0x48
    NOK_PROC_HYPERVISOR_STATE Hypervisor;                                 //0xd8
    ULONG LastSysTime;                                                      //0xdc
    ULONGLONG WmiDispatchPtr;                                               //0xe0
    LONG WmiInterfaceEnabled;                                               //0xe8
    NOK_PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;               //0xf0
    NOK_KDPC PerfActionDpc;                                             //0x110
    volatile LONG PerfActionMask;                                           //0x150
    NOK_PROC_IDLE_SNAP HvIdleCheck;                                     //0x158
    NOK_PROC_PERF_CHECK_CONTEXT CheckContext;                           //0x168
    NOK_PPPM_CONCURRENCY_ACCOUNTING Concurrency;                        //0x1a8
    NOK_PPPM_CONCURRENCY_ACCOUNTING ClassConcurrency;                   //0x1b0
    UCHAR ArchitecturalEfficiencyClass;                                     //0x1b8
    UCHAR PerformanceSchedulingClass;                                       //0x1b9
    UCHAR EfficiencySchedulingClass;                                        //0x1ba
    UCHAR Unused;                                                           //0x1bb
    UCHAR Parked;                                                           //0x1bc
    UCHAR LongPriorQosPeriod;                                               //0x1bd
    union
    {
        ULONGLONG SnapTimeLast;                                             //0x1c0
        ULONGLONG EnergyConsumed;                                           //0x1c0
    };
    ULONGLONG ActiveTime;                                                   //0x1c8
    ULONGLONG TotalTime;                                                    //0x1d0
    NOK_PPOP_FX_DEVICE FxDevice;                                        //0x1d8
    ULONGLONG LastQosTranstionTsc;                                          //0x1e0
    ULONGLONG QosTransitionHysteresis;                                      //0x1e8
    NOK_KHETERO_CPU_QOS RequestedQosClass;                                //0x1f0
    NOK_KHETERO_CPU_QOS ResolvedQosClass;                                 //0x1f4
    USHORT QosEquivalencyMask;                                              //0x1f8
    USHORT HwFeedbackTableIndex;                                            //0x1fa
    UCHAR HwFeedbackParkHint;                                               //0x1fc
    UCHAR HwFeedbackPerformanceClass;                                       //0x1fd
    UCHAR HwFeedbackEfficiencyClass;                                        //0x1fe
    UCHAR HeteroCoreType;                                                   //0x1ff
}NOK_PROCESSOR_POWER_STATE, * NOK_PPROCESSOR_POWER_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_KPROCESS_PPM_POLICY
{
    NOK_ProcessPpmDefault = 0,
    NOK_ProcessPpmThrottle = 1,
    NOK_ProcessPpmSemiThrottle = 2,
    NOK_ProcessPpmNoThrottle = 3,
    NOK_ProcessPpmWindowMinimized = 4,
    NOK_ProcessPpmWindowOccluded = 5,
    NOK_ProcessPpmWindowVisible = 6,
    NOK_ProcessPpmWindowInFocus = 7,
    NOK_MaxProcessPpmPolicy = 8
}NOK_KPROCESS_PPM_POLICY, * NOK_PKPROCESS_PPM_POLICY;
//0x4 bytes (sizeof)
typedef enum _NOK_KPROFILE_SOURCE
{
    NOK_ProfileTime = 0,
    NOK_ProfileAlignmentFixup = 1,
    NOK_ProfileTotalIssues = 2,
    NOK_ProfilePipelineDry = 3,
    NOK_ProfileLoadInstructions = 4,
    NOK_ProfilePipelineFrozen = 5,
    NOK_ProfileBranchInstructions = 6,
    NOK_ProfileTotalNonissues = 7,
    NOK_ProfileDcacheMisses = 8,
    NOK_ProfileIcacheMisses = 9,
    NOK_ProfileCacheMisses = 10,
    NOK_ProfileBranchMispredictions = 11,
    NOK_ProfileStoreInstructions = 12,
    NOK_ProfileFpInstructions = 13,
    NOK_ProfileIntegerInstructions = 14,
    NOK_Profile2Issue = 15,
    NOK_Profile3Issue = 16,
    NOK_Profile4Issue = 17,
    NOK_ProfileSpecialInstructions = 18,
    NOK_ProfileTotalCycles = 19,
    NOK_ProfileIcacheIssues = 20,
    NOK_ProfileDcacheAccesses = 21,
    NOK_ProfileMemoryBarrierCycles = 22,
    NOK_ProfileLoadLinkedIssues = 23,
    NOK_ProfileMaximum = 24
}NOK_KPROFILE_SOURCE, * NOK_PKPROFILE_SOURCE;
//0x1a8 bytes (sizeof)
typedef struct _NOK_KTHREAD_COUNTERS
{
    ULONGLONG WaitReasonBitMap;                                             //0x0
    NOK_PTHREAD_PERFORMANCE_DATA UserData;                              //0x8
    ULONG Flags;                                                            //0x10
    ULONG ContextSwitches;                                                  //0x14
    ULONGLONG CycleTimeBias;                                                //0x18
    ULONGLONG HardwareCounters;                                             //0x20
    NOK_COUNTER_READING HwCounter[16];                                  //0x28
}NOK_KTHREAD_COUNTERS, * NOK_PKTHREAD_COUNTERS;
//0x4 bytes (sizeof)
typedef enum _NOK_KTHREAD_PPM_POLICY
{
    NOK_ThreadPpmDefault = 0,
    NOK_ThreadPpmThrottle = 1,
    NOK_ThreadPpmSemiThrottle = 2,
    NOK_ThreadPpmNoThrottle = 3,
    NOK_MaxThreadPpmPolicy = 4
}NOK_KTHREAD_PPM_POLICY, * NOK_PKTHREAD_PPM_POLICY;
//0x4 bytes (sizeof)
typedef enum _NOK_KTHREAD_STATE
{
    NOK_Initialized = 0,
    NOK_Ready = 1,
    NOK_Running = 2,
    NOK_Standby = 3,
    NOK_Terminated = 4,
    NOK_Waiting = 5,
    NOK_Transition = 6,
    NOK_DeferredReady = 7,
    NOK_GateWaitObsolete = 8,
    NOK_WaitingForProcessInSwap = 9
}NOK_KTHREAD_STATE, * NOK_PKTHREAD_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_KTIMER2_COLLECTION_INDEX
{
    NOK_KTimer2CollectionNoWake = 0,
    NOK_KTimer2CollectionHr = 1,
    NOK_KTimer2CollectionPseudoHr = 2,
    NOK_KTimer2CollectionFinite = 3,
    NOK_KTimer2CollectionIr = 4,
    NOK_KTimer2CollectionNotInserted = 16,
    NOK_KTimer2CollectionInvalid = 21,
    NOK_KTimer2CollectionOptional = 32,
    NOK_KTimer2CollectionMin = 0,
    NOK_KTimer2CollectionMax = 5,
    NOK_KTimer2CollectionNode1 = 2
}NOK_KTIMER2_COLLECTION_INDEX, * NOK_PKTIMER2_COLLECTION_INDEX;
//0x4 bytes (sizeof)
typedef enum _NOK_KRESOURCEMANAGER_STATE
{
    NOK_KResourceManagerUninitialized = 0,
    NOK_KResourceManagerOffline = 1,
    NOK_KResourceManagerOnline = 2
}NOK_KRESOURCEMANAGER_STATE, * NOK_PKRESOURCEMANAGER_STATE;
//0x440 bytes (sizeof)
typedef struct _NOK_CC_PARTITION
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    NOK_PEPARTITION PartitionObject;                                    //0x8
    NOK_LIST_ENTRY CleanSharedCacheMapList;                             //0x10
    NOK_LIST_ENTRY CleanSharedCacheMapWithLogHandleList;                //0x20
    NOK_SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;           //0x30
    NOK_SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;                   //0x48
    NOK_LIST_ENTRY DirtySharedCacheMapWithLogHandleList;                //0x60
    ULONGLONG PrivateLock;                                                  //0x80
    ULONG ConsecutiveWorklessLazyScanCount;                                 //0x88
    UCHAR ForcedDisableLazywriteScan;                                       //0x8c
    ULONGLONG WorkQueueLock;                                                //0xc0
    ULONG NumberWorkerThreads;                                              //0xc8
    ULONG NumberActiveWorkerThreads;                                        //0xcc
    NOK_LIST_ENTRY IdleWorkerThreadList;                                //0xd0
    NOK_LIST_ENTRY FastTeardownWorkQueue;                               //0xe0
    NOK_LIST_ENTRY ExpressWorkQueue;                                    //0xf0
    NOK_LIST_ENTRY RegularWorkQueue;                                    //0x100
    NOK_LIST_ENTRY PostTickWorkQueue;                                   //0x110
    NOK_LIST_ENTRY CleanCachemapUninitWorkQueue;                        //0x120
    NOK_LIST_ENTRY IdleExtraWriteBehindThreadList;                      //0x130
    ULONG ActiveExtraWriteBehindThreads;                                    //0x140
    ULONG MaxExtraWriteBehindThreads;                                       //0x144
    NOK_LIST_ENTRY IdleCacheMapUninitThreadList;                        //0x148
    ULONG ActiveCacheMapUninitThreads;                                      //0x158
    ULONG MaxCacheMapUninitThreads;                                         //0x15c
    UCHAR QueueThrottle;                                                    //0x160
    ULONG PostTickWorkItemCount;                                            //0x164
    ULONG ThreadsActiveBeforeThrottle;                                      //0x168
    ULONG ExtraWBThreadsActiveBeforeThrottle;                               //0x16c
    ULONG ExecutingWriteBehindWorkItems;                                    //0x170
    ULONG ExecutingHighPriorityWorkItem;                                    //0x174
    NOK_KEVENT LowMemoryEvent;                                          //0x178
    NOK_KEVENT PowerEvent;                                              //0x190
    NOK_KEVENT PeriodicEvent;                                           //0x1a8
    NOK_KEVENT WaitingForTeardownEvent;                                 //0x1c0
    NOK_KEVENT CoalescingFlushEvent;                                    //0x1d8
    ULONG PagesYetToWrite;                                                  //0x1f0
    NOK_LAZY_WRITER LazyWriter;                                         //0x1f8
    NOK_DIRTY_PAGE_STATISTICS DirtyPageStatistics;                      //0x280
    NOK_DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;                      //0x298
    NOK_PWRITE_BEHIND_THROUGHPUT ThroughputStats;                       //0x2d0
    LONG ThroughputTrend;                                                   //0x2d8
    ULONGLONG AverageAvailablePages;                                        //0x2e0
    ULONGLONG AverageDirtyPages;                                            //0x2e8
    ULONGLONG PagesSkippedDueToHotSpot;                                     //0x2f0
    NOK_LARGE_INTEGER PrevRegularQueueItemRunTime;                       //0x2f8
    NOK_LARGE_INTEGER PrevExtraWBThreadCheckTime;                        //0x300
    UCHAR AddExtraWriteBehindThreads;                                       //0x308
    UCHAR RemoveExtraThreadPending;                                         //0x309
    NOK_LIST_ENTRY DeferredWrites;                                      //0x310
    ULONGLONG DeferredWriteSpinLock;                                        //0x340
    NOK_PLIST_ENTRY IdleAsyncReadWorkerThreadList;                      //0x348
    ULONG* NumberActiveAsyncReadWorkerThreads;                              //0x350
    ULONG* NumberActiveCompleteAsyncReadWorkItems;                          //0x358
    NOK_PLIST_ENTRY AsyncReadWorkQueue;                                 //0x360
    NOK_PLIST_ENTRY AsyncReadCompletionWorkQueue;                       //0x368
    NOK_PKEVENT NewAsyncReadRequestEvent;                               //0x370
    NOK_PASYNC_READ_THREAD_STATS ReaderThreadsStats;                    //0x378
    NOK_EX_PUSH_LOCK AsyncReadWorkQueueLock;                            //0x380
    NOK_LIST_ENTRY VacbFreeHighPriorityList;                            //0x388
    ULONG NumberOfFreeHighPriorityVacbs;                                    //0x398
    NOK_PETHREAD LowPriWorkerThread;                                    //0x3a0
    NOK_PSHARED_CACHE_MAP LowPriSharedCacheMap;                         //0x3a8
    LONG LowPriOldCpuPriority;                                              //0x3b0
    NOK_IO_PRIORITY_HINT LowPriOldIoPriority;                             //0x3b4
    NOK_EX_PUSH_LOCK LowPriorityWorkerThreadLock;                       //0x3b8
    ULONG MaxNumberOfWriteBehindThreads;                                    //0x3c0
    UCHAR CoalescingState;                                                  //0x3c4
    UCHAR ActivePartition;                                                  //0x3c5
    UCHAR RundownPhase;                                                     //0x3c6
    LONGLONG RefCount;                                                      //0x3c8
    NOK_KEVENT ExitEvent;                                               //0x3d0
    NOK_KEVENT FinalDereferenceEvent;                                   //0x3e8
    VOID* LazyWriteScanThreadHandle;                                        //0x400
}NOK_CC_PARTITION, * NOK_PCC_PARTITION;
//0x4 bytes (sizeof)
typedef enum _NOK_KWAIT_BLOCK_STATE
{
    NOK_WaitBlockBypassStart = 0,
    NOK_WaitBlockBypassComplete = 1,
    NOK_WaitBlockSuspendBypassStart = 2,
    NOK_WaitBlockSuspendBypassComplete = 3,
    NOK_WaitBlockActive = 4,
    NOK_WaitBlockInactive = 5,
    NOK_WaitBlockSuspended = 6,
    NOK_WaitBlockAllStates = 7
}NOK_KWAIT_BLOCK_STATE, * NOK_PKWAIT_BLOCK_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_KWAIT_REASON
{
    NOK_Executive = 0,
    NOK_FreePage = 1,
    NOK_PageIn = 2,
    NOK_PoolAllocation = 3,
    NOK_DelayExecution = 4,
    NOK_Suspended = 5,
    NOK_UserRequest = 6,
    NOK_WrExecutive = 7,
    NOK_WrFreePage = 8,
    NOK_WrPageIn = 9,
    NOK_WrPoolAllocation = 10,
    NOK_WrDelayExecution = 11,
    NOK_WrSuspended = 12,
    NOK_WrUserRequest = 13,
    NOK_WrSpare0 = 14,
    NOK_WrQueue = 15,
    NOK_WrLpcReceive = 16,
    NOK_WrLpcReply = 17,
    NOK_WrVirtualMemory = 18,
    NOK_WrPageOut = 19,
    NOK_WrRendezvous = 20,
    NOK_WrKeyedEvent = 21,
    NOK_WrTerminated = 22,
    NOK_WrProcessInSwap = 23,
    NOK_WrCpuRateControl = 24,
    NOK_WrCalloutStack = 25,
    NOK_WrKernel = 26,
    NOK_WrResource = 27,
    NOK_WrPushLock = 28,
    NOK_WrMutex = 29,
    NOK_WrQuantumEnd = 30,
    NOK_WrDispatchInt = 31,
    NOK_WrPreempted = 32,
    NOK_WrYieldExecution = 33,
    NOK_WrFastMutex = 34,
    NOK_WrGuardedMutex = 35,
    NOK_WrRundown = 36,
    NOK_WrAlertByThreadId = 37,
    NOK_WrDeferredPreempt = 38,
    NOK_WrPhysicalFault = 39,
    NOK_MaximumWaitReason = 40
}NOK_KWAIT_REASON, * NOK_PKWAIT_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_KWAIT_STATE
{
    NOK_WaitInProgress = 0,
    NOK_WaitCommitted = 1,
    NOK_WaitAborted = 2,
    NOK_WaitSuspendInProgress = 3,
    NOK_WaitSuspended = 4,
    NOK_WaitResumeInProgress = 5,
    NOK_WaitResumeAborted = 6,
    NOK_WaitFirstSuspendState = 3,
    NOK_WaitLastSuspendState = 6,
    NOK_MaximumWaitState = 7
}NOK_KWAIT_STATE, * NOK_PKWAIT_STATE;
//0x50 bytes (sizeof)
typedef struct _NOK_LDR_DDAG_NODE
{
    NOK_LIST_ENTRY Modules;                                             //0x0
    NOK_PLDR_SERVICE_TAG_RECORD ServiceTagList;                         //0x10
    ULONG LoadCount;                                                        //0x18
    ULONG LoadWhileUnloadingCount;                                          //0x1c
    ULONG LowestLink;                                                       //0x20
    NOK_LDRP_CSLIST Dependencies;                                       //0x28
    NOK_LDRP_CSLIST IncomingDependencies;                               //0x30
    NOK_LDR_DDAG_STATE State;                                             //0x38
    NOK_SINGLE_LIST_ENTRY CondenseLink;                                 //0x40
    ULONG PreorderNumber;                                                   //0x48
}NOK_LDR_DDAG_NODE, * NOK_PLDR_DDAG_NODE;
//0x48 bytes (sizeof)
typedef struct _NOK_IO_RESOURCE_REQUIREMENTS_LIST
{
    ULONG ListSize;                                                         //0x0
    NOK_INTERFACE_TYPE InterfaceType;                                     //0x4
    ULONG BusNumber;                                                        //0x8
    ULONG SlotNumber;                                                       //0xc
    ULONG Reserved[3];                                                      //0x10
    ULONG AlternativeLists;                                                 //0x1c
    NOK_IO_RESOURCE_LIST List[1];                                       //0x20
}NOK_IO_RESOURCE_REQUIREMENTS_LIST, * NOK_PIO_RESOURCE_REQUIREMENTS_LIST;
//0x4 bytes (sizeof)
typedef enum _NOK_LOCK_OPERATION
{
    NOK_IoReadAccess = 0,
    NOK_IoWriteAccess = 1,
    NOK_IoModifyAccess = 2
}NOK_LOCK_OPERATION, * NOK_PLOCK_OPERATION;
//0x4 bytes (sizeof)
typedef enum _NOK_MACHINE_CHECK_NESTING_LEVEL
{
    NOK_McheckNormal = 0,
    NOK_McheckNmi = 1,
    NOK_McheckNestingLevels = 2
}NOK_MACHINE_CHECK_NESTING_LEVEL, * NOK_PMACHINE_CHECK_NESTING_LEVEL;
//0x4 bytes (sizeof)
typedef enum _NOK_KTRANSACTION_OUTCOME
{
    NOK_KTxOutcomeUninitialized = 0,
    NOK_KTxOutcomeUndetermined = 1,
    NOK_KTxOutcomeCommitted = 2,
    NOK_KTxOutcomeAborted = 3,
    NOK_KTxOutcomeUnavailable = 4
}NOK_KTRANSACTION_OUTCOME, * NOK_PKTRANSACTION_OUTCOME;
//0x4 bytes (sizeof)
typedef enum _NOK_MEMORY_CACHING_TYPE_ORIG
{
    NOK_MmFrameBufferCached = 2
}NOK_MEMORY_CACHING_TYPE_ORIG, * NOK_PMEMORY_CACHING_TYPE_ORIG;
//0x4 bytes (sizeof)
typedef enum _NOK_MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
    NOK_MemoryNotContiguous = 0,
    NOK_MemoryAlignedAndContiguous = 1,
    NOK_MemoryNotResident = 2,
    NOK_MemoryNotEligibleToMakeContiguous = 3,
    NOK_MemoryContiguityStateMax = 4
}NOK_MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE, * NOK_PMEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_ALTERNATE_LOCK_VA_TYPE
{
    NOK_AlternateLockVaTypeSystemPtes = 0,
    NOK_AlternateLockVaTypeNonPagedPool = 1,
    NOK_AlternateLockVaTypeUser = 2,
    NOK_AlternateLockVaTypeSystem = 3,
    NOK_AlternateLockVaTypeMaximum = 4
}NOK_MI_ALTERNATE_LOCK_VA_TYPE, * NOK_PMI_ALTERNATE_LOCK_VA_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_ASSIGNED_REGION_TYPES
{
    NOK_AssignedRegionNonPagedPool = 0,
    NOK_AssignedRegionPagedPool = 1,
    NOK_AssignedRegionSystemCache = 2,
    NOK_AssignedRegionSystemPtes = 3,
    NOK_AssignedRegionUltraZero = 4,
    NOK_AssignedRegionPfnDatabase = 5,
    NOK_AssignedRegionCfg = 6,
    NOK_AssignedRegionHyperSpace = 7,
    NOK_AssignedRegionKernelStacks = 8,
    NOK_AssignedRegionPageTables = 9,
    NOK_AssignedRegionSession = 10,
    NOK_AssignedRegionSecureNonPagedPool = 11,
    NOK_AssignedRegionSystemImages = 12,
    NOK_AssignedRegionMaximum = 13
}NOK_MI_ASSIGNED_REGION_TYPES, * NOK_PMI_ASSIGNED_REGION_TYPES;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_AVAILABLE_PAGE_WAIT_TYPES
{
    NOK_AvailablePagesWaitLow = 0,
    NOK_AvailablePagesWaitHigh = 1,
    NOK_AvailablePagesWaitVeryHigh = 2,
    NOK_AvailablePagesWaitMaximum = 3
}NOK_MI_AVAILABLE_PAGE_WAIT_TYPES, * NOK_PMI_AVAILABLE_PAGE_WAIT_TYPES;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_CFG_BITMAP_TYPE
{
    NOK_CfgBitMapNative = 0,
    NOK_CfgBitMapWow64 = 1,
    NOK_CfgBitMapMax = 2
}NOK_MI_CFG_BITMAP_TYPE, * NOK_PMI_CFG_BITMAP_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_CROSS_PARTITION_CHARGE_TYPE
{
    NOK_MiCrossPartitionSectionResAvailCharge = 0,
    NOK_MiCrossPartitionSectionCommitCharge = 1,
    NOK_MiCrossPartitionPageCombineResAvailCharge = 2,
    NOK_MiCrossPartitionPageCombineCommitCharge = 3,
    NOK_MiCrossPartitionLargePageResAvailCharge = 4,
    NOK_MiCrossPartitionLargePageCommitCharge = 5,
    NOK_MiCrossPartitionPageCloneResAvailCharge = 6,
    NOK_MiCrossPartitionMaximumCharge = 7
}NOK_MI_CROSS_PARTITION_CHARGE_TYPE, * NOK_PMI_CROSS_PARTITION_CHARGE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_DYNAMICBASE_BITMAP
{
    NOK_DynamicBaseBitMapNative = 0,
    NOK_DynamicBaseBitMap64Low = 1,
    NOK_DynamicBaseBitMap64LowWow = 2,
    NOK_DynamicBaseBitMap32WowFirst = 3,
    NOK_DynamicBaseBitMap32WowLast = 3,
    NOK_DynamicBaseBitMapInvalid = 4,
    NOK_DynamicBaseBitMapMax = 4
}NOK_MI_DYNAMICBASE_BITMAP, * NOK_PMI_DYNAMICBASE_BITMAP;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_ENCLAVE_TYPE
{
    NOK_MiEnclaveNone = 0,
    NOK_MiEnclaveHardware = 1,
    NOK_MiEnclaveVsm = 2,
    NOK_MiEnclaveMax = 3
}NOK_MI_ENCLAVE_TYPE, * NOK_PMI_ENCLAVE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_INPAGE_SUPPORT_TYPES
{
    NOK_MiInPageSupportExpanded = 0,
    NOK_MiInPageSupportRegular = 1,
    NOK_MiInPageSupportMaximum = 2
}NOK_MI_INPAGE_SUPPORT_TYPES, * NOK_PMI_INPAGE_SUPPORT_TYPES;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_IO_PFN_TYPE
{
    NOK_MiIoPfnProbes = 0,
    NOK_MiIoPfnMaps = 1,
    NOK_MiIoPfnUnmapped = 2,
    NOK_MiMaximumIoPfnType = 3
}NOK_MI_IO_PFN_TYPE, * NOK_PMI_IO_PFN_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_KSTACK_TYPE
{
    NOK_MiRegularKstack = 0,
    NOK_MiShortLivedKstack = 1,
    NOK_MiMaximumKstack = 2
}NOK_MI_KSTACK_TYPE, * NOK_PMI_KSTACK_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_MEMORY_EVENT_TYPES
{
    NOK_LowPagedPoolEvent = 0,
    NOK_HighPagedPoolEvent = 1,
    NOK_LowNonPagedPoolEvent = 2,
    NOK_HighNonPagedPoolEvent = 3,
    NOK_LowAvailablePagesEvent = 4,
    NOK_HighAvailablePagesEvent = 5,
    NOK_LowCommitEvent = 6,
    NOK_HighCommitEvent = 7,
    NOK_MaximumCommitEvent = 8,
    NOK_BadMemoryDetectedEvent = 9,
    NOK_PhysicalMemoryChangeEvent = 10,
    NOK_TotalNumberOfMemoryEvents = 11
}NOK_MI_MEMORY_EVENT_TYPES, * NOK_PMI_MEMORY_EVENT_TYPES;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_MEMORY_HIGHLOW
{
    NOK_MiMemoryHigh = 0,
    NOK_MiMemoryLow = 1,
    NOK_MiMemoryHighLow = 2
}NOK_MI_MEMORY_HIGHLOW, * NOK_PMI_MEMORY_HIGHLOW;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_MIRROR_BITMAP_TYPES
{
    NOK_MirrorBitmapTypeNormal = 0,
    NOK_MirrorBitmapTypeInterlocked = 1,
    NOK_MirrorBitmapTypeMaximum = 2
}NOK_MI_MIRROR_BITMAP_TYPES, * NOK_PMI_MIRROR_BITMAP_TYPES;
//0x120 bytes (sizeof)
typedef struct _NOK_LDR_DATA_TABLE_ENTRY
{
    NOK_LIST_ENTRY InLoadOrderLinks;                                    //0x0
    NOK_LIST_ENTRY InMemoryOrderLinks;                                  //0x10
    NOK_LIST_ENTRY InInitializationOrderLinks;                          //0x20
    VOID* DllBase;                                                          //0x30
    VOID* EntryPoint;                                                       //0x38
    ULONG SizeOfImage;                                                      //0x40
    NOK_UNICODE_STRING FullDllName;                                     //0x48
    NOK_UNICODE_STRING BaseDllName;                                     //0x58
    union
    {
        UCHAR FlagGroup[4];                                                 //0x68
        ULONG Flags;                                                        //0x68
        struct
        {
            ULONG PackagedBinary:1;                                         //0x68
            ULONG MarkedForRemoval:1;                                       //0x68
            ULONG ImageDll:1;                                               //0x68
            ULONG LoadNotificationsSent:1;                                  //0x68
            ULONG TelemetryEntryProcessed:1;                                //0x68
            ULONG ProcessStaticImport:1;                                    //0x68
            ULONG InLegacyLists:1;                                          //0x68
            ULONG InIndexes:1;                                              //0x68
            ULONG ShimDll:1;                                                //0x68
            ULONG InExceptionTable:1;                                       //0x68
            ULONG ReservedFlags1:2;                                         //0x68
            ULONG LoadInProgress:1;                                         //0x68
            ULONG LoadConfigProcessed:1;                                    //0x68
            ULONG EntryProcessed:1;                                         //0x68
            ULONG ProtectDelayLoad:1;                                       //0x68
            ULONG ReservedFlags3:2;                                         //0x68
            ULONG DontCallForThreads:1;                                     //0x68
            ULONG ProcessAttachCalled:1;                                    //0x68
            ULONG ProcessAttachFailed:1;                                    //0x68
            ULONG CorDeferredValidate:1;                                    //0x68
            ULONG CorImage:1;                                               //0x68
            ULONG DontRelocate:1;                                           //0x68
            ULONG CorILOnly:1;                                              //0x68
            ULONG ChpeImage:1;                                              //0x68
            ULONG ReservedFlags5:2;                                         //0x68
            ULONG Redirected:1;                                             //0x68
            ULONG ReservedFlags6:2;                                         //0x68
            ULONG CompatDatabaseProcessed:1;                                //0x68
        };
    };
    USHORT ObsoleteLoadCount;                                               //0x6c
    USHORT TlsIndex;                                                        //0x6e
    NOK_LIST_ENTRY HashLinks;                                           //0x70
    ULONG TimeDateStamp;                                                    //0x80
    NOK_PACTIVATION_CONTEXT EntryPointActivationContext;                //0x88
    VOID* Lock;                                                             //0x90
    NOK_PLDR_DDAG_NODE DdagNode;                                        //0x98
    NOK_LIST_ENTRY NodeModuleLink;                                      //0xa0
    NOK_PLDRP_LOAD_CONTEXT LoadContext;                                 //0xb0
    VOID* ParentDllBase;                                                    //0xb8
    VOID* SwitchBackContext;                                                //0xc0
    NOK_RTL_BALANCED_NODE BaseAddressIndexNode;                         //0xc8
    NOK_RTL_BALANCED_NODE MappingInfoIndexNode;                         //0xe0
    ULONGLONG OriginalBase;                                                 //0xf8
    NOK_LARGE_INTEGER LoadTime;                                          //0x100
    ULONG BaseNameHashValue;                                                //0x108
    NOK_LDR_DLL_LOAD_REASON LoadReason;                                   //0x10c
    ULONG ImplicitPathOptions;                                              //0x110
    ULONG ReferenceCount;                                                   //0x114
    ULONG DependentLoadFlags;                                               //0x118
    UCHAR SigningLevel;                                                     //0x11c
}NOK_LDR_DATA_TABLE_ENTRY, * NOK_PLDR_DATA_TABLE_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_SHARED_USER_PAGE_TYPES
{
    NOK_MiSharedUserPageKernel = 0,
    NOK_MiSharedUserPageHypervisor = 1,
    NOK_MiSharedUserPageMaximum = 2
}NOK_MI_SHARED_USER_PAGE_TYPES, * NOK_PMI_SHARED_USER_PAGE_TYPES;
//0xc0 bytes (sizeof)
typedef struct _NOK_MI_PARTITION_STATE
{
    ULONGLONG PartitionLock;                                                //0x0
    NOK_EX_PUSH_LOCK PartitionIdLock;                                   //0x8
    ULONGLONG InitialPartitionIdBits;                                       //0x10
    NOK_LIST_ENTRY PartitionList;                                       //0x18
    NOK_PRTL_BITMAP PartitionIdBitmap;                                  //0x28
    NOK_RTL_BITMAP InitialPartitionIdBitmap;                            //0x30
    NOK_PMI_PARTITION TempPartitionPointers[1];                         //0x40
    NOK_PMI_PARTITION* Partition;                                       //0x48
    ULONGLONG TotalPagesInChildPartitions;                                  //0x50
    ULONG CrossPartitionDenials;                                            //0x58
    UCHAR MultiplePartitionsExist;                                          //0x5c
    NOK_RTL_BITMAP_EX HugeIoPfnBitMap;                                  //0x60
    NOK_PMI_HUGE_PFN HugePfnDatabase;                                   //0x70
    ULONGLONG HugeRangesLock;                                               //0x80
}NOK_MI_PARTITION_STATE, * NOK_PMI_PARTITION_STATE;
//0x340 bytes (sizeof)
typedef struct _NOK_MI_SECTION_STATE
{
    volatile LONG SectionObjectPointersLock;                                //0x0
    NOK_RTL_AVL_TREE SectionBasedRoot;                                  //0x8
    NOK_EX_PUSH_LOCK SectionBasedLock;                                  //0x10
    volatile ULONGLONG UnusedSegmentPagedPool;                              //0x18
    ULONG DataSectionProtectionMask;                                        //0x20
    VOID* HighSectionBase;                                                  //0x28
    NOK_MSUBSECTION PhysicalSubsection;                                 //0x30
    NOK_CONTROL_AREA PhysicalControlArea;                               //0xc0
    NOK_MMPFNLIST PurgingExtentPages;                                   //0x140
    NOK_PMMPFN DanglingExtentPages;                                     //0x168
    NOK_WORK_QUEUE_ITEM DanglingExtentsWorkItem;                        //0x170
    NOK_MI_EXTENT_DELETION_WAIT_BLOCK DanglingExtentsDeletionWaitList;  //0x190
    UCHAR FileOnlyMemoryPfnsCreated;                                        //0x1b0
    UCHAR DanglingExtentsWorkerActive;                                      //0x1b1
    UCHAR PurgingExtentsNeedWatchdog;                                       //0x1b2
    NOK_RTL_AVL_TREE PrototypePtesTree;                                 //0x1b8
    volatile LONG PrototypePtesTreeSpinLock;                                //0x1c0
    NOK_EX_PUSH_LOCK RelocateBitmapsLock;                               //0x1c8
    NOK_RTL_BITMAP_EX ImageBitMapNative;                                //0x1d0
    ULONGLONG ImageBiasNative;                                              //0x1e0
    NOK_MI_DLL_OVERFLOW_AREA OverflowArea;                              //0x1e8
    NOK_MI_SECTION_WOW_STATE Wow[1];                                    //0x208
    ULONGLONG ImageBiasWow;                                                 //0x248
    NOK_RTL_BITMAP_EX ImageBitMapWowScratch;                            //0x250
    NOK_RTL_BITMAP_EX ImageBitMap64Low;                                 //0x260
    ULONGLONG ImageBias64Low;                                               //0x270
    VOID* ApiSetSection;                                                    //0x278
    VOID* ApiSetSchema;                                                     //0x280
    ULONGLONG ApiSetSchemaSize;                                             //0x288
    ULONG LostDataFiles;                                                    //0x290
    ULONG LostDataPages;                                                    //0x294
    ULONG ImageFailureReason;                                               //0x298
    NOK_PSECTION CfgBitMapSection;                                      //0x2a0
    NOK_PCONTROL_AREA CfgBitMapControlArea;                             //0x2a8
    NOK_RTL_BITMAP_EX KernelCfgBitMap;                                  //0x2b0
    NOK_EX_PUSH_LOCK KernelCfgBitMapLock;                               //0x2c0
    ULONG ImageCfgFailure;                                                  //0x2c8
    ULONG RetpolineReservePages;                                            //0x2cc
    NOK_PMDL RetpolineStubMdl;                                          //0x2d0
    NOK_RTL_BITMAP_EX KernelRetpolineBitMap;                            //0x2d8
    NOK_PRTL_RETPOLINE_ROUTINES RetpolineRoutines;                      //0x2e8
    NOK_PMMPTE RetpolineRevertPte;                                      //0x2f0
    NOK_LIST_ENTRY NonRetpolineImageLoadList;                           //0x2f8
    ULONG RetpolineStubPages;                                               //0x308
    LONG RetpolineBootStatus;                                               //0x30c
    ULONG ImageBreakpointEnabled;                                           //0x310
    ULONG ImageBreakpointChecksum;                                          //0x314
    ULONG ImageBreakpointSize;                                              //0x318
    volatile LONG ImageValidationFailed;                                    //0x31c
    NOK_RTL_AVL_TREE ImageExtentTree;                                   //0x320
    NOK_EX_PUSH_LOCK ImageExtentTreeLock;                               //0x328
    ULONG HotPatchReserveSize;                                              //0x330
}NOK_MI_SECTION_STATE, * NOK_PMI_SECTION_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_SUBVAD_LISTS
{
    NOK_MiSubVadPebTebAny = 0,
    NOK_MiSubVadPebTebBelow4gb = 1,
    NOK_MiSubVadMaximum = 2
}NOK_MI_SUBVAD_LISTS, * NOK_PMI_SUBVAD_LISTS;
//0x200 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_PTE_STATE
{
    NOK_NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;                      //0x0
    NOK_SLIST_HEADER DeadPteTrackerSListHead;                            //0x80
    ULONGLONG PteTrackerLock;                                               //0x90
    NOK_RTL_BITMAP_EX PteTrackingBitmap;                                //0x98
    NOK_MI_CACHED_PTES* CachedPteHeads;                                 //0xa8
    NOK_MI_CACHED_PTES* CachedKernelStackPteHeads;                      //0xb0
    NOK_MI_SYSTEM_PTE_TYPE SystemViewPteInfo;                           //0xb8
    NOK_MI_SYSTEM_PTE_TYPE KernelStackPteInfo;                          //0x118
    ULONG StackGrowthFailures;                                              //0x178
    UCHAR KernelStackPages;                                                 //0x17c
    UCHAR TrackPtesAborted;                                                 //0x17d
    UCHAR AdjustCounter;                                                    //0x17e
    volatile LONG ReservedMappingLock;                                      //0x180
    NOK_RTL_AVL_TREE ReservedMappingTree;                               //0x188
    NOK_PMMPFN ReservedMappingPageTablePfns;                            //0x190
    NOK_RTL_AVL_TREE OutswappedKernelStackRoot;                         //0x198
    volatile LONG OutswappedKernelStackLock;                                //0x1a0
    NOK_PMMPTE BreakMakePte;                                            //0x1a8
    NOK_MI_ULTRA_VA_CONTEXT UltraSpaceContext;                          //0x1b0
    ULONG NumberOfUltraMdlMaps;                                             //0x1f0
    NOK_PMI_ULTRA_MDL_NODE UltraMdlNodeMappings;                        //0x1f8
}NOK_MI_SYSTEM_PTE_STATE, * NOK_PMI_SYSTEM_PTE_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_VAD_64K_TYPES
{
    NOK_MiVad64KPrivate = 0,
    NOK_MiVad64KShared = 1,
    NOK_MiVad64KTypes = 2
}NOK_MI_VAD_64K_TYPES, * NOK_PMI_VAD_64K_TYPES;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_VAD_ALLOCATION_CELL_TYPE
{
    NOK_MiVadBottomUp = 0,
    NOK_MiVadStackPebTeb = 1,
    NOK_MiVadReserved64 = 2,
    NOK_MiVadAllocationCellMaximum = 3
}NOK_MI_VAD_ALLOCATION_CELL_TYPE, * NOK_PMI_VAD_ALLOCATION_CELL_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_WORKING_SET_TYPE
{
    NOK_MiWorkingSetTypeSystemCache = 0,
    NOK_MiWorkingSetTypeSystemViews = 1,
    NOK_MiWorkingSetTypePartitionMaximum = 1,
    NOK_MiWorkingSetTypePagedPool = 2,
    NOK_MiWorkingSetTypePagableMaximum = 2,
    NOK_MiWorkingSetTypeSystemPtes = 3,
    NOK_MiWorkingSetTypeKernelStacks = 4,
    NOK_MiWorkingSetTypeNonPagedPool = 5,
    NOK_MiWorkingSetTypeMaximum = 6
}NOK_MI_WORKING_SET_TYPE, * NOK_PMI_WORKING_SET_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_MI_PARTITION_THREAD
{
    NOK_MiZeroPageThreadSlot = 0,
    NOK_MiRebuildLargePagesThreadSlot = 1,
    NOK_MiPartitionWorkingSetManagerSlot = 2,
    NOK_MiDereferenceSegmentThreadSlot = 3,
    NOK_MiModifiedPageWriterSlot = 4,
    NOK_MiMappedPageWriterSlot = 5,
    NOK_MiNumberOfPartitionThreads = 6
}NOK_MI_PARTITION_THREAD, * NOK_PMI_PARTITION_THREAD;
//0x11c0 bytes (sizeof)
typedef struct _NOK_MI_NODE_INFORMATION
{
    NOK_MI_FREE_LARGE_PAGES FreeLargePages[3];                          //0x0
    NOK_MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;              //0xc90
    NOK_MMPFNLIST_SHORT StandbyPageList[4][8];                          //0xcb8
    NOK_RTL_BITMAP FreePageListHeadsBitmap[2];                          //0xfc0
    ULONG FreePageListHeadsBitmapBuffer[16];                                //0xfe0
    volatile ULONGLONG FreeCount[2];                                        //0x1020
    ULONGLONG TotalPages[4];                                                //0x1030
    ULONGLONG TotalPagesEntireNode;                                         //0x1050
    ULONG CurrentHugeRangeColor;                                            //0x1058
    ULONGLONG HugeIoRangeFreeCount[2];                                      //0x1060
    ULONG MmShiftedColor;                                                   //0x1070
    ULONG Color;                                                            //0x1074
    volatile ULONGLONG ChannelFreeCount[4][2];                              //0x1078
    struct
    {
        ULONG ChannelsHotCold:1;                                            //0x10b8
        ULONG Spare:31;                                                     //0x10b8
    } Flags;                                                                //0x10b8
    ULONG LargeListMoveInProgress;                                          //0x10bc
    NOK_PMI_LARGE_PAGE_LISTS_CHANGING LargeListWaiters;                 //0x10c0
    NOK_EX_PUSH_LOCK NodeLock;                                          //0x10c8
    ULONGLONG ZeroThreadHugeMapLock;                                        //0x10d0
    UCHAR ChannelStatus;                                                    //0x10d8
    UCHAR ChannelOrdering[4];                                               //0x10d9
    UCHAR LockedChannelOrdering[4];                                         //0x10dd
    UCHAR PowerAttribute[4];                                                //0x10e1
    ULONGLONG LargePageLock;                                                //0x10e8
    NOK_MI_PAGE_COLORS PageColorTable;                                  //0x10f0
    ULONGLONG NumberOfPagesGoingBad;                                        //0x1100
    NOK_MI_WRITE_CALIBRATION WriteCalibration;                          //0x1108
    VOID* BootZeroContext;                                                  //0x1128
    VOID* BootZeroPageTimesPerProcessor;                                    //0x1130
    VOID* ZeroingVaBase;                                                    //0x1138
    ULONGLONG TotalBytesToZero;                                             //0x1140
    ULONGLONG PerProcessorNumberOfBytesToZero;                              //0x1148
    VOID* ZeroingContext;                                                   //0x1150
    volatile ULONG ZeroingProcessorCount;                                   //0x1158
    volatile LONG ZeroHand;                                                 //0x115c
    volatile LONG FinishedProcessors;                                       //0x1160
    ULONGLONG CyclesToZeroOneLargePage;                                     //0x1168
    ULONGLONG* ScaledCyclesToZeroOneLargePage;                              //0x1170
    NOK_GROUP_AFFINITY GroupAffinity;                                   //0x1178
    USHORT ProcessorCount;                                                  //0x1188
    UCHAR BackgroundZeroingActive;                                          //0x118a
    NOK_PPHYSICAL_MEMORY_DESCRIPTOR ZeroingPhysicalMemoryBlock;         //0x1190
}NOK_MI_NODE_INFORMATION, * NOK_PMI_NODE_INFORMATION;
//0x90 bytes (sizeof)
typedef struct _NOK_MI_STANDBY_STATE
{
    ULONGLONG FirstDecayPage;                                               //0x0
    NOK_SLIST_HEADER PfnDecayFreeSList;                                  //0x10
    NOK_MM_PAGE_ACCESS_INFO_HEADER* PfnRepurposeLog;                    //0x20
    NOK_KDPC AllocatePfnRepurposeDpc;                                   //0x28
    NOK_SLIST_HEADER PageHeatListSlist;                                  //0x70
    volatile LONG PageHeatListDisableAllocation;                            //0x80
}NOK_MI_STANDBY_STATE, * NOK_PMI_STANDBY_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_MODE
{
    NOK_KernelMode = 0,
    NOK_UserMode = 1,
    NOK_MaximumMode = 2
}NOK_MODE, * NOK_PMODE;
//0x138 bytes (sizeof)
typedef struct _NOK_DMA_OPERATIONS
{
    ULONG Size;                                                             //0x0
    VOID (*PutDmaAdapter)(NOK_PDMA_ADAPTER arg1);                       //0x8
    VOID* (*AllocateCommonBuffer)(NOK_PDMA_ADAPTER arg1, ULONG arg2, NOK_PLARGE_INTEGER arg3, UCHAR arg4); //0x10
    VOID (*FreeCommonBuffer)(NOK_PDMA_ADAPTER arg1, ULONG arg2, NOK_LARGE_INTEGER arg3, VOID* arg4, UCHAR arg5); //0x18
    LONG (*AllocateAdapterChannel)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, ULONG arg3, NOK_IO_ALLOCATION_ACTION (*arg4)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, VOID* arg3, VOID* arg4), VOID* arg5); //0x20
    UCHAR (*FlushAdapterBuffers)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, VOID* arg3, VOID* arg4, ULONG arg5, UCHAR arg6); //0x28
    VOID (*FreeAdapterChannel)(NOK_PDMA_ADAPTER arg1);                  //0x30
    VOID (*FreeMapRegisters)(NOK_PDMA_ADAPTER arg1, VOID* arg2, ULONG arg3); //0x38
    NOK_LARGE_INTEGER (*MapTransfer)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, VOID* arg3, VOID* arg4, ULONG* arg5, UCHAR arg6); //0x40
    ULONG (*GetDmaAlignment)(NOK_PDMA_ADAPTER arg1);                    //0x48
    ULONG (*ReadDmaCounter)(NOK_PDMA_ADAPTER arg1);                     //0x50
    LONG (*GetScatterGatherList)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, NOK_PMDL arg3, VOID* arg4, ULONG arg5, VOID (*arg6)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, NOK_PSCATTER_GATHER_LIST arg3, VOID* arg4), VOID* arg7, UCHAR arg8); //0x58
    VOID (*PutScatterGatherList)(NOK_PDMA_ADAPTER arg1, NOK_PSCATTER_GATHER_LIST arg2, UCHAR arg3); //0x60
    LONG (*CalculateScatterGatherList)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, VOID* arg3, ULONG arg4, ULONG* arg5, ULONG* arg6); //0x68
    LONG (*BuildScatterGatherList)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, NOK_PMDL arg3, VOID* arg4, ULONG arg5, VOID (*arg6)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, NOK_PSCATTER_GATHER_LIST arg3, VOID* arg4), VOID* arg7, UCHAR arg8, VOID* arg9, ULONG arg10); //0x70
    LONG (*BuildMdlFromScatterGatherList)(NOK_PDMA_ADAPTER arg1, NOK_PSCATTER_GATHER_LIST arg2, NOK_PMDL arg3, NOK_PMDL* arg4); //0x78
    LONG (*GetDmaAdapterInfo)(NOK_PDMA_ADAPTER arg1, NOK_DMA_ADAPTER_INFO* arg2); //0x80
    LONG (*GetDmaTransferInfo)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, ULONGLONG arg3, ULONG arg4, UCHAR arg5, NOK_PDMA_TRANSFER_INFO arg6); //0x88
    LONG (*InitializeDmaTransferContext)(NOK_PDMA_ADAPTER arg1, VOID* arg2); //0x90
    VOID* (*AllocateCommonBufferEx)(NOK_PDMA_ADAPTER arg1, NOK_PLARGE_INTEGER arg2, ULONG arg3, NOK_PLARGE_INTEGER arg4, UCHAR arg5, ULONG arg6); //0x98
    LONG (*AllocateAdapterChannelEx)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, ULONG arg4, ULONG arg5, NOK_IO_ALLOCATION_ACTION (*arg6)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, VOID* arg3, VOID* arg4), VOID* arg7, VOID** arg8); //0xa0
    LONG (*ConfigureAdapterChannel)(NOK_PDMA_ADAPTER arg1, ULONG arg2, VOID* arg3); //0xa8
    UCHAR (*CancelAdapterChannel)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3); //0xb0
    LONG (*MapTransferEx)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, VOID* arg3, ULONGLONG arg4, ULONG arg5, ULONG* arg6, UCHAR arg7, NOK_PSCATTER_GATHER_LIST arg8, ULONG arg9, VOID (*arg10)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, NOK_DMA_COMPLETION_STATUS arg4), VOID* arg11); //0xb8
    LONG (*GetScatterGatherListEx)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, NOK_PMDL arg4, ULONGLONG arg5, ULONG arg6, ULONG arg7, VOID (*arg8)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, NOK_PSCATTER_GATHER_LIST arg3, VOID* arg4), VOID* arg9, UCHAR arg10, VOID (*arg11)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, NOK_DMA_COMPLETION_STATUS arg4), VOID* arg12, NOK_PSCATTER_GATHER_LIST* arg13); //0xc0
    LONG (*BuildScatterGatherListEx)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, NOK_PMDL arg4, ULONGLONG arg5, ULONG arg6, ULONG arg7, VOID (*arg8)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, NOK_PSCATTER_GATHER_LIST arg3, VOID* arg4), VOID* arg9, UCHAR arg10, VOID* arg11, ULONG arg12, VOID (*arg13)(NOK_PDMA_ADAPTER arg1, NOK_PDEVICE_OBJECT arg2, VOID* arg3, NOK_DMA_COMPLETION_STATUS arg4), VOID* arg14, VOID* arg15); //0xc8
    LONG (*FlushAdapterBuffersEx)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, VOID* arg3, ULONGLONG arg4, ULONG arg5, UCHAR arg6); //0xd0
    VOID (*FreeAdapterObject)(NOK_PDMA_ADAPTER arg1, NOK_IO_ALLOCATION_ACTION arg2); //0xd8
    LONG (*CancelMappedTransfer)(NOK_PDMA_ADAPTER arg1, VOID* arg2);    //0xe0
    LONG (*AllocateDomainCommonBuffer)(NOK_PDMA_ADAPTER arg1, VOID* arg2, NOK_PLARGE_INTEGER arg3, ULONG arg4, ULONG arg5, NOK_PMEMORY_CACHING_TYPE arg6, ULONG arg7, NOK_PLARGE_INTEGER arg8, VOID** arg9); //0xe8
    LONG (*FlushDmaBuffer)(NOK_PDMA_ADAPTER arg1, NOK_PMDL arg2, UCHAR arg3); //0xf0
    LONG (*JoinDmaDomain)(NOK_PDMA_ADAPTER arg1, VOID* arg2);           //0xf8
    LONG (*LeaveDmaDomain)(NOK_PDMA_ADAPTER arg1);                      //0x100
    VOID* (*GetDmaDomain)(NOK_PDMA_ADAPTER arg1);                       //0x108
    VOID* (*AllocateCommonBufferWithBounds)(NOK_PDMA_ADAPTER arg1, NOK_PLARGE_INTEGER arg2, NOK_PLARGE_INTEGER arg3, ULONG arg4, ULONG arg5, NOK_PMEMORY_CACHING_TYPE arg6, ULONG arg7, NOK_PLARGE_INTEGER arg8); //0x110
    LONG (*AllocateCommonBufferVector)(NOK_PDMA_ADAPTER arg1, NOK_LARGE_INTEGER arg2, NOK_LARGE_INTEGER arg3, NOK_MEMORY_CACHING_TYPE arg4, ULONG arg5, ULONG arg6, ULONG arg7, ULONGLONG arg8, NOK_PDMA_COMMON_BUFFER_VECTOR* arg9); //0x118
    VOID (*GetCommonBufferFromVectorByIndex)(NOK_PDMA_ADAPTER arg1, NOK_PDMA_COMMON_BUFFER_VECTOR arg2, ULONG arg3, VOID** arg4, NOK_PLARGE_INTEGER arg5); //0x120
    VOID (*FreeCommonBufferFromVector)(NOK_PDMA_ADAPTER arg1, NOK_PDMA_COMMON_BUFFER_VECTOR arg2, ULONG arg3); //0x128
    VOID (*FreeCommonBufferVector)(NOK_PDMA_ADAPTER arg1, NOK_PDMA_COMMON_BUFFER_VECTOR arg2); //0x130
}NOK_DMA_OPERATIONS, * NOK_PDMA_OPERATIONS;
//0x4 bytes (sizeof)
typedef enum _NOK_OBJECT_INFORMATION_CLASS
{
    NOK_ObjectBasicInformation = 0,
    NOK_ObjectNameInformation = 1,
    NOK_ObjectTypeInformation = 2,
    NOK_ObjectTypesInformation = 3,
    NOK_ObjectHandleFlagInformation = 4,
    NOK_ObjectSessionInformation = 5,
    NOK_ObjectSessionObjectInformation = 6,
    NOK_MaxObjectInfoClass = 7
}NOK_OBJECT_INFORMATION_CLASS, * NOK_POBJECT_INFORMATION_CLASS;
//0x80 bytes (sizeof)
typedef struct _NOK_MI_ACCESS_LOG_STATE
{
    NOK_MM_PAGE_ACCESS_INFO_HEADER* volatile CcAccessLog;               //0x0
    NOK_WORK_QUEUE_ITEM DisableAccessLogging;                           //0x8
    ULONG Enabled;                                                          //0x28
    ULONG MinLoggingPriority;                                               //0x2c
    ULONGLONG AccessLoggingLock;                                            //0x40
}NOK_MI_ACCESS_LOG_STATE, * NOK_PMI_ACCESS_LOG_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_OPENCOUNT_REASON
{
    NOK_OpenCount_SkipLogging = 0,
    NOK_OpenCount_AsyncRead = 1,
    NOK_OpenCount_FlushCache = 2,
    NOK_OpenCount_GetDirtyPage = 3,
    NOK_OpenCount_GetFlushedVDL = 4,
    NOK_OpenCount_InitCachemap1 = 5,
    NOK_OpenCount_InitCachemap2 = 6,
    NOK_OpenCount_InitCachemap3 = 7,
    NOK_OpenCount_InitCachemap4 = 8,
    NOK_OpenCount_InitCachemap5 = 9,
    NOK_OpenCount_MdlWrite = 10,
    NOK_OpenCount_MdlWriteAbort = 11,
    NOK_OpenCount_NotifyMappedWrite = 12,
    NOK_OpenCount_NotifyMappedWriteCompCallback = 13,
    NOK_OpenCount_PurgeCache = 14,
    NOK_OpenCount_PurgeCacheActiveViews = 15,
    NOK_OpenCount_ReadAhead = 16,
    NOK_OpenCount_SetFileSize = 17,
    NOK_OpenCount_SetFileSizeSection = 18,
    NOK_OpenCount_UninitCachemapReadAhead = 19,
    NOK_OpenCount_UninitCachemapReg = 20,
    NOK_OpenCount_UnmapInactiveViews = 21,
    NOK_OpenCount_UnmapInactiveViews1 = 22,
    NOK_OpenCount_UnmapInactiveViews2 = 23,
    NOK_OpenCount_UnmapInactiveViews3 = 24,
    NOK_OpenCount_WriteBehind = 25,
    NOK_OpenCount_WriteBehindComplete = 26,
    NOK_OpenCount_WriteBehindFailAcquire = 27
}NOK_OPENCOUNT_REASON, * NOK_POPENCOUNT_REASON;
//0xc bytes (sizeof)
typedef struct _NOK_PCI_BUSMASTER_DESCRIPTOR
{
    NOK_PCI_BUSMASTER_RID_TYPE Type;                                      //0x0
    ULONG Segment;                                                          //0x4
    union
    {
        struct
        {
            UCHAR Bus;                                                      //0x8
            UCHAR Device;                                                   //0x9
            UCHAR Function;                                                 //0xa
            UCHAR Reserved;                                                 //0xb
        } DeviceRid;                                                        //0x8
        struct
        {
            UCHAR Bus;                                                      //0x8
            UCHAR Device;                                                   //0x9
            UCHAR Function;                                                 //0xa
            UCHAR Reserved;                                                 //0xb
        } BridgeRid;                                                        //0x8
        struct
        {
            UCHAR SecondaryBus;                                             //0x8
            UCHAR SubordinateBus;                                           //0x9
        } MultipleBridges;                                                  //0x8
    };
}NOK_PCI_BUSMASTER_DESCRIPTOR, * NOK_PPCI_BUSMASTER_DESCRIPTOR;
//0x30 bytes (sizeof)
typedef struct _NOK_PCW_REGISTRATION_INFORMATION
{
    ULONG Version;                                                          //0x0
    NOK_PUNICODE_STRING Name;                                           //0x8
    ULONG CounterCount;                                                     //0x10
    NOK_PPCW_COUNTER_DESCRIPTOR Counters;                               //0x18
    LONG (*Callback)(NOK_PCW_CALLBACK_TYPE arg1, NOK_PPCW_CALLBACK_INFORMATION arg2, VOID* arg3); //0x20
    VOID* CallbackContext;                                                  //0x28
}NOK_PCW_REGISTRATION_INFORMATION, * NOK_PPCW_REGISTRATION_INFORMATION;
//0x20 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_INTERRUPT_RESOURCE
{
    NOK_PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    NOK_KINTERRUPT_MODE InterruptType;                                    //0x4
    NOK_KINTERRUPT_POLARITY InterruptPolarity;                            //0x8
    NOK_PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0xc
    UCHAR Count;                                                            //0x10
    ULONG* Pins;                                                            //0x18
}NOK_PEP_ACPI_INTERRUPT_RESOURCE, * NOK_PPEP_ACPI_INTERRUPT_RESOURCE;
//0x40 bytes (sizeof)
typedef struct _NOK_PEP_WORK_INFORMATION
{
    NOK_PEP_WORK_TYPE WorkType;                                           //0x0
    union
    {
        NOK_PEP_WORK_ACTIVE_COMPLETE ActiveComplete;                    //0x8
        NOK_PEP_WORK_IDLE_STATE IdleState;                              //0x8
        NOK_PEP_WORK_DEVICE_POWER DevicePower;                          //0x8
        NOK_PEP_WORK_POWER_CONTROL PowerControl;                        //0x8
        NOK_PEP_WORK_DEVICE_IDLE DeviceIdle;                            //0x8
        NOK_PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;             //0x8
        NOK_PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;             //0x8
        NOK_PEP_WORK_ACPI_NOTIFY AcpiNotify;                            //0x8
        NOK_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete; //0x8
    };
}NOK_PEP_WORK_INFORMATION, * NOK_PPEP_WORK_INFORMATION;
//0x4 bytes (sizeof)
typedef enum _NOK_PERFINFO_KERNELMEMORY_USAGE_TYPE
{
    NOK_PerfInfoMemUsagePfnMetadata = 0,
    NOK_PerfInfoMemUsageMax = 1
}NOK_PERFINFO_KERNELMEMORY_USAGE_TYPE, * NOK_PPERFINFO_KERNELMEMORY_USAGE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PERFINFO_MM_STAT
{
    NOK_PerfInfoMMStatNotUsed = 0,
    NOK_PerfInfoMMStatAggregatePageCombine = 1,
    NOK_PerfInfoMMStatIterationPageCombine = 2,
    NOK_PerfInfoMMStatMax = 3
}NOK_PERFINFO_MM_STAT, * NOK_PPERFINFO_MM_STAT;
//0x4 bytes (sizeof)
typedef enum _NOK_PF_FILE_ACCESS_TYPE
{
    NOK_PfFileAccessTypeRead = 0,
    NOK_PfFileAccessTypeWrite = 1,
    NOK_PfFileAccessTypeMax = 2
}NOK_PF_FILE_ACCESS_TYPE, * NOK_PPF_FILE_ACCESS_TYPE;
//0x50 bytes (sizeof)
typedef struct _NOK_PLUGPLAY_EVENT_BLOCK
{
    NOK_GUID EventGuid;                                                 //0x0
    NOK_PLUGPLAY_EVENT_CATEGORY EventCategory;                            //0x10
    ULONG* Result;                                                          //0x18
    ULONG Flags;                                                            //0x20
    ULONG TotalSize;                                                        //0x24
    VOID* DeviceObject;                                                     //0x28
    union
    {
        struct
        {
            NOK_GUID ClassGuid;                                         //0x30
            WCHAR SymbolicLinkName[1];                                      //0x40
        } DeviceClass;                                                      //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } TargetDevice;                                                     //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } InstallDevice;                                                    //0x30
        struct
        {
            VOID* NotificationStructure;                                    //0x30
            WCHAR DeviceId[1];                                              //0x38
        } CustomNotification;                                               //0x30
        struct
        {
            VOID* Notification;                                             //0x30
        } ProfileNotification;                                              //0x30
        struct
        {
            ULONG NotificationCode;                                         //0x30
            ULONG NotificationData;                                         //0x34
        } PowerNotification;                                                //0x30
        struct
        {
            NOK_PNP_VETO_TYPE VetoType;                                   //0x30
            WCHAR DeviceIdVetoNameBuffer[1];                                //0x34
        } VetoNotification;                                                 //0x30
        struct
        {
            NOK_GUID BlockedDriverGuid;                                 //0x30
        } BlockedDriverNotification;                                        //0x30
        struct
        {
            WCHAR ParentId[1];                                              //0x30
        } InvalidIDNotification;                                            //0x30
        struct
        {
            NOK_GUID PowerSettingGuid;                                  //0x30
            ULONG Flags;                                                    //0x40
            ULONG SessionId;                                                //0x44
            ULONG DataLength;                                               //0x48
            UCHAR Data[1];                                                  //0x4c
        } PowerSettingNotification;                                         //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } PropertyChangeNotification;                                       //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } DeviceInstanceNotification;                                       //0x30
    } u;                                                                    //0x30
}NOK_PLUGPLAY_EVENT_BLOCK, * NOK_PPLUGPLAY_EVENT_BLOCK;
//0x60 bytes (sizeof)
typedef struct _NOK_PNP_DEVICE_ACTION_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x10
    NOK_PNP_DEVICE_ACTION_REQUEST RequestType;                            //0x18
    UCHAR ReorderingBarrier;                                                //0x1c
    ULONGLONG RequestArgument;                                              //0x20
    NOK_PKEVENT CompletionEvent;                                        //0x28
    LONG* CompletionStatus;                                                 //0x30
    NOK_GUID ActivityId;                                                //0x38
    LONG RefCount;                                                          //0x48
    UCHAR Dequeued;                                                         //0x4c
    NOK_EX_PUSH_LOCK CancelLock;                                        //0x50
    UCHAR CancelRequested;                                                  //0x58
}NOK_PNP_DEVICE_ACTION_ENTRY, * NOK_PPNP_DEVICE_ACTION_ENTRY;
//0x720 bytes (sizeof)
typedef struct _NOK_KUSER_SHARED_DATA
{
    ULONG TickCountLowDeprecated;                                           //0x0
    ULONG TickCountMultiplier;                                              //0x4
    volatile NOK_KSYSTEM_TIME InterruptTime;                            //0x8
    volatile NOK_KSYSTEM_TIME SystemTime;                               //0x14
    volatile NOK_KSYSTEM_TIME TimeZoneBias;                             //0x20
    USHORT ImageNumberLow;                                                  //0x2c
    USHORT ImageNumberHigh;                                                 //0x2e
    WCHAR NtSystemRoot[260];                                                //0x30
    ULONG MaxStackTraceDepth;                                               //0x238
    ULONG CryptoExponent;                                                   //0x23c
    ULONG TimeZoneId;                                                       //0x240
    ULONG LargePageMinimum;                                                 //0x244
    ULONG AitSamplingValue;                                                 //0x248
    ULONG AppCompatFlag;                                                    //0x24c
    ULONGLONG RNGSeedVersion;                                               //0x250
    ULONG GlobalValidationRunlevel;                                         //0x258
    volatile LONG TimeZoneBiasStamp;                                        //0x25c
    ULONG NtBuildNumber;                                                    //0x260
    NOK_NT_PRODUCT_TYPE NtProductType;                                    //0x264
    UCHAR ProductTypeIsValid;                                               //0x268
    UCHAR Reserved0[1];                                                     //0x269
    USHORT NativeProcessorArchitecture;                                     //0x26a
    ULONG NtMajorVersion;                                                   //0x26c
    ULONG NtMinorVersion;                                                   //0x270
    UCHAR ProcessorFeatures[64];                                            //0x274
    ULONG Reserved1;                                                        //0x2b4
    ULONG Reserved3;                                                        //0x2b8
    volatile ULONG TimeSlip;                                                //0x2bc
    NOK_ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;            //0x2c0
    ULONG BootId;                                                           //0x2c4
    NOK_LARGE_INTEGER SystemExpirationDate;                              //0x2c8
    ULONG SuiteMask;                                                        //0x2d0
    UCHAR KdDebuggerEnabled;                                                //0x2d4
    union
    {
        UCHAR MitigationPolicies;                                           //0x2d5
        struct
        {
            UCHAR NXSupportPolicy:2;                                        //0x2d5
            UCHAR SEHValidationPolicy:2;                                    //0x2d5
            UCHAR CurDirDevicesSkippedForDlls:2;                            //0x2d5
            UCHAR Reserved:2;                                               //0x2d5
        };
    };
    USHORT CyclesPerYield;                                                  //0x2d6
    volatile ULONG ActiveConsoleId;                                         //0x2d8
    volatile ULONG DismountCount;                                           //0x2dc
    ULONG ComPlusPackage;                                                   //0x2e0
    ULONG LastSystemRITEventTickCount;                                      //0x2e4
    ULONG NumberOfPhysicalPages;                                            //0x2e8
    UCHAR SafeBootMode;                                                     //0x2ec
    UCHAR VirtualizationFlags;                                              //0x2ed
    UCHAR Reserved12[2];                                                    //0x2ee
    union
    {
        ULONG SharedDataFlags;                                              //0x2f0
        struct
        {
            ULONG DbgErrorPortPresent:1;                                    //0x2f0
            ULONG DbgElevationEnabled:1;                                    //0x2f0
            ULONG DbgVirtEnabled:1;                                         //0x2f0
            ULONG DbgInstallerDetectEnabled:1;                              //0x2f0
            ULONG DbgLkgEnabled:1;                                          //0x2f0
            ULONG DbgDynProcessorEnabled:1;                                 //0x2f0
            ULONG DbgConsoleBrokerEnabled:1;                                //0x2f0
            ULONG DbgSecureBootEnabled:1;                                   //0x2f0
            ULONG DbgMultiSessionSku:1;                                     //0x2f0
            ULONG DbgMultiUsersInSessionSku:1;                              //0x2f0
            ULONG DbgStateSeparationEnabled:1;                              //0x2f0
            ULONG SpareBits:21;                                             //0x2f0
        };
    };
    ULONG DataFlagsPad[1];                                                  //0x2f4
    ULONGLONG TestRetInstruction;                                           //0x2f8
    LONGLONG QpcFrequency;                                                  //0x300
    ULONG SystemCall;                                                       //0x308
    ULONG Reserved2;                                                        //0x30c
    ULONGLONG SystemCallPad[2];                                             //0x310
    union
    {
        volatile NOK_KSYSTEM_TIME TickCount;                            //0x320
        volatile ULONGLONG TickCountQuad;                                   //0x320
        ULONG ReservedTickCountOverlay[3];                                  //0x320
    };
    ULONG TickCountPad[1];                                                  //0x32c
    ULONG Cookie;                                                           //0x330
    ULONG CookiePad[1];                                                     //0x334
    LONGLONG ConsoleSessionForegroundProcessId;                             //0x338
    ULONGLONG TimeUpdateLock;                                               //0x340
    ULONGLONG BaselineSystemTimeQpc;                                        //0x348
    ULONGLONG BaselineInterruptTimeQpc;                                     //0x350
    ULONGLONG QpcSystemTimeIncrement;                                       //0x358
    ULONGLONG QpcInterruptTimeIncrement;                                    //0x360
    UCHAR QpcSystemTimeIncrementShift;                                      //0x368
    UCHAR QpcInterruptTimeIncrementShift;                                   //0x369
    USHORT UnparkedProcessorCount;                                          //0x36a
    ULONG EnclaveFeatureMask[4];                                            //0x36c
    ULONG TelemetryCoverageRound;                                           //0x37c
    USHORT UserModeGlobalLogger[16];                                        //0x380
    ULONG ImageFileExecutionOptions;                                        //0x3a0
    ULONG LangGenerationCount;                                              //0x3a4
    ULONGLONG Reserved4;                                                    //0x3a8
    volatile ULONGLONG InterruptTimeBias;                                   //0x3b0
    volatile ULONGLONG QpcBias;                                             //0x3b8
    ULONG ActiveProcessorCount;                                             //0x3c0
    volatile UCHAR ActiveGroupCount;                                        //0x3c4
    UCHAR Reserved9;                                                        //0x3c5
    union
    {
        USHORT QpcData;                                                     //0x3c6
        struct
        {
            volatile UCHAR QpcBypassEnabled;                                //0x3c6
            UCHAR QpcShift;                                                 //0x3c7
        };
    };
    NOK_LARGE_INTEGER TimeZoneBiasEffectiveStart;                        //0x3c8
    NOK_LARGE_INTEGER TimeZoneBiasEffectiveEnd;                          //0x3d0
    NOK_XSTATE_CONFIGURATION XState;                                    //0x3d8
    NOK_KSYSTEM_TIME FeatureConfigurationChangeStamp;                   //0x710
    ULONG Spare;                                                            //0x71c
}NOK_KUSER_SHARED_DATA, * NOK_PKUSER_SHARED_DATA;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_REBALANCE_FAILURE
{
    NOK_RebalanceFailureNone = 0,
    NOK_RebalanceFailureDisabled = 1,
    NOK_RebalanceFailureNoMemory = 2,
    NOK_RebalanceFailureQueryStopUnexpectedVeto = 3,
    NOK_RebalanceFailureNoRequirements = 4,
    NOK_RebalanceFailureNoCandidates = 5,
    NOK_RebalanceFailureNoConfiguration = 6
}NOK_PNP_REBALANCE_FAILURE, * NOK_PPNP_REBALANCE_FAILURE;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_STATE_TYPE
{
    NOK_SystemPowerState = 0,
    NOK_DevicePowerState = 1
}NOK_POWER_STATE_TYPE, * NOK_PPOWER_STATE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_REBALANCE_REASON
{
    NOK_RebalanceReasonUnknown = 0,
    NOK_RebalanceReasonRequirementsChanged = 1,
    NOK_RebalanceReasonNewDevice = 2
}NOK_PNP_REBALANCE_REASON, * NOK_PPNP_REBALANCE_REASON;
//0x70 bytes (sizeof)
typedef struct _NOK_PNP_REBALANCE_TRACE_CONTEXT
{
    ULONG DeviceCount;                                                      //0x0
    ULONG RebalancePhase;                                                   //0x4
    NOK_PNP_REBALANCE_REASON Reason[2];                                   //0x8
    NOK_PNP_REBALANCE_FAILURE Failure[2];                                 //0x10
    NOK_PDEVICE_NODE SubtreeRoot;                                       //0x18
    UCHAR SubtreeIncludesRoot;                                              //0x20
    NOK_PDEVICE_NODE TriggerRoot;                                       //0x28
    UCHAR RebalanceDueToDynamicPartitioning;                                //0x30
    ULONGLONG BeginTime;                                                    //0x38
    NOK_PDEVICE_NODE VetoNode[2];                                       //0x40
    NOK_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON VetoQueryRebalanceReason[2]; //0x50
    NOK_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;            //0x58
}NOK_PNP_REBALANCE_TRACE_CONTEXT, * NOK_PPNP_REBALANCE_TRACE_CONTEXT;
//0xc0 bytes (sizeof)
typedef struct _NOK_PNP_DEVICE_EVENT_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG Argument;                                                         //0x10
    LONG ArgumentStatus;                                                    //0x14
    NOK_PKEVENT CallerEvent;                                            //0x18
    VOID (*Callback)(VOID* arg1);                                           //0x20
    VOID* Context;                                                          //0x28
    NOK_PPNP_VETO_TYPE VetoType;                                          //0x30
    NOK_PUNICODE_STRING VetoName;                                       //0x38
    ULONG RefCount;                                                         //0x40
    ULONG Lock;                                                             //0x44
    UCHAR Cancel;                                                           //0x48
    NOK_PPNP_DEVICE_EVENT_ENTRY Parent;                                 //0x50
    NOK_GUID ActivityId;                                                //0x58
    NOK_PPNP_WATCHDOG Watchdog;                                         //0x68
    NOK_PLUGPLAY_EVENT_BLOCK Data;                                      //0x70
}NOK_PNP_DEVICE_EVENT_ENTRY, * NOK_PPNP_DEVICE_EVENT_ENTRY;
//0x4 bytes (sizeof)
typedef enum _NOK_PNP_WATCHDOG_TYPE
{
    NOK_PNP_EVENT_WORKER_WATCHDOG = 1,
    NOK_PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2,
    NOK_PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3,
    NOK_PNP_ADD_DEVICE_WATCHDOG = 4,
    NOK_PNP_DRIVER_ENTRY_WATCHDOG = 5
}NOK_PNP_WATCHDOG_TYPE, * NOK_PPNP_WATCHDOG_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_POLICY_AUDIT_EVENT_TYPE
{
    NOK_AuditCategorySystem = 0,
    NOK_AuditCategoryLogon = 1,
    NOK_AuditCategoryObjectAccess = 2,
    NOK_AuditCategoryPrivilegeUse = 3,
    NOK_AuditCategoryDetailedTracking = 4,
    NOK_AuditCategoryPolicyChange = 5,
    NOK_AuditCategoryAccountManagement = 6,
    NOK_AuditCategoryDirectoryServiceAccess = 7,
    NOK_AuditCategoryAccountLogon = 8
}NOK_POLICY_AUDIT_EVENT_TYPE, * NOK_PPOLICY_AUDIT_EVENT_TYPE;
//0x78 bytes (sizeof)
typedef struct _NOK_OBJECT_TYPE_INITIALIZER
{
    USHORT Length;                                                          //0x0
    union
    {
        USHORT ObjectTypeFlags;                                             //0x2
        struct
        {
            UCHAR CaseInsensitive:1;                                        //0x2
            UCHAR UnnamedObjectsOnly:1;                                     //0x2
            UCHAR UseDefaultObject:1;                                       //0x2
            UCHAR SecurityRequired:1;                                       //0x2
            UCHAR MaintainHandleCount:1;                                    //0x2
            UCHAR MaintainTypeList:1;                                       //0x2
            UCHAR SupportsObjectCallbacks:1;                                //0x2
            UCHAR CacheAligned:1;                                           //0x2
            UCHAR UseExtendedParameters:1;                                  //0x3
            UCHAR Reserved:7;                                               //0x3
        };
    };
    ULONG ObjectTypeCode;                                                   //0x4
    ULONG InvalidAttributes;                                                //0x8
    NOK_GENERIC_MAPPING GenericMapping;                                 //0xc
    ULONG ValidAccessMask;                                                  //0x1c
    ULONG RetainAccess;                                                     //0x20
    NOK_POOL_TYPE PoolType;                                               //0x24
    ULONG DefaultPagedPoolCharge;                                           //0x28
    ULONG DefaultNonPagedPoolCharge;                                        //0x2c
    VOID (*DumpProcedure)(VOID* arg1, NOK_POBJECT_DUMP_CONTROL arg2);   //0x30
    LONG (*OpenProcedure)(NOK_OB_OPEN_REASON arg1, CHAR arg2, NOK_PEPROCESS arg3, VOID* arg4, ULONG* arg5, ULONG arg6); //0x38
    VOID (*CloseProcedure)(NOK_PEPROCESS arg1, VOID* arg2, ULONGLONG arg3, ULONGLONG arg4); //0x40
    VOID (*DeleteProcedure)(VOID* arg1);                                    //0x48
    union
    {
        LONG (*ParseProcedure)(VOID* arg1, VOID* arg2, NOK_PACCESS_STATE arg3, CHAR arg4, ULONG arg5, NOK_PUNICODE_STRING arg6, NOK_PUNICODE_STRING arg7, VOID* arg8, NOK_PSECURITY_QUALITY_OF_SERVICE arg9, VOID** arg10); //0x50
        LONG (*ParseProcedureEx)(VOID* arg1, VOID* arg2, NOK_PACCESS_STATE arg3, CHAR arg4, ULONG arg5, NOK_PUNICODE_STRING arg6, NOK_PUNICODE_STRING arg7, VOID* arg8, NOK_PSECURITY_QUALITY_OF_SERVICE arg9, NOK_POB_EXTENDED_PARSE_PARAMETERS arg10, VOID** arg11); //0x50
    };
    LONG (*SecurityProcedure)(VOID* arg1, NOK_SECURITY_OPERATION_CODE arg2, ULONG* arg3, VOID* arg4, ULONG* arg5, VOID** arg6, NOK_POOL_TYPE arg7, NOK_PGENERIC_MAPPING arg8, CHAR arg9); //0x58
    LONG (*QueryNameProcedure)(VOID* arg1, UCHAR arg2, NOK_POBJECT_NAME_INFORMATION arg3, ULONG arg4, ULONG* arg5, CHAR arg6); //0x60
    UCHAR (*OkayToCloseProcedure)(NOK_PEPROCESS arg1, VOID* arg2, VOID* arg3, CHAR arg4); //0x68
    ULONG WaitObjectFlagMask;                                               //0x70
    USHORT WaitObjectFlagOffset;                                            //0x74
    USHORT WaitObjectPointerOffset;                                         //0x76
}NOK_OBJECT_TYPE_INITIALIZER, * NOK_POBJECT_TYPE_INITIALIZER;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_DEEP_SLEEP_DISENGAGE_REASON
{
    NOK_PopDeepSleepDisengageReasonInactive = 0,
    NOK_PopDeepSleepDisengageReasonNonAoAc = 1,
    NOK_PopDeepSleepDisengageReasonPendingIrps = 2,
    NOK_PopDeepSleepDisengageReasonPowerSettings = 3,
    NOK_PopDeepSleepDisengageReasonDozeS4WorkerQueued = 4,
    NOK_PopDeepSleepDisengageReasonSystemPowerTransition = 5,
    NOK_PopDeepSleepDisengageReasonDeviceBlockingDrips = 6,
    NOK_PopDeepSleepDisengageReasonAcpi = 7,
    NOK_PopDeepSleepDisengageReasonDirectedDripsTransition = 8,
    NOK_PopDeepSleepDisengageReasonPepPreVeto = 9,
    NOK_PopDeepSleepDisengageReasonMax = 10
}NOK_POP_DEEP_SLEEP_DISENGAGE_REASON, * NOK_PPOP_DEEP_SLEEP_DISENGAGE_REASON;
//0x70 bytes (sizeof)
typedef struct _NOK_DEVOBJ_EXTENSION
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x8
    ULONG PowerFlags;                                                       //0x10
    NOK_DEVICE_OBJECT_POWER_EXTENSION* Dope;                            //0x18
    ULONG ExtensionFlags;                                                   //0x20
    VOID* DeviceNode;                                                       //0x28
    NOK_PDEVICE_OBJECT AttachedTo;                                      //0x30
    LONG StartIoCount;                                                      //0x38
    LONG StartIoKey;                                                        //0x3c
    ULONG StartIoFlags;                                                     //0x40
    NOK_PVPB Vpb;                                                       //0x48
    VOID* DependencyNode;                                                   //0x50
    VOID* InterruptContext;                                                 //0x58
    LONG InterruptCount;                                                    //0x60
    VOID* VerifierContext;                                                  //0x68
}NOK_DEVOBJ_EXTENSION, * NOK_PDEVOBJ_EXTENSION;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON
{
    NOK_DirectedDripsProblemDeviceReasonSpecialDevice = 0,
    NOK_DirectedDripsProblemDeviceReasonNoDfx = 1,
    NOK_DirectedDripsProblemDeviceReasonNoPs4 = 2,
    NOK_DirectedDripsProblemDeviceReasonNoPs4Root = 3,
    NOK_DirectedDripsProblemDeviceReasonComponentContraint = 4,
    NOK_DirectedDripsProblemDeviceReasonDfxFailure = 5,
    NOK_DirectedDripsProblemDeviceReasonPagingDevice = 6,
    NOK_DirectedDripsProblemDeviceReasonDebuggingDevice = 7,
    NOK_DirectedDripsProblemDeviceReasonDfxNotAllowed = 8,
    NOK_DirectedDripsProblemDeviceReasonMax = 9
}NOK_POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON, * NOK_PPOP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_FX_WORK_POOL_QUEUE
{
    NOK_PopFxWorkPoolQueueEmergency = 0,
    NOK_PopFxWorkPoolQueuePlugin = 1,
    NOK_PopFxWorkPoolQueueMax = 2
}NOK_POP_FX_WORK_POOL_QUEUE, * NOK_PPOP_FX_WORK_POOL_QUEUE;
//0x100 bytes (sizeof)
typedef struct _NOK_LPCP_PORT_OBJECT
{
    NOK_PLPCP_PORT_OBJECT ConnectionPort;                               //0x0
    NOK_PLPCP_PORT_OBJECT ConnectedPort;                                //0x8
    NOK_LPCP_PORT_QUEUE MsgQueue;                                       //0x10
    NOK_CLIENT_ID Creator;                                              //0x30
    VOID* ClientSectionBase;                                                //0x40
    VOID* ServerSectionBase;                                                //0x48
    VOID* PortContext;                                                      //0x50
    NOK_PETHREAD ClientThread;                                          //0x58
    NOK_SECURITY_QUALITY_OF_SERVICE SecurityQos;                        //0x60
    NOK_SECURITY_CLIENT_CONTEXT StaticSecurity;                         //0x70
    NOK_LIST_ENTRY LpcReplyChainHead;                                   //0xb8
    NOK_LIST_ENTRY LpcDataInfoChainHead;                                //0xc8
    union
    {
        NOK_PEPROCESS ServerProcess;                                    //0xd8
        NOK_PEPROCESS MappingProcess;                                   //0xd8
    };
    USHORT MaxMessageLength;                                                //0xe0
    USHORT MaxConnectionInfoLength;                                         //0xe2
    ULONG Flags;                                                            //0xe4
    NOK_KEVENT WaitEvent;                                               //0xe8
}NOK_LPCP_PORT_OBJECT, * NOK_PLPCP_PORT_OBJECT;
//0x70 bytes (sizeof)
typedef struct _NOK_PENDING_RELATIONS_LIST_ENTRY
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_WORK_QUEUE_ITEM WorkItem;                                       //0x10
    NOK_PPNP_DEVICE_EVENT_ENTRY DeviceEvent;                            //0x30
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x38
    NOK_PRELATION_LIST RelationsList;                                   //0x40
    NOK_PIRP EjectIrp;                                                  //0x48
    NOK_IRPLOCK Lock;                                                      //0x50
    ULONG Problem;                                                          //0x54
    UCHAR ProfileChangingEject;                                             //0x58
    UCHAR DisplaySafeRemovalDialog;                                         //0x59
    NOK_SYSTEM_POWER_STATE LightestSleepState;                            //0x5c
    NOK_PDOCK_INTERFACE DockInterface;                                   //0x60
    UCHAR DequeuePending;                                                   //0x68
    NOK_PNP_DEVICE_DELETE_TYPE DeleteType;                                //0x6c
}NOK_PENDING_RELATIONS_LIST_ENTRY, * NOK_PPENDING_RELATIONS_LIST_ENTRY;
//0x8 bytes (sizeof)
typedef union _NOK_WHEA_TIMESTAMP
{
    ULONGLONG Seconds:8;                                                    //0x0
    ULONGLONG Minutes:8;                                                    //0x0
    ULONGLONG Hours:8;                                                      //0x0
    ULONGLONG Precise:1;                                                    //0x0
    ULONGLONG Reserved:7;                                                   //0x0
    ULONGLONG Day:8;                                                        //0x0
    ULONGLONG Month:8;                                                      //0x0
    ULONGLONG Year:8;                                                       //0x0
    ULONGLONG Century:8;                                                    //0x0
    NOK_LARGE_INTEGER AsLARGE_INTEGER;                                   //0x0
}NOK_WHEA_TIMESTAMP, * NOK_PWHEA_TIMESTAMP;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_SLEEP_CHECKPOINT
{
    NOK_PopSleepCheckpointInvalid = 0,
    NOK_PopSleepCheckpointPowerTransitionStart = 1,
    NOK_PopSleepCheckpointSuspendAppsBefore = 2,
    NOK_PopSleepCheckpointSuspendAppsAfter = 3,
    NOK_PopSleepCheckpointSuspendServicesBefore = 4,
    NOK_PopSleepCheckpointSuspendServicesAfter = 5,
    NOK_PopSleepCheckpointNotifySuperfetchBefore = 6,
    NOK_PopSleepCheckpointNotifySuperfetchAfter = 7,
    NOK_PopSleepCheckpointNotifyCallbacksBefore = 8,
    NOK_PopSleepCheckpointNotifyCallbacksAfter = 9,
    NOK_PopSleepCheckpointSleepTransactionCommitted = 10,
    NOK_PopSleepCheckpointQueryDriversBefore = 11,
    NOK_PopSleepCheckpointQueryDriversAfter = 12,
    NOK_PopSleepCheckpointAllocatingHiberContext = 13,
    NOK_PopSleepCheckpointSuspendDriversBefore = 14,
    NOK_PopSleepCheckpointPreSleepNotification = 16,
    NOK_PopSleepCheckpointInterruptsDisabledBegin = 17,
    NOK_PopSleepCheckpointInvokeHandlerBefore = 18,
    NOK_PopSleepCheckpointSaveHiberContextBegin = 19,
    NOK_PopSleepCheckpointInitializeDumpStackFailed = 20,
    NOK_PopSleepCheckpointHiberWriteFailed = 21,
    NOK_PopSleepCheckpointHiberFileTooSmall = 22,
    NOK_PopSleepCheckpointSaveHiberContextFailed = 23,
    NOK_PopSleepCheckpointSaveHiberContextEnd = 24,
    NOK_PopSleepCheckpointHiberKernelHandoff = 25,
    NOK_PopSleepCheckpointInvokeHandlerAfter = 26,
    NOK_PopSleepCheckpointReadHiberfileBefore = 27,
    NOK_PopSleepCheckpointInitializeDumpStackForReadFailed = 28,
    NOK_PopSleepCheckpointHiberReadFailed = 29,
    NOK_PopSleepCheckpointChecksumFailure = 30,
    NOK_PopSleepCheckpointDecompressionFailed = 31,
    NOK_PopSleepCheckpointReadHiberfileAfter = 32,
    NOK_PopSleepCheckpointInterruptsDisabledEnd = 33,
    NOK_PopSleepCheckpointWakeDriversAfter = 36,
    NOK_PopSleepCheckpointResumeAppsBefore = 37,
    NOK_PopSleepCheckpointResumeAppsAfter = 38,
    NOK_PopSleepCheckpointResumeServicesBefore = 39,
    NOK_PopSleepCheckpointResumeServicesAfter = 40,
    NOK_PopSleepCheckpointPowerTransitionEnd = 41,
    NOK_PopSleepCheckpointAllocatingHiberContextNoFileObject = 42,
    NOK_PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed = 43,
    NOK_PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed = 44,
    NOK_PopSleepCheckpointAllocatingHiberContextBcdOpenFailed = 45,
    NOK_PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed = 46,
    NOK_PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed = 47,
    NOK_PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed = 48,
    NOK_PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1 = 49,
    NOK_PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed = 50,
    NOK_PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2 = 51,
    NOK_PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed = 52,
    NOK_PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed = 53,
    NOK_PopSleepCheckpointPrepareSleepBefore = 54,
    NOK_PopSleepCheckpointPrepareSleepAfter = 55,
    NOK_PopSleepCheckpointBootstatAvailable = 56,
    NOK_PopSleepCheckpointMax = 57
}NOK_POP_SLEEP_CHECKPOINT, * NOK_PPOP_SLEEP_CHECKPOINT;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_SLEEP_CHECKPOINT_STATUS
{
    NOK_PopSleepCheckpointStatusDisabled = 0,
    NOK_PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1,
    NOK_PopSleepCheckpointStatusEnabledManually = 4,
    NOK_PopSleepCheckpointStatusEnabledExperiment = 4,
    NOK_PopSleepCheckpointStatusEnabledMax = 7,
    NOK_PopSleepCheckpointStatusFailedNotEfiSystem = 8,
    NOK_PopSleepCheckpointStatusFailedInsufficientSpace = 9,
    NOK_PopSleepCheckpointStatusFailedTooSlow = 10,
    NOK_PopSleepCheckpointStatusFailedOtherError = 15,
    NOK_PopSleepCheckpointStatusMax = 15
}NOK_POP_SLEEP_CHECKPOINT_STATUS, * NOK_PPOP_SLEEP_CHECKPOINT_STATUS;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_SYSTEM_IDLE_EVENT_TYPE
{
    NOK_PopSystemIdleEventTypeMonitorOffUserInput = 0,
    NOK_PopSystemIdleEventTypeMonitorOnUserInput = 1,
    NOK_PopSystemIdleEventTypeUserPresence = 2,
    NOK_PopSystemIdleEventTypeResumeFromSxSystemPowerState = 3,
    NOK_PopSystemIdleEventTypeMax = 4,
    NOK_PopSystemIdleEventTypeInvalid = 4
}NOK_POP_SYSTEM_IDLE_EVENT_TYPE, * NOK_PPOP_SYSTEM_IDLE_EVENT_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_INFORMATION_LEVEL_INTERNAL
{
    NOK_PowerInternalAcpiInterfaceRegister = 0,
    NOK_PowerInternalS0LowPowerIdleInfo = 1,
    NOK_PowerInternalReapplyBrightnessSettings = 2,
    NOK_PowerInternalUserAbsencePrediction = 3,
    NOK_PowerInternalUserAbsencePredictionCapability = 4,
    NOK_PowerInternalPoProcessorLatencyHint = 5,
    NOK_PowerInternalStandbyNetworkRequest = 6,
    NOK_PowerInternalDirtyTransitionInformation = 7,
    NOK_PowerInternalSetBackgroundTaskState = 8,
    NOK_PowerInternalReservedDoNotUseEnum9 = 9,
    NOK_PowerInternalReservedDoNotUseEnum10 = 10,
    NOK_PowerInternalReservedDoNotUseEnum11 = 11,
    NOK_PowerInternalReservedDoNotUseEnum12 = 12,
    NOK_PowerInternalReservedDoNotUseEnum13 = 13,
    NOK_PowerInternalReservedDoNotUseEnum14 = 14,
    NOK_PowerInternalReservedDoNotUseEnum15 = 15,
    NOK_PowerInternalReservedDoNotUseEnum16 = 16,
    NOK_PowerInternalReservedDoNotUseEnum17 = 17,
    NOK_PowerInternalBootSessionStandbyActivationInformation = 18,
    NOK_PowerInternalSessionPowerState = 19,
    NOK_PowerInternalSessionTerminalInput = 20,
    NOK_PowerInternalSetWatchdog = 21,
    NOK_PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
    NOK_PowerInternalExternalMonitorConnected = 23,
    NOK_PowerInternalHighPrecisionBrightnessSettings = 24,
    NOK_PowerInternalWinrtScreenToggle = 25,
    NOK_PowerInternalPpmQosDisable = 26,
    NOK_PowerInternalTransitionCheckpoint = 27,
    NOK_PowerInternalInputControllerState = 28,
    NOK_PowerInternalFirmwareResetReason = 29,
    NOK_PowerInternalPpmSchedulerQosSupport = 30,
    NOK_PowerInternalBootStatGet = 31,
    NOK_PowerInternalBootStatSet = 32,
    NOK_PowerInternalCallHasNotReturnedWatchdog = 33,
    NOK_PowerInternalBootStatCheckIntegrity = 34,
    NOK_PowerInternalBootStatRestoreDefaults = 35,
    NOK_PowerInternalHostEsStateUpdate = 36,
    NOK_PowerInternalGetPowerActionState = 37,
    NOK_PowerInternalBootStatUnlock = 38,
    NOK_PowerInternalWakeOnVoiceState = 39,
    NOK_PowerInternalDeepSleepBlock = 40,
    NOK_PowerInternalIsPoFxDevice = 41,
    NOK_PowerInternalPowerTransitionExtensionAtBoot = 42,
    NOK_PowerInternalProcessorBrandedFrequency = 43,
    NOK_PowerInternalTimeBrokerExpirationReason = 44,
    NOK_PowerInternalNotifyUserShutdownStatus = 45,
    NOK_PowerInternalPowerRequestTerminalCoreWindow = 46,
    NOK_PowerInternalProcessorIdleVeto = 47,
    NOK_PowerInternalPlatformIdleVeto = 48,
    NOK_PowerInternalIsLongPowerButtonBugcheckEnabled = 49,
    NOK_PowerInternalAutoChkCausedReboot = 50,
    NOK_PowerInternalSetWakeAlarmOverride = 51,
    NOK_PowerInternalDirectedFxAddTestDevice = 53,
    NOK_PowerInternalDirectedFxRemoveTestDevice = 54,
    NOK_PowerInternalDirectedFxSetMode = 56,
    NOK_PowerInternalRegisterPowerPlane = 57,
    NOK_PowerInternalSetDirectedDripsFlags = 58,
    NOK_PowerInternalClearDirectedDripsFlags = 59,
    NOK_PowerInternalRetrieveHiberFileResumeContext = 60,
    NOK_PowerInternalReadHiberFilePage = 61,
    NOK_PowerInternalLastBootSucceeded = 62,
    NOK_PowerInternalQuerySleepStudyHelperRoutineBlock = 63,
    NOK_PowerInternalDirectedDripsQueryCapabilities = 64,
    NOK_PowerInternalClearConstraints = 65,
    NOK_PowerInternalSoftParkVelocityEnabled = 66,
    NOK_PowerInternalQueryIntelPepCapabilities = 67,
    NOK_PowerInformationInternalMaximum = 68
}NOK_POWER_INFORMATION_LEVEL_INTERNAL, * NOK_PPOWER_INFORMATION_LEVEL_INTERNAL;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI
{
    NOK_PowerInformationInternalTtmFirst = 4096,
    NOK_PowerInternalTtmOpenTerminal = 4096,
    NOK_PowerInternalTtmCreateTerminal = 4097,
    NOK_PowerInternalTtmEvacuateDevices = 4098,
    NOK_PowerInternalTtmCreateTerminalEventQueue = 4099,
    NOK_PowerInternalTtmGetTerminalEvent = 4100,
    NOK_PowerInternalTtmSetDefaultDeviceAssignment = 4101,
    NOK_PowerInternalTtmAssignDevice = 4102,
    NOK_PowerInternalTtmSetDisplayState = 4103,
    NOK_PowerInternalTtmSetDisplayTimeouts = 4104,
    NOK_PowerInternalTtmSetDisplayPowerRequest = 4105,
    NOK_PowerInternalTtmSetInputWakeCapability = 4106,
    NOK_PowerInformationInternalTtmLast = 4106
}NOK_POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI, * NOK_PPOWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_REQUEST_TYPE
{
    NOK_PowerRequestDisplayRequired = 0,
    NOK_PowerRequestSystemRequired = 1,
    NOK_PowerRequestAwayModeRequired = 2,
    NOK_PowerRequestExecutionRequired = 3
}NOK_POWER_REQUEST_TYPE, * NOK_PPOWER_REQUEST_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_POWER_REQUEST_TYPE_INTERNAL
{
    NOK_PowerRequestDisplayRequiredInternal = 0,
    NOK_PowerRequestSystemRequiredInternal = 1,
    NOK_PowerRequestAwayModeRequiredInternal = 2,
    NOK_PowerRequestExecutionRequiredInternal = 3,
    NOK_PowerRequestPerfBoostRequiredInternal = 4,
    NOK_PowerRequestActiveLockScreenInternal = 5,
    NOK_PowerRequestInternalInvalid = 6
}NOK_POWER_REQUEST_TYPE_INTERNAL, * NOK_PPOWER_REQUEST_TYPE_INTERNAL;
//0x4 bytes (sizeof)
typedef enum _NOK_PO_CS_DEVICE_NOTIFICATION_TYPE
{
    NOK_PoCsDeviceNotificationStorage = 0,
    NOK_PoCsDeviceNotificationWiFi = 1,
    NOK_PoCsDeviceNotificationMbn = 2,
    NOK_PoCsDeviceNotificationAudio = 3,
    NOK_PoCsDeviceNotificationEthernet = 4,
    NOK_PoCsDeviceNotificationMaximum = 5
}NOK_PO_CS_DEVICE_NOTIFICATION_TYPE, * NOK_PPO_CS_DEVICE_NOTIFICATION_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PO_FX_PERF_STATE_UNIT
{
    NOK_PoFxPerfStateUnitOther = 0,
    NOK_PoFxPerfStateUnitFrequency = 1,
    NOK_PoFxPerfStateUnitBandwidth = 2,
    NOK_PoFxPerfStateUnitMaximum = 3
}NOK_PO_FX_PERF_STATE_UNIT, * NOK_PPO_FX_PERF_STATE_UNIT;
//0x30 bytes (sizeof)
typedef struct _NOK_PO_FX_COMPONENT_PERF_SET
{
    NOK_UNICODE_STRING Name;                                            //0x0
    ULONGLONG Flags;                                                        //0x10
    NOK_PO_FX_PERF_STATE_UNIT Unit;                                       //0x18
    NOK_PO_FX_PERF_STATE_TYPE Type;                                       //0x1c
    union
    {
        struct
        {
            ULONG Count;                                                    //0x20
            NOK_PPO_FX_PERF_STATE States;                               //0x28
        } Discrete;                                                         //0x20
        struct
        {
            ULONGLONG Minimum;                                              //0x20
            ULONGLONG Maximum;                                              //0x28
        } Range;                                                            //0x20
    };
}NOK_PO_FX_COMPONENT_PERF_SET, * NOK_PPO_FX_COMPONENT_PERF_SET;
//0x4 bytes (sizeof)
typedef enum _NOK_PO_HIBER_FORCE_DISABLE_REASON
{
    NOK_PoHiberForceDisableReasonPolicy = 0,
    NOK_PoHiberForceDisableReasonGuardedHost = 1,
    NOK_PoHiberForceDisableReasonMax = 2
}NOK_PO_HIBER_FORCE_DISABLE_REASON, * NOK_PPO_HIBER_FORCE_DISABLE_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_PO_MODERN_SLEEP_ACTION
{
    NOK_PoModernSleepActionGlobalActivatorsVeto = 0,
    NOK_PoModernSleepActionNonBlockingPhases = 1,
    NOK_PoModernSleepActionForceIdle = 2,
    NOK_PoModernSleepActionMinimalBlockingNotificationClients = 3,
    NOK_PoModernSleepActionMax = 4
}NOK_PO_MODERN_SLEEP_ACTION, * NOK_PPO_MODERN_SLEEP_ACTION;
//0x4 bytes (sizeof)
typedef enum _NOK_PPM_PERF_QOS_DISABLE_REASON
{
    NOK_PpmPerfQosDisableInternal = 0,
    NOK_PpmPerfQosDisableNoProfile = 1,
    NOK_PpmPerfQosDisableNoPolicy = 2,
    NOK_PpmPerfQosDisableInsufficientPolicy = 3,
    NOK_PpmPerfQosDisableMaxOverride = 4,
    NOK_PpmPerfQosDisableLowLatency = 5,
    NOK_PpmPerfQosDisableSmtScheduler = 6,
    NOK_PpmPerfQosDisableNoHardwareSupport = 7,
    NOK_PpmPerfQosDisableGroupPolicy = 8,
    NOK_PpmPerfQosDisableMax = 9
}NOK_PPM_PERF_QOS_DISABLE_REASON, * NOK_PPPM_PERF_QOS_DISABLE_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_PP_NPAGED_LOOKASIDE_NUMBER
{
    NOK_LookasideSmallIrpList = 0,
    NOK_LookasideMediumIrpList = 1,
    NOK_LookasideLargeIrpList = 2,
    NOK_LookasideMdlList = 3,
    NOK_LookasideCreateInfoList = 4,
    NOK_LookasideNameBufferList = 5,
    NOK_LookasideTwilightList = 6,
    NOK_LookasideCompletionList = 7,
    NOK_LookasideScratchBufferList = 8,
    NOK_LookasideMaximumList = 9
}NOK_PP_NPAGED_LOOKASIDE_NUMBER, * NOK_PPP_NPAGED_LOOKASIDE_NUMBER;
//0x4 bytes (sizeof)
typedef union _NOK_KPRCBFLAG
{
    volatile LONG PrcbFlags;                                                //0x0
    ULONG BamQosLevel:8;                                                    //0x0
    ULONG PendingQosUpdate:2;                                               //0x0
    ULONG CacheIsolationEnabled:1;                                          //0x0
    ULONG TracepointActive:1;                                               //0x0
    ULONG PrcbFlagsReserved:20;                                             //0x0
}NOK_KPRCBFLAG, * NOK_PKPRCBFLAG;
//0xaf00 bytes (sizeof)
typedef struct _NOK_KPRCB
{
    ULONG MxCsr;                                                            //0x0
    UCHAR LegacyNumber;                                                     //0x4
    UCHAR ReservedMustBeZero;                                               //0x5
    UCHAR InterruptRequest;                                                 //0x6
    UCHAR IdleHalt;                                                         //0x7
    NOK_PKTHREAD CurrentThread;                                         //0x8
    NOK_PKTHREAD NextThread;                                            //0x10
    NOK_PKTHREAD IdleThread;                                            //0x18
    UCHAR NestingLevel;                                                     //0x20
    UCHAR ClockOwner;                                                       //0x21
    union
    {
        UCHAR PendingTickFlags;                                             //0x22
        struct
        {
            UCHAR PendingTick:1;                                            //0x22
            UCHAR PendingBackupTick:1;                                      //0x22
        };
    };
    UCHAR IdleState;                                                        //0x23
    ULONG Number;                                                           //0x24
    ULONGLONG RspBase;                                                      //0x28
    ULONGLONG PrcbLock;                                                     //0x30
    CHAR* PriorityState;                                                    //0x38
    CHAR CpuType;                                                           //0x40
    CHAR CpuID;                                                             //0x41
    union
    {
        USHORT CpuStep;                                                     //0x42
        struct
        {
            UCHAR CpuStepping;                                              //0x42
            UCHAR CpuModel;                                                 //0x43
        };
    };
    ULONG MHz;                                                              //0x44
    ULONGLONG HalReserved[8];                                               //0x48
    USHORT MinorVersion;                                                    //0x88
    USHORT MajorVersion;                                                    //0x8a
    UCHAR BuildType;                                                        //0x8c
    UCHAR CpuVendor;                                                        //0x8d
    UCHAR CoresPerPhysicalProcessor;                                        //0x8e
    UCHAR LogicalProcessorsPerCore;                                         //0x8f
    ULONGLONG TscFrequency;                                                 //0x90
    ULONGLONG PrcbPad04[5];                                                 //0x98
    NOK_PKNODE ParentNode;                                              //0xc0
    ULONGLONG GroupSetMember;                                               //0xc8
    UCHAR Group;                                                            //0xd0
    UCHAR GroupIndex;                                                       //0xd1
    UCHAR PrcbPad05[2];                                                     //0xd2
    ULONG InitialApicId;                                                    //0xd4
    ULONG ScbOffset;                                                        //0xd8
    ULONG ApicMask;                                                         //0xdc
    VOID* AcpiReserved;                                                     //0xe0
    ULONG CFlushSize;                                                       //0xe8
    NOK_KPRCBFLAG PrcbFlags;                                             //0xec
    union
    {
        struct
        {
            ULONGLONG TrappedSecurityDomain;                                //0xf0
            union
            {
                UCHAR BpbState;                                             //0xf8
                struct
                {
                    UCHAR BpbCpuIdle:1;                                     //0xf8
                    UCHAR BpbFlushRsbOnTrap:1;                              //0xf8
                    UCHAR BpbIbpbOnReturn:1;                                //0xf8
                    UCHAR BpbIbpbOnTrap:1;                                  //0xf8
                    UCHAR BpbIbpbOnRetpolineExit:1;                         //0xf8
                    UCHAR BpbStateReserved:3;                               //0xf8
                };
            };
            union
            {
                UCHAR BpbFeatures;                                          //0xf9
                struct
                {
                    UCHAR BpbClearOnIdle:1;                                 //0xf9
                    UCHAR BpbEnabled:1;                                     //0xf9
                    UCHAR BpbSmep:1;                                        //0xf9
                    UCHAR BpbFeaturesReserved:5;                            //0xf9
                };
            };
            UCHAR BpbCurrentSpecCtrl;                                       //0xfa
            UCHAR BpbKernelSpecCtrl;                                        //0xfb
            UCHAR BpbNmiSpecCtrl;                                           //0xfc
            UCHAR BpbUserSpecCtrl;                                          //0xfd
            volatile SHORT PairRegister;                                    //0xfe
        };
        ULONGLONG PrcbPad11[2];                                             //0xf0
    };
    NOK_KPROCESSOR_STATE ProcessorState;                                //0x100
    NOK_XSAVE_AREA_HEADER* ExtendedSupervisorState;                     //0x6c0
    ULONG ProcessorSignature;                                               //0x6c8
    ULONG ProcessorFlags;                                                   //0x6cc
    union
    {
        struct
        {
            UCHAR BpbRetpolineExitSpecCtrl;                                 //0x6d0
            UCHAR BpbTrappedRetpolineExitSpecCtrl;                          //0x6d1
            union
            {
                UCHAR BpbTrappedBpbState;                                   //0x6d2
                struct
                {
                    UCHAR BpbTrappedCpuIdle:1;                              //0x6d2
                    UCHAR BpbTrappedFlushRsbOnTrap:1;                       //0x6d2
                    UCHAR BpbTrappedIbpbOnReturn:1;                         //0x6d2
                    UCHAR BpbTrappedIbpbOnTrap:1;                           //0x6d2
                    UCHAR BpbTrappedIbpbOnRetpolineExit:1;                  //0x6d2
                    UCHAR BpbtrappedBpbStateReserved:3;                     //0x6d2
                };
            };
            union
            {
                UCHAR BpbRetpolineState;                                    //0x6d3
                struct
                {
                    UCHAR BpbRunningNonRetpolineCode:1;                     //0x6d3
                    UCHAR BpbIndirectCallsSafe:1;                           //0x6d3
                    UCHAR BpbRetpolineEnabled:1;                            //0x6d3
                    UCHAR BpbRetpolineStateReserved:5;                      //0x6d3
                };
            };
            ULONG PrcbPad12b;                                               //0x6d4
        };
        ULONGLONG PrcbPad12a;                                               //0x6d0
    };
    ULONGLONG PrcbPad12[3];                                                 //0x6d8
    NOK_KSPIN_LOCK_QUEUE LockQueue[17];                                 //0x6f0
    NOK_PP_LOOKASIDE_LIST PPLookasideList[16];                          //0x800
    NOK_GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];              //0x900
    NOK_GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];               //0x1500
    NOK_GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];                //0x2100
    ULONGLONG MsrIa32TsxCtrl;                                               //0x2d00
    NOK_SINGLE_LIST_ENTRY DeferredReadyListHead;                        //0x2d08
    volatile LONG MmPageFaultCount;                                         //0x2d10
    volatile LONG MmCopyOnWriteCount;                                       //0x2d14
    volatile LONG MmTransitionCount;                                        //0x2d18
    volatile LONG MmDemandZeroCount;                                        //0x2d1c
    volatile LONG MmPageReadCount;                                          //0x2d20
    volatile LONG MmPageReadIoCount;                                        //0x2d24
    volatile LONG MmDirtyPagesWriteCount;                                   //0x2d28
    volatile LONG MmDirtyWriteIoCount;                                      //0x2d2c
    volatile LONG MmMappedPagesWriteCount;                                  //0x2d30
    volatile LONG MmMappedWriteIoCount;                                     //0x2d34
    ULONG KeSystemCalls;                                                    //0x2d38
    ULONG KeContextSwitches;                                                //0x2d3c
    ULONG PrcbPad40;                                                        //0x2d40
    ULONG CcFastReadNoWait;                                                 //0x2d44
    ULONG CcFastReadWait;                                                   //0x2d48
    ULONG CcFastReadNotPossible;                                            //0x2d4c
    ULONG CcCopyReadNoWait;                                                 //0x2d50
    ULONG CcCopyReadWait;                                                   //0x2d54
    ULONG CcCopyReadNoWaitMiss;                                             //0x2d58
    volatile LONG IoReadOperationCount;                                     //0x2d5c
    volatile LONG IoWriteOperationCount;                                    //0x2d60
    volatile LONG IoOtherOperationCount;                                    //0x2d64
    NOK_LARGE_INTEGER IoReadTransferCount;                               //0x2d68
    NOK_LARGE_INTEGER IoWriteTransferCount;                              //0x2d70
    NOK_LARGE_INTEGER IoOtherTransferCount;                              //0x2d78
    volatile LONG PacketBarrier;                                            //0x2d80
    volatile LONG TargetCount;                                              //0x2d84
    volatile ULONG IpiFrozen;                                               //0x2d88
    ULONG PrcbPad30;                                                        //0x2d8c
    VOID* IsrDpcStats;                                                      //0x2d90
    ULONG DeviceInterrupts;                                                 //0x2d98
    LONG LookasideIrpFloat;                                                 //0x2d9c
    ULONG InterruptLastCount;                                               //0x2da0
    ULONG InterruptRate;                                                    //0x2da4
    ULONGLONG PrcbPad31;                                                    //0x2da8
    NOK_PKPRCB PairPrcb;                                                //0x2db0
    NOK_KSTATIC_AFFINITY_BLOCK StaticAffinity;                          //0x2db8
    ULONGLONG PrcbPad35[5];                                                 //0x3058
    NOK_SLIST_HEADER InterruptObjectPool;                                //0x3080
    NOK_PRTL_HASH_TABLE DpcRuntimeHistoryHashTable;                     //0x3090
    NOK_PKDPC DpcRuntimeHistoryHashTableCleanupDpc;                     //0x3098
    VOID (*CurrentDpcRoutine)(NOK_PKDPC arg1, VOID* arg2, VOID* arg3, VOID* arg4); //0x30a0
    ULONGLONG CurrentDpcRuntimeHistoryCached;                               //0x30a8
    ULONGLONG CurrentDpcStartTime;                                          //0x30b0
    ULONGLONG PrcbPad41[1];                                                 //0x30b8
    NOK_KDPC_DATA DpcData[2];                                           //0x30c0
    VOID* DpcStack;                                                         //0x3110
    LONG MaximumDpcQueueDepth;                                              //0x3118
    ULONG DpcRequestRate;                                                   //0x311c
    ULONG MinimumDpcRate;                                                   //0x3120
    ULONG DpcLastCount;                                                     //0x3124
    UCHAR ThreadDpcEnable;                                                  //0x3128
    volatile UCHAR QuantumEnd;                                              //0x3129
    volatile UCHAR DpcRoutineActive;                                        //0x312a
    volatile UCHAR IdleSchedule;                                            //0x312b
    union
    {
        volatile LONG DpcRequestSummary;                                    //0x312c
        SHORT DpcRequestSlot[2];                                            //0x312c
        struct
        {
            SHORT NormalDpcState;                                           //0x312c
            SHORT ThreadDpcState;                                           //0x312e
        };
        struct
        {
            ULONG DpcNormalProcessingActive:1;                              //0x312c
            ULONG DpcNormalProcessingRequested:1;                           //0x312c
            ULONG DpcNormalThreadSignal:1;                                  //0x312c
            ULONG DpcNormalTimerExpiration:1;                               //0x312c
            ULONG DpcNormalDpcPresent:1;                                    //0x312c
            ULONG DpcNormalLocalInterrupt:1;                                //0x312c
            ULONG DpcNormalSpare:10;                                        //0x312c
            ULONG DpcThreadActive:1;                                        //0x312c
            ULONG DpcThreadRequested:1;                                     //0x312c
            ULONG DpcThreadSpare:14;                                        //0x312c
        };
    };
    ULONG PrcbPad93;                                                        //0x3130
    ULONG LastTick;                                                         //0x3134
    ULONG ClockInterrupts;                                                  //0x3138
    ULONG ReadyScanTick;                                                    //0x313c
    VOID* InterruptObject[256];                                             //0x3140
    NOK_KTIMER_TABLE TimerTable;                                        //0x3940
    ULONG PrcbPad92[10];                                                    //0x7b58
    NOK_KGATE DpcGate;                                                  //0x7b80
    VOID* PrcbPad52;                                                        //0x7b98
    NOK_KDPC CallDpc;                                                   //0x7ba0
    LONG ClockKeepAlive;                                                    //0x7be0
    UCHAR PrcbPad60[2];                                                     //0x7be4
    union
    {
        struct
        {
            UCHAR NmiActive;                                                //0x7be6
            UCHAR MceActive;                                                //0x7be7
        };
        USHORT CombinedNmiMceActive;                                        //0x7be6
    };
    LONG DpcWatchdogPeriod;                                                 //0x7be8
    LONG DpcWatchdogCount;                                                  //0x7bec
    volatile LONG KeSpinLockOrdering;                                       //0x7bf0
    ULONG DpcWatchdogProfileCumulativeDpcThreshold;                         //0x7bf4
    VOID* CachedPtes;                                                       //0x7bf8
    NOK_LIST_ENTRY WaitListHead;                                        //0x7c00
    ULONGLONG WaitLock;                                                     //0x7c10
    ULONG ReadySummary;                                                     //0x7c18
    LONG AffinitizedSelectionMask;                                          //0x7c1c
    ULONG QueueIndex;                                                       //0x7c20
    ULONG PrcbPad75[2];                                                     //0x7c24
    ULONG DpcWatchdogSequenceNumber;                                        //0x7c2c
    NOK_KDPC TimerExpirationDpc;                                        //0x7c30
    NOK_RTL_RB_TREE ScbQueue;                                           //0x7c70
    NOK_LIST_ENTRY DispatcherReadyListHead[32];                         //0x7c80
    ULONG InterruptCount;                                                   //0x7e80
    ULONG KernelTime;                                                       //0x7e84
    ULONG UserTime;                                                         //0x7e88
    ULONG DpcTime;                                                          //0x7e8c
    ULONG InterruptTime;                                                    //0x7e90
    ULONG AdjustDpcThreshold;                                               //0x7e94
    UCHAR DebuggerSavedIRQL;                                                //0x7e98
    UCHAR GroupSchedulingOverQuota;                                         //0x7e99
    volatile UCHAR DeepSleep;                                               //0x7e9a
    UCHAR PrcbPad80;                                                        //0x7e9b
    ULONG DpcTimeCount;                                                     //0x7e9c
    ULONG DpcTimeLimit;                                                     //0x7ea0
    ULONG PeriodicCount;                                                    //0x7ea4
    ULONG PeriodicBias;                                                     //0x7ea8
    ULONG AvailableTime;                                                    //0x7eac
    ULONG KeExceptionDispatchCount;                                         //0x7eb0
    ULONG ReadyThreadCount;                                                 //0x7eb4
    ULONGLONG ReadyQueueExpectedRunTime;                                    //0x7eb8
    ULONGLONG StartCycles;                                                  //0x7ec0
    ULONGLONG TaggedCyclesStart;                                            //0x7ec8
    ULONGLONG TaggedCycles[3];                                              //0x7ed0
    ULONGLONG AffinitizedCycles;                                            //0x7ee8
    ULONGLONG ImportantCycles;                                              //0x7ef0
    ULONGLONG UnimportantCycles;                                            //0x7ef8
    ULONG DpcWatchdogProfileSingleDpcThreshold;                             //0x7f00
    volatile LONG MmSpinLockOrdering;                                       //0x7f04
    VOID* volatile CachedStack;                                             //0x7f08
    ULONG PageColor;                                                        //0x7f10
    ULONG NodeColor;                                                        //0x7f14
    ULONG NodeShiftedColor;                                                 //0x7f18
    ULONG SecondaryColorMask;                                               //0x7f1c
    UCHAR PrcbPad81[6];                                                     //0x7f20
    UCHAR ExceptionStackActive;                                             //0x7f26
    UCHAR TbFlushListActive;                                                //0x7f27
    VOID* ExceptionStack;                                                   //0x7f28
    ULONGLONG PrcbPad82[1];                                                 //0x7f30
    ULONGLONG CycleTime;                                                    //0x7f38
    ULONGLONG Cycles[4][2];                                                 //0x7f40
    ULONG CcFastMdlReadNoWait;                                              //0x7f80
    ULONG CcFastMdlReadWait;                                                //0x7f84
    ULONG CcFastMdlReadNotPossible;                                         //0x7f88
    ULONG CcMapDataNoWait;                                                  //0x7f8c
    ULONG CcMapDataWait;                                                    //0x7f90
    ULONG CcPinMappedDataCount;                                             //0x7f94
    ULONG CcPinReadNoWait;                                                  //0x7f98
    ULONG CcPinReadWait;                                                    //0x7f9c
    ULONG CcMdlReadNoWait;                                                  //0x7fa0
    ULONG CcMdlReadWait;                                                    //0x7fa4
    ULONG CcLazyWriteHotSpots;                                              //0x7fa8
    ULONG CcLazyWriteIos;                                                   //0x7fac
    ULONG CcLazyWritePages;                                                 //0x7fb0
    ULONG CcDataFlushes;                                                    //0x7fb4
    ULONG CcDataPages;                                                      //0x7fb8
    ULONG CcLostDelayedWrites;                                              //0x7fbc
    ULONG CcFastReadResourceMiss;                                           //0x7fc0
    ULONG CcCopyReadWaitMiss;                                               //0x7fc4
    ULONG CcFastMdlReadResourceMiss;                                        //0x7fc8
    ULONG CcMapDataNoWaitMiss;                                              //0x7fcc
    ULONG CcMapDataWaitMiss;                                                //0x7fd0
    ULONG CcPinReadNoWaitMiss;                                              //0x7fd4
    ULONG CcPinReadWaitMiss;                                                //0x7fd8
    ULONG CcMdlReadNoWaitMiss;                                              //0x7fdc
    ULONG CcMdlReadWaitMiss;                                                //0x7fe0
    ULONG CcReadAheadIos;                                                   //0x7fe4
    volatile LONG MmCacheTransitionCount;                                   //0x7fe8
    volatile LONG MmCacheReadCount;                                         //0x7fec
    volatile LONG MmCacheIoCount;                                           //0x7ff0
    ULONG PrcbPad91;                                                        //0x7ff4
    VOID* MmInternal;                                                       //0x7ff8
    NOK_PROCESSOR_POWER_STATE PowerState;                               //0x8000
    VOID* HyperPte;                                                         //0x8200
    NOK_LIST_ENTRY ScbList;                                             //0x8208
    NOK_KDPC ForceIdleDpc;                                              //0x8218
    NOK_KDPC DpcWatchdogDpc;                                            //0x8258
    NOK_KTIMER DpcWatchdogTimer;                                        //0x8298
    NOK_CACHE_DESCRIPTOR Cache[5];                                      //0x82d8
    ULONG CacheCount;                                                       //0x8314
    volatile ULONG CachedCommit;                                            //0x8318
    volatile ULONG CachedResidentAvailable;                                 //0x831c
    VOID* WheaInfo;                                                         //0x8320
    VOID* EtwSupport;                                                       //0x8328
    VOID* ExSaPageArray;                                                    //0x8330
    ULONG KeAlignmentFixupCount;                                            //0x8338
    ULONG PrcbPad95;                                                        //0x833c
    NOK_SLIST_HEADER HypercallPageList;                                  //0x8340
    ULONGLONG* StatisticsPage;                                              //0x8350
    ULONGLONG GenerationTarget;                                             //0x8358
    ULONGLONG PrcbPad85[4];                                                 //0x8360
    VOID* HypercallCachedPages;                                             //0x8380
    VOID* VirtualApicAssist;                                                //0x8388
    NOK_KAFFINITY_EX PackageProcessorSet;                               //0x8390
    ULONG PackageId;                                                        //0x8438
    ULONG PrcbPad86;                                                        //0x843c
    ULONGLONG SharedReadyQueueMask;                                         //0x8440
    NOK_PKSHARED_READY_QUEUE SharedReadyQueue;                          //0x8448
    ULONG SharedQueueScanOwner;                                             //0x8450
    ULONG ScanSiblingIndex;                                                 //0x8454
    ULONGLONG CoreProcessorSet;                                             //0x8458
    ULONGLONG ScanSiblingMask;                                              //0x8460
    ULONGLONG LLCMask;                                                      //0x8468
    ULONGLONG CacheProcessorMask[5];                                        //0x8470
    NOK_PPROCESSOR_PROFILE_CONTROL_AREA ProcessorProfileControlArea;    //0x8498
    VOID* ProfileEventIndexAddress;                                         //0x84a0
    VOID** DpcWatchdogProfile;                                              //0x84a8
    VOID** DpcWatchdogProfileCurrentEmptyCapture;                           //0x84b0
    VOID* SchedulerAssist;                                                  //0x84b8
    NOK_SYNCH_COUNTERS SynchCounters;                                   //0x84c0
    ULONGLONG PrcbPad94;                                                    //0x8578
    NOK_FILESYSTEM_DISK_COUNTERS FsCounters;                            //0x8580
    UCHAR VendorString[13];                                                 //0x8590
    UCHAR PrcbPad100[3];                                                    //0x859d
    ULONGLONG FeatureBits;                                                  //0x85a0
    NOK_LARGE_INTEGER UpdateSignature;                                   //0x85a8
    ULONGLONG PteBitCache;                                                  //0x85b0
    ULONG PteBitOffset;                                                     //0x85b8
    ULONG PrcbPad105;                                                       //0x85bc
    NOK_PCONTEXT Context;                                               //0x85c0
    ULONG ContextFlagsInit;                                                 //0x85c8
    ULONG PrcbPad115;                                                       //0x85cc
    NOK_PXSAVE_AREA ExtendedState;                                      //0x85d0
    VOID* IsrStack;                                                         //0x85d8
    NOK_KENTROPY_TIMING_STATE EntropyTimingState;                       //0x85e0
    ULONGLONG PrcbPad110;                                                   //0x8730
    struct
    {
        ULONG UpdateCycle;                                                  //0x8738
        union
        {
            SHORT PairLocal;                                                //0x873c
            struct
            {
                UCHAR PairLocalLow;                                         //0x873c
                UCHAR PairLocalForceStibp:1;                                //0x873d
                UCHAR Reserved:4;                                           //0x873d
                UCHAR Frozen:1;                                             //0x873d
                UCHAR ForceUntrusted:1;                                     //0x873d
                UCHAR SynchIpi:1;                                           //0x873d
            };
        };
        union
        {
            SHORT PairRemote;                                               //0x873e
            struct
            {
                UCHAR PairRemoteLow;                                        //0x873e
                UCHAR Reserved2;                                            //0x873f
            };
        };
        UCHAR Trace[24];                                                    //0x8740
        ULONGLONG LocalDomain;                                              //0x8758
        ULONGLONG RemoteDomain;                                             //0x8760
        NOK_PKTHREAD Thread;                                            //0x8768
    } StibpPairingTrace;                                                    //0x8738
    NOK_SINGLE_LIST_ENTRY AbSelfIoBoostsList;                           //0x8770
    NOK_SINGLE_LIST_ENTRY AbPropagateBoostsList;                        //0x8778
    NOK_KDPC AbDpc;                                                     //0x8780
    NOK_IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;               //0x87c0
    NOK_IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;              //0x8814
    NOK_KSECURE_FAULT_INFORMATION SecureFault;                          //0x8868
    ULONGLONG PrcbPad120;                                                   //0x8878
    NOK_KSHARED_READY_QUEUE LocalSharedReadyQueue;                      //0x8880
    ULONGLONG PrcbPad125[2];                                                //0x8af0
    ULONG TimerExpirationTraceCount;                                        //0x8b00
    ULONG PrcbPad127;                                                       //0x8b04
    NOK_KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];               //0x8b08
    ULONGLONG PrcbPad128[7];                                                //0x8c08
    NOK_PREQUEST_MAILBOX Mailbox;                                       //0x8c40
    ULONGLONG PrcbPad130[7];                                                //0x8c48
    NOK_MACHINE_CHECK_CONTEXT McheckContext[2];                         //0x8c80
    ULONGLONG PrcbPad134[4];                                                //0x8d20
    NOK_KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];                        //0x8d40
    ULONGLONG PrcbPad134a[4];                                               //0x8da0
    UCHAR PrcbPad138[128];                                                  //0x8dc0
    UCHAR PrcbPad138a[64];                                                  //0x8e40
    ULONGLONG KernelDirectoryTableBase;                                     //0x8e80
    ULONGLONG RspBaseShadow;                                                //0x8e88
    ULONGLONG UserRspShadow;                                                //0x8e90
    ULONG ShadowFlags;                                                      //0x8e98
    ULONG PrcbPad138b;                                                      //0x8e9c
    ULONGLONG PrcbPad138c;                                                  //0x8ea0
    USHORT PrcbPad138d;                                                     //0x8ea8
    USHORT VerwSelector;                                                    //0x8eaa
    ULONG DbgMceNestingLevel;                                               //0x8eac
    ULONG DbgMceFlags;                                                      //0x8eb0
    ULONG PrcbPad139b;                                                      //0x8eb4
    ULONGLONG PrcbPad140[505];                                              //0x8eb8
    ULONGLONG PrcbPad140a[8];                                               //0x9e80
    ULONGLONG PrcbPad141[504];                                              //0x9ec0
    UCHAR PrcbPad141a[64];                                                  //0xae80
    NOK_REQUEST_MAILBOX RequestMailbox[1];                              //0xaec0
}NOK_KPRCB, * NOK_PKPRCB;
//0x300 bytes (sizeof)
typedef struct _NOK_PROC_PERF_DOMAIN
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_PROC_PERF_CHECK_CONTEXT* Master;                                //0x10
    NOK_KAFFINITY_EX Members;                                           //0x18
    ULONGLONG DomainContext;                                                //0xc0
    ULONG ProcessorCount;                                                   //0xc8
    UCHAR EfficiencyClass;                                                  //0xcc
    UCHAR NominalPerformanceClass;                                          //0xcd
    UCHAR HighestPerformanceClass;                                          //0xce
    NOK_PROCESSOR_PRESENCE Presence;                                      //0xd0
    NOK_PPROC_PERF_CONSTRAINT Processors;                               //0xd8
    VOID (*GetFFHThrottleState)(ULONGLONG* arg1);                           //0xe0
    VOID (*TimeWindowHandler)(ULONGLONG arg1, ULONG arg2);                  //0xe8
    VOID (*BoostPolicyHandler)(ULONGLONG arg1, ULONG arg2);                 //0xf0
    VOID (*BoostModeHandler)(ULONGLONG arg1, ULONG arg2);                   //0xf8
    VOID (*AutonomousActivityWindowHandler)(ULONGLONG arg1, ULONG arg2);    //0x100
    VOID (*AutonomousModeHandler)(ULONGLONG arg1, ULONG arg2);              //0x108
    VOID (*ReinitializeHandler)(ULONGLONG arg1);                            //0x110
    ULONG (*PerfSelectionHandler)(ULONGLONG arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7, ULONG* arg8, ULONGLONG* arg9); //0x118
    VOID (*PerfControlHandler)(ULONGLONG arg1, NOK_PPERF_CONTROL_STATE_SELECTION arg2, UCHAR arg3, UCHAR arg4); //0x120
    VOID (*PerfControlHandlerHidden)(ULONGLONG arg1, NOK_PPERF_CONTROL_STATE_SELECTION arg2, UCHAR arg3, UCHAR arg4); //0x128
    VOID (*DomainPerfControlHandler)(ULONGLONG arg1, NOK_PPERF_CONTROL_STATE_SELECTION arg2, UCHAR arg3, UCHAR arg4); //0x130
    ULONG MaxFrequency;                                                     //0x138
    ULONG NominalFrequency;                                                 //0x13c
    ULONG MaxPercent;                                                       //0x140
    ULONG MinPerfPercent;                                                   //0x144
    ULONG MinThrottlePercent;                                               //0x148
    ULONG AdvertizedMaximumFrequency;                                       //0x14c
    ULONGLONG MinimumRelativePerformance;                                   //0x150
    ULONGLONG NominalRelativePerformance;                                   //0x158
    UCHAR NominalRelativePerformancePercent;                                //0x160
    UCHAR Coordination;                                                     //0x161
    UCHAR HardPlatformCap;                                                  //0x162
    UCHAR AffinitizeControl;                                                //0x163
    UCHAR EfficientThrottle;                                                //0x164
    UCHAR AllowSchedulerDirectedPerfStates;                                 //0x165
    UCHAR InitiateAllProcessors;                                            //0x166
    UCHAR AutonomousMode;                                                   //0x167
    UCHAR ProvideGuidance;                                                  //0x168
    ULONG DesiredPercent;                                                   //0x16c
    ULONG GuaranteedPercent;                                                //0x170
    UCHAR EngageResponsivenessOverrides;                                    //0x174
    NOK_PROC_PERF_QOS_CLASS_POLICY QosPolicies[5];                      //0x178
    ULONG QosDisableReasons[5];                                             //0x204
    USHORT QosEquivalencyMasks[5];                                          //0x218
    UCHAR QosSupported;                                                     //0x222
    volatile ULONG SelectionGeneration;                                     //0x224
    NOK_PERF_CONTROL_STATE_SELECTION QosSelection[5];                   //0x228
    ULONGLONG PerfChangeTime;                                               //0x2f0
    ULONG PerfChangeIntervalCount;                                          //0x2f8
    UCHAR Force;                                                            //0x2fc
    UCHAR Update;                                                           //0x2fd
    UCHAR Apply;                                                            //0x2fe
}NOK_PROC_PERF_DOMAIN, * NOK_PPROC_PERF_DOMAIN;
//0x4 bytes (sizeof)
typedef enum _NOK_PROCESS_SECTION_TYPE
{
    NOK_ProcessSectionData = 0,
    NOK_ProcessSectionImage = 1,
    NOK_ProcessSectionImageNx = 2,
    NOK_ProcessSectionPagefileBacked = 3,
    NOK_ProcessSectionMax = 4
}NOK_PROCESS_SECTION_TYPE, * NOK_PPROCESS_SECTION_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PROCESS_TERMINATE_REQUEST_REASON
{
    NOK_ProcessTerminateRequestReasonNone = 0,
    NOK_ProcessTerminateCommitFail = 1,
    NOK_ProcessTerminateWriteToExecuteMemory = 2,
    NOK_ProcessTerminateAttachedWriteToExecuteMemory = 3,
    NOK_ProcessTerminateRequestReasonMax = 4
}NOK_PROCESS_TERMINATE_REQUEST_REASON, * NOK_PPROCESS_TERMINATE_REQUEST_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_PROCESS_VA_TYPE
{
    NOK_ProcessVAImage = 0,
    NOK_ProcessVASection = 1,
    NOK_ProcessVAPrivate = 2,
    NOK_ProcessVAMax = 3
}NOK_PROCESS_VA_TYPE, * NOK_PPROCESS_VA_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_KPROCESS_STATE
{
    NOK_ProcessInMemory = 0,
    NOK_ProcessOutOfMemory = 1,
    NOK_ProcessInTransition = 2,
    NOK_ProcessOutTransition = 3,
    NOK_ProcessInSwap = 4,
    NOK_ProcessOutSwap = 5,
    NOK_ProcessRetryOutSwap = 6,
    NOK_ProcessAllSwapStates = 7
}NOK_KPROCESS_STATE, * NOK_PKPROCESS_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_ATTRIBUTE_NUM
{
    NOK_PsAttributeParentProcess = 0,
    NOK_PsAttributeDebugObject = 1,
    NOK_PsAttributeToken = 2,
    NOK_PsAttributeClientId = 3,
    NOK_PsAttributeTebAddress = 4,
    NOK_PsAttributeImageName = 5,
    NOK_PsAttributeImageInfo = 6,
    NOK_PsAttributeMemoryReserve = 7,
    NOK_PsAttributePriorityClass = 8,
    NOK_PsAttributeErrorMode = 9,
    NOK_PsAttributeStdHandleInfo = 10,
    NOK_PsAttributeHandleList = 11,
    NOK_PsAttributeGroupAffinity = 12,
    NOK_PsAttributePreferredNode = 13,
    NOK_PsAttributeIdealProcessor = 14,
    NOK_PsAttributeUmsThread = 15,
    NOK_PsAttributeMitigationOptions = 16,
    NOK_PsAttributeProtectionLevel = 17,
    NOK_PsAttributeSecureProcess = 18,
    NOK_PsAttributeJobList = 19,
    NOK_PsAttributeChildProcessPolicy = 20,
    NOK_PsAttributeAllApplicationPackagesPolicy = 21,
    NOK_PsAttributeWin32kFilter = 22,
    NOK_PsAttributeSafeOpenPromptOriginClaim = 23,
    NOK_PsAttributeBnoIsolation = 24,
    NOK_PsAttributeDesktopAppPolicy = 25,
    NOK_PsAttributeChpe = 26,
    NOK_PsAttributeMitigationAuditOptions = 27,
    NOK_PsAttributeMachineType = 28,
    NOK_PsAttributeComponentFilter = 29,
    NOK_PsAttributeMax = 30
}NOK_PS_ATTRIBUTE_NUM, * NOK_PPS_ATTRIBUTE_NUM;
//0x18 bytes (sizeof)
typedef struct _NOK_PS_MITIGATION_OPTIONS_MAP
{
    ULONGLONG Map[3];                                                       //0x0
}NOK_PS_MITIGATION_OPTIONS_MAP, * NOK_PPS_MITIGATION_OPTIONS_MAP;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_PROTECTED_SIGNER
{
    NOK_PsProtectedSignerNone = 0,
    NOK_PsProtectedSignerAuthenticode = 1,
    NOK_PsProtectedSignerCodeGen = 2,
    NOK_PsProtectedSignerAntimalware = 3,
    NOK_PsProtectedSignerLsa = 4,
    NOK_PsProtectedSignerWindows = 5,
    NOK_PsProtectedSignerWinTcb = 6,
    NOK_PsProtectedSignerWinSystem = 7,
    NOK_PsProtectedSignerApp = 8,
    NOK_PsProtectedSignerMax = 9
}NOK_PS_PROTECTED_SIGNER, * NOK_PPS_PROTECTED_SIGNER;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_PROTECTED_TYPE
{
    NOK_PsProtectedTypeNone = 0,
    NOK_PsProtectedTypeProtectedLight = 1,
    NOK_PsProtectedTypeProtected = 2,
    NOK_PsProtectedTypeMax = 3
}NOK_PS_PROTECTED_TYPE, * NOK_PPS_PROTECTED_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_RESOURCE_TYPE
{
    NOK_PsResourceNonPagedPool = 0,
    NOK_PsResourcePagedPool = 1,
    NOK_PsResourcePageFile = 2,
    NOK_PsResourceWorkingSet = 3,
    NOK_PsResourceMax = 4
}NOK_PS_RESOURCE_TYPE, * NOK_PPS_RESOURCE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_STD_HANDLE_STATE
{
    NOK_PsNeverDuplicate = 0,
    NOK_PsRequestDuplicate = 1,
    NOK_PsAlwaysDuplicate = 2,
    NOK_PsMaxStdHandleStates = 3
}NOK_PS_STD_HANDLE_STATE, * NOK_PPS_STD_HANDLE_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_PS_WAKE_REASON
{
    NOK_PsWakeReasonUser = 0,
    NOK_PsWakeReasonExecutionRequired = 1,
    NOK_PsWakeReasonKernel = 2,
    NOK_PsWakeReasonInstrumentation = 3,
    NOK_PsWakeReasonPreserveProcess = 4,
    NOK_PsWakeReasonActivityReference = 5,
    NOK_PsWakeReasonWorkOnBehalf = 6,
    NOK_PsMaxWakeReasons = 7
}NOK_PS_WAKE_REASON, * NOK_PPS_WAKE_REASON;
//0x4 bytes (sizeof)
typedef enum _NOK_REG_NOTIFY_CLASS
{
    NOK_RegNtDeleteKey = 0,
    NOK_RegNtPreDeleteKey = 0,
    NOK_RegNtSetValueKey = 1,
    NOK_RegNtPreSetValueKey = 1,
    NOK_RegNtDeleteValueKey = 2,
    NOK_RegNtPreDeleteValueKey = 2,
    NOK_RegNtSetInformationKey = 3,
    NOK_RegNtPreSetInformationKey = 3,
    NOK_RegNtRenameKey = 4,
    NOK_RegNtPreRenameKey = 4,
    NOK_RegNtEnumerateKey = 5,
    NOK_RegNtPreEnumerateKey = 5,
    NOK_RegNtEnumerateValueKey = 6,
    NOK_RegNtPreEnumerateValueKey = 6,
    NOK_RegNtQueryKey = 7,
    NOK_RegNtPreQueryKey = 7,
    NOK_RegNtQueryValueKey = 8,
    NOK_RegNtPreQueryValueKey = 8,
    NOK_RegNtQueryMultipleValueKey = 9,
    NOK_RegNtPreQueryMultipleValueKey = 9,
    NOK_RegNtPreCreateKey = 10,
    NOK_RegNtPostCreateKey = 11,
    NOK_RegNtPreOpenKey = 12,
    NOK_RegNtPostOpenKey = 13,
    NOK_RegNtKeyHandleClose = 14,
    NOK_RegNtPreKeyHandleClose = 14,
    NOK_RegNtPostDeleteKey = 15,
    NOK_RegNtPostSetValueKey = 16,
    NOK_RegNtPostDeleteValueKey = 17,
    NOK_RegNtPostSetInformationKey = 18,
    NOK_RegNtPostRenameKey = 19,
    NOK_RegNtPostEnumerateKey = 20,
    NOK_RegNtPostEnumerateValueKey = 21,
    NOK_RegNtPostQueryKey = 22,
    NOK_RegNtPostQueryValueKey = 23,
    NOK_RegNtPostQueryMultipleValueKey = 24,
    NOK_RegNtPostKeyHandleClose = 25,
    NOK_RegNtPreCreateKeyEx = 26,
    NOK_RegNtPostCreateKeyEx = 27,
    NOK_RegNtPreOpenKeyEx = 28,
    NOK_RegNtPostOpenKeyEx = 29,
    NOK_RegNtPreFlushKey = 30,
    NOK_RegNtPostFlushKey = 31,
    NOK_RegNtPreLoadKey = 32,
    NOK_RegNtPostLoadKey = 33,
    NOK_RegNtPreUnLoadKey = 34,
    NOK_RegNtPostUnLoadKey = 35,
    NOK_RegNtPreQueryKeySecurity = 36,
    NOK_RegNtPostQueryKeySecurity = 37,
    NOK_RegNtPreSetKeySecurity = 38,
    NOK_RegNtPostSetKeySecurity = 39,
    NOK_RegNtCallbackObjectContextCleanup = 40,
    NOK_RegNtPreRestoreKey = 41,
    NOK_RegNtPostRestoreKey = 42,
    NOK_RegNtPreSaveKey = 43,
    NOK_RegNtPostSaveKey = 44,
    NOK_RegNtPreReplaceKey = 45,
    NOK_RegNtPostReplaceKey = 46,
    NOK_RegNtPreQueryKeyName = 47,
    NOK_RegNtPostQueryKeyName = 48,
    NOK_MaxRegNtNotifyClass = 49
}NOK_REG_NOTIFY_CLASS, * NOK_PREG_NOTIFY_CLASS;
//0x20 bytes (sizeof)
typedef struct _NOK_DIAGNOSTIC_CONTEXT
{
    NOK_REQUESTER_TYPE CallerType;                                        //0x0
    union
    {
        struct
        {
            NOK_PEPROCESS Process;                                      //0x8
            ULONG ServiceTag;                                               //0x10
        };
        NOK_PDEVICE_OBJECT DeviceObject;                                //0x8
    };
    ULONGLONG ReasonSize;                                                   //0x18
}NOK_DIAGNOSTIC_CONTEXT, * NOK_PDIAGNOSTIC_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_HEAP_SEG_RANGE_TYPE
{
    NOK_HeapSegRangeUser = 0,
    NOK_HeapSegRangeInternal = 1,
    NOK_HeapSegRangeLFH = 2,
    NOK_HeapSegRangeVS = 3,
    NOK_HeapSegRangeTypeMax = 3
}NOK_HEAP_SEG_RANGE_TYPE, * NOK_PHEAP_SEG_RANGE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTLP_HP_ALLOCATOR
{
    NOK_RtlpHpSegmentSm = 0,
    NOK_RtlpHpSegmentLg = 1,
    NOK_RtlpHpSegmentTypes = 2,
    NOK_RtlpHpHugeAllocator = 2,
    NOK_RtlpHpAllocatorMax = 3
}NOK_RTLP_HP_ALLOCATOR, * NOK_PRTLP_HP_ALLOCATOR;
//0x20c0 bytes (sizeof)
typedef struct _NOK_EX_HEAP_POOL_NODE
{
    NOK_SEGMENT_HEAP* Heaps[4];                                         //0x0
    NOK_RTL_DYNAMIC_LOOKASIDE Lookasides[2];                            //0x40
}NOK_EX_HEAP_POOL_NODE, * NOK_PEX_HEAP_POOL_NODE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTLP_HP_MEMORY_TYPE
{
    NOK_HeapMemoryPaged = 0,
    NOK_HeapMemoryNonPaged = 1,
    NOK_HeapMemoryLargePage = 2,
    NOK_HeapMemoryHugePage = 3,
    NOK_HeapMemoryTypeMax = 4
}NOK_RTLP_HP_MEMORY_TYPE, * NOK_PRTLP_HP_MEMORY_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTL_FEATURE_CONFIGURATION_PRIORITY
{
    NOK_FeatureConfigurationPriorityImageDefault = 0,
    NOK_FeatureConfigurationPriorityService = 4,
    NOK_FeatureConfigurationPriorityUser = 8,
    NOK_FeatureConfigurationPriorityUserPolicy = 10,
    NOK_FeatureConfigurationPriorityTest = 12,
    NOK_FeatureConfigurationPriorityImageOverride = 15,
    NOK_FeatureConfigurationPriorityMax = 15
}NOK_RTL_FEATURE_CONFIGURATION_PRIORITY, * NOK_PRTL_FEATURE_CONFIGURATION_PRIORITY;
//0x4 bytes (sizeof)
typedef enum _NOK_RTL_FEATURE_CONFIGURATION_TYPE
{
    NOK_RtlFeatureConfigurationBoot = 0,
    NOK_RtlFeatureConfigurationRuntime = 1,
    NOK_RtlFeatureConfigurationCount = 2
}NOK_RTL_FEATURE_CONFIGURATION_TYPE, * NOK_PRTL_FEATURE_CONFIGURATION_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTL_FEATURE_ENABLED_STATE_OPTIONS
{
    NOK_FeatureEnabledStateOptionsNone = 0,
    NOK_FeatureEnabledStateOptionsWexpConfig = 1
}NOK_RTL_FEATURE_ENABLED_STATE_OPTIONS, * NOK_PRTL_FEATURE_ENABLED_STATE_OPTIONS;
//0xc0 bytes (sizeof)
typedef struct _NOK_VF_AVL_TABLE
{
    NOK_RTL_AVL_TABLE RtlTable;                                         //0x0
    NOK_VF_AVL_TREE_NODE* ReservedNode;                                 //0x68
    VOID* NodeToFree;                                                       //0x70
    volatile LONG Lock;                                                     //0x80
}NOK_VF_AVL_TABLE, * NOK_PVF_AVL_TABLE;
//0x4 bytes (sizeof)
typedef enum _NOK_RTL_MEMORY_TYPE
{
    NOK_MemoryTypePaged = 0,
    NOK_MemoryTypeNonPaged = 1,
    NOK_MemoryTypeLargePage = 2,
    NOK_MemoryTypeHugePage = 3,
    NOK_MemoryTypeMax = 4
}NOK_RTL_MEMORY_TYPE, * NOK_PRTL_MEMORY_TYPE;
//0x60 bytes (sizeof)
typedef struct _NOK_LOOKASIDE_LIST_EX
{
    NOK_GENERAL_LOOKASIDE_POOL L;                                       //0x0
}NOK_LOOKASIDE_LIST_EX, * NOK_PLOOKASIDE_LIST_EX;
//0xd8 bytes (sizeof)
typedef struct _NOK_OBJECT_TYPE
{
    NOK_LIST_ENTRY TypeList;                                            //0x0
    NOK_UNICODE_STRING Name;                                            //0x10
    VOID* DefaultObject;                                                    //0x20
    UCHAR Index;                                                            //0x28
    ULONG TotalNumberOfObjects;                                             //0x2c
    ULONG TotalNumberOfHandles;                                             //0x30
    ULONG HighWaterNumberOfObjects;                                         //0x34
    ULONG HighWaterNumberOfHandles;                                         //0x38
    NOK_OBJECT_TYPE_INITIALIZER TypeInfo;                               //0x40
    NOK_EX_PUSH_LOCK TypeLock;                                          //0xb8
    ULONG Key;                                                              //0xc0
    NOK_LIST_ENTRY CallbackList;                                        //0xc8
}NOK_OBJECT_TYPE, * NOK_POBJECT_TYPE;
//0x48 bytes (sizeof)
typedef struct _NOK_SEP_CACHED_HANDLES_ENTRY
{
    NOK_RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                         //0x0
    LONGLONG ReferenceCount;                                                //0x18
    NOK_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor;            //0x20
    ULONG HandleCount;                                                      //0x38
    VOID** Handles;                                                         //0x40
}NOK_SEP_CACHED_HANDLES_ENTRY, * NOK_PSEP_CACHED_HANDLES_ENTRY;
//0x498 bytes (sizeof)
typedef struct _NOK_ESERVERSILO_GLOBALS
{
    NOK_OBP_SILODRIVERSTATE ObSiloState;                                //0x0
    NOK_SEP_SILOSTATE SeSiloState;                                      //0x2e0
    NOK_SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;                      //0x310
    NOK_PETW_SILODRIVERSTATE EtwSiloState;                              //0x360
    NOK_PEPROCESS MiSessionLeaderProcess;                               //0x368
    NOK_PEPROCESS ExpDefaultErrorPortProcess;                           //0x370
    VOID* ExpDefaultErrorPort;                                              //0x378
    ULONG HardErrorState;                                                   //0x380
    NOK_PEXP_LICENSE_STATE ExpLicenseState;                             //0x388
    NOK_WNF_SILODRIVERSTATE WnfSiloState;                               //0x390
    NOK_DBGK_SILOSTATE DbgkSiloState;                                   //0x3c8
    NOK_UNICODE_STRING PsProtectedCurrentDirectory;                     //0x3e8
    NOK_UNICODE_STRING PsProtectedEnvironment;                          //0x3f8
    VOID* ApiSetSection;                                                    //0x408
    VOID* ApiSetSchema;                                                     //0x410
    UCHAR OneCoreForwardersEnabled;                                         //0x418
    UCHAR TzVirtualizationSupported;                                        //0x419
    NOK_PEX_TIMEZONE_STATE ExTimeZoneState;                             //0x420
    NOK_UNICODE_STRING NtSystemRoot;                                    //0x428
    NOK_UNICODE_STRING SiloRootDirectoryName;                           //0x438
    NOK_PPSP_STORAGE Storage;                                           //0x448
    NOK_SERVERSILO_STATE State;                                           //0x450
    LONG ExitStatus;                                                        //0x454
    NOK_PKEVENT DeleteEvent;                                            //0x458
    NOK_PSILO_USER_SHARED_DATA UserSharedData;                          //0x460
    VOID* UserSharedSection;                                                //0x468
    NOK_WORK_QUEUE_ITEM TerminateWorkItem;                              //0x470
    UCHAR IsDownlevelContainer;                                             //0x490
}NOK_ESERVERSILO_GLOBALS, * NOK_PESERVERSILO_GLOBALS;
//0x4 bytes (sizeof)
typedef enum _NOK_SKSERVICE
{
    NOK_SECURESERVICE_NONE = 0,
    NOK_SECURESERVICE_PHASE4_INIT = 1,
    NOK_SECURESERVICE_START_PROCESSOR = 2,
    NOK_SECURESERVICE_FINISH_START_PROCESSOR = 3,
    NOK_SECURESERVICE_REGISTER_SYSTEM_DLLS = 4,
    NOK_SECURESERVICE_REGISTER_SYSTEM_PROCESS = 5,
    NOK_SECURESERVICE_CREATE_PROCESS = 6,
    NOK_SECURESERVICE_INITIALIZE_PROCESS = 7,
    NOK_SECURESERVICE_CREATE_THREAD = 8,
    NOK_SECURESERVICE_REQUEST_THREAD_EXIT = 9,
    NOK_SECURESERVICE_TERMINATE_THREAD = 10,
    NOK_SECURESERVICE_RUNDOWN_PROCESS = 11,
    NOK_SECURESERVICE_DEBUG_PROCESS = 12,
    NOK_SECURESERVICE_GET_TEB_ADDRESS = 13,
    NOK_SECURESERVICE_GET_CONTEXT = 14,
    NOK_SECURESERVICE_SET_CONTEXT = 15,
    NOK_SECURESERVICE_SEND_ATTACH_NOTIFICATIONS = 16,
    NOK_SECURESERVICE_GET_ETW_DEBUG_ID = 17,
    NOK_SECURESERVICE_GET_ON_DEMAND_DEBUG_CHALLENGE = 18,
    NOK_SECURESERVICE_ENABLE_ON_DEMAND_DEBUG_WITH_RESPONSE = 19,
    NOK_SECURESERVICE_RETRIEVE_MAILBOX = 20,
    NOK_SECURESERVICE_IS_TRUSTLET_RUNNING = 21,
    NOK_SECURESERVICE_CREATE_SECURE_ALLOCATION = 22,
    NOK_SECURESERVICE_FILL_SECURE_ALLOCATION = 23,
    NOK_SECURESERVICE_MAKE_CODE_CATALOG = 24,
    NOK_SECURESERVICE_CREATE_SECURE_IMAGE = 25,
    NOK_SECURESERVICE_FINALIZE_SECURE_IMAGE_HASH = 26,
    NOK_SECURESERVICE_FINISH_SECURE_IMAGE_VALIDATION = 27,
    NOK_SECURESERVICE_PREPARE_IMAGE_RELOCATIONS = 28,
    NOK_SECURESERVICE_RELOCATE_IMAGE = 29,
    NOK_SECURESERVICE_CLOSE_SECURE_HANDLE = 30,
    NOK_SECURESERVICE_VALIDATE_DYNAMIC_CODE = 31,
    NOK_SECURESERVICE_TRANSFER_IMAGE_VERSION_RESOURCE = 32,
    NOK_SECURESERVICE_SET_CODE_INTEGRITY_POLICY = 33,
    NOK_SECURESERVICE_EXCHANGE_ENTROPY = 34,
    NOK_SECURESERVICE_ALLOCATE_HIBERNATE_RESOURCES = 35,
    NOK_SECURESERVICE_FREE_HIBERNATE_RESOURCES = 36,
    NOK_SECURESERVICE_CONFIGURE_DYNAMIC_MEMORY = 37,
    NOK_SECURESERVICE_DEBUG_PROTECT_MEMORY = 38,
    NOK_SECURESERVICE_DEBUG_READ_WRITE_MEMORY = 39,
    NOK_SECURESERVICE_QUERY_VIRTUAL_MEMORY = 40,
    NOK_SECURESERVICE_CAPTURE_IMAGE_IAT = 41,
    NOK_SECURESERVICE_FREE_IMAGE_IAT = 42,
    NOK_SECURESERVICE_APPLY_FIXUPS = 43,
    NOK_SECURESERVICE_MARK_IMAGE_PROTECTED = 44,
    NOK_SECURESERVICE_CREATE_ENCLAVE = 45,
    NOK_SECURESERVICE_LOAD_ENCLAVE_DATA = 46,
    NOK_SECURESERVICE_LOAD_ENCLAVE_MODULE = 47,
    NOK_SECURESERVICE_INITIALIZE_ENCLAVE = 48,
    NOK_SECURESERVICE_TERMINATE_ENCLAVE = 49,
    NOK_SECURESERVICE_DELETE_ENCLAVE = 50,
    NOK_SECURESERVICE_CONNECT_SW_INTERRUPT = 51,
    NOK_SECURESERVICE_RELAX_HYPERGUARD_QUOTA = 52,
    NOK_SECURESERVICE_LIVEDUMP_QUERY_SECONDARYDATA_SIZE = 53,
    NOK_SECURESERVICE_LIVEDUMP_START = 54,
    NOK_SECURESERVICE_LIVEDUMP_ADD_BUFFER = 55,
    NOK_SECURESERVICE_LIVEDUMP_SETUP_BUFFER = 56,
    NOK_SECURESERVICE_LIVEDUMP_FINALIZE = 57,
    NOK_SECURESERVICE_LIVEDUMP_ABORT = 58,
    NOK_SECURESERVICE_LIVEDUMP_CAPTURE_PROCESS = 59,
    NOK_SECURESERVICE_NOTIFY_POWER_STATE = 60,
    NOK_SECURESERVICE_QUERY_PROFILE_INFORMATION = 61,
    NOK_SECURESERVICE_UPDATE_FREEZE_BIAS = 62,
    NOK_SECURESERVICE_CREATE_SECURE_SECTION = 63,
    NOK_SECURESERVICE_DELETE_SECURE_SECTION = 64,
    NOK_SECURESERVICE_QUERY_SECURE_DEVICE = 65,
    NOK_SECURESERVICE_UNPROTECT_SECURE_DEVICE = 66,
    NOK_SECURESERVICE_DETERMINE_HOT_PATCH_TYPE = 67,
    NOK_SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE_SIZE = 68,
    NOK_SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE = 69,
    NOK_SECURESERVICE_APPLY_HOT_PATCH = 70,
    NOK_SECURESERVICE_REVERT_HOT_PATCH = 71,
    NOK_SECURESERVICE_PREPARE_DRIVER_FOR_PATCH = 72,
    NOK_SECURESERVICE_PROVISION_DUMP_KEYS = 73,
    NOK_SECURESERVICE_CAPTURE_PGO_DATA = 74,
    NOK_SECURESERVICE_START_PROFILE = 75,
    NOK_SECURESERVICE_STOP_PROFILE = 76,
    NOK_SECURESERVICE_SET_TRACEPOINT = 77,
    NOK_SECURESERVICE_NO_TRACING_FIRST = 191,
    NOK_SECURESERVICE_GET_PEB_ADDRESS = 192,
    NOK_SECURESERVICE_VALIDATE_SECURE_IMAGE_PAGES = 193,
    NOK_SECURESERVICE_PRE_INIT_FIRST = 207,
    NOK_SECURESERVICE_PHASE3_INIT = 208,
    NOK_SECURESERVICE_PERIODIC = 209,
    NOK_SECURESERVICE_WORK_QUEUE = 210,
    NOK_SECURESERVICE_RESERVE_PROTECTED_PAGES = 211,
    NOK_SECURESERVICE_APPLY_DYNAMIC_RELOCATIONS = 212,
    NOK_SECURESERVICE_ETW_ENABLE_CALLBACK = 213,
    NOK_SECURESERVICE_INITIALIZE_SECURE_POOL = 214,
    NOK_SECURESERVICE_INITIALIZE_KERNEL_CFG = 215,
    NOK_SECURESERVICE_LOAD_DRIVER = 216,
    NOK_SECURESERVICE_UNLOAD_DRIVER = 217,
    NOK_SECURESERVICE_ENABLE_CFG_TARGET = 218,
    NOK_SECURESERVICE_COMPLETE_SLAB_CONFIGURATION = 219,
    NOK_SECURESERVICE_INITIALIZE_RETPOLINE = 220,
    NOK_SECURESERVICE_PERFORM_RETPOLINE_RELOCATIONS = 221,
    NOK_SECURESERVICE_UPDATE_IMPORT_RELOCATIONS = 222,
    NOK_SECURESERVICE_DISPATCH_LEVEL_FIRST = 239,
    NOK_SECURESERVICE_FLUSH_ADDRESS_SPACE = 240,
    NOK_SECURESERVICE_FAST_FLUSH_RANGE_LIST = 241,
    NOK_SECURESERVICE_SLOW_FLUSH_RANGE_LIST = 242,
    NOK_SECURESERVICE_REMOVE_PROTECTED_PAGE = 243,
    NOK_SECURESERVICE_COPY_PROTECTED_PAGE = 244,
    NOK_SECURESERVICE_REGISTER_PROTECTED_PAGE = 245,
    NOK_SECURESERVICE_DISAMBIGUATE_PROTECTED_PAGE = 246,
    NOK_SECURESERVICE_MAKE_PROTECTED_PAGE_WRITABLE = 247,
    NOK_SECURESERVICE_MAKE_PROTECTED_PAGE_EXECUTABLE = 248,
    NOK_SECURESERVICE_QUERY_STRONG_CODE_FEATURES = 249,
    NOK_SECURESERVICE_INVOKE_EFI_RUNTIME_SERVICE = 250,
    NOK_SECURESERVICE_LIVEDUMP_COLLECT_LIVE_DUMP = 251,
    NOK_SECURESERVICE_REGISTER_LOG_PAGES = 252,
    NOK_SECURESERVICE_RECLAIM_PARTITION_PAGES = 253,
    NOK_SECURESERVICE_BIND_NT_KERNEL_IMPORTS = 254,
    NOK_SECURESERVICE_SET_PLACEHOLDER_PAGES = 255,
    NOK_SECURESERVICE_QUERY_SPECULATION_CONTROL_FEATURES = 256,
    NOK_SECURESERVICE_PROTECT_KERNEL_DATA_PAGE = 257,
    NOK_SECURESERVICE_VERIFY_PAGE = 258,
    NOK_SECURESERVICE_PREPARE_FOR_HIBERNATION = 259,
    NOK_SECURESERVICE_PREPARE_FOR_CRASHDUMP = 260,
    NOK_SECURESERVICE_REPORT_BUGCHECK_PROGRESS = 261,
    NOK_SECURESERVICE_SHUTDOWN = 262,
    NOK_SECURESERVICE_QUERY_SECURE_PCI_INFO = 263,
    NOK_SECURESERVICE_ACCESS_PCI_DEVICE = 264,
    NOK_SECURESERVICE_REINITIALIZE_DEBUGGER_TRANSPORT = 265,
    NOK_SECURESERVICE_KSR_CALL = 266,
    NOK_SECURESERVICE_SVC_CALL = 267,
    NOK_SECURESERVICE_BUGCHECK = 1792,
    NOK_SECURESERVICE_LIMITED_MODE_SERVICE_START = 2048
}NOK_SKSERVICE, * NOK_PSKSERVICE;
//0x10 bytes (sizeof)
typedef struct _NOK_EWOW64PROCESS
{
    VOID* Peb;                                                              //0x0
    USHORT Machine;                                                         //0x8
    NOK_SYSTEM_DLL_TYPE NtdllType;                                        //0xc
}NOK_EWOW64PROCESS, * NOK_PEWOW64PROCESS;
//0x4 bytes (sizeof)
typedef enum _NOK_SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
{
    NOK_SystemFeatureConfigurationSectionTypeBoot = 0,
    NOK_SystemFeatureConfigurationSectionTypeRuntime = 1,
    NOK_SystemFeatureConfigurationSectionTypeUsageTriggers = 2,
    NOK_SystemFeatureConfigurationSectionTypeCount = 3
}NOK_SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE, * NOK_PSYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_SYSTEM_INFORMATION_CLASS
{
    NOK_SystemBasicInformation = 0,
    NOK_SystemProcessorInformation = 1,
    NOK_SystemPerformanceInformation = 2,
    NOK_SystemTimeOfDayInformation = 3,
    NOK_SystemPathInformation = 4,
    NOK_SystemProcessInformation = 5,
    NOK_SystemCallCountInformation = 6,
    NOK_SystemDeviceInformation = 7,
    NOK_SystemProcessorPerformanceInformation = 8,
    NOK_SystemFlagsInformation = 9,
    NOK_SystemCallTimeInformation = 10,
    NOK_SystemModuleInformation = 11,
    NOK_SystemLocksInformation = 12,
    NOK_SystemStackTraceInformation = 13,
    NOK_SystemPagedPoolInformation = 14,
    NOK_SystemNonPagedPoolInformation = 15,
    NOK_SystemHandleInformation = 16,
    NOK_SystemObjectInformation = 17,
    NOK_SystemPageFileInformation = 18,
    NOK_SystemVdmInstemulInformation = 19,
    NOK_SystemVdmBopInformation = 20,
    NOK_SystemFileCacheInformation = 21,
    NOK_SystemPoolTagInformation = 22,
    NOK_SystemInterruptInformation = 23,
    NOK_SystemDpcBehaviorInformation = 24,
    NOK_SystemFullMemoryInformation = 25,
    NOK_SystemLoadGdiDriverInformation = 26,
    NOK_SystemUnloadGdiDriverInformation = 27,
    NOK_SystemTimeAdjustmentInformation = 28,
    NOK_SystemSummaryMemoryInformation = 29,
    NOK_SystemMirrorMemoryInformation = 30,
    NOK_SystemPerformanceTraceInformation = 31,
    NOK_SystemObsolete0 = 32,
    NOK_SystemExceptionInformation = 33,
    NOK_SystemCrashDumpStateInformation = 34,
    NOK_SystemKernelDebuggerInformation = 35,
    NOK_SystemContextSwitchInformation = 36,
    NOK_SystemRegistryQuotaInformation = 37,
    NOK_SystemExtendServiceTableInformation = 38,
    NOK_SystemPrioritySeperation = 39,
    NOK_SystemVerifierAddDriverInformation = 40,
    NOK_SystemVerifierRemoveDriverInformation = 41,
    NOK_SystemProcessorIdleInformation = 42,
    NOK_SystemLegacyDriverInformation = 43,
    NOK_SystemCurrentTimeZoneInformation = 44,
    NOK_SystemLookasideInformation = 45,
    NOK_SystemTimeSlipNotification = 46,
    NOK_SystemSessionCreate = 47,
    NOK_SystemSessionDetach = 48,
    NOK_SystemSessionInformation = 49,
    NOK_SystemRangeStartInformation = 50,
    NOK_SystemVerifierInformation = 51,
    NOK_SystemVerifierThunkExtend = 52,
    NOK_SystemSessionProcessInformation = 53,
    NOK_SystemLoadGdiDriverInSystemSpace = 54,
    NOK_SystemNumaProcessorMap = 55,
    NOK_SystemPrefetcherInformation = 56,
    NOK_SystemExtendedProcessInformation = 57,
    NOK_SystemRecommendedSharedDataAlignment = 58,
    NOK_SystemComPlusPackage = 59,
    NOK_SystemNumaAvailableMemory = 60,
    NOK_SystemProcessorPowerInformation = 61,
    NOK_SystemEmulationBasicInformation = 62,
    NOK_SystemEmulationProcessorInformation = 63,
    NOK_SystemExtendedHandleInformation = 64,
    NOK_SystemLostDelayedWriteInformation = 65,
    NOK_SystemBigPoolInformation = 66,
    NOK_SystemSessionPoolTagInformation = 67,
    NOK_SystemSessionMappedViewInformation = 68,
    NOK_SystemHotpatchInformation = 69,
    NOK_SystemObjectSecurityMode = 70,
    NOK_SystemWatchdogTimerHandler = 71,
    NOK_SystemWatchdogTimerInformation = 72,
    NOK_SystemLogicalProcessorInformation = 73,
    NOK_SystemWow64SharedInformationObsolete = 74,
    NOK_SystemRegisterFirmwareTableInformationHandler = 75,
    NOK_SystemFirmwareTableInformation = 76,
    NOK_SystemModuleInformationEx = 77,
    NOK_SystemVerifierTriageInformation = 78,
    NOK_SystemSuperfetchInformation = 79,
    NOK_SystemMemoryListInformation = 80,
    NOK_SystemFileCacheInformationEx = 81,
    NOK_SystemThreadPriorityClientIdInformation = 82,
    NOK_SystemProcessorIdleCycleTimeInformation = 83,
    NOK_SystemVerifierCancellationInformation = 84,
    NOK_SystemProcessorPowerInformationEx = 85,
    NOK_SystemRefTraceInformation = 86,
    NOK_SystemSpecialPoolInformation = 87,
    NOK_SystemProcessIdInformation = 88,
    NOK_SystemErrorPortInformation = 89,
    NOK_SystemBootEnvironmentInformation = 90,
    NOK_SystemHypervisorInformation = 91,
    NOK_SystemVerifierInformationEx = 92,
    NOK_SystemTimeZoneInformation = 93,
    NOK_SystemImageFileExecutionOptionsInformation = 94,
    NOK_SystemCoverageInformation = 95,
    NOK_SystemPrefetchPatchInformation = 96,
    NOK_SystemVerifierFaultsInformation = 97,
    NOK_SystemSystemPartitionInformation = 98,
    NOK_SystemSystemDiskInformation = 99,
    NOK_SystemProcessorPerformanceDistribution = 100,
    NOK_SystemNumaProximityNodeInformation = 101,
    NOK_SystemDynamicTimeZoneInformation = 102,
    NOK_SystemCodeIntegrityInformation = 103,
    NOK_SystemProcessorMicrocodeUpdateInformation = 104,
    NOK_SystemProcessorBrandString = 105,
    NOK_SystemVirtualAddressInformation = 106,
    NOK_SystemLogicalProcessorAndGroupInformation = 107,
    NOK_SystemProcessorCycleTimeInformation = 108,
    NOK_SystemStoreInformation = 109,
    NOK_SystemRegistryAppendString = 110,
    NOK_SystemAitSamplingValue = 111,
    NOK_SystemVhdBootInformation = 112,
    NOK_SystemCpuQuotaInformation = 113,
    NOK_SystemNativeBasicInformation = 114,
    NOK_SystemErrorPortTimeouts = 115,
    NOK_SystemLowPriorityIoInformation = 116,
    NOK_SystemBootEntropyInformation = 117,
    NOK_SystemVerifierCountersInformation = 118,
    NOK_SystemPagedPoolInformationEx = 119,
    NOK_SystemSystemPtesInformationEx = 120,
    NOK_SystemNodeDistanceInformation = 121,
    NOK_SystemAcpiAuditInformation = 122,
    NOK_SystemBasicPerformanceInformation = 123,
    NOK_SystemQueryPerformanceCounterInformation = 124,
    NOK_SystemSessionBigPoolInformation = 125,
    NOK_SystemBootGraphicsInformation = 126,
    NOK_SystemScrubPhysicalMemoryInformation = 127,
    NOK_SystemBadPageInformation = 128,
    NOK_SystemProcessorProfileControlArea = 129,
    NOK_SystemCombinePhysicalMemoryInformation = 130,
    NOK_SystemEntropyInterruptTimingInformation = 131,
    NOK_SystemConsoleInformation = 132,
    NOK_SystemPlatformBinaryInformation = 133,
    NOK_SystemPolicyInformation = 134,
    NOK_SystemHypervisorProcessorCountInformation = 135,
    NOK_SystemDeviceDataInformation = 136,
    NOK_SystemDeviceDataEnumerationInformation = 137,
    NOK_SystemMemoryTopologyInformation = 138,
    NOK_SystemMemoryChannelInformation = 139,
    NOK_SystemBootLogoInformation = 140,
    NOK_SystemProcessorPerformanceInformationEx = 141,
    NOK_SystemCriticalProcessErrorLogInformation = 142,
    NOK_SystemSecureBootPolicyInformation = 143,
    NOK_SystemPageFileInformationEx = 144,
    NOK_SystemSecureBootInformation = 145,
    NOK_SystemEntropyInterruptTimingRawInformation = 146,
    NOK_SystemPortableWorkspaceEfiLauncherInformation = 147,
    NOK_SystemFullProcessInformation = 148,
    NOK_SystemKernelDebuggerInformationEx = 149,
    NOK_SystemBootMetadataInformation = 150,
    NOK_SystemSoftRebootInformation = 151,
    NOK_SystemElamCertificateInformation = 152,
    NOK_SystemOfflineDumpConfigInformation = 153,
    NOK_SystemProcessorFeaturesInformation = 154,
    NOK_SystemRegistryReconciliationInformation = 155,
    NOK_SystemEdidInformation = 156,
    NOK_SystemManufacturingInformation = 157,
    NOK_SystemEnergyEstimationConfigInformation = 158,
    NOK_SystemHypervisorDetailInformation = 159,
    NOK_SystemProcessorCycleStatsInformation = 160,
    NOK_SystemVmGenerationCountInformation = 161,
    NOK_SystemTrustedPlatformModuleInformation = 162,
    NOK_SystemKernelDebuggerFlags = 163,
    NOK_SystemCodeIntegrityPolicyInformation = 164,
    NOK_SystemIsolatedUserModeInformation = 165,
    NOK_SystemHardwareSecurityTestInterfaceResultsInformation = 166,
    NOK_SystemSingleModuleInformation = 167,
    NOK_SystemAllowedCpuSetsInformation = 168,
    NOK_SystemVsmProtectionInformation = 169,
    NOK_SystemInterruptCpuSetsInformation = 170,
    NOK_SystemSecureBootPolicyFullInformation = 171,
    NOK_SystemCodeIntegrityPolicyFullInformation = 172,
    NOK_SystemAffinitizedInterruptProcessorInformation = 173,
    NOK_SystemRootSiloInformation = 174,
    NOK_SystemCpuSetInformation = 175,
    NOK_SystemCpuSetTagInformation = 176,
    NOK_SystemWin32WerStartCallout = 177,
    NOK_SystemSecureKernelProfileInformation = 178,
    NOK_SystemCodeIntegrityPlatformManifestInformation = 179,
    NOK_SystemInterruptSteeringInformation = 180,
    NOK_SystemSupportedProcessorArchitectures = 181,
    NOK_SystemMemoryUsageInformation = 182,
    NOK_SystemCodeIntegrityCertificateInformation = 183,
    NOK_SystemPhysicalMemoryInformation = 184,
    NOK_SystemControlFlowTransition = 185,
    NOK_SystemKernelDebuggingAllowed = 186,
    NOK_SystemActivityModerationExeState = 187,
    NOK_SystemActivityModerationUserSettings = 188,
    NOK_SystemCodeIntegrityPoliciesFullInformation = 189,
    NOK_SystemCodeIntegrityUnlockInformation = 190,
    NOK_SystemIntegrityQuotaInformation = 191,
    NOK_SystemFlushInformation = 192,
    NOK_SystemProcessorIdleMaskInformation = 193,
    NOK_SystemSecureDumpEncryptionInformation = 194,
    NOK_SystemWriteConstraintInformation = 195,
    NOK_SystemKernelVaShadowInformation = 196,
    NOK_SystemHypervisorSharedPageInformation = 197,
    NOK_SystemFirmwareBootPerformanceInformation = 198,
    NOK_SystemCodeIntegrityVerificationInformation = 199,
    NOK_SystemFirmwarePartitionInformation = 200,
    NOK_SystemSpeculationControlInformation = 201,
    NOK_SystemDmaGuardPolicyInformation = 202,
    NOK_SystemEnclaveLaunchControlInformation = 203,
    NOK_SystemWorkloadAllowedCpuSetsInformation = 204,
    NOK_SystemCodeIntegrityUnlockModeInformation = 205,
    NOK_SystemLeapSecondInformation = 206,
    NOK_SystemFlags2Information = 207,
    NOK_SystemSecurityModelInformation = 208,
    NOK_SystemCodeIntegritySyntheticCacheInformation = 209,
    NOK_SystemFeatureConfigurationInformation = 210,
    NOK_SystemFeatureConfigurationSectionInformation = 211,
    NOK_SystemFeatureUsageSubscriptionInformation = 212,
    NOK_SystemSecureSpeculationControlInformation = 213,
    NOK_SystemSpacesBootInformation = 214,
    NOK_SystemFwRamdiskInformation = 215,
    NOK_SystemWheaIpmiHardwareInformation = 216,
    NOK_SystemDifSetRuleClassInformation = 217,
    NOK_SystemDifClearRuleClassInformation = 218,
    NOK_SystemDifApplyPluginVerificationOnDriver = 219,
    NOK_SystemDifRemovePluginVerificationOnDriver = 220,
    NOK_SystemShadowStackInformation = 221,
    NOK_SystemBuildVersionInformation = 222,
    NOK_SystemPoolLimitInformation = 223,
    NOK_SystemCodeIntegrityAddDynamicStore = 224,
    NOK_SystemCodeIntegrityClearDynamicStores = 225,
    NOK_SystemPoolZeroingInformation = 227,
    NOK_MaxSystemInfoClass = 228
}NOK_SYSTEM_INFORMATION_CLASS, * NOK_PSYSTEM_INFORMATION_CLASS;
//0x4 bytes (sizeof)
typedef enum _NOK_POP_POWER_ACTION_WATCHDOG_STATE
{
    NOK_PopPowerActionWatchdogStateDisabled = 0,
    NOK_PopPowerActionWatchdogStateTransitioning = 1,
    NOK_PopPowerActionWatchdogStateResuming = 2,
    NOK_PopPowerActionWatchdogStateMax = 3
}NOK_POP_POWER_ACTION_WATCHDOG_STATE, * NOK_PPOP_POWER_ACTION_WATCHDOG_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_SYSTEM_PROCESS_CLASSIFICATION
{
    NOK_SystemProcessClassificationNormal = 0,
    NOK_SystemProcessClassificationSystem = 1,
    NOK_SystemProcessClassificationSecureSystem = 2,
    NOK_SystemProcessClassificationMemCompression = 3,
    NOK_SystemProcessClassificationRegistry = 4,
    NOK_SystemProcessClassificationMaximum = 5
}NOK_SYSTEM_PROCESS_CLASSIFICATION, * NOK_PSYSTEM_PROCESS_CLASSIFICATION;
//0x4 bytes (sizeof)
typedef enum _NOK_THREAD_WORKLOAD_CLASS
{
    NOK_ThreadWorkloadClassDefault = 0,
    NOK_ThreadWorkloadClassGraphics = 1,
    NOK_MaxThreadWorkloadClass = 2
}NOK_THREAD_WORKLOAD_CLASS, * NOK_PTHREAD_WORKLOAD_CLASS;
//0x58 bytes (sizeof)
typedef struct _NOK_TOKEN_ACCESS_INFORMATION
{
    NOK_SID_AND_ATTRIBUTES_HASH* SidHash;                               //0x0
    NOK_SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;                     //0x8
    NOK_TOKEN_PRIVILEGES* Privileges;                                   //0x10
    NOK_LUID AuthenticationId;                                          //0x18
    NOK_TOKEN_TYPE TokenType;                                             //0x20
    NOK_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0x24
    NOK_TOKEN_MANDATORY_POLICY MandatoryPolicy;                         //0x28
    ULONG Flags;                                                            //0x2c
    ULONG AppContainerNumber;                                               //0x30
    VOID* PackageSid;                                                       //0x38
    NOK_SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;                      //0x40
    VOID* TrustLevelSid;                                                    //0x48
    VOID* SecurityAttributes;                                               //0x50
}NOK_TOKEN_ACCESS_INFORMATION, * NOK_PTOKEN_ACCESS_INFORMATION;
//0x48 bytes (sizeof)
typedef struct _NOK_TP_CALLBACK_ENVIRON_V3
{
    ULONG Version;                                                          //0x0
    NOK_PTP_POOL Pool;                                                  //0x8
    NOK_PTP_CLEANUP_GROUP CleanupGroup;                                 //0x10
    VOID (*CleanupGroupCancelCallback)(VOID* arg1, VOID* arg2);             //0x18
    VOID* RaceDll;                                                          //0x20
    NOK_PACTIVATION_CONTEXT ActivationContext;                          //0x28
    VOID (*FinalizationCallback)(NOK_PTP_CALLBACK_INSTANCE arg1, VOID* arg2); //0x30
    union
    {
        ULONG Flags;                                                        //0x38
        struct
        {
            ULONG LongFunction:1;                                           //0x38
            ULONG Persistent:1;                                             //0x38
            ULONG Private:30;                                               //0x38
        } s;                                                                //0x38
    } u;                                                                    //0x38
    NOK_TP_CALLBACK_PRIORITY CallbackPriority;                            //0x3c
    ULONG Size;                                                             //0x40
}NOK_TP_CALLBACK_ENVIRON_V3, * NOK_PTP_CALLBACK_ENVIRON_V3;
//0x4 bytes (sizeof)
typedef enum _NOK_TRACE_INFORMATION_CLASS
{
    NOK_TraceIdClass = 0,
    NOK_TraceHandleClass = 1,
    NOK_TraceEnableFlagsClass = 2,
    NOK_TraceEnableLevelClass = 3,
    NOK_GlobalLoggerHandleClass = 4,
    NOK_EventLoggerHandleClass = 5,
    NOK_AllLoggerHandlesClass = 6,
    NOK_TraceHandleByNameClass = 7,
    NOK_LoggerEventsLostClass = 8,
    NOK_TraceSessionSettingsClass = 9,
    NOK_LoggerEventsLoggedClass = 10,
    NOK_DiskIoNotifyRoutinesClass = 11,
    NOK_TraceInformationClassReserved1 = 12,
    NOK_AllPossibleNotifyRoutinesClass = 12,
    NOK_FltIoNotifyRoutinesClass = 13,
    NOK_TraceInformationClassReserved2 = 14,
    NOK_WdfNotifyRoutinesClass = 15,
    NOK_MaxTraceInformationClass = 16
}NOK_TRACE_INFORMATION_CLASS, * NOK_PTRACE_INFORMATION_CLASS;
//0x4 bytes (sizeof)
typedef enum _NOK_TRANSFER_TYPE
{
    NOK_ReadTransfer = 0,
    NOK_WriteTransfer = 1,
    NOK_OtherTransfer = 2
}NOK_TRANSFER_TYPE, * NOK_PTRANSFER_TYPE;
//0x28 bytes (sizeof)
typedef struct _NOK_MEMORY_ALLOCATION_DESCRIPTOR
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    NOK_TYPE_OF_MEMORY MemoryType;                                        //0x10
    ULONGLONG BasePage;                                                     //0x18
    ULONGLONG PageCount;                                                    //0x20
}NOK_MEMORY_ALLOCATION_DESCRIPTOR, * NOK_PMEMORY_ALLOCATION_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef enum _NOK_TlgBlob_t
{
    NOK__TlgBlobNone = 0,
    NOK__TlgBlobEnd = 1,
    NOK__TlgBlobProvider = 2,
    NOK__TlgBlobEvent3 = 3,
    NOK__TlgBlobProvider3 = 4,
    NOK__TlgBlobEvent2 = 5,
    NOK__TlgBlobEvent4 = 6,
    NOK__TlgBlobMax = 7
}NOK_TlgBlob_t, * NOK_PTlgBlob_t;
//0x4 bytes (sizeof)
typedef enum _NOK_USER_ACTIVITY_PRESENCE
{
    NOK_PowerUserPresent = 0,
    NOK_PowerUserNotPresent = 1,
    NOK_PowerUserInactive = 2,
    NOK_PowerUserMaximum = 3,
    NOK_PowerUserInvalid = 3
}NOK_USER_ACTIVITY_PRESENCE, * NOK_PUSER_ACTIVITY_PRESENCE;
//0x4 bytes (sizeof)
typedef enum _NOK_VI_DEADLOCK_RESOURCE_TYPE
{
    NOK_VfDeadlockUnknown = 0,
    NOK_VfDeadlockMutex = 1,
    NOK_VfDeadlockMutexAbandoned = 2,
    NOK_VfDeadlockFastMutex = 3,
    NOK_VfDeadlockFastMutexUnsafe = 4,
    NOK_VfDeadlockSpinLock = 5,
    NOK_VfDeadlockInStackQueuedSpinLock = 6,
    NOK_VfDeadlockUnusedSpinLock = 7,
    NOK_VfDeadlockEresource = 8,
    NOK_VfDeadlockTypeMaximum = 9
}NOK_VI_DEADLOCK_RESOURCE_TYPE, * NOK_PVI_DEADLOCK_RESOURCE_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_VRF_RULE_CLASS_ID
{
    NOK_VrfSpecialPoolRuleClass = 0,
    NOK_VrfForceIrqlRuleClass = 1,
    NOK_VrfAllocationFailuresRuleClass = 2,
    NOK_VrfTrackingPoolAllocationsRuleClass = 3,
    NOK_VrfIORuleClass = 4,
    NOK_VrfDeadlockPreventionRuleClass = 5,
    NOK_VrfEnhancedIORuleClass = 6,
    NOK_VrfDMARuleClass = 7,
    NOK_VrfSecurityRuleClass = 8,
    NOK_VrfForcePendingIORequestRuleClass = 9,
    NOK_VrfIRPTrackingRuleClass = 10,
    NOK_VrfMiscellaneousRuleClass = 11,
    NOK_VrfMoreDebuggingRuleClass = 12,
    NOK_VrfMDLInvariantStackRuleClass = 13,
    NOK_VrfMDLInvariantDriverRuleClass = 14,
    NOK_VrfPowerDelayFuzzingRuleClass = 15,
    NOK_VrfPortMiniportRuleClass = 16,
    NOK_VrfStandardDDIRuleClass = 17,
    NOK_VrfAutoFailRuleClass = 18,
    NOK_VrfAdditionalDDIRuleClass = 19,
    NOK_VrfRuleClassBase = 20,
    NOK_VrfNdisWifiRuleClass = 21,
    NOK_VrfDriverLoggingRuleClass = 22,
    NOK_VrfSyncDelayFuzzingRuleClass = 23,
    NOK_VrfVMSwitchingRuleClass = 24,
    NOK_VrfCodeIntegrityRuleClass = 25,
    NOK_VrfBelow4GBAllocationRuleClass = 26,
    NOK_VrfProcessorBranchTraceRuleClass = 27,
    NOK_VrfAdvancedMMRuleClass = 28,
    NOK_VrfExtendingXDVTimeLimit = 29,
    NOK_VrfSystemBIOSRuleClass = 30,
    NOK_VrfHardwareRuleClass = 31,
    NOK_VrfStateSepRuleClass = 32,
    NOK_VrfWDFRuleClass = 33,
    NOK_VrfMoreIrqlRuleClass = 34,
    NOK_VrfXDVPlatformMode = 35,
    NOK_VrfStandalonePlatformMode = 36,
    NOK_VrfPlatformModeTest = 37,
    NOK_VrfInfoDisclosureIRPRule = 38,
    NOK_VrfLwSpecialPool = 39,
    NOK_VrfAVXCorruption = 40,
    NOK_VrfAccessModeMismatch = 41,
    NOK_ReservedForDVRF42 = 42,
    NOK_ReservedForDVRF43 = 43,
    NOK_ReservedForDVRF44 = 44,
    NOK_ReservedForDVRF45 = 45,
    NOK_ReservedForDVRF46 = 46,
    NOK_ReservedForDVRF47 = 47,
    NOK_ReservedForDVRF48 = 48,
    NOK_ReservedForDVRF49 = 49,
    NOK_ReservedForDVRF50 = 50,
    NOK_ReservedForDVRF51 = 51,
    NOK_ReservedForDVRF52 = 52,
    NOK_ReservedForDVRF53 = 53,
    NOK_ReservedForDVRF54 = 54,
    NOK_ReservedForDVRF55 = 55,
    NOK_ReservedForDVRF56 = 56,
    NOK_ReservedForDVRF57 = 57,
    NOK_ReservedForDVRF58 = 58,
    NOK_ReservedForDVRF59 = 59,
    NOK_ReservedForDVRF60 = 60,
    NOK_ReservedForDVRF61 = 61,
    NOK_ReservedForDVRF62 = 62,
    NOK_ReservedForDVRF63 = 63,
    NOK_VrfRuleClassSizeMax = 64
}NOK_VRF_RULE_CLASS_ID, * NOK_PVRF_RULE_CLASS_ID;
//0x4 bytes (sizeof)
typedef enum _NOK_VRF_TRIAGE_CONTEXT
{
    NOK_VRF_TRIAGE_CONTEXT_NONE = 0,
    NOK_VRF_TRIAGE_CONTEXT_DEFAULT = 1,
    NOK_VRF_TRIAGE_CONTEXT_DEVELOPMENT = 1,
    NOK_VRF_TRIAGE_CONTEXT_CERTIFICATION = 2,
    NOK_VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 3,
    NOK_VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 4,
    NOK_VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 5,
    NOK_NUM_VRF_TRIAGE_CONTEXTS = 6
}NOK_VRF_TRIAGE_CONTEXT, * NOK_PVRF_TRIAGE_CONTEXT;
//0x100 bytes (sizeof)
typedef struct _NOK_POP_IRP_DATA
{
    NOK_LIST_ENTRY Link;                                                //0x0
    NOK_PIRP Irp;                                                       //0x10
    NOK_PDEVICE_OBJECT Pdo;                                             //0x18
    NOK_PDEVICE_OBJECT TargetDevice;                                    //0x20
    NOK_PDEVICE_OBJECT CurrentDevice;                                   //0x28
    ULONGLONG WatchdogStart;                                                //0x30
    NOK_KTIMER WatchdogTimer;                                           //0x38
    NOK_KDPC WatchdogDpc;                                               //0x78
    UCHAR MinorFunction;                                                    //0xb8
    NOK_POWER_STATE_TYPE PowerStateType;                                  //0xbc
    NOK_POWER_STATE PowerState;                                          //0xc0
    UCHAR WatchdogEnabled;                                                  //0xc4
    NOK_PPOP_FX_DEVICE FxDevice;                                        //0xc8
    UCHAR SystemTransition;                                                 //0xd0
    UCHAR NotifyPEP;                                                        //0xd1
    LONG IrpSequenceID;                                                     //0xd4
    union
    {
        struct
        {
            VOID (*CallerCompletion)(NOK_PDEVICE_OBJECT arg1, UCHAR arg2, NOK_POWER_STATE arg3, VOID* arg4, NOK_PIO_STATUS_BLOCK arg5); //0xd8
            VOID* CallerContext;                                            //0xe0
            NOK_PDEVICE_OBJECT CallerDevice;                            //0xe8
            UCHAR SystemWake;                                               //0xf0
        } Device;                                                           //0xd8
        struct
        {
            NOK_PPO_DEVICE_NOTIFY NotifyDevice;                         //0xd8
            UCHAR FxDeviceActivated;                                        //0xe0
        } System;                                                           //0xd8
    };
    NOK_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON DStateReason;                 //0xf8
}NOK_POP_IRP_DATA, * NOK_PPOP_IRP_DATA;
//0x4 bytes (sizeof)
typedef union _NOK_WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
    ULONG PlatformId:1;                                                     //0x0
    ULONG Timestamp:1;                                                      //0x0
    ULONG PartitionId:1;                                                    //0x0
    ULONG Reserved:29;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_WHEA_ERROR_RECORD_HEADER_VALIDBITS, * NOK_PWHEA_ERROR_RECORD_HEADER_VALIDBITS;
//0x4 bytes (sizeof)
typedef union _NOK_WHEA_ERROR_RECORD_HEADER_FLAGS
{
    ULONG Recovered:1;                                                      //0x0
    ULONG PreviousError:1;                                                  //0x0
    ULONG Simulated:1;                                                      //0x0
    ULONG DeviceDriver:1;                                                   //0x0
    ULONG CriticalEvent:1;                                                  //0x0
    ULONG PersistPfn:1;                                                     //0x0
    ULONG Reserved:26;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_WHEA_ERROR_RECORD_HEADER_FLAGS, * NOK_PWHEA_ERROR_RECORD_HEADER_FLAGS;
//0x80 bytes (sizeof)
typedef struct _NOK_WHEA_ERROR_RECORD_HEADER
{
    ULONG Signature;                                                        //0x0
    NOK_WHEA_REVISION Revision;                                          //0x4
    ULONG SignatureEnd;                                                     //0x6
    USHORT SectionCount;                                                    //0xa
    NOK_WHEA_ERROR_SEVERITY Severity;                                     //0xc
    NOK_WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;                    //0x10
    ULONG Length;                                                           //0x14
    NOK_WHEA_TIMESTAMP Timestamp;                                        //0x18
    NOK_GUID PlatformId;                                                //0x20
    NOK_GUID PartitionId;                                               //0x30
    NOK_GUID CreatorId;                                                 //0x40
    NOK_GUID NotifyType;                                                //0x50
    ULONGLONG RecordId;                                                     //0x60
    NOK_WHEA_ERROR_RECORD_HEADER_FLAGS Flags;                            //0x68
    NOK_WHEA_PERSISTENCE_INFO PersistenceInfo;                           //0x6c
    UCHAR Reserved[12];                                                     //0x74
}NOK_WHEA_ERROR_RECORD_HEADER, * NOK_PWHEA_ERROR_RECORD_HEADER;
//0x550 bytes (sizeof)
typedef struct _NOK_WMI_LOGGER_CONTEXT
{
    ULONG LoggerId;                                                         //0x0
    ULONG BufferSize;                                                       //0x4
    ULONG MaximumEventSize;                                                 //0x8
    ULONG LoggerMode;                                                       //0xc
    LONG AcceptNewEvents;                                                   //0x10
    ULONG EventMarker[2];                                                   //0x14
    ULONG ErrorMarker;                                                      //0x1c
    ULONG SizeMask;                                                         //0x20
    ULONGLONG GetCpuClock;                                                  //0x28
    NOK_PETHREAD LoggerThread;                                          //0x30
    LONG LoggerStatus;                                                      //0x38
    ULONG FailureReason;                                                    //0x3c
    NOK_ETW_BUFFER_QUEUE BufferQueue;                                   //0x40
    NOK_ETW_BUFFER_QUEUE OverflowQueue;                                 //0x50
    NOK_LIST_ENTRY GlobalList;                                          //0x60
    NOK_LIST_ENTRY DebugIdTrackingList;                                 //0x70
    NOK_PETW_DECODE_CONTROL_ENTRY DecodeControlList;                    //0x80
    ULONG DecodeControlCount;                                               //0x88
    union
    {
        NOK_PWMI_BUFFER_HEADER BatchedBufferList;                       //0x90
        NOK_EX_FAST_REF CurrentBuffer;                                  //0x90
    };
    NOK_UNICODE_STRING LoggerName;                                      //0x98
    NOK_UNICODE_STRING LogFileName;                                     //0xa8
    NOK_UNICODE_STRING LogFilePattern;                                  //0xb8
    NOK_UNICODE_STRING NewLogFileName;                                  //0xc8
    ULONG ClockType;                                                        //0xd8
    ULONG LastFlushedBuffer;                                                //0xdc
    ULONG FlushTimer;                                                       //0xe0
    ULONG FlushThreshold;                                                   //0xe4
    NOK_LARGE_INTEGER ByteOffset;                                        //0xe8
    ULONG MinimumBuffers;                                                   //0xf0
    volatile LONG BuffersAvailable;                                         //0xf4
    volatile LONG NumberOfBuffers;                                          //0xf8
    ULONG MaximumBuffers;                                                   //0xfc
    volatile ULONG EventsLost;                                              //0x100
    volatile LONG PeakBuffersCount;                                         //0x104
    ULONG BuffersWritten;                                                   //0x108
    ULONG LogBuffersLost;                                                   //0x10c
    ULONG RealTimeBuffersDelivered;                                         //0x110
    ULONG RealTimeBuffersLost;                                              //0x114
    LONG* SequencePtr;                                                      //0x118
    ULONG LocalSequence;                                                    //0x120
    NOK_GUID InstanceGuid;                                              //0x124
    ULONG MaximumFileSize;                                                  //0x134
    LONG FileCounter;                                                       //0x138
    NOK_POOL_TYPE PoolType;                                               //0x13c
    NOK_ETW_REF_CLOCK ReferenceTime;                                    //0x140
    LONG CollectionOn;                                                      //0x150
    ULONG ProviderInfoSize;                                                 //0x154
    NOK_LIST_ENTRY Consumers;                                           //0x158
    ULONG NumConsumers;                                                     //0x168
    NOK_PETW_REALTIME_CONSUMER TransitionConsumer;                      //0x170
    VOID* RealtimeLogfileHandle;                                            //0x178
    NOK_UNICODE_STRING RealtimeLogfileName;                             //0x180
    NOK_LARGE_INTEGER RealtimeWriteOffset;                               //0x190
    NOK_LARGE_INTEGER RealtimeReadOffset;                                //0x198
    NOK_LARGE_INTEGER RealtimeLogfileSize;                               //0x1a0
    ULONGLONG RealtimeLogfileUsage;                                         //0x1a8
    ULONGLONG RealtimeMaximumFileSize;                                      //0x1b0
    ULONG RealtimeBuffersSaved;                                             //0x1b8
    NOK_ETW_REF_CLOCK RealtimeReferenceTime;                            //0x1c0
    NOK_ETW_RT_EVENT_LOSS NewRTEventsLost;                                //0x1d0
    NOK_KEVENT LoggerEvent;                                             //0x1d8
    NOK_KEVENT FlushEvent;                                              //0x1f0
    NOK_KTIMER FlushTimeOutTimer;                                       //0x208
    NOK_KDPC LoggerDpc;                                                 //0x248
    NOK_KMUTANT LoggerMutex;                                            //0x288
    NOK_EX_PUSH_LOCK LoggerLock;                                        //0x2c0
    union
    {
        ULONGLONG BufferListSpinLock;                                       //0x2c8
        NOK_EX_PUSH_LOCK BufferListPushLock;                            //0x2c8
    };
    NOK_SECURITY_CLIENT_CONTEXT ClientSecurityContext;                  //0x2d0
    NOK_TOKEN_ACCESS_INFORMATION* TokenAccessInformation;               //0x318
    NOK_EX_FAST_REF SecurityDescriptor;                                 //0x320
    NOK_LARGE_INTEGER StartTime;                                         //0x328
    VOID* LogFileHandle;                                                    //0x330
    LONGLONG BufferSequenceNumber;                                          //0x338
    union
    {
        ULONG Flags;                                                        //0x340
        struct
        {
            ULONG Persistent:1;                                             //0x340
            ULONG AutoLogger:1;                                             //0x340
            ULONG FsReady:1;                                                //0x340
            ULONG RealTime:1;                                               //0x340
            ULONG Wow:1;                                                    //0x340
            ULONG KernelTrace:1;                                            //0x340
            ULONG NoMoreEnable:1;                                           //0x340
            ULONG StackTracing:1;                                           //0x340
            ULONG ErrorLogged:1;                                            //0x340
            ULONG RealtimeLoggerContextFreed:1;                             //0x340
            ULONG PebsTracing:1;                                            //0x340
            ULONG PmcCounters:1;                                            //0x340
            ULONG PageAlignBuffers:1;                                       //0x340
            ULONG StackLookasideListAllocated:1;                            //0x340
            ULONG SecurityTrace:1;                                          //0x340
            ULONG LastBranchTracing:1;                                      //0x340
            ULONG SystemLoggerIndex:8;                                      //0x340
            ULONG StackCaching:1;                                           //0x340
            ULONG ProviderTracking:1;                                       //0x340
            ULONG ProcessorTrace:1;                                         //0x340
            ULONG QpcDeltaTracking:1;                                       //0x340
            ULONG MarkerBufferSaved:1;                                      //0x340
            ULONG LargeMdlPages:1;                                          //0x340
            ULONG ExcludeKernelStack:1;                                     //0x340
            ULONG SpareFlags2:1;                                            //0x340
        };
    };
    union
    {
        volatile ULONG RequestFlag;                                         //0x344
        struct
        {
            ULONG DbgRequestNewFile:1;                                      //0x344
            ULONG DbgRequestUpdateFile:1;                                   //0x344
            ULONG DbgRequestFlush:1;                                        //0x344
            ULONG DbgRequestDisableRealtime:1;                              //0x344
            ULONG DbgRequestDisconnectConsumer:1;                           //0x344
            ULONG DbgRequestConnectConsumer:1;                              //0x344
            ULONG DbgRequestNotifyConsumer:1;                               //0x344
            ULONG DbgRequestUpdateHeader:1;                                 //0x344
            ULONG DbgRequestDeferredFlush:1;                                //0x344
            ULONG DbgRequestDeferredFlushTimer:1;                           //0x344
            ULONG DbgRequestFlushTimer:1;                                   //0x344
            ULONG DbgRequestUpdateDebugger:1;                               //0x344
            ULONG DbgSpareRequestFlags:20;                                  //0x344
        };
    };
    NOK_ETW_STACK_TRACE_BLOCK StackTraceBlock;                          //0x350
    NOK_RTL_BITMAP HookIdMap;                                           //0x3d0
    NOK_PETW_STACK_CACHE StackCache;                                    //0x3e0
    NOK_PETW_PMC_SUPPORT PmcData;                                       //0x3e8
    NOK_PETW_LBR_SUPPORT LbrData;                                       //0x3f0
    NOK_PETW_IPT_SUPPORT IptData;                                       //0x3f8
    NOK_LIST_ENTRY BinaryTrackingList;                                  //0x400
    NOK_PWMI_BUFFER_HEADER* ScratchArray;                               //0x410
    NOK_DISALLOWED_GUIDS DisallowedGuids;                               //0x418
    LONGLONG RelativeTimerDueTime;                                          //0x428
    NOK_PERIODIC_CAPTURE_STATE_GUIDS PeriodicCaptureStateGuids;         //0x430
    NOK_PEX_TIMER PeriodicCaptureStateTimer;                            //0x440
    NOK_ETW_PERIODIC_TIMER_STATE PeriodicCaptureStateTimerState;          //0x448
    NOK_PETW_SOFT_RESTART_CONTEXT SoftRestartContext;                   //0x450
    NOK_PETW_SILODRIVERSTATE SiloState;                                 //0x458
    NOK_WORK_QUEUE_ITEM CompressionWorkItem;                            //0x460
    LONG CompressionWorkItemState;                                          //0x480
    NOK_EX_PUSH_LOCK CompressionLock;                                   //0x488
    NOK_PWMI_BUFFER_HEADER CompressionTarget;                           //0x490
    VOID* CompressionWorkspace;                                             //0x498
    LONG CompressionOn;                                                     //0x4a0
    ULONG CompressionRatioGuess;                                            //0x4a4
    ULONG PartialBufferCompressionLevel;                                    //0x4a8
    NOK_ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode;         //0x4ac
    NOK_SINGLE_LIST_ENTRY PlaceholderList;                              //0x4b0
    NOK_KDPC CompressionDpc;                                            //0x4b8
    NOK_LARGE_INTEGER LastBufferSwitchTime;                              //0x4f8
    NOK_LARGE_INTEGER BufferWriteDuration;                               //0x500
    NOK_LARGE_INTEGER BufferCompressDuration;                            //0x508
    LONGLONG ReferenceQpcDelta;                                             //0x510
    NOK_PETW_EVENT_CALLBACK_CONTEXT CallbackContext;                    //0x518
    NOK_PLARGE_INTEGER LastDroppedTime;                                  //0x520
    NOK_PLARGE_INTEGER FlushingLastDroppedTime;                          //0x528
    LONGLONG FlushingSequenceNumber;                                        //0x530
    NOK_ETW_PARTITION_CONTEXT PartitionContext;                         //0x538
    NOK_PMDL BufferMdl;                                                 //0x540
}NOK_WMI_LOGGER_CONTEXT, * NOK_PWMI_LOGGER_CONTEXT;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_ERROR_TYPE
{
    NOK_WheaErrTypeProcessor = 0,
    NOK_WheaErrTypeMemory = 1,
    NOK_WheaErrTypePCIExpress = 2,
    NOK_WheaErrTypeNMI = 3,
    NOK_WheaErrTypePCIXBus = 4,
    NOK_WheaErrTypePCIXDevice = 5,
    NOK_WheaErrTypeGeneric = 6,
    NOK_WheaErrTypePmem = 7
}NOK_WHEA_ERROR_TYPE, * NOK_PWHEA_ERROR_TYPE;
//0x20 bytes (sizeof)
typedef struct _NOK_WHEA_AER_ENDPOINT_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG BusNumber;                                                        //0x4
    NOK_WHEA_PCI_SLOT_NUMBER Slot;                                      //0x8
    USHORT DeviceControl;                                                   //0xc
    NOK_AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;                             //0xe
    ULONG UncorrectableErrorMask;                                           //0x10
    ULONG UncorrectableErrorSeverity;                                       //0x14
    ULONG CorrectableErrorMask;                                             //0x18
    ULONG AdvancedCapsAndControl;                                           //0x1c
}NOK_WHEA_AER_ENDPOINT_DESCRIPTOR, * NOK_PWHEA_AER_ENDPOINT_DESCRIPTOR;
//0x4 bytes (sizeof)
typedef union _NOK_WHEA_ERROR_PACKET_FLAGS
{
    ULONG PreviousError:1;                                                  //0x0
    ULONG CriticalEvent:1;                                                  //0x0
    ULONG HypervisorError:1;                                                //0x0
    ULONG Simulated:1;                                                      //0x0
    ULONG PlatformPfaControl:1;                                             //0x0
    ULONG PlatformDirectedOffline:1;                                        //0x0
    ULONG AddressTranslationRequired:1;                                     //0x0
    ULONG AddressTranslationCompleted:1;                                    //0x0
    ULONG Reserved2:24;                                                     //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_WHEA_ERROR_PACKET_FLAGS, * NOK_PWHEA_ERROR_PACKET_FLAGS;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_EVENT_LOG_ENTRY_TYPE
{
    NOK_WheaEventLogEntryTypeInformational = 0,
    NOK_WheaEventLogEntryTypeWarning = 1,
    NOK_WheaEventLogEntryTypeError = 2
}NOK_WHEA_EVENT_LOG_ENTRY_TYPE, * NOK_PWHEA_EVENT_LOG_ENTRY_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_WHEA_RECOVERY_CONTEXT_ERROR_TYPE
{
    NOK_WheaRecoveryContextErrorTypeMemory = 1,
    NOK_WheaRecoveryContextErrorTypePmem = 2,
    NOK_WheaRecoveryContextErrorTypeMax = 3
}NOK_WHEA_RECOVERY_CONTEXT_ERROR_TYPE, * NOK_PWHEA_RECOVERY_CONTEXT_ERROR_TYPE;
//0x50 bytes (sizeof)
typedef struct _NOK_WNF_SCOPE_INSTANCE
{
    NOK_WNF_NODE_HEADER Header;                                         //0x0
    NOK_EX_RUNDOWN_REF RunRef;                                          //0x8
    NOK_WNF_DATA_SCOPE DataScope;                                         //0x10
    ULONG InstanceIdSize;                                                   //0x14
    VOID* InstanceIdData;                                                   //0x18
    NOK_LIST_ENTRY ResolverListEntry;                                   //0x20
    NOK_WNF_LOCK NameSetLock;                                           //0x30
    NOK_RTL_AVL_TREE NameSet;                                           //0x38
    VOID* PermanentDataStore;                                               //0x40
    VOID* VolatilePermanentDataStore;                                       //0x48
}NOK_WNF_SCOPE_INSTANCE, * NOK_PWNF_SCOPE_INSTANCE;
//0x4 bytes (sizeof)
typedef enum _NOK_WNF_STATE_NAME_LIFETIME
{
    NOK_WnfWellKnownStateName = 0,
    NOK_WnfPermanentStateName = 1,
    NOK_WnfPersistentStateName = 2,
    NOK_WnfTemporaryStateName = 3
}NOK_WNF_STATE_NAME_LIFETIME, * NOK_PWNF_STATE_NAME_LIFETIME;
//0x4 bytes (sizeof)
typedef enum _NOK_WNF_SUBSCRIPTION_STATE
{
    NOK_WNF_SUB_STATE_QUIESCENT = 0,
    NOK_WNF_SUB_STATE_READY_TO_DELIVER = 1,
    NOK_WNF_SUB_STATE_IN_DELIVERY = 2,
    NOK_WNF_SUB_STATE_RETRY = 3
}NOK_WNF_SUBSCRIPTION_STATE, * NOK_PWNF_SUBSCRIPTION_STATE;
//0x4 bytes (sizeof)
typedef enum _NOK_WORKING_SET_TYPE
{
    NOK_WorkingSetTypeUser = 0,
    NOK_WorkingSetTypeSession = 1,
    NOK_WorkingSetTypeSystemTypes = 2,
    NOK_WorkingSetTypeSystemCache = 2,
    NOK_WorkingSetTypePagedPool = 3,
    NOK_WorkingSetTypeSystemViews = 4,
    NOK_WorkingSetTypePagableMaximum = 4,
    NOK_WorkingSetTypeSystemPtes = 5,
    NOK_WorkingSetTypeKernelStacks = 6,
    NOK_WorkingSetTypeNonPagedPool = 7,
    NOK_WorkingSetTypeMaximum = 8
}NOK_WORKING_SET_TYPE, * NOK_PWORKING_SET_TYPE;
//0x4 bytes (sizeof)
typedef enum _NOK_WOW64_SHARED_INFORMATION
{
    NOK_SharedNtdll32LdrInitializeThunk = 0,
    NOK_SharedNtdll32KiUserExceptionDispatcher = 1,
    NOK_SharedNtdll32KiUserApcDispatcher = 2,
    NOK_SharedNtdll32KiUserCallbackDispatcher = 3,
    NOK_SharedNtdll32RtlUserThreadStart = 4,
    NOK_SharedNtdll32pQueryProcessDebugInformationRemote = 5,
    NOK_SharedNtdll32BaseAddress = 6,
    NOK_SharedNtdll32LdrSystemDllInitBlock = 7,
    NOK_SharedNtdll32RtlpFreezeTimeBias = 8,
    NOK_Wow64SharedPageEntriesCount = 9
}NOK_WOW64_SHARED_INFORMATION, * NOK_PWOW64_SHARED_INFORMATION;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureChangeTime
{
    NOK_wil_FeatureChangeTime_OnRead = 0,
    NOK_wil_FeatureChangeTime_OnReload = 1,
    NOK_wil_FeatureChangeTime_OnSession = 2,
    NOK_wil_FeatureChangeTime_OnReboot = 3
}NOK_wil_FeatureChangeTime, * NOK_Pwil_FeatureChangeTime;
//0x18 bytes (sizeof)
typedef struct _NOK_wil_FeatureState
{
    NOK_wil_FeatureEnabledState enabledState;                              //0x0
    UCHAR variant;                                                          //0x4
    NOK_wil_FeatureVariantPayloadKind payloadKind;                         //0x8
    ULONG payload;                                                          //0xc
    LONG hasNotification;                                                   //0x10
    LONG isVariantConfiguration;                                            //0x14
}NOK_wil_FeatureState, * NOK_Pwil_FeatureState;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureEnabledStateKind
{
    NOK_wil_FeatureEnabledStateKind_Service = 1,
    NOK_wil_FeatureEnabledStateKind_User = 2,
    NOK_wil_FeatureEnabledStateKind_Test = 3
}NOK_wil_FeatureEnabledStateKind, * NOK_Pwil_FeatureEnabledStateKind;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureEnabledStateOptions
{
    NOK_wil_FeatureEnabledStateOptions_None = 0,
    NOK_wil_FeatureEnabledStateOptions_VariantConfig = 1
}NOK_wil_FeatureEnabledStateOptions, * NOK_Pwil_FeatureEnabledStateOptions;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_FeatureStage
{
    NOK_wil_FeatureStage_AlwaysDisabled = 0,
    NOK_wil_FeatureStage_DisabledByDefault = 1,
    NOK_wil_FeatureStage_EnabledByDefault = 2,
    NOK_wil_FeatureStage_AlwaysEnabled = 3
}NOK_wil_FeatureStage, * NOK_Pwil_FeatureStage;
//0x20 bytes (sizeof)
typedef struct _NOK_wil_details_FeatureTestState
{
    NOK_wil_details_FeatureTestStateKind kind;                             //0x0
    ULONG featureId;                                                        //0x4
    NOK_wil_FeatureEnabledState state;                                     //0x8
    UCHAR variant;                                                          //0xc
    ULONG payload;                                                          //0x10
    NOK_wil_FeatureVariantPayloadKind payloadKind;                         //0x14
    NOK_Pwil_details_FeatureTestState next;                              //0x18
}NOK_wil_details_FeatureTestState, * NOK_Pwil_details_FeatureTestState;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_ReportingKind
{
    NOK_wil_ReportingKind_None = 0,
    NOK_wil_ReportingKind_UniqueUsage = 1,
    NOK_wil_ReportingKind_UniqueOpportunity = 2,
    NOK_wil_ReportingKind_DeviceUsage = 3,
    NOK_wil_ReportingKind_DeviceOpportunity = 4,
    NOK_wil_ReportingKind_TotalDuration = 5,
    NOK_wil_ReportingKind_PausedDuration = 6
}NOK_wil_ReportingKind, * NOK_Pwil_ReportingKind;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_UsageReportingMode
{
    NOK_wil_UsageReportingMode_Default = 0,
    NOK_wil_UsageReportingMode_SuppressPotential = 1,
    NOK_wil_UsageReportingMode_SuppressImplicit = 2
}NOK_wil_UsageReportingMode, * NOK_Pwil_UsageReportingMode;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_VariantReportingKind
{
    NOK_wil_VariantReportingKind_None = 0,
    NOK_wil_VariantReportingKind_UniqueUsage = 1,
    NOK_wil_VariantReportingKind_DeviceUsage = 2
}NOK_wil_VariantReportingKind, * NOK_Pwil_VariantReportingKind;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_details_FeatureTestStateKind
{
    NOK_wil_details_FeatureTestStateKind_EnabledState = 0,
    NOK_wil_details_FeatureTestStateKind_Variant = 1
}NOK_wil_details_FeatureTestStateKind, * NOK_Pwil_details_FeatureTestStateKind;
//0x18 bytes (sizeof)
typedef struct _NOK_wil_details_RecordUsageResult
{
    LONG queueBackground;                                                   //0x0
    ULONG countImmediate;                                                   //0x4
    NOK_wil_details_ServiceReportingKind kindImmediate;                    //0x8
    ULONG payloadId;                                                        //0xc
    LONG ignoredUse;                                                        //0x10
    LONG isVariantConfiguration;                                            //0x14
}NOK_wil_details_RecordUsageResult, * NOK_Pwil_details_RecordUsageResult;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_details_ServiceReportingOptions
{
    NOK_wil_details_ServiceReportingOptions_None = 0,
    NOK_wil_details_ServiceReportingOptions_VariantConfig = 1
}NOK_wil_details_ServiceReportingOptions, * NOK_Pwil_details_ServiceReportingOptions;
//0x4 bytes (sizeof)
typedef enum _NOK_wil_details_StagingConfigFeatureFields
{
    NOK_wil_details_StagingConfigFeatureFields_None = 0,
    NOK_wil_details_StagingConfigFeatureFields_ServiceState = 1,
    NOK_wil_details_StagingConfigFeatureFields_UserState = 2,
    NOK_wil_details_StagingConfigFeatureFields_TestState = 4,
    NOK_wil_details_StagingConfigFeatureFields_Variant = 8
}NOK_wil_details_StagingConfigFeatureFields, * NOK_Pwil_details_StagingConfigFeatureFields;
//0x4 bytes (sizeof)
typedef union _NOK_RTLP_HP_LFH_PERF_FLAGS
{
    ULONG HotspotDetection:1;                                               //0x0
    ULONG HotspotFullCommit:1;                                              //0x0
    ULONG ActiveSubsegment:1;                                               //0x0
    ULONG SmallerSubsegment:1;                                              //0x0
    ULONG SingleAffinitySlot:1;                                             //0x0
    ULONG ApplyLfhDecommitPolicy:1;                                         //0x0
    ULONG EnableGarbageCollection:1;                                        //0x0
    ULONG LargePagePreCommit:1;                                             //0x0
    ULONG OpportunisticLargePreCommit:1;                                    //0x0
    ULONG LfhForcedAffinity:1;                                              //0x0
    ULONG LfhCachelinePadding:1;                                            //0x0
    ULONG AllFlags;                                                         //0x0
}NOK_RTLP_HP_LFH_PERF_FLAGS, * NOK_PRTLP_HP_LFH_PERF_FLAGS;
//0x24 bytes (sizeof)
typedef struct _NOK_WHEA_AER_ROOTPORT_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG BusNumber;                                                        //0x4
    NOK_WHEA_PCI_SLOT_NUMBER Slot;                                      //0x8
    USHORT DeviceControl;                                                   //0xc
    NOK_AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;                             //0xe
    ULONG UncorrectableErrorMask;                                           //0x10
    ULONG UncorrectableErrorSeverity;                                       //0x14
    ULONG CorrectableErrorMask;                                             //0x18
    ULONG AdvancedCapsAndControl;                                           //0x1c
    ULONG RootErrorCommand;                                                 //0x20
}NOK_WHEA_AER_ROOTPORT_DESCRIPTOR, * NOK_PWHEA_AER_ROOTPORT_DESCRIPTOR;
//0x3a4 bytes (sizeof)
typedef struct _NOK_WHEA_XPF_CMC_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR NumberOfBanks;                                                    //0x3
    ULONG Reserved;                                                         //0x4
    NOK_WHEA_NOTIFICATION_DESCRIPTOR Notify;                            //0x8
    NOK_WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];                          //0x24
}NOK_WHEA_XPF_CMC_DESCRIPTOR, * NOK_PWHEA_XPF_CMC_DESCRIPTOR;
//0x50 bytes (sizeof)
typedef struct _NOK_WHEA_GENERIC_ERROR_DESCRIPTOR_V2
{
    USHORT Type;                                                            //0x0
    UCHAR Reserved;                                                         //0x2
    UCHAR Enabled;                                                          //0x3
    ULONG ErrStatusBlockLength;                                             //0x4
    ULONG RelatedErrorSourceId;                                             //0x8
    UCHAR ErrStatusAddressSpaceID;                                          //0xc
    UCHAR ErrStatusAddressBitWidth;                                         //0xd
    UCHAR ErrStatusAddressBitOffset;                                        //0xe
    UCHAR ErrStatusAddressAccessSize;                                       //0xf
    NOK_LARGE_INTEGER ErrStatusAddress;                                  //0x10
    NOK_WHEA_NOTIFICATION_DESCRIPTOR Notify;                            //0x18
    UCHAR ReadAckAddressSpaceID;                                            //0x34
    UCHAR ReadAckAddressBitWidth;                                           //0x35
    UCHAR ReadAckAddressBitOffset;                                          //0x36
    UCHAR ReadAckAddressAccessSize;                                         //0x37
    NOK_LARGE_INTEGER ReadAckAddress;                                    //0x38
    ULONGLONG ReadAckPreserveMask;                                          //0x40
    ULONGLONG ReadAckWriteMask;                                             //0x48
}NOK_WHEA_GENERIC_ERROR_DESCRIPTOR_V2, * NOK_PWHEA_GENERIC_ERROR_DESCRIPTOR_V2;
//0x8 bytes (sizeof)
typedef union _NOK_MCG_CAP
{
    ULONGLONG CountField:8;                                                 //0x0
    ULONGLONG ControlMsrPresent:1;                                          //0x0
    ULONGLONG ExtendedMsrsPresent:1;                                        //0x0
    ULONGLONG SignalingExtensionPresent:1;                                  //0x0
    ULONGLONG ThresholdErrorStatusPresent:1;                                //0x0
    ULONGLONG Reserved:4;                                                   //0x0
    ULONGLONG ExtendedRegisterCount:8;                                      //0x0
    ULONGLONG SoftwareErrorRecoverySupported:1;                             //0x0
    ULONGLONG EnhancedMachineCheckCapability:1;                             //0x0
    ULONGLONG ExtendedErrorLogging:1;                                       //0x0
    ULONGLONG LocalMachineCheckException:1;                                 //0x0
    ULONGLONG QuadPart;                                                     //0x0
}NOK_MCG_CAP, * NOK_PMCG_CAP;
//0x68 bytes (sizeof)
typedef struct _NOK_CM_KEY_BODY
{
    ULONG Type;                                                             //0x0
    NOK_PCM_KEY_CONTROL_BLOCK KeyControlBlock;                          //0x8
    NOK_PCM_NOTIFY_BLOCK NotifyBlock;                                   //0x10
    VOID* ProcessID;                                                        //0x18
    NOK_LIST_ENTRY KeyBodyList;                                         //0x20
    ULONG Flags:16;                                                         //0x30
    ULONG HandleTags:16;                                                    //0x30
    NOK_CM_TRANS_PTR Trans;                                              //0x38
    NOK_PGUID KtmUow;                                                   //0x40
    NOK_LIST_ENTRY ContextListHead;                                     //0x48
    VOID* EnumerationResumeContext;                                         //0x58
    ULONG RestrictedAccessMask;                                             //0x60
}NOK_CM_KEY_BODY, * NOK_PCM_KEY_BODY;
//0x10 bytes (sizeof)
typedef union _NOK_CPU_INFO
{
    ULONG AsUINT32[4];                                                      //0x0
    struct
    {
        ULONG Eax;                                                          //0x0
        ULONG Ebx;                                                          //0x4
    };
    struct
    {
        ULONG Ecx;                                                          //0x8
    };
    ULONG Edx;                                                              //0xc
}NOK_CPU_INFO, * NOK_PCPU_INFO;
//0x38 bytes (sizeof)
typedef struct _NOK_ETW_DEBUGID_TRACKING_ENTRY
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    UCHAR ConsumersNotified;                                                //0x10
    UCHAR Spare[3];                                                         //0x11
    ULONG DebugIdSize;                                                      //0x14
    NOK_CVDD DebugId;                                                    //0x18
}NOK_ETW_DEBUGID_TRACKING_ENTRY, * NOK_PETW_DEBUGID_TRACKING_ENTRY;
//0xc8 bytes (sizeof)
typedef struct _NOK_THREAD_ENERGY_VALUES
{
    ULONGLONG Cycles[4][2];                                                 //0x0
    ULONGLONG AttributedCycles[4][2];                                       //0x40
    ULONGLONG WorkOnBehalfCycles[4][2];                                     //0x80
    NOK_TIMELINE_BITMAP CpuTimeline;                                     //0xc0
}NOK_THREAD_ENERGY_VALUES, * NOK_PTHREAD_ENERGY_VALUES;
//0x8 bytes (sizeof)
typedef union _NOK_FILE_SEGMENT_ELEMENT
{
    VOID* Buffer;                                                           //0x0
    ULONGLONG Alignment;                                                    //0x0
}NOK_FILE_SEGMENT_ELEMENT, * NOK_PFILE_SEGMENT_ELEMENT;
//0x40 bytes (sizeof)
typedef struct _NOK_FS_FILTER_CALLBACK_DATA
{
    ULONG SizeOfFsFilterCallbackData;                                       //0x0
    UCHAR Operation;                                                        //0x4
    UCHAR Reserved;                                                         //0x5
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x8
    NOK_PFILE_OBJECT FileObject;                                        //0x10
    NOK_FS_FILTER_PARAMETERS Parameters;                                 //0x18
}NOK_FS_FILTER_CALLBACK_DATA, * NOK_PFS_FILTER_CALLBACK_DATA;
//0x20 bytes (sizeof)
typedef struct _NOK_HAL_UNMASKED_INTERRUPT_INFORMATION
{
    USHORT Version;                                                         //0x0
    USHORT Size;                                                            //0x2
    NOK_HAL_UNMASKED_INTERRUPT_FLAGS Flags;                              //0x4
    NOK_KINTERRUPT_MODE Mode;                                             //0x8
    NOK_KINTERRUPT_POLARITY Polarity;                                     //0xc
    ULONG Gsiv;                                                             //0x10
    USHORT PinNumber;                                                       //0x14
    VOID* DeviceHandle;                                                     //0x18
}NOK_HAL_UNMASKED_INTERRUPT_INFORMATION, * NOK_PHAL_UNMASKED_INTERRUPT_INFORMATION;
//0x30 bytes (sizeof)
typedef struct _NOK_KALPC_HANDLE_DATA
{
    ULONG ObjectType;                                                       //0x0
    ULONG Count;                                                            //0x4
    NOK_OB_DUPLICATE_OBJECT_STATE DuplicateContext;                     //0x8
}NOK_KALPC_HANDLE_DATA, * NOK_PKALPC_HANDLE_DATA;
//0x10 bytes (sizeof)
typedef struct _NOK_SEGMENT_HEAP_EXTRA
{
    USHORT AllocationTag;                                                   //0x0
    UCHAR InterceptorIndex:4;                                               //0x2
    UCHAR UserFlags:4;                                                      //0x2
    UCHAR ExtraSizeInUnits;                                                 //0x3
    VOID* Settable;                                                         //0x8
}NOK_SEGMENT_HEAP_EXTRA, * NOK_PSEGMENT_HEAP_EXTRA;
//0x8 bytes (sizeof)
typedef union _NOK_HEAP_LFH_ONDEMAND_POINTER
{
    USHORT Invalid:1;                                                       //0x0
    USHORT AllocationInProgress:1;                                          //0x0
    struct
    {
        USHORT Spare0:14;                                                   //0x0
        USHORT UsageData;                                                   //0x2
    };
    VOID* AllBits;                                                          //0x0
}NOK_HEAP_LFH_ONDEMAND_POINTER, * NOK_PHEAP_LFH_ONDEMAND_POINTER;
//0x38f0 bytes (sizeof)
typedef struct _NOK_EX_HEAP_SESSION_STATE
{
    NOK_RTLP_HP_HEAP_MANAGER HeapManager;                               //0x0
    NOK_RTL_HP_ENV_HANDLE PagedEnv;                                      //0x38d0
    NOK_SEGMENT_HEAP* PagedHeap;                                        //0x38e0
    NOK_SEGMENT_HEAP* SpecialPoolHeap;                                  //0x38e8
}NOK_EX_HEAP_SESSION_STATE, * NOK_PEX_HEAP_SESSION_STATE;
//0x86940 bytes (sizeof)
typedef struct _NOK_EX_POOL_HEAP_MANAGER_STATE
{
    NOK_RTLP_HP_HEAP_MANAGER HeapManager;                               //0x0
    ULONG NumberOfPools;                                                    //0x38d0
    NOK_EX_HEAP_POOL_NODE PoolNode[64];                                 //0x3900
    NOK_SEGMENT_HEAP* SpecialHeaps[4];                                  //0x86900
}NOK_EX_POOL_HEAP_MANAGER_STATE, * NOK_PEX_POOL_HEAP_MANAGER_STATE;
//0x2000 bytes (sizeof)
typedef union _NOK_HEAP_PAGE_SEGMENT
{
    struct
    {
        NOK_LIST_ENTRY ListEntry;                                       //0x0
        ULONGLONG Signature;                                                //0x10
    };
    struct
    {
        NOK_PHEAP_SEGMENT_MGR_COMMIT_STATE SegmentCommitState;           //0x18
        UCHAR UnusedWatermark;                                              //0x20
    };
    NOK_HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256];                      //0x0
}NOK_HEAP_PAGE_SEGMENT, * NOK_PHEAP_PAGE_SEGMENT;
//0x2 bytes (sizeof)
typedef union _NOK_HEAP_SEGMENT_MGR_COMMIT_STATE
{
    USHORT CommittedPageCount:11;                                           //0x0
    USHORT Spare:3;                                                         //0x0
    USHORT LargePageOperationInProgress:1;                                  //0x0
    USHORT LargePageCommit:1;                                               //0x0
    volatile USHORT EntireUShortV;                                          //0x0
    USHORT EntireUShort;                                                    //0x0
}NOK_HEAP_SEGMENT_MGR_COMMIT_STATE, * NOK_PHEAP_SEGMENT_MGR_COMMIT_STATE;
//0x10 bytes (sizeof)
typedef struct _NOK_HV_X64_HYPERVISOR_FEATURES
{
    NOK_HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;                 //0x0
    ULONG MaxSupportedCState:4;                                             //0x8
    ULONG HpetNeededForC3PowerState_Deprecated:1;                           //0x8
    ULONG Reserved:27;                                                      //0x8
    ULONG MwaitAvailable_Deprecated:1;                                      //0xc
    ULONG GuestDebuggingAvailable:1;                                        //0xc
    ULONG PerformanceMonitorsAvailable:1;                                   //0xc
    ULONG CpuDynamicPartitioningAvailable:1;                                //0xc
    ULONG XmmRegistersForFastHypercallAvailable:1;                          //0xc
    ULONG GuestIdleAvailable:1;                                             //0xc
    ULONG HypervisorSleepStateSupportAvailable:1;                           //0xc
    ULONG NumaDistanceQueryAvailable:1;                                     //0xc
    ULONG FrequencyRegsAvailable:1;                                         //0xc
    ULONG SyntheticMachineCheckAvailable:1;                                 //0xc
    ULONG GuestCrashRegsAvailable:1;                                        //0xc
    ULONG DebugRegsAvailable:1;                                             //0xc
    ULONG Npiep1Available:1;                                                //0xc
    ULONG DisableHypervisorAvailable:1;                                     //0xc
    ULONG ExtendedGvaRangesForFlushVirtualAddressListAvailable:1;           //0xc
    ULONG FastHypercallOutputAvailable:1;                                   //0xc
    ULONG SvmFeaturesAvailable:1;                                           //0xc
    ULONG SintPollingModeAvailable:1;                                       //0xc
    ULONG HypercallMsrLockAvailable:1;                                      //0xc
    ULONG DirectSyntheticTimers:1;                                          //0xc
    ULONG RegisterPatAvailable:1;                                           //0xc
    ULONG RegisterBndcfgsAvailable:1;                                       //0xc
    ULONG WatchdogTimerAvailable:1;                                         //0xc
    ULONG SyntheticTimeUnhaltedTimerAvailable:1;                            //0xc
    ULONG DeviceDomainsAvailable:1;                                         //0xc
    ULONG S1DeviceDomainsAvailable:1;                                       //0xc
    ULONG LbrAvailable:1;                                                   //0xc
    ULONG IptAvailable:1;                                                   //0xc
    ULONG CrossVtlFlushAvailable:1;                                         //0xc
    ULONG IdleSpecCtrlAvailable:1;                                          //0xc
    ULONG Reserved1:2;                                                      //0xc
}NOK_HV_X64_HYPERVISOR_FEATURES, * NOK_PHV_X64_HYPERVISOR_FEATURES;
//0x10 bytes (sizeof)
typedef union _NOK_INVPCID_DESCRIPTOR
{
    struct
    {
        union
        {
            struct
            {
                ULONGLONG Pcid:12;                                          //0x0
                ULONGLONG Reserved:52;                                      //0x0
            };
            ULONGLONG EntirePcid;                                           //0x0
        };
        ULONGLONG Virtual;                                                  //0x8
    } IndividualAddress;                                                    //0x0
    struct
    {
        union
        {
            struct
            {
                ULONGLONG Pcid:12;                                          //0x0
                ULONGLONG Reserved:52;                                      //0x0
            };
            ULONGLONG EntirePcid;                                           //0x0
        };
        ULONGLONG Reserved2;                                                //0x8
    } SingleContext;                                                        //0x0
    struct
    {
        ULONGLONG Reserved[2];                                              //0x0
    } AllContextAndGlobals;                                                 //0x0
    struct
    {
        ULONGLONG Reserved[2];                                              //0x0
    } AllContext;                                                           //0x0
}NOK_INVPCID_DESCRIPTOR, * NOK_PINVPCID_DESCRIPTOR;
//0xc bytes (sizeof)
typedef union _NOK_IOMMU_SVM_CAPABILITIES
{
    ULONG AtsCapability:1;                                                  //0x0
    ULONG PriCapability:1;                                                  //0x0
    struct
    {
        ULONG PasidCapability:1;                                            //0x0
        struct
    {
        ULONG PasidMaxWidth:5;                                              //0x4
        ULONG PasidExePerm:1;                                               //0x4
        ULONG PasidPrivMode:1;                                              //0x4
        ULONG AtsPageAlignedRequest:1;                                      //0x4
        ULONG AtsGlobalInvalidate:1;                                        //0x4
        ULONG AtsInvalidateQueueDepth:5;                                    //0x4
    } CapReg;                                                               //0x4
    };
    struct
    {
        ULONG Rsvd:15;                                                      //0x8
    };
    ULONG AsULONG;                                                          //0x0
}NOK_IOMMU_SVM_CAPABILITIES, * NOK_PIOMMU_SVM_CAPABILITIES;
//0x3cc bytes (sizeof)
typedef struct _NOK_WHEA_ERROR_SOURCE_DESCRIPTOR
{
    ULONG Length;                                                           //0x0
    ULONG Version;                                                          //0x4
    NOK_WHEA_ERROR_SOURCE_TYPE Type;                                      //0x8
    NOK_WHEA_ERROR_SOURCE_STATE State;                                    //0xc
    ULONG MaxRawDataLength;                                                 //0x10
    ULONG NumRecordsToPreallocate;                                          //0x14
    ULONG MaxSectionsPerRecord;                                             //0x18
    ULONG ErrorSourceId;                                                    //0x1c
    ULONG PlatformErrorSourceId;                                            //0x20
    ULONG Flags;                                                            //0x24
    union
    {
        NOK_WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;                   //0x28
        NOK_WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;                   //0x28
        NOK_WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;                   //0x28
        NOK_WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;                   //0x28
        NOK_WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;                   //0x28
        NOK_WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;                   //0x28
        NOK_WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;         //0x28
        NOK_WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;         //0x28
        NOK_WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;             //0x28
        NOK_WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;             //0x28
        NOK_WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;        //0x28
        NOK_WHEA_DEVICE_DRIVER_DESCRIPTOR DeviceDriverDescriptor;       //0x28
    } Info;                                                                 //0x28
}NOK_WHEA_ERROR_SOURCE_DESCRIPTOR, * NOK_PWHEA_ERROR_SOURCE_DESCRIPTOR;
//0x118 bytes (sizeof)
typedef struct _NOK_KALPC_MESSAGE
{
    NOK_LIST_ENTRY Entry;                                               //0x0
    NOK_PALPC_PORT PortQueue;                                           //0x10
    NOK_PALPC_PORT OwnerPort;                                           //0x18
    NOK_PETHREAD WaitingThread;                                         //0x20
    union
    {
        struct
        {
            ULONG QueueType:3;                                              //0x28
            ULONG QueuePortType:4;                                          //0x28
            ULONG Canceled:1;                                               //0x28
            ULONG Ready:1;                                                  //0x28
            ULONG ReleaseMessage:1;                                         //0x28
            ULONG SharedQuota:1;                                            //0x28
            ULONG ReplyWaitReply:1;                                         //0x28
            ULONG OwnerPortReference:1;                                     //0x28
            ULONG ReceiverReference:1;                                      //0x28
            ULONG ViewAttributeRetrieved:1;                                 //0x28
            ULONG InDispatch:1;                                             //0x28
        } s1;                                                               //0x28
        ULONG State;                                                        //0x28
    } u1;                                                                   //0x28
    LONG SequenceNo;                                                        //0x2c
    union
    {
        NOK_PEPROCESS QuotaProcess;                                     //0x30
        VOID* QuotaBlock;                                                   //0x30
    };
    NOK_PALPC_PORT CancelSequencePort;                                  //0x38
    NOK_PALPC_PORT CancelQueuePort;                                     //0x40
    LONG CancelSequenceNo;                                                  //0x48
    NOK_LIST_ENTRY CancelListEntry;                                     //0x50
    NOK_PKALPC_RESERVE Reserve;                                         //0x60
    NOK_KALPC_MESSAGE_ATTRIBUTES MessageAttributes;                     //0x68
    VOID* DataUserVa;                                                       //0xb0
    NOK_PALPC_COMMUNICATION_INFO CommunicationInfo;                     //0xb8
    NOK_PALPC_PORT ConnectionPort;                                      //0xc0
    NOK_PETHREAD ServerThread;                                          //0xc8
    VOID* WakeReference;                                                    //0xd0
    VOID* WakeReference2;                                                   //0xd8
    VOID* ExtensionBuffer;                                                  //0xe0
    ULONGLONG ExtensionBufferSize;                                          //0xe8
    NOK_PORT_MESSAGE PortMessage;                                       //0xf0
}NOK_KALPC_MESSAGE, * NOK_PKALPC_MESSAGE;
//0x1c8 bytes (sizeof)
typedef struct _NOK_POP_HIBER_CONTEXT
{
    UCHAR Reset;                                                            //0x0
    UCHAR HiberFlags;                                                       //0x1
    UCHAR WroteHiberFile;                                                   //0x2
    UCHAR KernelPhaseVerificationActive;                                    //0x3
    volatile UCHAR InitializationFinished;                                  //0x4
    volatile LONG NextTableLockHeld;                                        //0x8
    volatile LONG BootPhaseFinishedBarrier;                                 //0xc
    volatile LONG KernelResumeFinishedBarrier;                              //0x10
    volatile LONG HvCaptureReadyBarrier;                                    //0x14
    volatile LONG HvCaptureCompletedBarrier;                                //0x18
    UCHAR MapFrozen;                                                        //0x1c
    union
    {
        NOK_RTL_BITMAP DiscardMap;                                      //0x20
        NOK_RTL_BITMAP KernelPhaseMap;                                  //0x20
    };
    NOK_RTL_BITMAP BootPhaseMap;                                        //0x30
    NOK_LIST_ENTRY ClonedRanges;                                        //0x40
    ULONG ClonedRangeCount;                                                 //0x50
    ULONGLONG ClonedPageCount;                                              //0x58
    NOK_PRTL_BITMAP CurrentMap;                                         //0x60
    NOK_PLIST_ENTRY NextCloneRange;                                     //0x68
    ULONGLONG NextPreserve;                                                 //0x70
    NOK_PMDL LoaderMdl;                                                 //0x78
    NOK_PMDL AllocatedMdl;                                              //0x80
    ULONGLONG PagesOut;                                                     //0x88
    VOID* IoPages;                                                          //0x90
    ULONG IoPagesCount;                                                     //0x98
    VOID* CurrentMcb;                                                       //0xa0
    NOK_PDUMP_STACK_CONTEXT DumpStack;                                  //0xa8
    NOK_KPROCESSOR_STATE* WakeState;                                    //0xb0
    ULONG IoProgress;                                                       //0xb8
    LONG Status;                                                            //0xbc
    ULONG GraphicsProc;                                                     //0xc0
    NOK_PPO_MEMORY_IMAGE MemoryImage;                                    //0xc8
    ULONG* PerformanceStats;                                                //0xd0
    NOK_PMDL BootLoaderLogMdl;                                          //0xd8
    NOK_PMDL FirmwareRuntimeInformationMdl;                             //0xe0
    VOID* FirmwareRuntimeInformationVa;                                     //0xe8
    VOID* ResumeContext;                                                    //0xf0
    ULONG ResumeContextPages;                                               //0xf8
    ULONG SecurePages;                                                      //0xfc
    ULONG ProcessorCount;                                                   //0x100
    NOK_PPOP_PER_PROCESSOR_CONTEXT ProcessorContext;                    //0x108
    CHAR* ProdConsBuffer;                                                   //0x110
    ULONG ProdConsSize;                                                     //0x118
    ULONG MaxDataPages;                                                     //0x11c
    VOID* ExtraBuffer;                                                      //0x120
    ULONGLONG ExtraBufferSize;                                              //0x128
    VOID* ExtraMapVa;                                                       //0x130
    ULONGLONG BitlockerKeyPFN;                                              //0x138
    NOK_POP_IO_INFO IoInfo;                                             //0x140
    WCHAR* IoChecksums;                                                     //0x1b0
    ULONGLONG IoChecksumsSize;                                              //0x1b8
    ULONG HardwareConfigurationSignature;                                   //0x1c0
    UCHAR IumEnabled;                                                       //0x1c4
    UCHAR SecureBoot;                                                       //0x1c5
}NOK_POP_HIBER_CONTEXT, * NOK_PPOP_HIBER_CONTEXT;
//0x10 bytes (sizeof)
typedef union _NOK_KGDTENTRY64
{
    struct
    {
        USHORT LimitLow;                                                    //0x0
        USHORT BaseLow;                                                     //0x2
    };
    struct
    {
        UCHAR BaseMiddle;                                                   //0x4
        UCHAR Flags1;                                                       //0x5
        UCHAR Flags2;                                                       //0x6
        UCHAR BaseHigh;                                                     //0x7
    } Bytes;                                                                //0x4
    struct
    {
        struct
    {
        ULONG BaseMiddle:8;                                                 //0x4
        ULONG Type:5;                                                       //0x4
        ULONG Dpl:2;                                                        //0x4
        ULONG Present:1;                                                    //0x4
        ULONG LimitHigh:4;                                                  //0x4
        ULONG System:1;                                                     //0x4
        ULONG LongMode:1;                                                   //0x4
        ULONG DefaultBig:1;                                                 //0x4
        ULONG Granularity:1;                                                //0x4
        ULONG BaseHigh:8;                                                   //0x4
    } Bits;                                                                 //0x4
        ULONG BaseUpper;                                                    //0x8
    };
    struct
    {
        ULONG MustBeZero;                                                   //0xc
        LONGLONG DataLow;                                                   //0x0
    };
    LONGLONG DataHigh;                                                      //0x8
}NOK_KGDTENTRY64, * NOK_PKGDTENTRY64;
//0x10 bytes (sizeof)
typedef union _NOK_KIDTENTRY64
{
    struct
    {
        USHORT OffsetLow;                                                   //0x0
        USHORT Selector;                                                    //0x2
    };
    USHORT IstIndex:3;                                                      //0x4
    USHORT Reserved0:5;                                                     //0x4
    USHORT Type:5;                                                          //0x4
    USHORT Dpl:2;                                                           //0x4
    struct
    {
        USHORT Present:1;                                                   //0x4
        USHORT OffsetMiddle;                                                //0x6
    };
    struct
    {
        ULONG OffsetHigh;                                                   //0x8
        ULONG Reserved1;                                                    //0xc
    };
    ULONGLONG Alignment;                                                    //0x0
}NOK_KIDTENTRY64, * NOK_PKIDTENTRY64;
//0x4 bytes (sizeof)
typedef enum _NOK_KTRANSACTION_STATE
{
    NOK_KTransactionUninitialized = 0,
    NOK_KTransactionActive = 1,
    NOK_KTransactionPreparing = 2,
    NOK_KTransactionPrepared = 3,
    NOK_KTransactionInDoubt = 4,
    NOK_KTransactionCommitted = 5,
    NOK_KTransactionAborted = 6,
    NOK_KTransactionDelegated = 7,
    NOK_KTransactionPrePreparing = 8,
    NOK_KTransactionForgotten = 9,
    NOK_KTransactionRecovering = 10,
    NOK_KTransactionPrePrepared = 11
}NOK_KTRANSACTION_STATE, * NOK_PKTRANSACTION_STATE;
//0x1c0 bytes (sizeof)
typedef struct _NOK_ENODE
{
    NOK_KNODE Ncb;                                                      //0x0
    NOK_WORK_QUEUE_ITEM HotAddProcessorWorkItem;                        //0x180
}NOK_ENODE, * NOK_PENODE;
//0x4 bytes (sizeof)
typedef enum _NOK_KTHREAD_TAG
{
    NOK_KThreadTagNone = 0,
    NOK_KThreadTagMediaBuffering = 1,
    NOK_KThreadTagDeadline = 2,
    NOK_KThreadTagMax = 3
}NOK_KTHREAD_TAG, * NOK_PKTHREAD_TAG;
//0x640 bytes (sizeof)
typedef struct _NOK_EJOB
{
    NOK_KEVENT Event;                                                   //0x0
    NOK_LIST_ENTRY JobLinks;                                            //0x18
    NOK_LIST_ENTRY ProcessListHead;                                     //0x28
    NOK_ERESOURCE JobLock;                                              //0x38
    NOK_LARGE_INTEGER TotalUserTime;                                     //0xa0
    NOK_LARGE_INTEGER TotalKernelTime;                                   //0xa8
    NOK_LARGE_INTEGER TotalCycleTime;                                    //0xb0
    NOK_LARGE_INTEGER ThisPeriodTotalUserTime;                           //0xb8
    NOK_LARGE_INTEGER ThisPeriodTotalKernelTime;                         //0xc0
    ULONGLONG TotalContextSwitches;                                         //0xc8
    ULONG TotalPageFaultCount;                                              //0xd0
    ULONG TotalProcesses;                                                   //0xd4
    ULONG ActiveProcesses;                                                  //0xd8
    ULONG TotalTerminatedProcesses;                                         //0xdc
    NOK_LARGE_INTEGER PerProcessUserTimeLimit;                           //0xe0
    NOK_LARGE_INTEGER PerJobUserTimeLimit;                               //0xe8
    ULONGLONG MinimumWorkingSetSize;                                        //0xf0
    ULONGLONG MaximumWorkingSetSize;                                        //0xf8
    ULONG LimitFlags;                                                       //0x100
    ULONG ActiveProcessLimit;                                               //0x104
    NOK_KAFFINITY_EX Affinity;                                          //0x108
    NOK_PJOB_ACCESS_STATE AccessState;                                  //0x1b0
    VOID* AccessStateQuotaReference;                                        //0x1b8
    ULONG UIRestrictionsClass;                                              //0x1c0
    ULONG EndOfJobTimeAction;                                               //0x1c4
    VOID* CompletionPort;                                                   //0x1c8
    VOID* CompletionKey;                                                    //0x1d0
    ULONGLONG CompletionCount;                                              //0x1d8
    ULONG SessionId;                                                        //0x1e0
    ULONG SchedulingClass;                                                  //0x1e4
    ULONGLONG ReadOperationCount;                                           //0x1e8
    ULONGLONG WriteOperationCount;                                          //0x1f0
    ULONGLONG OtherOperationCount;                                          //0x1f8
    ULONGLONG ReadTransferCount;                                            //0x200
    ULONGLONG WriteTransferCount;                                           //0x208
    ULONGLONG OtherTransferCount;                                           //0x210
    NOK_PROCESS_DISK_COUNTERS DiskIoInfo;                               //0x218
    ULONGLONG ProcessMemoryLimit;                                           //0x240
    ULONGLONG JobMemoryLimit;                                               //0x248
    ULONGLONG JobTotalMemoryLimit;                                          //0x250
    ULONGLONG PeakProcessMemoryUsed;                                        //0x258
    ULONGLONG PeakJobMemoryUsed;                                            //0x260
    NOK_KAFFINITY_EX EffectiveAffinity;                                 //0x268
    NOK_LARGE_INTEGER EffectivePerProcessUserTimeLimit;                  //0x310
    ULONGLONG EffectiveMinimumWorkingSetSize;                               //0x318
    ULONGLONG EffectiveMaximumWorkingSetSize;                               //0x320
    ULONGLONG EffectiveProcessMemoryLimit;                                  //0x328
    NOK_PEJOB EffectiveProcessMemoryLimitJob;                           //0x330
    NOK_PEJOB EffectivePerProcessUserTimeLimitJob;                      //0x338
    NOK_PEJOB EffectiveNetIoRateLimitJob;                               //0x340
    NOK_PEJOB EffectiveHeapAttributionJob;                              //0x348
    ULONG EffectiveLimitFlags;                                              //0x350
    ULONG EffectiveSchedulingClass;                                         //0x354
    ULONG EffectiveFreezeCount;                                             //0x358
    ULONG EffectiveBackgroundCount;                                         //0x35c
    ULONG EffectiveSwapCount;                                               //0x360
    ULONG EffectiveNotificationLimitCount;                                  //0x364
    UCHAR EffectivePriorityClass;                                           //0x368
    UCHAR PriorityClass;                                                    //0x369
    UCHAR NestingDepth;                                                     //0x36a
    UCHAR Reserved1[1];                                                     //0x36b
    ULONG CompletionFilter;                                                 //0x36c
    union
    {
        NOK_WNF_STATE_NAME WakeChannel;                                 //0x370
        NOK_PS_JOB_WAKE_INFORMATION WakeInfo;                           //0x370
    };
    NOK_JOBOBJECT_WAKE_FILTER WakeFilter;                               //0x3b8
    ULONG LowEdgeLatchFilter;                                               //0x3c0
    NOK_PEJOB NotificationLink;                                         //0x3c8
    ULONGLONG CurrentJobMemoryUsed;                                         //0x3d0
    NOK_PJOB_NOTIFICATION_INFORMATION NotificationInfo;                 //0x3d8
    VOID* NotificationInfoQuotaReference;                                   //0x3e0
    NOK_PIO_MINI_COMPLETION_PACKET_USER NotificationPacket;             //0x3e8
    NOK_PJOB_CPU_RATE_CONTROL CpuRateControl;                           //0x3f0
    VOID* EffectiveSchedulingGroup;                                         //0x3f8
    ULONGLONG ReadyTime;                                                    //0x400
    NOK_EX_PUSH_LOCK MemoryLimitsLock;                                  //0x408
    NOK_LIST_ENTRY SiblingJobLinks;                                     //0x410
    NOK_LIST_ENTRY ChildJobListHead;                                    //0x420
    NOK_PEJOB ParentJob;                                                //0x430
    NOK_PEJOB volatile RootJob;                                         //0x438
    NOK_LIST_ENTRY IteratorListHead;                                    //0x440
    ULONGLONG AncestorCount;                                                //0x450
    union
    {
        NOK_PEJOB* Ancestors;                                           //0x458
        VOID* SessionObject;                                                //0x458
    };
    NOK_EPROCESS_VALUES Accounting;                                     //0x460
    ULONG ShadowActiveProcessCount;                                         //0x4c8
    ULONG ActiveAuxiliaryProcessCount;                                      //0x4cc
    ULONG SequenceNumber;                                                   //0x4d0
    ULONG JobId;                                                            //0x4d4
    NOK_GUID ContainerId;                                               //0x4d8
    NOK_GUID ContainerTelemetryId;                                      //0x4e8
    NOK_PESERVERSILO_GLOBALS ServerSiloGlobals;                         //0x4f8
    NOK_PS_PROPERTY_SET PropertySet;                                    //0x500
    NOK_PPSP_STORAGE Storage;                                           //0x518
    NOK_PJOB_NET_RATE_CONTROL NetRateControl;                           //0x520
    union
    {
        ULONG JobFlags;                                                     //0x528
        struct
        {
            ULONG CloseDone:1;                                              //0x528
            ULONG MultiGroup:1;                                             //0x528
            ULONG OutstandingNotification:1;                                //0x528
            ULONG NotificationInProgress:1;                                 //0x528
            ULONG UILimits:1;                                               //0x528
            ULONG CpuRateControlActive:1;                                   //0x528
            ULONG OwnCpuRateControl:1;                                      //0x528
            ULONG Terminating:1;                                            //0x528
            ULONG WorkingSetLock:1;                                         //0x528
            ULONG JobFrozen:1;                                              //0x528
            ULONG Background:1;                                             //0x528
            ULONG WakeNotificationAllocated:1;                              //0x528
            ULONG WakeNotificationEnabled:1;                                //0x528
            ULONG WakeNotificationPending:1;                                //0x528
            ULONG LimitNotificationRequired:1;                              //0x528
            ULONG ZeroCountNotificationRequired:1;                          //0x528
            ULONG CycleTimeNotificationRequired:1;                          //0x528
            ULONG CycleTimeNotificationPending:1;                           //0x528
            ULONG TimersVirtualized:1;                                      //0x528
            ULONG JobSwapped:1;                                             //0x528
            ULONG ViolationDetected:1;                                      //0x528
            ULONG EmptyJobNotified:1;                                       //0x528
            ULONG NoSystemCharge:1;                                         //0x528
            ULONG DropNoWakeCharges:1;                                      //0x528
            ULONG NoWakeChargePolicyDecided:1;                              //0x528
            ULONG NetRateControlActive:1;                                   //0x528
            ULONG OwnNetRateControl:1;                                      //0x528
            ULONG IoRateControlActive:1;                                    //0x528
            ULONG OwnIoRateControl:1;                                       //0x528
            ULONG DisallowNewProcesses:1;                                   //0x528
            ULONG Silo:1;                                                   //0x528
            ULONG ContainerTelemetryIdSet:1;                                //0x528
        };
    };
    union
    {
        ULONG JobFlags2;                                                    //0x52c
        struct
        {
            ULONG ParentLocked:1;                                           //0x52c
            ULONG EnableUsermodeSiloThreadImpersonation:1;                  //0x52c
            ULONG DisallowUsermodeSiloThreadImpersonation:1;                //0x52c
        };
    };
    NOK_PPROCESS_EXTENDED_ENERGY_VALUES EnergyValues;                   //0x530
    volatile ULONGLONG SharedCommitCharge;                                  //0x538
    ULONG DiskIoAttributionUserRefCount;                                    //0x540
    ULONG DiskIoAttributionRefCount;                                        //0x544
    union
    {
        VOID* DiskIoAttributionContext;                                     //0x548
        NOK_PEJOB DiskIoAttributionOwnerJob;                            //0x548
    };
    NOK_JOB_RATE_CONTROL_HEADER IoRateControlHeader;                    //0x550
    NOK_PS_IO_CONTROL_ENTRY GlobalIoControl;                            //0x578
    volatile LONG IoControlStateLock;                                       //0x5b0
    NOK_RTL_RB_TREE VolumeIoControlTree;                                //0x5b8
    ULONGLONG IoRateOverQuotaHistory;                                       //0x5c8
    ULONG IoRateCurrentGeneration;                                          //0x5d0
    ULONG IoRateLastQueryGeneration;                                        //0x5d4
    ULONG IoRateGenerationLength;                                           //0x5d8
    ULONG IoRateOverQuotaNotifySequenceId;                                  //0x5dc
    ULONGLONG LastThrottledIoTime;                                          //0x5e0
    NOK_EX_PUSH_LOCK IoControlLock;                                     //0x5e8
    LONGLONG SiloHardReferenceCount;                                        //0x5f0
    NOK_WORK_QUEUE_ITEM RundownWorkItem;                                //0x5f8
    VOID* PartitionObject;                                                  //0x618
    NOK_PEJOB PartitionOwnerJob;                                        //0x620
    NOK_JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;             //0x628
    ULONGLONG KernelWaitTime;                                               //0x630
    ULONGLONG UserWaitTime;                                                 //0x638
}NOK_EJOB, * NOK_PEJOB;
//0x100 bytes (sizeof)
typedef union _NOK_LFH_RANDOM_DATA
{
    UCHAR Bytes[256];                                                       //0x0
    USHORT Words[128];                                                      //0x0
    ULONGLONG Quadwords[32];                                                //0x0
}NOK_LFH_RANDOM_DATA, * NOK_PLFH_RANDOM_DATA;
//0x8 bytes (sizeof)
typedef union _NOK_MCG_STATUS
{
    ULONG RestartIpValid:1;                                                 //0x0
    ULONG ErrorIpValid:1;                                                   //0x0
    ULONG MachineCheckInProgress:1;                                         //0x0
    ULONG LocalMceValid:1;                                                  //0x0
    struct
    {
        ULONG Reserved1:28;                                                 //0x0
        ULONG Reserved2;                                                    //0x4
    };
    ULONGLONG QuadPart;                                                     //0x0
}NOK_MCG_STATUS, * NOK_PMCG_STATUS;
//0x8 bytes (sizeof)
typedef union _NOK_MCI_STATUS
{
    NOK_MCI_STATUS_BITS_COMMON CommonBits;                              //0x0
    NOK_MCI_STATUS_AMD_BITS AmdBits;                                    //0x0
    NOK_MCI_STATUS_INTEL_BITS IntelBits;                                //0x0
    ULONGLONG QuadPart;                                                     //0x0
}NOK_MCI_STATUS, * NOK_PMCI_STATUS;
//0x110 bytes (sizeof)
typedef struct _NOK_WHEA_XPF_MCA_SECTION
{
    ULONG VersionNumber;                                                    //0x0
    NOK_WHEA_CPU_VENDOR CpuVendor;                                        //0x4
    NOK_LARGE_INTEGER Timestamp;                                         //0x8
    ULONG ProcessorNumber;                                                  //0x10
    NOK_MCG_STATUS GlobalStatus;                                         //0x14
    ULONGLONG InstructionPointer;                                           //0x1c
    ULONG BankNumber;                                                       //0x24
    NOK_MCI_STATUS Status;                                               //0x28
    ULONGLONG Address;                                                      //0x30
    ULONGLONG Misc;                                                         //0x38
    ULONG ExtendedRegisterCount;                                            //0x40
    ULONG ApicId;                                                           //0x44
    union
    {
        ULONGLONG ExtendedRegisters[24];                                    //0x48
        NOK_WHEA_AMD_EXTENDED_REGISTERS AMDExtendedRegisters;           //0x48
    };
    NOK_MCG_CAP GlobalCapability;                                        //0x108
}NOK_WHEA_XPF_MCA_SECTION, * NOK_PWHEA_XPF_MCA_SECTION;
//0x38 bytes (sizeof)
typedef struct _NOK_MI_TRIAGE_DUMP_DATA
{
    ULONGLONG BadPageCount;                                                 //0x0
    LONG BadPagesDetected;                                                  //0x8
    LONG ZeroedPageSingleBitErrorsDetected;                                 //0xc
    LONG ScrubPasses;                                                       //0x10
    LONG ScrubBadPagesFound;                                                //0x14
    ULONG PageHashErrors;                                                   //0x18
    ULONGLONG FeatureBits;                                                  //0x20
    ULONG TimeZoneId;                                                       //0x28
    NOK_MI_FLAGS Flags;                                                  //0x2c
    VOID* VsmConnection;                                                    //0x30
}NOK_MI_TRIAGE_DUMP_DATA, * NOK_PMI_TRIAGE_DUMP_DATA;
//0x32c0 bytes (sizeof)
typedef struct _NOK_MI_SYSTEM_INFORMATION
{
    NOK_MI_POOL_STATE Pools;                                            //0x0
    NOK_MI_SECTION_STATE Sections;                                      //0xc0
    NOK_MI_SYSTEM_IMAGE_STATE SystemImages;                             //0x400
    NOK_MI_SESSION_STATE Sessions;                                      //0x4a8
    NOK_MI_PROCESS_STATE Processes;                                     //0x1550
    NOK_MI_HARDWARE_STATE Hardware;                                     //0x15c0
    NOK_MI_SYSTEM_VA_STATE SystemVa;                                    //0x1780
    NOK_MI_COMBINE_STATE PageCombines;                                  //0x1c40
    NOK_MI_PAGELIST_STATE PageLists;                                    //0x1c60
    NOK_MI_PARTITION_STATE Partitions;                                  //0x1d00
    NOK_MI_SHUTDOWN_STATE Shutdowns;                                    //0x1dc0
    NOK_MI_ERROR_STATE Errors;                                          //0x1e38
    NOK_MI_ACCESS_LOG_STATE AccessLog;                                  //0x1f00
    NOK_MI_DEBUGGER_STATE Debugger;                                     //0x1f80
    NOK_MI_STANDBY_STATE Standby;                                       //0x20a0
    NOK_MI_SYSTEM_PTE_STATE SystemPtes;                                 //0x2140
    NOK_MI_IO_PAGE_STATE IoPages;                                       //0x2340
    NOK_MI_PAGING_IO_STATE PagingIo;                                    //0x23b0
    NOK_MI_COMMON_PAGE_STATE CommonPages;                               //0x2460
    NOK_MI_SYSTEM_TRIM_STATE Trims;                                     //0x2540
    NOK_MI_ENCLAVE_STATE Enclaves;                                      //0x2580
    ULONGLONG Cookie;                                                       //0x25c8
    VOID* volatile* BootRegistryRuns;                                       //0x25d0
    volatile LONG ZeroingDisabled;                                          //0x25d8
    UCHAR FullyInitialized;                                                 //0x25dc
    UCHAR SafeBooted;                                                       //0x25dd
    NOK_PtlgProvider_t TraceLogging;                                    //0x25e0
    NOK_MI_VISIBLE_STATE Vs;                                            //0x2600
}NOK_MI_SYSTEM_INFORMATION, * NOK_PMI_SYSTEM_INFORMATION;
//0x8 bytes (sizeof)
typedef union _NOK_MM_STORE_KEY
{
    ULONGLONG KeyLow:60;                                                    //0x0
    ULONGLONG KeyHigh:4;                                                    //0x0
    ULONGLONG EntireKey;                                                    //0x0
}NOK_MM_STORE_KEY, * NOK_PMM_STORE_KEY;
//0x28 bytes (sizeof)
typedef union _NOK_PCW_CALLBACK_INFORMATION
{
    NOK_PCW_COUNTER_INFORMATION AddCounter;                             //0x0
    NOK_PCW_COUNTER_INFORMATION RemoveCounter;                          //0x0
    NOK_PCW_MASK_INFORMATION EnumerateInstances;                        //0x0
    NOK_PCW_MASK_INFORMATION CollectData;                               //0x0
}NOK_PCW_CALLBACK_INFORMATION, * NOK_PPCW_CALLBACK_INFORMATION;
//0x48 bytes (sizeof)
typedef struct _NOK_PEP_ACPI_GPIO_RESOURCE
{
    NOK_PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    NOK_PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0x4
    NOK_KINTERRUPT_MODE InterruptType;                                    //0x8
    NOK_KINTERRUPT_POLARITY InterruptPolarity;                            //0xc
    NOK_GPIO_PIN_CONFIG_TYPE PinConfig;                                   //0x10
    NOK_GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;                    //0x14
    USHORT DriveStrength;                                                   //0x18
    USHORT DebounceTimeout;                                                 //0x1a
    WCHAR* PinTable;                                                        //0x20
    USHORT PinCount;                                                        //0x28
    UCHAR ResourceSourceIndex;                                              //0x2a
    NOK_PUNICODE_STRING ResourceSourceName;                             //0x30
    UCHAR* VendorData;                                                      //0x38
    USHORT VendorDataLength;                                                //0x40
}NOK_PEP_ACPI_GPIO_RESOURCE, * NOK_PPEP_ACPI_GPIO_RESOURCE;
//0x48 bytes (sizeof)
typedef union _NOK_PEP_ACPI_RESOURCE
{
    NOK_PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    NOK_PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;                           //0x0
    NOK_PEP_ACPI_INTERRUPT_RESOURCE Interrupt;                          //0x0
    NOK_PEP_ACPI_GPIO_RESOURCE Gpio;                                    //0x0
    NOK_PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;                               //0x0
    NOK_PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;                               //0x0
    NOK_PEP_ACPI_SPB_UART_RESOURCE SpbUart;                             //0x0
    NOK_PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;                      //0x0
}NOK_PEP_ACPI_RESOURCE, * NOK_PPEP_ACPI_RESOURCE;
//0x48 bytes (sizeof)
typedef struct _NOK_IO_STACK_LOCATION
{
    UCHAR MajorFunction;                                                    //0x0
    UCHAR MinorFunction;                                                    //0x1
    UCHAR Flags;                                                            //0x2
    UCHAR Control;                                                          //0x3
    union
    {
        struct
        {
            NOK_PIO_SECURITY_CONTEXT SecurityContext;                   //0x8
            ULONG Options;                                                  //0x10
            USHORT FileAttributes;                                          //0x18
            USHORT ShareAccess;                                             //0x1a
            ULONG EaLength;                                                 //0x20
        } Create;                                                           //0x8
        struct
        {
            NOK_PIO_SECURITY_CONTEXT SecurityContext;                   //0x8
            ULONG Options;                                                  //0x10
            USHORT Reserved;                                                //0x18
            USHORT ShareAccess;                                             //0x1a
            NOK_PNAMED_PIPE_CREATE_PARAMETERS Parameters;               //0x20
        } CreatePipe;                                                       //0x8
        struct
        {
            NOK_PIO_SECURITY_CONTEXT SecurityContext;                   //0x8
            ULONG Options;                                                  //0x10
            USHORT Reserved;                                                //0x18
            USHORT ShareAccess;                                             //0x1a
            NOK_PMAILSLOT_CREATE_PARAMETERS Parameters;                 //0x20
        } CreateMailslot;                                                   //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Key;                                                      //0x10
            ULONG Flags;                                                    //0x14
            NOK_LARGE_INTEGER ByteOffset;                                //0x18
        } Read;                                                             //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Key;                                                      //0x10
            ULONG Flags;                                                    //0x14
            NOK_LARGE_INTEGER ByteOffset;                                //0x18
        } Write;                                                            //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            NOK_PUNICODE_STRING FileName;                               //0x10
            NOK_FILE_INFORMATION_CLASS FileInformationClass;              //0x18
            ULONG FileIndex;                                                //0x20
        } QueryDirectory;                                                   //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG CompletionFilter;                                         //0x10
        } NotifyDirectory;                                                  //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG CompletionFilter;                                         //0x10
            NOK_DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass; //0x18
        } NotifyDirectoryEx;                                                //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            NOK_FILE_INFORMATION_CLASS FileInformationClass;              //0x10
        } QueryFile;                                                        //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            NOK_FILE_INFORMATION_CLASS FileInformationClass;              //0x10
            NOK_PFILE_OBJECT FileObject;                                //0x18
            union
            {
                struct
                {
                    UCHAR ReplaceIfExists;                                  //0x20
                    UCHAR AdvanceOnly;                                      //0x21
                };
                ULONG ClusterCount;                                         //0x20
                VOID* DeleteHandle;                                         //0x20
            };
        } SetFile;                                                          //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            VOID* EaList;                                                   //0x10
            ULONG EaListLength;                                             //0x18
            ULONG EaIndex;                                                  //0x20
        } QueryEa;                                                          //0x8
        struct
        {
            ULONG Length;                                                   //0x8
        } SetEa;                                                            //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            NOK_FSINFOCLASS FsInformationClass;                           //0x10
        } QueryVolume;                                                      //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            NOK_FSINFOCLASS FsInformationClass;                           //0x10
        } SetVolume;                                                        //0x8
        struct
        {
            ULONG OutputBufferLength;                                       //0x8
            ULONG InputBufferLength;                                        //0x10
            ULONG FsControlCode;                                            //0x18
            VOID* Type3InputBuffer;                                         //0x20
        } FileSystemControl;                                                //0x8
        struct
        {
            NOK_PLARGE_INTEGER Length;                                   //0x8
            ULONG Key;                                                      //0x10
            NOK_LARGE_INTEGER ByteOffset;                                //0x18
        } LockControl;                                                      //0x8
        struct
        {
            ULONG OutputBufferLength;                                       //0x8
            ULONG InputBufferLength;                                        //0x10
            ULONG IoControlCode;                                            //0x18
            VOID* Type3InputBuffer;                                         //0x20
        } DeviceIoControl;                                                  //0x8
        struct
        {
            ULONG SecurityInformation;                                      //0x8
            ULONG Length;                                                   //0x10
        } QuerySecurity;                                                    //0x8
        struct
        {
            ULONG SecurityInformation;                                      //0x8
            VOID* SecurityDescriptor;                                       //0x10
        } SetSecurity;                                                      //0x8
        struct
        {
            NOK_PVPB Vpb;                                               //0x8
            NOK_PDEVICE_OBJECT DeviceObject;                            //0x10
        } MountVolume;                                                      //0x8
        struct
        {
            NOK_PVPB Vpb;                                               //0x8
            NOK_PDEVICE_OBJECT DeviceObject;                            //0x10
        } VerifyVolume;                                                     //0x8
        struct
        {
            NOK_PSCSI_REQUEST_BLOCK Srb;                                //0x8
        } Scsi;                                                             //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            VOID* StartSid;                                                 //0x10
            NOK_PFILE_GET_QUOTA_INFORMATION SidList;                    //0x18
            ULONG SidListLength;                                            //0x20
        } QueryQuota;                                                       //0x8
        struct
        {
            ULONG Length;                                                   //0x8
        } SetQuota;                                                         //0x8
        struct
        {
            NOK_DEVICE_RELATION_TYPE Type;                                //0x8
        } QueryDeviceRelations;                                             //0x8
        struct
        {
            NOK_PGUID InterfaceType;                                    //0x8
            USHORT Size;                                                    //0x10
            USHORT Version;                                                 //0x12
            NOK_PINTERFACE Interface;                                   //0x18
            VOID* InterfaceSpecificData;                                    //0x20
        } QueryInterface;                                                   //0x8
        struct
        {
            NOK_PDEVICE_CAPABILITIES Capabilities;                      //0x8
        } DeviceCapabilities;                                               //0x8
        struct
        {
            NOK_PIO_RESOURCE_REQUIREMENTS_LIST IoResourceRequirementList; //0x8
        } FilterResourceRequirements;                                       //0x8
        struct
        {
            ULONG WhichSpace;                                               //0x8
            VOID* Buffer;                                                   //0x10
            ULONG Offset;                                                   //0x18
            ULONG Length;                                                   //0x20
        } ReadWriteConfig;                                                  //0x8
        struct
        {
            UCHAR Lock;                                                     //0x8
        } SetLock;                                                          //0x8
        struct
        {
            NOK_BUS_QUERY_ID_TYPE IdType;                                  //0x8
        } QueryId;                                                          //0x8
        struct
        {
            NOK_DEVICE_TEXT_TYPE DeviceTextType;                           //0x8
            ULONG LocaleId;                                                 //0x10
        } QueryDeviceText;                                                  //0x8
        struct
        {
            UCHAR InPath;                                                   //0x8
            UCHAR Reserved[3];                                              //0x9
            NOK_DEVICE_USAGE_NOTIFICATION_TYPE Type;                      //0x10
        } UsageNotification;                                                //0x8
        struct
        {
            NOK_SYSTEM_POWER_STATE PowerState;                            //0x8
        } WaitWake;                                                         //0x8
        struct
        {
            NOK_PPOWER_SEQUENCE PowerSequence;                          //0x8
        } PowerSequence;                                                    //0x8
        struct
        {
            union
            {
                ULONG SystemContext;                                        //0x8
                NOK_SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext; //0x8
            };
            NOK_POWER_STATE_TYPE Type;                                    //0x10
            NOK_POWER_STATE State;                                       //0x18
            NOK_POWER_ACTION ShutdownType;                                 //0x20
        } Power;                                                            //0x8
        struct
        {
            NOK_PCM_RESOURCE_LIST AllocatedResources;                   //0x8
            NOK_PCM_RESOURCE_LIST AllocatedResourcesTranslated;         //0x10
        } StartDevice;                                                      //0x8
        struct
        {
            ULONGLONG ProviderId;                                           //0x8
            VOID* DataPath;                                                 //0x10
            ULONG BufferSize;                                               //0x18
            VOID* Buffer;                                                   //0x20
        } WMI;                                                              //0x8
        struct
        {
            VOID* Argument1;                                                //0x8
            VOID* Argument2;                                                //0x10
            VOID* Argument3;                                                //0x18
            VOID* Argument4;                                                //0x20
        } Others;                                                           //0x8
    } Parameters;                                                           //0x8
    NOK_PDEVICE_OBJECT DeviceObject;                                    //0x28
    NOK_PFILE_OBJECT FileObject;                                        //0x30
    LONG (*CompletionRoutine)(NOK_PDEVICE_OBJECT arg1, NOK_PIRP arg2, VOID* arg3); //0x38
    VOID* Context;                                                          //0x40
}NOK_IO_STACK_LOCATION, * NOK_PIO_STACK_LOCATION;
//0x15b0 bytes (sizeof)
typedef struct _NOK_POP_PPM_PROFILE
{
    WCHAR* Name;                                                            //0x0
    UCHAR Id;                                                               //0x8
    NOK_GUID Guid;                                                      //0xc
    ULONG Flags;                                                            //0x1c
    UCHAR Priority;                                                         //0x20
    NOK_PPM_ENGINE_SETTINGS Settings[2];                                //0x28
    ULONGLONG StartTime;                                                    //0x1588
    ULONGLONG Count;                                                        //0x1590
    ULONGLONG MaxDuration;                                                  //0x1598
    ULONGLONG MinDuration;                                                  //0x15a0
    ULONGLONG TotalDuration;                                                //0x15a8
}NOK_POP_PPM_PROFILE, * NOK_PPOP_PPM_PROFILE;
//0x898 bytes (sizeof)
typedef struct _NOK_ETHREAD
{
    NOK_KTHREAD Tcb;                                                    //0x0
    NOK_LARGE_INTEGER CreateTime;                                        //0x430
    union
    {
        NOK_LARGE_INTEGER ExitTime;                                      //0x438
        NOK_LIST_ENTRY KeyedWaitChain;                                  //0x438
    };
    union
    {
        NOK_LIST_ENTRY PostBlockList;                                   //0x448
        struct
        {
            VOID* ForwardLinkShadow;                                        //0x448
            VOID* StartAddress;                                             //0x450
        };
    };
    union
    {
        NOK_PTERMINATION_PORT TerminationPort;                          //0x458
        NOK_PETHREAD ReaperLink;                                        //0x458
        VOID* KeyedWaitValue;                                               //0x458
    };
    ULONGLONG ActiveTimerListLock;                                          //0x460
    NOK_LIST_ENTRY ActiveTimerListHead;                                 //0x468
    NOK_CLIENT_ID Cid;                                                  //0x478
    union
    {
        NOK_KSEMAPHORE KeyedWaitSemaphore;                              //0x488
        NOK_KSEMAPHORE AlpcWaitSemaphore;                               //0x488
    };
    NOK_PS_CLIENT_SECURITY_CONTEXT ClientSecurity;                       //0x4a8
    NOK_LIST_ENTRY IrpList;                                             //0x4b0
    ULONGLONG TopLevelIrp;                                                  //0x4c0
    NOK_PDEVICE_OBJECT DeviceToVerify;                                  //0x4c8
    VOID* Win32StartAddress;                                                //0x4d0
    VOID* ChargeOnlySession;                                                //0x4d8
    VOID* LegacyPowerObject;                                                //0x4e0
    NOK_LIST_ENTRY ThreadListEntry;                                     //0x4e8
    NOK_EX_RUNDOWN_REF RundownProtect;                                  //0x4f8
    NOK_EX_PUSH_LOCK ThreadLock;                                        //0x500
    ULONG ReadClusterSize;                                                  //0x508
    volatile LONG MmLockOrdering;                                           //0x50c
    union
    {
        ULONG CrossThreadFlags;                                             //0x510
        struct
        {
            ULONG Terminated:1;                                             //0x510
            ULONG ThreadInserted:1;                                         //0x510
            ULONG HideFromDebugger:1;                                       //0x510
            ULONG ActiveImpersonationInfo:1;                                //0x510
            ULONG HardErrorsAreDisabled:1;                                  //0x510
            ULONG BreakOnTermination:1;                                     //0x510
            ULONG SkipCreationMsg:1;                                        //0x510
            ULONG SkipTerminationMsg:1;                                     //0x510
            ULONG CopyTokenOnOpen:1;                                        //0x510
            ULONG ThreadIoPriority:3;                                       //0x510
            ULONG ThreadPagePriority:3;                                     //0x510
            ULONG RundownFail:1;                                            //0x510
            ULONG UmsForceQueueTermination:1;                               //0x510
            ULONG IndirectCpuSets:1;                                        //0x510
            ULONG DisableDynamicCodeOptOut:1;                               //0x510
            ULONG ExplicitCaseSensitivity:1;                                //0x510
            ULONG PicoNotifyExit:1;                                         //0x510
            ULONG DbgWerUserReportActive:1;                                 //0x510
            ULONG ForcedSelfTrimActive:1;                                   //0x510
            ULONG SamplingCoverage:1;                                       //0x510
            ULONG ReservedCrossThreadFlags:8;                               //0x510
        };
    };
    union
    {
        ULONG SameThreadPassiveFlags;                                       //0x514
        struct
        {
            ULONG ActiveExWorker:1;                                         //0x514
            ULONG MemoryMaker:1;                                            //0x514
            ULONG StoreLockThread:2;                                        //0x514
            ULONG ClonedThread:1;                                           //0x514
            ULONG KeyedEventInUse:1;                                        //0x514
            ULONG SelfTerminate:1;                                          //0x514
            ULONG RespectIoPriority:1;                                      //0x514
            ULONG ActivePageLists:1;                                        //0x514
            ULONG SecureContext:1;                                          //0x514
            ULONG ZeroPageThread:1;                                         //0x514
            ULONG WorkloadClass:1;                                          //0x514
            ULONG ReservedSameThreadPassiveFlags:20;                        //0x514
        };
    };
    union
    {
        ULONG SameThreadApcFlags;                                           //0x518
        struct
        {
            UCHAR OwnsProcessAddressSpaceExclusive:1;                       //0x518
            UCHAR OwnsProcessAddressSpaceShared:1;                          //0x518
            UCHAR HardFaultBehavior:1;                                      //0x518
            volatile UCHAR StartAddressInvalid:1;                           //0x518
            UCHAR EtwCalloutActive:1;                                       //0x518
            UCHAR SuppressSymbolLoad:1;                                     //0x518
            UCHAR Prefetching:1;                                            //0x518
            UCHAR OwnsVadExclusive:1;                                       //0x518
            UCHAR SystemPagePriorityActive:1;                               //0x519
            UCHAR SystemPagePriority:3;                                     //0x519
            UCHAR AllowUserWritesToExecutableMemory:1;                      //0x519
            UCHAR AllowKernelWritesToExecutableMemory:1;                    //0x519
            UCHAR OwnsVadShared:1;                                          //0x519
        };
    };
    UCHAR CacheManagerActive;                                               //0x51c
    UCHAR DisablePageFaultClustering;                                       //0x51d
    UCHAR ActiveFaultCount;                                                 //0x51e
    UCHAR LockOrderState;                                                   //0x51f
    ULONG PerformanceCountLowReserved;                                      //0x520
    LONG PerformanceCountHighReserved;                                      //0x524
    ULONGLONG AlpcMessageId;                                                //0x528
    union
    {
        VOID* AlpcMessage;                                                  //0x530
        ULONG AlpcReceiveAttributeSet;                                      //0x530
    };
    NOK_LIST_ENTRY AlpcWaitListEntry;                                   //0x538
    LONG ExitStatus;                                                        //0x548
    ULONG CacheManagerCount;                                                //0x54c
    ULONG IoBoostCount;                                                     //0x550
    ULONG IoQoSBoostCount;                                                  //0x554
    ULONG IoQoSThrottleCount;                                               //0x558
    ULONG KernelStackReference;                                             //0x55c
    NOK_LIST_ENTRY BoostList;                                           //0x560
    NOK_LIST_ENTRY DeboostList;                                         //0x570
    ULONGLONG BoostListLock;                                                //0x580
    ULONGLONG IrpListLock;                                                  //0x588
    VOID* ReservedForSynchTracking;                                         //0x590
    NOK_SINGLE_LIST_ENTRY CmCallbackListHead;                           //0x598
    NOK_PGUID ActivityId;                                               //0x5a0
    NOK_SINGLE_LIST_ENTRY SeLearningModeListHead;                       //0x5a8
    VOID* VerifierContext;                                                  //0x5b0
    VOID* AdjustedClientToken;                                              //0x5b8
    VOID* WorkOnBehalfThread;                                               //0x5c0
    NOK_PS_PROPERTY_SET PropertySet;                                    //0x5c8
    VOID* PicoContext;                                                      //0x5e0
    ULONGLONG UserFsBase;                                                   //0x5e8
    ULONGLONG UserGsBase;                                                   //0x5f0
    NOK_PTHREAD_ENERGY_VALUES EnergyValues;                             //0x5f8
    union
    {
        ULONGLONG SelectedCpuSets;                                          //0x600
        ULONGLONG* SelectedCpuSetsIndirect;                                 //0x600
    };
    NOK_PEJOB Silo;                                                     //0x608
    NOK_PUNICODE_STRING ThreadName;                                     //0x610
    NOK_PCONTEXT SetContextState;                                       //0x618
    ULONG LastExpectedRunTime;                                              //0x620
    ULONG HeapData;                                                         //0x624
    NOK_LIST_ENTRY OwnerEntryListHead;                                  //0x628
    ULONGLONG DisownedOwnerEntryListLock;                                   //0x638
    NOK_LIST_ENTRY DisownedOwnerEntryListHead;                          //0x640
    NOK_KLOCK_ENTRY LockEntries[6];                                     //0x650
    VOID* CmDbgInfo;                                                        //0x890
}NOK_ETHREAD, * NOK_PETHREAD;
//0x18 bytes (sizeof)
typedef struct _NOK_PS_TRUSTLET_CREATE_ATTRIBUTES
{
    ULONGLONG TrustletIdentity;                                             //0x0
    NOK_PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];                       //0x8
}NOK_PS_TRUSTLET_CREATE_ATTRIBUTES, * NOK_PPS_TRUSTLET_CREATE_ATTRIBUTES;
//0x20 bytes (sizeof)
typedef struct _NOK_HEAP_VS_CHUNK_FREE_HEADER
{
    union
    {
        NOK_HEAP_VS_CHUNK_HEADER Header;                                //0x0
        struct
        {
            ULONGLONG OverlapsHeader;                                       //0x0
            NOK_RTL_BALANCED_NODE Node;                                 //0x8
        };
    };
}NOK_HEAP_VS_CHUNK_FREE_HEADER, * NOK_PHEAP_VS_CHUNK_FREE_HEADER;
//0x1b0 bytes (sizeof)
typedef struct _NOK_PROCESS_EXTENDED_ENERGY_VALUES
{
    NOK_PROCESS_ENERGY_VALUES Base;                                     //0x0
    NOK_PROCESS_ENERGY_VALUES_EXTENSION Extension;                      //0x110
}NOK_PROCESS_EXTENDED_ENERGY_VALUES, * NOK_PPROCESS_EXTENDED_ENERGY_VALUES;
//0x7c8 bytes (sizeof)
typedef struct _NOK_PEB64
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages:1;                                    //0x3
            UCHAR IsProtectedProcess:1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated:1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
            UCHAR IsPackagedProcess:1;                                      //0x3
            UCHAR IsAppContainer:1;                                         //0x3
            UCHAR IsProtectedProcessLight:1;                                //0x3
            UCHAR IsLongPathAwareProcess:1;                                 //0x3
        };
    };
    UCHAR Padding0[4];                                                      //0x4
    ULONGLONG Mutant;                                                       //0x8
    ULONGLONG ImageBaseAddress;                                             //0x10
    ULONGLONG Ldr;                                                          //0x18
    ULONGLONG ProcessParameters;                                            //0x20
    ULONGLONG SubSystemData;                                                //0x28
    ULONGLONG ProcessHeap;                                                  //0x30
    ULONGLONG FastPebLock;                                                  //0x38
    ULONGLONG AtlThunkSListPtr;                                             //0x40
    ULONGLONG IFEOKey;                                                      //0x48
    union
    {
        ULONG CrossProcessFlags;                                            //0x50
        struct
        {
            ULONG ProcessInJob:1;                                           //0x50
            ULONG ProcessInitializing:1;                                    //0x50
            ULONG ProcessUsingVEH:1;                                        //0x50
            ULONG ProcessUsingVCH:1;                                        //0x50
            ULONG ProcessUsingFTH:1;                                        //0x50
            ULONG ProcessPreviouslyThrottled:1;                             //0x50
            ULONG ProcessCurrentlyThrottled:1;                              //0x50
            ULONG ProcessImagesHotPatched:1;                                //0x50
            ULONG ReservedBits0:24;                                         //0x50
        };
    };
    UCHAR Padding1[4];                                                      //0x54
    union
    {
        ULONGLONG KernelCallbackTable;                                      //0x58
        ULONGLONG UserSharedInfoPtr;                                        //0x58
    };
    ULONG SystemReserved;                                                   //0x60
    ULONG AtlThunkSListPtr32;                                               //0x64
    ULONGLONG ApiSetMap;                                                    //0x68
    ULONG TlsExpansionCounter;                                              //0x70
    UCHAR Padding2[4];                                                      //0x74
    ULONGLONG TlsBitmap;                                                    //0x78
    ULONG TlsBitmapBits[2];                                                 //0x80
    ULONGLONG ReadOnlySharedMemoryBase;                                     //0x88
    ULONGLONG SharedData;                                                   //0x90
    ULONGLONG ReadOnlyStaticServerData;                                     //0x98
    ULONGLONG AnsiCodePageData;                                             //0xa0
    ULONGLONG OemCodePageData;                                              //0xa8
    ULONGLONG UnicodeCaseTableData;                                         //0xb0
    ULONG NumberOfProcessors;                                               //0xb8
    ULONG NtGlobalFlag;                                                     //0xbc
    NOK_LARGE_INTEGER CriticalSectionTimeout;                            //0xc0
    ULONGLONG HeapSegmentReserve;                                           //0xc8
    ULONGLONG HeapSegmentCommit;                                            //0xd0
    ULONGLONG HeapDeCommitTotalFreeThreshold;                               //0xd8
    ULONGLONG HeapDeCommitFreeBlockThreshold;                               //0xe0
    ULONG NumberOfHeaps;                                                    //0xe8
    ULONG MaximumNumberOfHeaps;                                             //0xec
    ULONGLONG ProcessHeaps;                                                 //0xf0
    ULONGLONG GdiSharedHandleTable;                                         //0xf8
    ULONGLONG ProcessStarterHelper;                                         //0x100
    ULONG GdiDCAttributeList;                                               //0x108
    UCHAR Padding3[4];                                                      //0x10c
    ULONGLONG LoaderLock;                                                   //0x110
    ULONG OSMajorVersion;                                                   //0x118
    ULONG OSMinorVersion;                                                   //0x11c
    USHORT OSBuildNumber;                                                   //0x120
    USHORT OSCSDVersion;                                                    //0x122
    ULONG OSPlatformId;                                                     //0x124
    ULONG ImageSubsystem;                                                   //0x128
    ULONG ImageSubsystemMajorVersion;                                       //0x12c
    ULONG ImageSubsystemMinorVersion;                                       //0x130
    UCHAR Padding4[4];                                                      //0x134
    ULONGLONG ActiveProcessAffinityMask;                                    //0x138
    ULONG GdiHandleBuffer[60];                                              //0x140
    ULONGLONG PostProcessInitRoutine;                                       //0x230
    ULONGLONG TlsExpansionBitmap;                                           //0x238
    ULONG TlsExpansionBitmapBits[32];                                       //0x240
    ULONG SessionId;                                                        //0x2c0
    UCHAR Padding5[4];                                                      //0x2c4
    NOK_ULARGE_INTEGER AppCompatFlags;                                   //0x2c8
    NOK_ULARGE_INTEGER AppCompatFlagsUser;                               //0x2d0
    ULONGLONG pShimData;                                                    //0x2d8
    ULONGLONG AppCompatInfo;                                                //0x2e0
    NOK_STRING64 CSDVersion;                                            //0x2e8
    ULONGLONG ActivationContextData;                                        //0x2f8
    ULONGLONG ProcessAssemblyStorageMap;                                    //0x300
    ULONGLONG SystemDefaultActivationContextData;                           //0x308
    ULONGLONG SystemAssemblyStorageMap;                                     //0x310
    ULONGLONG MinimumStackCommit;                                           //0x318
    ULONGLONG SparePointers[4];                                             //0x320
    ULONG SpareUlongs[5];                                                   //0x340
    ULONGLONG WerRegistrationData;                                          //0x358
    ULONGLONG WerShipAssertPtr;                                             //0x360
    ULONGLONG pUnused;                                                      //0x368
    ULONGLONG pImageHeaderHash;                                             //0x370
    union
    {
        ULONG TracingFlags;                                                 //0x378
        struct
        {
            ULONG HeapTracingEnabled:1;                                     //0x378
            ULONG CritSecTracingEnabled:1;                                  //0x378
            ULONG LibLoaderTracingEnabled:1;                                //0x378
            ULONG SpareTracingBits:29;                                      //0x378
        };
    };
    UCHAR Padding6[4];                                                      //0x37c
    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x380
    ULONGLONG TppWorkerpListLock;                                           //0x388
    NOK_LIST_ENTRY64 TppWorkerpList;                                     //0x390
    ULONGLONG WaitOnAddressHashTable[128];                                  //0x3a0
    ULONGLONG TelemetryCoverageHeader;                                      //0x7a0
    ULONG CloudFileFlags;                                                   //0x7a8
    ULONG CloudFileDiagFlags;                                               //0x7ac
    CHAR PlaceholderCompatibilityMode;                                      //0x7b0
    CHAR PlaceholderCompatibilityModeReserved[7];                           //0x7b1
    ULONGLONG LeapSecondData;                                               //0x7b8
    union
    {
        ULONG LeapSecondFlags;                                              //0x7c0
        struct
        {
            ULONG SixtySecondEnabled:1;                                     //0x7c0
            ULONG Reserved:31;                                              //0x7c0
        };
    };
    ULONG NtGlobalFlag2;                                                    //0x7c4
}NOK_PEB64, * NOK_PPEB64;
//0xc8 bytes (sizeof)
typedef struct _NOK_WHEA_ERROR_RECORD
{
    NOK_WHEA_ERROR_RECORD_HEADER Header;                                //0x0
    NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];      //0x80
}NOK_WHEA_ERROR_RECORD, * NOK_PWHEA_ERROR_RECORD;
//0x50 bytes (sizeof)
typedef struct _NOK_WHEA_ERROR_PACKET_V2
{
    ULONG Signature;                                                        //0x0
    ULONG Version;                                                          //0x4
    ULONG Length;                                                           //0x8
    NOK_WHEA_ERROR_PACKET_FLAGS Flags;                                   //0xc
    NOK_WHEA_ERROR_TYPE ErrorType;                                        //0x10
    NOK_WHEA_ERROR_SEVERITY ErrorSeverity;                                //0x14
    ULONG ErrorSourceId;                                                    //0x18
    NOK_WHEA_ERROR_SOURCE_TYPE ErrorSourceType;                           //0x1c
    NOK_GUID NotifyType;                                                //0x20
    ULONGLONG Context;                                                      //0x30
    NOK_WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;                         //0x38
    ULONG Reserved1;                                                        //0x3c
    ULONG DataOffset;                                                       //0x40
    ULONG DataLength;                                                       //0x44
    ULONG PshedDataOffset;                                                  //0x48
    ULONG PshedDataLength;                                                  //0x4c
}NOK_WHEA_ERROR_PACKET_V2, * NOK_PWHEA_ERROR_PACKET_V2;
//0x4 bytes (sizeof)
typedef union _NOK_WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
    ULONG Preallocated:1;                                                   //0x0
    ULONG FromPersistentStore:1;                                            //0x0
    ULONG PlatformPfaControl:1;                                             //0x0
    ULONG PlatformDirectedOffline:1;                                        //0x0
    ULONG Reserved:28;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}NOK_WHEAP_ERROR_RECORD_WRAPPER_FLAGS, * NOK_PWHEAP_ERROR_RECORD_WRAPPER_FLAGS;
//0xf0 bytes (sizeof)
typedef struct _NOK_WHEAP_ERROR_RECORD_WRAPPER
{
    NOK_LIST_ENTRY WorkEntry;                                           //0x0
    ULONG Length;                                                           //0x10
    ULONG ProcessorNumber;                                                  //0x14
    NOK_WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;                          //0x18
    volatile LONG InUse;                                                    //0x1c
    NOK_PWHEAP_ERROR_SOURCE ErrorSource;                                //0x20
    NOK_WHEA_ERROR_RECORD ErrorRecord;                                  //0x28
}NOK_WHEAP_ERROR_RECORD_WRAPPER, * NOK_PWHEAP_ERROR_RECORD_WRAPPER;
//0x8 bytes (sizeof)
typedef union _NOK_WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
    ULONGLONG ErrorStatus:1;                                                //0x0
    ULONGLONG PhysicalAddress:1;                                            //0x0
    ULONGLONG PhysicalAddressMask:1;                                        //0x0
    ULONGLONG Node:1;                                                       //0x0
    ULONGLONG Card:1;                                                       //0x0
    ULONGLONG Module:1;                                                     //0x0
    ULONGLONG Bank:1;                                                       //0x0
    ULONGLONG Device:1;                                                     //0x0
    ULONGLONG Row:1;                                                        //0x0
    ULONGLONG Column:1;                                                     //0x0
    ULONGLONG BitPosition:1;                                                //0x0
    ULONGLONG RequesterId:1;                                                //0x0
    ULONGLONG ResponderId:1;                                                //0x0
    ULONGLONG TargetId:1;                                                   //0x0
    ULONGLONG ErrorType:1;                                                  //0x0
    ULONGLONG RankNumber:1;                                                 //0x0
    ULONGLONG CardHandle:1;                                                 //0x0
    ULONGLONG ModuleHandle:1;                                               //0x0
    ULONGLONG ExtendedRow:1;                                                //0x0
    ULONGLONG BankGroup:1;                                                  //0x0
    ULONGLONG BankAddress:1;                                                //0x0
    ULONGLONG ChipIdentification:1;                                         //0x0
    ULONGLONG Reserved:42;                                                  //0x0
    ULONGLONG ValidBits;                                                    //0x0
}NOK_WHEA_MEMORY_ERROR_SECTION_VALIDBITS, * NOK_PWHEA_MEMORY_ERROR_SECTION_VALIDBITS;
//0x50 bytes (sizeof)
typedef struct _NOK_WHEA_MEMORY_ERROR_SECTION
{
    NOK_WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;                   //0x0
    NOK_WHEA_ERROR_STATUS ErrorStatus;                                   //0x8
    ULONGLONG PhysicalAddress;                                              //0x10
    ULONGLONG PhysicalAddressMask;                                          //0x18
    USHORT Node;                                                            //0x20
    USHORT Card;                                                            //0x22
    USHORT Module;                                                          //0x24
    USHORT Bank;                                                            //0x26
    USHORT Device;                                                          //0x28
    USHORT Row;                                                             //0x2a
    USHORT Column;                                                          //0x2c
    USHORT BitPosition;                                                     //0x2e
    ULONGLONG RequesterId;                                                  //0x30
    ULONGLONG ResponderId;                                                  //0x38
    ULONGLONG TargetId;                                                     //0x40
    UCHAR ErrorType;                                                        //0x48
    UCHAR Extended;                                                         //0x49
    USHORT RankNumber;                                                      //0x4a
    USHORT CardHandle;                                                      //0x4c
    USHORT ModuleHandle;                                                    //0x4e
}NOK_WHEA_MEMORY_ERROR_SECTION, * NOK_PWHEA_MEMORY_ERROR_SECTION;
//0x20 bytes (sizeof)
typedef struct _NOK_WHEA_EVENT_LOG_ENTRY
{
    NOK_WHEA_EVENT_LOG_ENTRY_HEADER Header;                             //0x0
}NOK_WHEA_EVENT_LOG_ENTRY, * NOK_PWHEA_EVENT_LOG_ENTRY;
//0x430 bytes (sizeof)
typedef struct _NOK_WHEAP_ERROR_SOURCE
{
    NOK_LIST_ENTRY ListEntry;                                           //0x0
    ULONG FailedAllocations;                                                //0x10
    ULONG PlatformErrorSourceId;                                            //0x14
    LONG ErrorCount;                                                        //0x18
    ULONG RecordCount;                                                      //0x1c
    ULONG RecordLength;                                                     //0x20
    ULONG PoolTag;                                                          //0x24
    NOK_WHEA_ERROR_SOURCE_TYPE Type;                                      //0x28
    NOK_PWHEAP_ERROR_RECORD_WRAPPER Records;                            //0x30
    VOID* Context;                                                          //0x38
    ULONG SectionCount;                                                     //0x40
    ULONG SectionLength;                                                    //0x44
    NOK_LARGE_INTEGER TickCountAtLastError;                              //0x48
    ULONG AccumulatedErrors;                                                //0x50
    ULONG TotalErrors;                                                      //0x54
    UCHAR Deferred;                                                         //0x58
    volatile LONG Busy;                                                     //0x5c
    NOK_WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;                        //0x60
}NOK_WHEAP_ERROR_SOURCE, * NOK_PWHEAP_ERROR_SOURCE;
//0x4b0 bytes (sizeof)
typedef struct _NOK_HAL_PRIVATE_DISPATCH
{
    ULONG Version;                                                          //0x0
    NOK_PBUS_HANDLER (*HalHandlerForBus)(NOK_INTERFACE_TYPE arg1, ULONG arg2); //0x8
    NOK_PBUS_HANDLER (*HalHandlerForConfigSpace)(NOK_BUS_DATA_TYPE arg1, ULONG arg2); //0x10
    VOID (*HalLocateHiberRanges)(VOID* arg1);                               //0x18
    LONG (*HalRegisterBusHandler)(NOK_INTERFACE_TYPE arg1, NOK_BUS_DATA_TYPE arg2, ULONG arg3, NOK_INTERFACE_TYPE arg4, ULONG arg5, ULONG arg6, LONG (*arg7)(NOK_PBUS_HANDLER arg1), NOK_PBUS_HANDLER* arg8); //0x20
    VOID (*HalSetWakeEnable)(UCHAR arg1);                                   //0x28
    LONG (*HalSetWakeAlarm)(ULONGLONG arg1, ULONGLONG arg2);                //0x30
    UCHAR (*HalPciTranslateBusAddress)(NOK_INTERFACE_TYPE arg1, ULONG arg2, NOK_LARGE_INTEGER arg3, ULONG* arg4, NOK_PLARGE_INTEGER arg5); //0x38
    LONG (*HalPciAssignSlotResources)(NOK_PUNICODE_STRING arg1, NOK_PUNICODE_STRING arg2, NOK_PDRIVER_OBJECT arg3, NOK_PDEVICE_OBJECT arg4, NOK_INTERFACE_TYPE arg5, ULONG arg6, ULONG arg7, NOK_PCM_RESOURCE_LIST* arg8); //0x40
    VOID (*HalHaltSystem)();                                                //0x48
    UCHAR (*HalFindBusAddressTranslation)(NOK_LARGE_INTEGER arg1, ULONG* arg2, NOK_PLARGE_INTEGER arg3, ULONGLONG* arg4, UCHAR arg5); //0x50
    UCHAR (*HalResetDisplay)();                                             //0x58
    LONG (*HalAllocateMapRegisters)(NOK_PADAPTER_OBJECT arg1, ULONG arg2, ULONG arg3, NOK_PMAP_REGISTER_ENTRY arg4); //0x60
    LONG (*KdSetupPciDeviceForDebugging)(VOID* arg1, NOK_PDEBUG_DEVICE_DESCRIPTOR arg2); //0x68
    LONG (*KdReleasePciDeviceForDebugging)(NOK_PDEBUG_DEVICE_DESCRIPTOR arg1); //0x70
    VOID* (*KdGetAcpiTablePhase0)(NOK_PLOADER_PARAMETER_BLOCK arg1, ULONG arg2); //0x78
    VOID (*KdCheckPowerButton)();                                           //0x80
    UCHAR (*HalVectorToIDTEntry)(ULONG arg1);                               //0x88
    VOID* (*KdMapPhysicalMemory64)(NOK_LARGE_INTEGER arg1, ULONG arg2, UCHAR arg3); //0x90
    VOID (*KdUnmapVirtualAddress)(VOID* arg1, ULONG arg2, UCHAR arg3);      //0x98
    ULONG (*KdGetPciDataByOffset)(ULONG arg1, ULONG arg2, VOID* arg3, ULONG arg4, ULONG arg5); //0xa0
    ULONG (*KdSetPciDataByOffset)(ULONG arg1, ULONG arg2, VOID* arg3, ULONG arg4, ULONG arg5); //0xa8
    ULONG (*HalGetInterruptVectorOverride)(NOK_INTERFACE_TYPE arg1, ULONG arg2, ULONG arg3, ULONG arg4, UCHAR* arg5, ULONGLONG* arg6); //0xb0
    LONG (*HalGetVectorInputOverride)(ULONG arg1, NOK_PGROUP_AFFINITY arg2, ULONG* arg3, NOK_PKINTERRUPT_POLARITY arg4, NOK_PINTERRUPT_REMAPPING_INFO arg5); //0xb8
    LONG (*HalLoadMicrocode)(VOID* arg1);                                   //0xc0
    LONG (*HalUnloadMicrocode)();                                           //0xc8
    LONG (*HalPostMicrocodeUpdate)();                                       //0xd0
    LONG (*HalAllocateMessageTargetOverride)(NOK_PDEVICE_OBJECT arg1, NOK_PGROUP_AFFINITY arg2, ULONG arg3, NOK_KINTERRUPT_MODE arg4, UCHAR arg5, ULONG* arg6, UCHAR* arg7, ULONG* arg8); //0xd8
    VOID (*HalFreeMessageTargetOverride)(NOK_PDEVICE_OBJECT arg1, ULONG arg2, NOK_PGROUP_AFFINITY arg3); //0xe0
    LONG (*HalDpReplaceBegin)(NOK_PHAL_DP_REPLACE_PARAMETERS arg1, VOID** arg2); //0xe8
    VOID (*HalDpReplaceTarget)(VOID* arg1);                                 //0xf0
    LONG (*HalDpReplaceControl)(ULONG arg1, VOID* arg2);                    //0xf8
    VOID (*HalDpReplaceEnd)(VOID* arg1);                                    //0x100
    VOID (*HalPrepareForBugcheck)(ULONG arg1);                              //0x108
    UCHAR (*HalQueryWakeTime)(ULONGLONG* arg1, ULONGLONG* arg2);            //0x110
    VOID (*HalReportIdleStateUsage)(UCHAR arg1, NOK_PKAFFINITY_EX arg2); //0x118
    VOID (*HalTscSynchronization)(UCHAR arg1, ULONG* arg2);                 //0x120
    LONG (*HalWheaInitProcessorGenericSection)(NOK_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR* arg1, NOK_PWHEA_PROCESSOR_GENERIC_ERROR_SECTION arg2); //0x128
    VOID (*HalStopLegacyUsbInterrupts)(NOK_SYSTEM_POWER_STATE arg1);      //0x130
    LONG (*HalReadWheaPhysicalMemory)(NOK_LARGE_INTEGER arg1, ULONG arg2, VOID* arg3); //0x138
    LONG (*HalWriteWheaPhysicalMemory)(NOK_LARGE_INTEGER arg1, ULONG arg2, VOID* arg3); //0x140
    LONG (*HalDpMaskLevelTriggeredInterrupts)();                            //0x148
    LONG (*HalDpUnmaskLevelTriggeredInterrupts)();                          //0x150
    LONG (*HalDpGetInterruptReplayState)(VOID* arg1, VOID** arg2);          //0x158
    LONG (*HalDpReplayInterrupts)(VOID* arg1);                              //0x160
    UCHAR (*HalQueryIoPortAccessSupported)();                               //0x168
    LONG (*KdSetupIntegratedDeviceForDebugging)(VOID* arg1, NOK_PDEBUG_DEVICE_DESCRIPTOR arg2); //0x170
    LONG (*KdReleaseIntegratedDeviceForDebugging)(NOK_PDEBUG_DEVICE_DESCRIPTOR arg1); //0x178
    VOID (*HalGetEnlightenmentInformation)(NOK_PHAL_INTEL_ENLIGHTENMENT_INFORMATION arg1); //0x180
    VOID* (*HalAllocateEarlyPages)(NOK_PLOADER_PARAMETER_BLOCK arg1, ULONG arg2, ULONGLONG* arg3, ULONG arg4); //0x188
    VOID* (*HalMapEarlyPages)(ULONGLONG arg1, ULONG arg2, ULONG arg3);      //0x190
    VOID* Dummy1;                                                           //0x198
    VOID* Dummy2;                                                           //0x1a0
    VOID (*HalNotifyProcessorFreeze)(UCHAR arg1, UCHAR arg2);               //0x1a8
    LONG (*HalPrepareProcessorForIdle)(ULONG arg1);                         //0x1b0
    VOID (*HalRegisterLogRoutine)(NOK_PHAL_LOG_REGISTER_CONTEXT arg1);  //0x1b8
    VOID (*HalResumeProcessorFromIdle)();                                   //0x1c0
    VOID* Dummy;                                                            //0x1c8
    ULONG (*HalVectorToIDTEntryEx)(ULONG arg1);                             //0x1d0
    LONG (*HalSecondaryInterruptQueryPrimaryInformation)(NOK_PINTERRUPT_VECTOR_DATA arg1, ULONG* arg2); //0x1d8
    LONG (*HalMaskInterrupt)(ULONG arg1, ULONG arg2);                       //0x1e0
    LONG (*HalUnmaskInterrupt)(ULONG arg1, ULONG arg2);                     //0x1e8
    UCHAR (*HalIsInterruptTypeSecondary)(ULONG arg1, ULONG arg2);           //0x1f0
    LONG (*HalAllocateGsivForSecondaryInterrupt)(CHAR* arg1, USHORT arg2, ULONG* arg3); //0x1f8
    LONG (*HalAddInterruptRemapping)(ULONG arg1, ULONG arg2, NOK_PPCI_BUSMASTER_DESCRIPTOR arg3, UCHAR arg4, NOK_PINTERRUPT_VECTOR_DATA arg5, ULONG arg6); //0x200
    VOID (*HalRemoveInterruptRemapping)(ULONG arg1, ULONG arg2, NOK_PPCI_BUSMASTER_DESCRIPTOR arg3, UCHAR arg4, NOK_PINTERRUPT_VECTOR_DATA arg5, ULONG arg6); //0x208
    VOID (*HalSaveAndDisableHvEnlightenment)();                             //0x210
    VOID (*HalRestoreHvEnlightenment)();                                    //0x218
    VOID (*HalFlushIoBuffersExternalCache)(NOK_PMDL arg1, UCHAR arg2);  //0x220
    VOID (*HalFlushExternalCache)(UCHAR arg1);                              //0x228
    LONG (*HalPciEarlyRestore)(NOK_SYSTEM_POWER_STATE arg1);              //0x230
    LONG (*HalGetProcessorId)(ULONG arg1, ULONG* arg2, ULONG* arg3);        //0x238
    LONG (*HalAllocatePmcCounterSet)(ULONG arg1, NOK_PKPROFILE_SOURCE arg2, ULONG arg3, NOK_PHAL_PMC_COUNTERS* arg4); //0x240
    VOID (*HalCollectPmcCounters)(NOK_PHAL_PMC_COUNTERS arg1, ULONGLONG* arg2); //0x248
    VOID (*HalFreePmcCounterSet)(NOK_PHAL_PMC_COUNTERS arg1);           //0x250
    LONG (*HalProcessorHalt)(ULONG arg1, VOID* arg2, LONG (*arg3)(VOID* arg1)); //0x258
    ULONGLONG (*HalTimerQueryCycleCounter)(ULONGLONG* arg1);                //0x260
    VOID* Dummy3;                                                           //0x268
    VOID (*HalPciMarkHiberPhase)();                                         //0x270
    LONG (*HalQueryProcessorRestartEntryPoint)(NOK_PLARGE_INTEGER arg1); //0x278
    LONG (*HalRequestInterrupt)(ULONG arg1);                                //0x280
    LONG (*HalEnumerateUnmaskedInterrupts)(UCHAR (*arg1)(VOID* arg1, NOK_PHAL_UNMASKED_INTERRUPT_INFORMATION arg2), VOID* arg2, NOK_PHAL_UNMASKED_INTERRUPT_INFORMATION arg3); //0x288
    VOID (*HalFlushAndInvalidatePageExternalCache)(NOK_LARGE_INTEGER arg1); //0x290
    LONG (*KdEnumerateDebuggingDevices)(VOID* arg1, NOK_PDEBUG_DEVICE_DESCRIPTOR arg2, NOK_KD_CALLBACK_ACTION (*arg3)(NOK_PDEBUG_DEVICE_DESCRIPTOR arg1)); //0x298
    VOID (*HalFlushIoRectangleExternalCache)(NOK_PMDL arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, UCHAR arg6); //0x2a0
    VOID (*HalPowerEarlyRestore)(ULONG arg1);                               //0x2a8
    LONG (*HalQueryCapsuleCapabilities)(VOID* arg1, ULONG arg2, ULONGLONG* arg3, ULONG* arg4); //0x2b0
    LONG (*HalUpdateCapsule)(VOID* arg1, ULONG arg2, NOK_LARGE_INTEGER arg3); //0x2b8
    UCHAR (*HalPciMultiStageResumeCapable)();                               //0x2c0
    VOID (*HalDmaFreeCrashDumpRegisters)(ULONG arg1);                       //0x2c8
    UCHAR (*HalAcpiAoacCapable)();                                          //0x2d0
    LONG (*HalInterruptSetDestination)(NOK_PINTERRUPT_VECTOR_DATA arg1, NOK_PGROUP_AFFINITY arg2, ULONG* arg3); //0x2d8
    VOID (*HalGetClockConfiguration)(NOK_PHAL_CLOCK_TIMER_CONFIGURATION arg1); //0x2e0
    VOID (*HalClockTimerActivate)(UCHAR arg1);                              //0x2e8
    VOID (*HalClockTimerInitialize)();                                      //0x2f0
    VOID (*HalClockTimerStop)();                                            //0x2f8
    LONG (*HalClockTimerArm)(NOK_HAL_CLOCK_TIMER_MODE arg1, ULONGLONG arg2, ULONGLONG* arg3); //0x300
    UCHAR (*HalTimerOnlyClockInterruptPending)();                           //0x308
    VOID* (*HalAcpiGetMultiNode)();                                         //0x310
    VOID (*HalPowerSetRebootHandler)(VOID (*arg1)(ULONG arg1, volatile LONG* arg2)); //0x318        //VOID (*)(ULONG arg1, volatile LONG* arg2)(*HalPowerSetRebootHandler)(VOID (*arg1)(ULONG arg1, volatile LONG* arg2));
    VOID (*HalIommuRegisterDispatchTable)(NOK_PHAL_IOMMU_DISPATCH arg1); //0x320
    VOID (*HalTimerWatchdogStart)();                                        //0x328
    VOID (*HalTimerWatchdogResetCountdown)();                               //0x330
    VOID (*HalTimerWatchdogStop)();                                         //0x338
    UCHAR (*HalTimerWatchdogGeneratedLastReset)();                          //0x340
    LONG (*HalTimerWatchdogTriggerSystemReset)(UCHAR arg1);                 //0x348
    LONG (*HalInterruptVectorDataToGsiv)(NOK_PINTERRUPT_VECTOR_DATA arg1, ULONG* arg2); //0x350
    LONG (*HalInterruptGetHighestPriorityInterrupt)(ULONG* arg1, UCHAR* arg2); //0x358
    LONG (*HalProcessorOn)(ULONG arg1);                                     //0x360
    LONG (*HalProcessorOff)();                                              //0x368
    LONG (*HalProcessorFreeze)();                                           //0x370
    LONG (*HalDmaLinkDeviceObjectByToken)(ULONGLONG arg1, NOK_PDEVICE_OBJECT arg2); //0x378
    LONG (*HalDmaCheckAdapterToken)(ULONGLONG arg1);                        //0x380
    VOID* Dummy4;                                                           //0x388
    LONG (*HalTimerConvertPerformanceCounterToAuxiliaryCounter)(ULONGLONG arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x390
    LONG (*HalTimerConvertAuxiliaryCounterToPerformanceCounter)(ULONGLONG arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x398
    LONG (*HalTimerQueryAuxiliaryCounterFrequency)(ULONGLONG* arg1);        //0x3a0
    LONG (*HalConnectThermalInterrupt)(UCHAR (*arg1)(NOK_PKINTERRUPT arg1, VOID* arg2)); //0x3a8
    UCHAR (*HalIsEFIRuntimeActive)();                                       //0x3b0
    UCHAR (*HalTimerQueryAndResetRtcErrors)(UCHAR arg1);                    //0x3b8
    VOID (*HalAcpiLateRestore)();                                           //0x3c0
    LONG (*KdWatchdogDelayExpiration)(ULONGLONG* arg1);                     //0x3c8
    LONG (*HalGetProcessorStats)(NOK_HAL_PROCESSOR_STAT_TYPE arg1, ULONG arg2, ULONG arg3, ULONGLONG* arg4); //0x3d0
    ULONGLONG (*HalTimerWatchdogQueryDueTime)(UCHAR arg1);                  //0x3d8
    LONG (*HalConnectSyntheticInterrupt)(UCHAR (*arg1)(NOK_PKINTERRUPT arg1, VOID* arg2)); //0x3e0
    VOID (*HalPreprocessNmi)(ULONG arg1);                                   //0x3e8
    LONG (*HalEnumerateEnvironmentVariablesWithFilter)(ULONG arg1, UCHAR (*arg2)(NOK_PGUID arg1, WCHAR* arg2), VOID* arg3, ULONG* arg4); //0x3f0
    LONG (*HalCaptureLastBranchRecordStack)(ULONG arg1, NOK_PHAL_LBR_ENTRY arg2, ULONG* arg3); //0x3f8
    UCHAR (*HalClearLastBranchRecordStack)();                               //0x400
    LONG (*HalConfigureLastBranchRecord)(ULONG arg1, ULONG arg2);           //0x408
    UCHAR (*HalGetLastBranchInformation)(ULONG* arg1, ULONG* arg2);         //0x410
    VOID (*HalResumeLastBranchRecord)(UCHAR arg1);                          //0x418
    LONG (*HalStartLastBranchRecord)(ULONG arg1, ULONG* arg2);              //0x420
    LONG (*HalStopLastBranchRecord)(ULONG arg1);                            //0x428
    LONG (*HalIommuBlockDevice)(VOID* arg1);                                //0x430
    LONG (*HalIommuUnblockDevice)(NOK_PEXT_IOMMU_DEVICE_ID arg1, VOID** arg2); //0x438
    LONG (*HalGetIommuInterface)(ULONG arg1, NOK_PDMA_IOMMU_INTERFACE arg2); //0x440
    LONG (*HalRequestGenericErrorRecovery)(VOID* arg1, ULONG* arg2);        //0x448
    LONG (*HalTimerQueryHostPerformanceCounter)(ULONGLONG* arg1);           //0x450
    LONG (*HalTopologyQueryProcessorRelationships)(ULONG arg1, ULONG arg2, UCHAR* arg3, UCHAR* arg4, UCHAR* arg5, ULONG* arg6, ULONG* arg7); //0x458
    VOID (*HalInitPlatformDebugTriggers)();                                 //0x460
    VOID (*HalRunPlatformDebugTriggers)(UCHAR arg1);                        //0x468
    VOID* (*HalTimerGetReferencePage)();                                    //0x470
    LONG (*HalGetHiddenProcessorPowerInterface)(NOK_PHIDDEN_PROCESSOR_POWER_INTERFACE arg1); //0x478
    ULONG (*HalGetHiddenProcessorPackageId)(ULONG arg1);                    //0x480
    ULONG (*HalGetHiddenPackageProcessorCount)(ULONG arg1);                 //0x488
    LONG (*HalGetHiddenProcessorApicIdByIndex)(ULONG arg1, ULONG* arg2);    //0x490
    LONG (*HalRegisterHiddenProcessorIdleState)(ULONG arg1, ULONGLONG arg2); //0x498
    VOID (*HalIommuReportIommuFault)(ULONGLONG arg1, NOK_PFAULT_INFORMATION arg2); //0x4a0
    UCHAR (*HalIommuDmaRemappingCapable)(NOK_PEXT_IOMMU_DEVICE_ID arg1, ULONG* arg2); //0x4a8
}NOK_HAL_PRIVATE_DISPATCH, * NOK_PHAL_PRIVATE_DISPATCH;
//0x38 bytes (sizeof)
typedef struct _NOK_WHEAP_ERROR_SOURCE_TABLE
{
    ULONG Signature;                                                        //0x0
    LONG Count;                                                             //0x4
    ULONG NextId;                                                           //0x8
    NOK_LIST_ENTRY Items;                                               //0x10
    NOK_KEVENT InsertLock;                                              //0x20
}NOK_WHEAP_ERROR_SOURCE_TABLE, * NOK_PWHEAP_ERROR_SOURCE_TABLE;
//0x18 bytes (sizeof)
typedef struct _NOK_WHEAP_INFO_BLOCK
{
    ULONG ErrorSourceCount;                                                 //0x0
    NOK_WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;                     //0x8
    NOK_PWHEAP_WORK_QUEUE WorkQueue;                                    //0x10
}NOK_WHEAP_INFO_BLOCK, * NOK_PWHEAP_INFO_BLOCK;
//0x10 bytes (sizeof)
typedef union _NOK__m128
{
    float m128_f32[4];                                                      //0x0
    ULONGLONG m128_u64[2];                                                  //0x0
    CHAR m128_i8[16];                                                       //0x0
    SHORT m128_i16[8];                                                      //0x0
    LONG m128_i32[4];                                                       //0x0
    LONGLONG m128_i64[2];                                                   //0x0
    UCHAR m128_u8[16];                                                      //0x0
    USHORT m128_u16[8];                                                     //0x0
    ULONG m128_u32[4];                                                      //0x0
}NOK__m128, * NOK_P_m128;
//0x8 bytes (sizeof)
typedef union _NOK__m64
{
    ULONGLONG m64_u64;                                                      //0x0
    float m64_f32[2];                                                       //0x0
    CHAR m64_i8[8];                                                         //0x0
    SHORT m64_i16[4];                                                       //0x0
    LONG m64_i32[2];                                                        //0x0
    LONGLONG m64_i64;                                                       //0x0
    UCHAR m64_u8[8];                                                        //0x0
    USHORT m64_u16[4];                                                      //0x0
    ULONG m64_u32[2];                                                       //0x0
}NOK__m64, * NOK_P_m64;
//0x50 bytes (sizeof)
typedef struct _NOK_CELL_DATA
{
    NOK_u u;                                                             //0x0
}NOK_CELL_DATA, * NOK_PCELL_DATA;
//0x8 bytes (sizeof)
typedef union _NOK_wil_details_FeatureStateCache
{
    ULONG exchange;                                                         //0x0
    ULONG stateCached:1;                                                    //0x0
    ULONG hasNotificationCached:1;                                          //0x0
    ULONG variantCached:1;                                                  //0x0
    ULONG effectiveState:1;                                                 //0x0
    ULONG desiredState:1;                                                   //0x0
    ULONG configuredState:2;                                                //0x0
    ULONG needsRefresh:1;                                                   //0x0
    ULONG hasNotification:1;                                                //0x0
    ULONG isVariant:1;                                                      //0x0
    ULONG variant:6;                                                        //0x0
    struct
    {
        ULONG unused:16;                                                    //0x0
        ULONG payloadId;                                                    //0x4
    };
    ULONGLONG exchange64;                                                   //0x0
}NOK_wil_details_FeatureStateCache, * NOK_Pwil_details_FeatureStateCache;
//0x4 bytes (sizeof)
typedef union _NOK_wil_details_ReportedState
{
    ULONG exchange;                                                         //0x0
    ULONG queuedForReporting:1;                                             //0x0
    ULONG reportedDeviceUsage:1;                                            //0x0
    ULONG reportedDevicePotential:1;                                        //0x0
    ULONG reportedDeviceOpportunity:1;                                      //0x0
    ULONG reportedDevicePotentialOpportunity:1;                             //0x0
    ULONG usageCount:9;                                                     //0x0
    ULONG usageCountRepresentsPotential:1;                                  //0x0
    ULONG opportunityCount:7;                                               //0x0
    ULONG opportunityCountRepresentsPotential:1;                            //0x0
    ULONG unused:9;                                                         //0x0
}NOK_wil_details_ReportedState, * NOK_Pwil_details_ReportedState;
//0x8 bytes (sizeof)
typedef struct _NOK_wil_details_FeatureReportingCache
{
    NOK_wil_details_ReportedState reported;                               //0x0
    NOK_wil_details_RecordedState recorded;                               //0x4
}NOK_wil_details_FeatureReportingCache, * NOK_Pwil_details_FeatureReportingCache;
#pragma pack()
#endif // !WINDOWS_10_21H2_X64_H